
Datalogger V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08006ac8  08006ac8  00007ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e64  08006e64  000081ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e64  08006e64  00007e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e6c  08006e6c  000081ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e6c  08006e6c  00007e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e70  08006e70  00007e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08006e74  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200001ec  08007060  000081ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08007060  0000867c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001063a  00000000  00000000  00008215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba3  00000000  00000000  0001884f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001b3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d21  00000000  00000000  0001c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9bb  00000000  00000000  0001d211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001467b  00000000  00000000  00037bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094497  00000000  00000000  0004c247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e06de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005644  00000000  00000000  000e0724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e5d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ab0 	.word	0x08006ab0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08006ab0 	.word	0x08006ab0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <ReadPosition>:
#include "main.h"
#include "adc_multi.h"
#include "math.h"

/* Exported functions --------------------------------------------------------*/
float ReadPosition(float voltage){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	float position = (voltage / 3.3f)* 75.0f; // Converte Tensão em Milimetros
 8000f4c:	4907      	ldr	r1, [pc, #28]	@ (8000f6c <ReadPosition+0x28>)
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff5c 	bl	8000e0c <__aeabi_fdiv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4906      	ldr	r1, [pc, #24]	@ (8000f70 <ReadPosition+0x2c>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fea3 	bl	8000ca4 <__aeabi_fmul>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	60fb      	str	r3, [r7, #12]
	return position;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40533333 	.word	0x40533333
 8000f70:	42960000 	.word	0x42960000

08000f74 <ReadVoltage>:

float ReadVoltage(uint16_t Analog_Val) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
    float voltage = (Analog_Val * 3.3f) / ((1 << 12) - 1.0f); // Converte um valor analogico para tensão
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe3b 	bl	8000bfc <__aeabi_i2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4907      	ldr	r1, [pc, #28]	@ (8000fa8 <ReadVoltage+0x34>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe8a 	bl	8000ca4 <__aeabi_fmul>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4906      	ldr	r1, [pc, #24]	@ (8000fac <ReadVoltage+0x38>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff39 	bl	8000e0c <__aeabi_fdiv>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	60fb      	str	r3, [r7, #12]
    return voltage;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40533333 	.word	0x40533333
 8000fac:	457ff000 	.word	0x457ff000

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb6:	f000 fd37 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fba:	f000 f863 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbe:	f000 f9c7 	bl	8001350 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc2:	f000 f9a7 	bl	8001314 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fc6:	f000 f97b 	bl	80012c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fca:	f000 f8b7 	bl	800113c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000fce:	f000 f8f3 	bl	80011b8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000fd2:	f003 f821 	bl	8004018 <MX_FATFS_Init>
  MX_TIM4_Init();
 8000fd6:	f000 f925 	bl	8001224 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000fda:	4822      	ldr	r0, [pc, #136]	@ (8001064 <main+0xb4>)
 8000fdc:	f002 fb9c 	bl	8003718 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_VAL, READSIZE);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4921      	ldr	r1, [pc, #132]	@ (8001068 <main+0xb8>)
 8000fe4:	4821      	ldr	r0, [pc, #132]	@ (800106c <main+0xbc>)
 8000fe6:	f000 fe59 	bl	8001c9c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(state_machine == READY_TO_DRIVE){
 8000fea:	e035      	b.n	8001058 <main+0xa8>
		  if(SaveData == 1){
 8000fec:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <main+0xc0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d12e      	bne.n	8001052 <main+0xa2>
		  if(IsADCFinished == 1){
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <main+0xc4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d12a      	bne.n	8001052 <main+0xa2>
			  for(int i = 0; i < READSIZE; i++){
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	e021      	b.n	8001046 <main+0x96>
				  ADC_Voltage[i] = ReadVoltage(ADC_VAL[i]); // Recebe as tensões convertidas
 8001002:	4a19      	ldr	r2, [pc, #100]	@ (8001068 <main+0xb8>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ffb2 	bl	8000f74 <ReadVoltage>
 8001010:	4602      	mov	r2, r0
 8001012:	4919      	ldr	r1, [pc, #100]	@ (8001078 <main+0xc8>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  ADC_Position[i] = ReadPosition(ADC_Voltage[i]); // Recebe a Tensão e converte em Posição do potenciometro linear
 800101a:	4a17      	ldr	r2, [pc, #92]	@ (8001078 <main+0xc8>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff8e 	bl	8000f44 <ReadPosition>
 8001028:	4602      	mov	r2, r0
 800102a:	4914      	ldr	r1, [pc, #80]	@ (800107c <main+0xcc>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  save_to_buffer(ADC_Position[i]);
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <main+0xcc>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fa1e 	bl	800147c <save_to_buffer>
			  for(int i = 0; i < READSIZE; i++){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	ddda      	ble.n	8001002 <main+0x52>
			  }
			  IsADCFinished = 0;
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <main+0xc4>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
//		  sd_writeBin(ADC_Voltage[i]);
//		  sd_writeBin(ADC_Position[i]);
//		  }
//	#endif
	  }
		  SaveData = 0;
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <main+0xc0>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	  while(state_machine == READY_TO_DRIVE){
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <main+0xd0>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d0c5      	beq.n	8000fec <main+0x3c>
 8001060:	e7fa      	b.n	8001058 <main+0xa8>
 8001062:	bf00      	nop
 8001064:	200002d4 	.word	0x200002d4
 8001068:	20000364 	.word	0x20000364
 800106c:	20000208 	.word	0x20000208
 8001070:	20000378 	.word	0x20000378
 8001074:	20000370 	.word	0x20000370
 8001078:	20000368 	.word	0x20000368
 800107c:	2000036c 	.word	0x2000036c
 8001080:	20000000 	.word	0x20000000

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	@ 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800108e:	2228      	movs	r2, #40	@ 0x28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fddb 	bl	8004c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010b8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c2:	2301      	movs	r3, #1
 80010c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c6:	2302      	movs	r3, #2
 80010c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 fd82 	bl	8002be4 <HAL_RCC_OscConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010e6:	f000 f9c3 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2102      	movs	r1, #2
 8001106:	4618      	mov	r0, r3
 8001108:	f001 ffee 	bl	80030e8 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001112:	f000 f9ad 	bl	8001470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001116:	2302      	movs	r3, #2
 8001118:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800111a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800111e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f002 f96e 	bl	8003404 <HAL_RCCEx_PeriphCLKConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800112e:	f000 f99f 	bl	8001470 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	@ 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <MX_ADC1_Init+0x74>)
 800114e:	4a19      	ldr	r2, [pc, #100]	@ (80011b4 <MX_ADC1_Init+0x78>)
 8001150:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <MX_ADC1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_ADC1_Init+0x74>)
 800115a:	2201      	movs	r2, #1
 800115c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_ADC1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_ADC1_Init+0x74>)
 8001166:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800116a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116c:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <MX_ADC1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_ADC1_Init+0x74>)
 8001174:	2201      	movs	r2, #1
 8001176:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001178:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <MX_ADC1_Init+0x74>)
 800117a:	f000 fcb7 	bl	8001aec <HAL_ADC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 f974 	bl	8001470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800118c:	2301      	movs	r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001190:	2307      	movs	r3, #7
 8001192:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_ADC1_Init+0x74>)
 800119a:	f000 fe6f 	bl	8001e7c <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011a4:	f000 f964 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000208 	.word	0x20000208
 80011b4:	40012400 	.word	0x40012400

080011b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011bc:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_SPI1_Init+0x64>)
 80011be:	4a18      	ldr	r2, [pc, #96]	@ (8001220 <MX_SPI1_Init+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <MX_SPI1_Init+0x64>)
 80011c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_SPI1_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_SPI1_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_SPI1_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_SPI1_Init+0x64>)
 80011e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_SPI1_Init+0x64>)
 80011ec:	2210      	movs	r2, #16
 80011ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_SPI1_Init+0x64>)
 8001204:	220a      	movs	r2, #10
 8001206:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_SPI1_Init+0x64>)
 800120a:	f002 f9b1 	bl	8003570 <HAL_SPI_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001214:	f000 f92c 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000027c 	.word	0x2000027c
 8001220:	40013000 	.word	0x40013000

08001224 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001240:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001242:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <MX_TIM4_Init+0x98>)
 8001244:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3600;
 8001246:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001248:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800124c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200;
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001256:	22c8      	movs	r2, #200	@ 0xc8
 8001258:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <MX_TIM4_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001266:	4814      	ldr	r0, [pc, #80]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001268:	f002 fa06 	bl	8003678 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001272:	f000 f8fd 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001284:	f002 fb8a 	bl	800399c <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 f8ef 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <MX_TIM4_Init+0x94>)
 80012a0:	f002 fd6c 	bl	8003d7c <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80012aa:	f000 f8e1 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200002d4 	.word	0x200002d4
 80012bc:	40000800 	.word	0x40000800

080012c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <MX_USART2_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012f8:	f002 fdb0 	bl	8003e5c <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 f8b5 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000031c 	.word	0x2000031c
 8001310:	40004400 	.word	0x40004400

08001314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_DMA_Init+0x38>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a0b      	ldr	r2, [pc, #44]	@ (800134c <MX_DMA_Init+0x38>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_DMA_Init+0x38>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	200b      	movs	r0, #11
 8001338:	f001 f871 	bl	800241e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800133c:	200b      	movs	r0, #11
 800133e:	f001 f88a 	bl	8002456 <HAL_NVIC_EnableIRQ>

}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001364:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <MX_GPIO_Init+0xcc>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a2c      	ldr	r2, [pc, #176]	@ (800141c <MX_GPIO_Init+0xcc>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <MX_GPIO_Init+0xcc>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137c:	4b27      	ldr	r3, [pc, #156]	@ (800141c <MX_GPIO_Init+0xcc>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a26      	ldr	r2, [pc, #152]	@ (800141c <MX_GPIO_Init+0xcc>)
 8001382:	f043 0320 	orr.w	r3, r3, #32
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b24      	ldr	r3, [pc, #144]	@ (800141c <MX_GPIO_Init+0xcc>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0320 	and.w	r3, r3, #32
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MX_GPIO_Init+0xcc>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a20      	ldr	r2, [pc, #128]	@ (800141c <MX_GPIO_Init+0xcc>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <MX_GPIO_Init+0xcc>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MX_GPIO_Init+0xcc>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a1a      	ldr	r2, [pc, #104]	@ (800141c <MX_GPIO_Init+0xcc>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_GPIO_Init+0xcc>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2110      	movs	r1, #16
 80013c8:	4815      	ldr	r0, [pc, #84]	@ (8001420 <MX_GPIO_Init+0xd0>)
 80013ca:	f001 fbd1 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <MX_GPIO_Init+0xd4>)
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	480f      	ldr	r0, [pc, #60]	@ (8001420 <MX_GPIO_Init+0xd0>)
 80013e4:	f001 fa40 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 80013e8:	2310      	movs	r3, #16
 80013ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4619      	mov	r1, r3
 80013fe:	4808      	ldr	r0, [pc, #32]	@ (8001420 <MX_GPIO_Init+0xd0>)
 8001400:	f001 fa32 	bl	8002868 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	2028      	movs	r0, #40	@ 0x28
 800140a:	f001 f808 	bl	800241e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800140e:	2028      	movs	r0, #40	@ 0x28
 8001410:	f001 f821 	bl	8002456 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001414:	bf00      	nop
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	40011000 	.word	0x40011000
 8001424:	10110000 	.word	0x10110000

08001428 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	SaveData = 1;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]
	CountTIM++;
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000378 	.word	0x20000378
 8001450:	20000374 	.word	0x20000374

08001454 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

	IsADCFinished = 1;
 800145c:	4b03      	ldr	r3, [pc, #12]	@ (800146c <HAL_ADC_ConvCpltCallback+0x18>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000370 	.word	0x20000370

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <Error_Handler+0x8>

0800147c <save_to_buffer>:
char buffer[BUFFERSIZE];
int buffercount = 0;
int TAM = BUFFERSIZE;
float Buffer1[BUFFERSIZE] = {0};
/* Exported functions --------------------------------------------------------*/
void save_to_buffer(float position){
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

	for(buffercount = 0;buffercount <= BUFFERSIZE - 1; buffercount++){
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <save_to_buffer+0x3c>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e00a      	b.n	80014a2 <save_to_buffer+0x26>
	Buffer1[buffercount] = position;
 800148c:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <save_to_buffer+0x3c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	490a      	ldr	r1, [pc, #40]	@ (80014bc <save_to_buffer+0x40>)
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(buffercount = 0;buffercount <= BUFFERSIZE - 1; buffercount++){
 8001498:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <save_to_buffer+0x3c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <save_to_buffer+0x3c>)
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <save_to_buffer+0x3c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b63      	cmp	r3, #99	@ 0x63
 80014a8:	ddf0      	ble.n	800148c <save_to_buffer+0x10>
	}
		}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2000037c 	.word	0x2000037c
 80014bc:	20000380 	.word	0x20000380

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_MspInit+0x5c>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a14      	ldr	r2, [pc, #80]	@ (800151c <HAL_MspInit+0x5c>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_MspInit+0x5c>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <HAL_MspInit+0x5c>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <HAL_MspInit+0x5c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <HAL_MspInit+0x5c>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_MspInit+0x60>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_MspInit+0x60>)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000

08001524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a28      	ldr	r2, [pc, #160]	@ (80015e0 <HAL_ADC_MspInit+0xbc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d149      	bne.n	80015d8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <HAL_ADC_MspInit+0xc0>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a26      	ldr	r2, [pc, #152]	@ (80015e4 <HAL_ADC_MspInit+0xc0>)
 800154a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <HAL_ADC_MspInit+0xc0>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <HAL_ADC_MspInit+0xc0>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a20      	ldr	r2, [pc, #128]	@ (80015e4 <HAL_ADC_MspInit+0xc0>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <HAL_ADC_MspInit+0xc0>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001574:	2303      	movs	r3, #3
 8001576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001578:	2303      	movs	r3, #3
 800157a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	4619      	mov	r1, r3
 8001582:	4819      	ldr	r0, [pc, #100]	@ (80015e8 <HAL_ADC_MspInit+0xc4>)
 8001584:	f001 f970 	bl	8002868 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 800158a:	4a19      	ldr	r2, [pc, #100]	@ (80015f0 <HAL_ADC_MspInit+0xcc>)
 800158c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158e:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001594:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 800159c:	2280      	movs	r2, #128	@ 0x80
 800159e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 80015a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a8:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 80015aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 80015b2:	2220      	movs	r2, #32
 80015b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015bc:	480b      	ldr	r0, [pc, #44]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 80015be:	f000 ff65 	bl	800248c <HAL_DMA_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80015c8:	f7ff ff52 	bl	8001470 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 80015d0:	621a      	str	r2, [r3, #32]
 80015d2:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <HAL_ADC_MspInit+0xc8>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015d8:	bf00      	nop
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40012400 	.word	0x40012400
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010800 	.word	0x40010800
 80015ec:	20000238 	.word	0x20000238
 80015f0:	40020008 	.word	0x40020008

080015f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1b      	ldr	r2, [pc, #108]	@ (800167c <HAL_SPI_MspInit+0x88>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d12f      	bne.n	8001674 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_SPI_MspInit+0x8c>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_SPI_MspInit+0x8c>)
 800161a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <HAL_SPI_MspInit+0x8c>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <HAL_SPI_MspInit+0x8c>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a13      	ldr	r2, [pc, #76]	@ (8001680 <HAL_SPI_MspInit+0x8c>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <HAL_SPI_MspInit+0x8c>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001644:	23a0      	movs	r3, #160	@ 0xa0
 8001646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	480b      	ldr	r0, [pc, #44]	@ (8001684 <HAL_SPI_MspInit+0x90>)
 8001658:	f001 f906 	bl	8002868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800165c:	2340      	movs	r3, #64	@ 0x40
 800165e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <HAL_SPI_MspInit+0x90>)
 8001670:	f001 f8fa 	bl	8002868 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40013000 	.word	0x40013000
 8001680:	40021000 	.word	0x40021000
 8001684:	40010800 	.word	0x40010800

08001688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <HAL_TIM_Base_MspInit+0x44>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d113      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <HAL_TIM_Base_MspInit+0x48>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a0c      	ldr	r2, [pc, #48]	@ (80016d0 <HAL_TIM_Base_MspInit+0x48>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_TIM_Base_MspInit+0x48>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	201e      	movs	r0, #30
 80016b8:	f000 feb1 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016bc:	201e      	movs	r0, #30
 80016be:	f000 feca 	bl	8002456 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40000800 	.word	0x40000800
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a15      	ldr	r2, [pc, #84]	@ (8001744 <HAL_UART_MspInit+0x70>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d123      	bne.n	800173c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <HAL_UART_MspInit+0x74>)
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	4a13      	ldr	r2, [pc, #76]	@ (8001748 <HAL_UART_MspInit+0x74>)
 80016fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016fe:	61d3      	str	r3, [r2, #28]
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <HAL_UART_MspInit+0x74>)
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <HAL_UART_MspInit+0x74>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <HAL_UART_MspInit+0x74>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <HAL_UART_MspInit+0x74>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001724:	230c      	movs	r3, #12
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2302      	movs	r3, #2
 800172e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <HAL_UART_MspInit+0x78>)
 8001738:	f001 f896 	bl	8002868 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40004400 	.word	0x40004400
 8001748:	40021000 	.word	0x40021000
 800174c:	40010800 	.word	0x40010800

08001750 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001754:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <SDTimer_Handler+0x3c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <SDTimer_Handler+0x1c>
		Timer1--;
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <SDTimer_Handler+0x3c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <SDTimer_Handler+0x3c>)
 800176a:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <SDTimer_Handler+0x40>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <SDTimer_Handler+0x34>
		Timer2--;
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <SDTimer_Handler+0x40>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <SDTimer_Handler+0x40>)
 8001782:	701a      	strb	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	20000511 	.word	0x20000511
 8001790:	20000512 	.word	0x20000512

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <SysTick_Handler+0x30>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <SysTick_Handler+0x30>)
 80017f0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <SysTick_Handler+0x30>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b09      	cmp	r3, #9
 80017fa:	d904      	bls.n	8001806 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <SysTick_Handler+0x30>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001802:	f7ff ffa5 	bl	8001750 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001806:	f000 f955 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000510 	.word	0x20000510

08001814 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <DMA1_Channel1_IRQHandler+0x10>)
 800181a:	f000 fef1 	bl	8002600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000238 	.word	0x20000238

08001828 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <TIM4_IRQHandler+0x10>)
 800182e:	f001 ffc5 	bl	80037bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200002d4 	.word	0x200002d4

0800183c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001840:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001844:	f001 f9ac 	bl	8002ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return 1;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <_kill>:

int _kill(int pid, int sig)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001864:	f003 fa46 	bl	8004cf4 <__errno>
 8001868:	4603      	mov	r3, r0
 800186a:	2216      	movs	r2, #22
 800186c:	601a      	str	r2, [r3, #0]
  return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_exit>:

void _exit (int status)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001882:	f04f 31ff 	mov.w	r1, #4294967295
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffe7 	bl	800185a <_kill>
  while (1) {}    /* Make sure we hang here */
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <_exit+0x12>

08001890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
  }

  return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e009      	b.n	80018f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf1      	blt.n	80018dc <_write+0x12>
  }
  return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:

int _close(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001928:	605a      	str	r2, [r3, #4]
  return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <_isatty>:

int _isatty(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
	...

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f003 f9ae 	bl	8004cf4 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20005000 	.word	0x20005000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	20000514 	.word	0x20000514
 80019cc:	20000680 	.word	0x20000680

080019d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019dc:	f7ff fff8 	bl	80019d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480b      	ldr	r0, [pc, #44]	@ (8001a10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019e2:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a09      	ldr	r2, [pc, #36]	@ (8001a1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019f8:	4c09      	ldr	r4, [pc, #36]	@ (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f003 f97b 	bl	8004d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0a:	f7ff fad1 	bl	8000fb0 <main>
  bx lr
 8001a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001a18:	08006e74 	.word	0x08006e74
  ldr r2, =_sbss
 8001a1c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001a20:	2000067c 	.word	0x2000067c

08001a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_2_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 fce5 	bl	8002408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fd3c 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fcfd 	bl	8002472 <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 fcc5 	bl	800241e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	@ (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	2000000c 	.word	0x2000000c
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a03      	ldr	r2, [pc, #12]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	20000518 	.word	0x20000518

08001ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	@ (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000518 	.word	0x20000518

08001aec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0be      	b.n	8001c8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fcfa 	bl	8001524 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 faf5 	bl	8002120 <ADC_ConversionStop_Disable>
 8001b36:	4603      	mov	r3, r0
 8001b38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 8099 	bne.w	8001c7a <HAL_ADC_Init+0x18e>
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 8095 	bne.w	8001c7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b58:	f023 0302 	bic.w	r3, r3, #2
 8001b5c:	f043 0202 	orr.w	r2, r3, #2
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7b1b      	ldrb	r3, [r3, #12]
 8001b72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b84:	d003      	beq.n	8001b8e <HAL_ADC_Init+0xa2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d102      	bne.n	8001b94 <HAL_ADC_Init+0xa8>
 8001b8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b92:	e000      	b.n	8001b96 <HAL_ADC_Init+0xaa>
 8001b94:	2300      	movs	r3, #0
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7d1b      	ldrb	r3, [r3, #20]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d119      	bne.n	8001bd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7b1b      	ldrb	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	035a      	lsls	r2, r3, #13
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	f043 0220 	orr.w	r2, r3, #32
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b28      	ldr	r3, [pc, #160]	@ (8001c94 <HAL_ADC_Init+0x1a8>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c08:	d003      	beq.n	8001c12 <HAL_ADC_Init+0x126>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d104      	bne.n	8001c1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	051b      	lsls	r3, r3, #20
 8001c1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <HAL_ADC_Init+0x1ac>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d10b      	bne.n	8001c58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	f023 0303 	bic.w	r3, r3, #3
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c56:	e018      	b.n	8001c8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5c:	f023 0312 	bic.w	r3, r3, #18
 8001c60:	f043 0210 	orr.w	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c78:	e007      	b.n	8001c8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7e:	f043 0210 	orr.w	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	ffe1f7fd 	.word	0xffe1f7fd
 8001c98:	ff1f0efe 	.word	0xff1f0efe

08001c9c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a64      	ldr	r2, [pc, #400]	@ (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_ADC_Start_DMA+0x24>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a63      	ldr	r2, [pc, #396]	@ (8001e48 <HAL_ADC_Start_DMA+0x1ac>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d106      	bne.n	8001cce <HAL_ADC_Start_DMA+0x32>
 8001cc0:	4b60      	ldr	r3, [pc, #384]	@ (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f040 80b3 	bne.w	8001e34 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x40>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e0ae      	b.n	8001e3a <HAL_ADC_Start_DMA+0x19e>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 f9c1 	bl	800206c <ADC_Enable>
 8001cea:	4603      	mov	r3, r0
 8001cec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 809a 	bne.w	8001e2a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cfe:	f023 0301 	bic.w	r3, r3, #1
 8001d02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8001e48 <HAL_ADC_Start_DMA+0x1ac>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d105      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x84>
 8001d14:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d115      	bne.n	8001d4c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d026      	beq.n	8001d88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d42:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d4a:	e01d      	b.n	8001d88 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a39      	ldr	r2, [pc, #228]	@ (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d004      	beq.n	8001d6c <HAL_ADC_Start_DMA+0xd0>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a38      	ldr	r2, [pc, #224]	@ (8001e48 <HAL_ADC_Start_DMA+0x1ac>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10d      	bne.n	8001d88 <HAL_ADC_Start_DMA+0xec>
 8001d6c:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	f023 0206 	bic.w	r2, r3, #6
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a25      	ldr	r2, [pc, #148]	@ (8001e4c <HAL_ADC_Start_DMA+0x1b0>)
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <HAL_ADC_Start_DMA+0x1b4>)
 8001dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a23      	ldr	r2, [pc, #140]	@ (8001e54 <HAL_ADC_Start_DMA+0x1b8>)
 8001dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0202 	mvn.w	r2, #2
 8001dd0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001de0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a18      	ldr	r0, [r3, #32]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	334c      	adds	r3, #76	@ 0x4c
 8001dec:	4619      	mov	r1, r3
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f000 fba5 	bl	8002540 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e00:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e04:	d108      	bne.n	8001e18 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e14:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e16:	e00f      	b.n	8001e38 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e26:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e28:	e006      	b.n	8001e38 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001e32:	e001      	b.n	8001e38 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40012400 	.word	0x40012400
 8001e48:	40012800 	.word	0x40012800
 8001e4c:	080021a3 	.word	0x080021a3
 8001e50:	0800221f 	.word	0x0800221f
 8001e54:	0800223b 	.word	0x0800223b

08001e58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x20>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e0dc      	b.n	8002056 <HAL_ADC_ConfigChannel+0x1da>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b06      	cmp	r3, #6
 8001eaa:	d81c      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b05      	subs	r3, #5
 8001ebe:	221f      	movs	r2, #31
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4019      	ands	r1, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b05      	subs	r3, #5
 8001ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ee4:	e03c      	b.n	8001f60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d81c      	bhi.n	8001f28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b23      	subs	r3, #35	@ 0x23
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4019      	ands	r1, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b23      	subs	r3, #35	@ 0x23
 8001f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f26:	e01b      	b.n	8001f60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	3b41      	subs	r3, #65	@ 0x41
 8001f3a:	221f      	movs	r2, #31
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4019      	ands	r1, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b41      	subs	r3, #65	@ 0x41
 8001f54:	fa00 f203 	lsl.w	r2, r0, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	d91c      	bls.n	8001fa2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68d9      	ldr	r1, [r3, #12]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	3b1e      	subs	r3, #30
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4019      	ands	r1, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6898      	ldr	r0, [r3, #8]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	3b1e      	subs	r3, #30
 8001f94:	fa00 f203 	lsl.w	r2, r0, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	e019      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6919      	ldr	r1, [r3, #16]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4019      	ands	r1, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6898      	ldr	r0, [r3, #8]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d003      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fe2:	2b11      	cmp	r3, #17
 8001fe4:	d132      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1d      	ldr	r2, [pc, #116]	@ (8002060 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d125      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d126      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800200c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b10      	cmp	r3, #16
 8002014:	d11a      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002016:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <HAL_ADC_ConfigChannel+0x1e8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a13      	ldr	r2, [pc, #76]	@ (8002068 <HAL_ADC_ConfigChannel+0x1ec>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	0c9a      	lsrs	r2, r3, #18
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800202c:	e002      	b.n	8002034 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3b01      	subs	r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f9      	bne.n	800202e <HAL_ADC_ConfigChannel+0x1b2>
 800203a:	e007      	b.n	800204c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	f043 0220 	orr.w	r2, r3, #32
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	40012400 	.word	0x40012400
 8002064:	20000004 	.word	0x20000004
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d040      	beq.n	800210c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800209a:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <ADC_Enable+0xac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <ADC_Enable+0xb0>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020a8:	e002      	b.n	80020b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020b6:	f7ff fd0f 	bl	8001ad8 <HAL_GetTick>
 80020ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020bc:	e01f      	b.n	80020fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020be:	f7ff fd0b 	bl	8001ad8 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d918      	bls.n	80020fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d011      	beq.n	80020fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	f043 0210 	orr.w	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e007      	b.n	800210e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d1d8      	bne.n	80020be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000004 	.word	0x20000004
 800211c:	431bde83 	.word	0x431bde83

08002120 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d12e      	bne.n	8002198 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800214a:	f7ff fcc5 	bl	8001ad8 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002150:	e01b      	b.n	800218a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002152:	f7ff fcc1 	bl	8001ad8 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d914      	bls.n	800218a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10d      	bne.n	800218a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e007      	b.n	800219a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d0dc      	beq.n	8002152 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d127      	bne.n	800220c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021d2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021d6:	d115      	bne.n	8002204 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d111      	bne.n	8002204 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff f925 	bl	8001454 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800220a:	e004      	b.n	8002216 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f7ff fe13 	bl	8001e58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002258:	f043 0204 	orr.w	r2, r3, #4
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff fe02 	bl	8001e6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800229c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a2:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	60d3      	str	r3, [r2, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db0b      	blt.n	80022fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4906      	ldr	r1, [pc, #24]	@ (8002308 <__NVIC_EnableIRQ+0x34>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2001      	movs	r0, #1
 80022f6:	fa00 f202 	lsl.w	r2, r0, r2
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	@ (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	@ (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	@ 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d4:	d301      	bcc.n	80023da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00f      	b.n	80023fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023da:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <SysTick_Config+0x40>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e2:	210f      	movs	r1, #15
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f7ff ff90 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ec:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <SysTick_Config+0x40>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f2:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <SysTick_Config+0x40>)
 80023f4:	2207      	movs	r2, #7
 80023f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	e000e010 	.word	0xe000e010

08002408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff2d 	bl	8002270 <__NVIC_SetPriorityGrouping>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002430:	f7ff ff42 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 8002434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff ff90 	bl	8002360 <NVIC_EncodePriority>
 8002440:	4602      	mov	r2, r0
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff5f 	bl	800230c <__NVIC_SetPriority>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff35 	bl	80022d4 <__NVIC_EnableIRQ>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffa2 	bl	80023c4 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e043      	b.n	800252a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <HAL_DMA_Init+0xa8>)
 80024aa:	4413      	add	r3, r2
 80024ac:	4a22      	ldr	r2, [pc, #136]	@ (8002538 <HAL_DMA_Init+0xac>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	009a      	lsls	r2, r3, #2
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a1f      	ldr	r2, [pc, #124]	@ (800253c <HAL_DMA_Init+0xb0>)
 80024be:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024d6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80024da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	bffdfff8 	.word	0xbffdfff8
 8002538:	cccccccd 	.word	0xcccccccd
 800253c:	40020000 	.word	0x40020000

08002540 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Start_IT+0x20>
 800255c:	2302      	movs	r3, #2
 800255e:	e04b      	b.n	80025f8 <HAL_DMA_Start_IT+0xb8>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d13a      	bne.n	80025ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f937 	bl	800280c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 020e 	orr.w	r2, r2, #14
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e00f      	b.n	80025d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0204 	bic.w	r2, r2, #4
 80025c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 020a 	orr.w	r2, r2, #10
 80025d6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e005      	b.n	80025f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
 80025f4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	2204      	movs	r2, #4
 800261e:	409a      	lsls	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d04f      	beq.n	80026c8 <HAL_DMA_IRQHandler+0xc8>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d04a      	beq.n	80026c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a66      	ldr	r2, [pc, #408]	@ (80027f0 <HAL_DMA_IRQHandler+0x1f0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d029      	beq.n	80026ae <HAL_DMA_IRQHandler+0xae>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a65      	ldr	r2, [pc, #404]	@ (80027f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d022      	beq.n	80026aa <HAL_DMA_IRQHandler+0xaa>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a63      	ldr	r2, [pc, #396]	@ (80027f8 <HAL_DMA_IRQHandler+0x1f8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01a      	beq.n	80026a4 <HAL_DMA_IRQHandler+0xa4>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a62      	ldr	r2, [pc, #392]	@ (80027fc <HAL_DMA_IRQHandler+0x1fc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d012      	beq.n	800269e <HAL_DMA_IRQHandler+0x9e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a60      	ldr	r2, [pc, #384]	@ (8002800 <HAL_DMA_IRQHandler+0x200>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00a      	beq.n	8002698 <HAL_DMA_IRQHandler+0x98>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5f      	ldr	r2, [pc, #380]	@ (8002804 <HAL_DMA_IRQHandler+0x204>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d102      	bne.n	8002692 <HAL_DMA_IRQHandler+0x92>
 800268c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002690:	e00e      	b.n	80026b0 <HAL_DMA_IRQHandler+0xb0>
 8002692:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002696:	e00b      	b.n	80026b0 <HAL_DMA_IRQHandler+0xb0>
 8002698:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800269c:	e008      	b.n	80026b0 <HAL_DMA_IRQHandler+0xb0>
 800269e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026a2:	e005      	b.n	80026b0 <HAL_DMA_IRQHandler+0xb0>
 80026a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026a8:	e002      	b.n	80026b0 <HAL_DMA_IRQHandler+0xb0>
 80026aa:	2340      	movs	r3, #64	@ 0x40
 80026ac:	e000      	b.n	80026b0 <HAL_DMA_IRQHandler+0xb0>
 80026ae:	2304      	movs	r3, #4
 80026b0:	4a55      	ldr	r2, [pc, #340]	@ (8002808 <HAL_DMA_IRQHandler+0x208>)
 80026b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8094 	beq.w	80027e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026c6:	e08e      	b.n	80027e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	2202      	movs	r2, #2
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d056      	beq.n	8002786 <HAL_DMA_IRQHandler+0x186>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d051      	beq.n	8002786 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 020a 	bic.w	r2, r2, #10
 80026fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a38      	ldr	r2, [pc, #224]	@ (80027f0 <HAL_DMA_IRQHandler+0x1f0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d029      	beq.n	8002766 <HAL_DMA_IRQHandler+0x166>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a37      	ldr	r2, [pc, #220]	@ (80027f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d022      	beq.n	8002762 <HAL_DMA_IRQHandler+0x162>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a35      	ldr	r2, [pc, #212]	@ (80027f8 <HAL_DMA_IRQHandler+0x1f8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01a      	beq.n	800275c <HAL_DMA_IRQHandler+0x15c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a34      	ldr	r2, [pc, #208]	@ (80027fc <HAL_DMA_IRQHandler+0x1fc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d012      	beq.n	8002756 <HAL_DMA_IRQHandler+0x156>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a32      	ldr	r2, [pc, #200]	@ (8002800 <HAL_DMA_IRQHandler+0x200>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00a      	beq.n	8002750 <HAL_DMA_IRQHandler+0x150>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a31      	ldr	r2, [pc, #196]	@ (8002804 <HAL_DMA_IRQHandler+0x204>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d102      	bne.n	800274a <HAL_DMA_IRQHandler+0x14a>
 8002744:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002748:	e00e      	b.n	8002768 <HAL_DMA_IRQHandler+0x168>
 800274a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800274e:	e00b      	b.n	8002768 <HAL_DMA_IRQHandler+0x168>
 8002750:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002754:	e008      	b.n	8002768 <HAL_DMA_IRQHandler+0x168>
 8002756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800275a:	e005      	b.n	8002768 <HAL_DMA_IRQHandler+0x168>
 800275c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002760:	e002      	b.n	8002768 <HAL_DMA_IRQHandler+0x168>
 8002762:	2320      	movs	r3, #32
 8002764:	e000      	b.n	8002768 <HAL_DMA_IRQHandler+0x168>
 8002766:	2302      	movs	r3, #2
 8002768:	4a27      	ldr	r2, [pc, #156]	@ (8002808 <HAL_DMA_IRQHandler+0x208>)
 800276a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	d034      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002784:	e02f      	b.n	80027e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	2208      	movs	r2, #8
 800278c:	409a      	lsls	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d028      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x1e8>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d023      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 020e 	bic.w	r2, r2, #14
 80027ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f202 	lsl.w	r2, r1, r2
 80027be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d004      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
    }
  }
  return;
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
}
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40020008 	.word	0x40020008
 80027f4:	4002001c 	.word	0x4002001c
 80027f8:	40020030 	.word	0x40020030
 80027fc:	40020044 	.word	0x40020044
 8002800:	40020058 	.word	0x40020058
 8002804:	4002006c 	.word	0x4002006c
 8002808:	40020000 	.word	0x40020000

0800280c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b10      	cmp	r3, #16
 8002838:	d108      	bne.n	800284c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800284a:	e007      	b.n	800285c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	60da      	str	r2, [r3, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
	...

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b08b      	sub	sp, #44	@ 0x2c
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287a:	e169      	b.n	8002b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800287c:	2201      	movs	r2, #1
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8158 	bne.w	8002b4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a9a      	ldr	r2, [pc, #616]	@ (8002b08 <HAL_GPIO_Init+0x2a0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d05e      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028a4:	4a98      	ldr	r2, [pc, #608]	@ (8002b08 <HAL_GPIO_Init+0x2a0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d875      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028aa:	4a98      	ldr	r2, [pc, #608]	@ (8002b0c <HAL_GPIO_Init+0x2a4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d058      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028b0:	4a96      	ldr	r2, [pc, #600]	@ (8002b0c <HAL_GPIO_Init+0x2a4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d86f      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028b6:	4a96      	ldr	r2, [pc, #600]	@ (8002b10 <HAL_GPIO_Init+0x2a8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d052      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028bc:	4a94      	ldr	r2, [pc, #592]	@ (8002b10 <HAL_GPIO_Init+0x2a8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d869      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028c2:	4a94      	ldr	r2, [pc, #592]	@ (8002b14 <HAL_GPIO_Init+0x2ac>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d04c      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028c8:	4a92      	ldr	r2, [pc, #584]	@ (8002b14 <HAL_GPIO_Init+0x2ac>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d863      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028ce:	4a92      	ldr	r2, [pc, #584]	@ (8002b18 <HAL_GPIO_Init+0x2b0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d046      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028d4:	4a90      	ldr	r2, [pc, #576]	@ (8002b18 <HAL_GPIO_Init+0x2b0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d85d      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028da:	2b12      	cmp	r3, #18
 80028dc:	d82a      	bhi.n	8002934 <HAL_GPIO_Init+0xcc>
 80028de:	2b12      	cmp	r3, #18
 80028e0:	d859      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028e2:	a201      	add	r2, pc, #4	@ (adr r2, 80028e8 <HAL_GPIO_Init+0x80>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	08002963 	.word	0x08002963
 80028ec:	0800293d 	.word	0x0800293d
 80028f0:	0800294f 	.word	0x0800294f
 80028f4:	08002991 	.word	0x08002991
 80028f8:	08002997 	.word	0x08002997
 80028fc:	08002997 	.word	0x08002997
 8002900:	08002997 	.word	0x08002997
 8002904:	08002997 	.word	0x08002997
 8002908:	08002997 	.word	0x08002997
 800290c:	08002997 	.word	0x08002997
 8002910:	08002997 	.word	0x08002997
 8002914:	08002997 	.word	0x08002997
 8002918:	08002997 	.word	0x08002997
 800291c:	08002997 	.word	0x08002997
 8002920:	08002997 	.word	0x08002997
 8002924:	08002997 	.word	0x08002997
 8002928:	08002997 	.word	0x08002997
 800292c:	08002945 	.word	0x08002945
 8002930:	08002959 	.word	0x08002959
 8002934:	4a79      	ldr	r2, [pc, #484]	@ (8002b1c <HAL_GPIO_Init+0x2b4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800293a:	e02c      	b.n	8002996 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	623b      	str	r3, [r7, #32]
          break;
 8002942:	e029      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	3304      	adds	r3, #4
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	e024      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	3308      	adds	r3, #8
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e01f      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	330c      	adds	r3, #12
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e01a      	b.n	8002998 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800296a:	2304      	movs	r3, #4
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e013      	b.n	8002998 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002978:	2308      	movs	r3, #8
 800297a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	611a      	str	r2, [r3, #16]
          break;
 8002982:	e009      	b.n	8002998 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002984:	2308      	movs	r3, #8
 8002986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	615a      	str	r2, [r3, #20]
          break;
 800298e:	e003      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
          break;
 8002994:	e000      	b.n	8002998 <HAL_GPIO_Init+0x130>
          break;
 8002996:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2bff      	cmp	r3, #255	@ 0xff
 800299c:	d801      	bhi.n	80029a2 <HAL_GPIO_Init+0x13a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	e001      	b.n	80029a6 <HAL_GPIO_Init+0x13e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2bff      	cmp	r3, #255	@ 0xff
 80029ac:	d802      	bhi.n	80029b4 <HAL_GPIO_Init+0x14c>
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	e002      	b.n	80029ba <HAL_GPIO_Init+0x152>
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	3b08      	subs	r3, #8
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	210f      	movs	r1, #15
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	6a39      	ldr	r1, [r7, #32]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	431a      	orrs	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80b1 	beq.w	8002b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b20 <HAL_GPIO_Init+0x2b8>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002b20 <HAL_GPIO_Init+0x2b8>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002b20 <HAL_GPIO_Init+0x2b8>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a00:	4a48      	ldr	r2, [pc, #288]	@ (8002b24 <HAL_GPIO_Init+0x2bc>)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a40      	ldr	r2, [pc, #256]	@ (8002b28 <HAL_GPIO_Init+0x2c0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <HAL_GPIO_Init+0x1ec>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b2c <HAL_GPIO_Init+0x2c4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00d      	beq.n	8002a50 <HAL_GPIO_Init+0x1e8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3e      	ldr	r2, [pc, #248]	@ (8002b30 <HAL_GPIO_Init+0x2c8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <HAL_GPIO_Init+0x1e4>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b34 <HAL_GPIO_Init+0x2cc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_GPIO_Init+0x1e0>
 8002a44:	2303      	movs	r3, #3
 8002a46:	e006      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	e004      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e002      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a54:	2300      	movs	r3, #0
 8002a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a58:	f002 0203 	and.w	r2, r2, #3
 8002a5c:	0092      	lsls	r2, r2, #2
 8002a5e:	4093      	lsls	r3, r2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a66:	492f      	ldr	r1, [pc, #188]	@ (8002b24 <HAL_GPIO_Init+0x2bc>)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a80:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	492c      	ldr	r1, [pc, #176]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4928      	ldr	r1, [pc, #160]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aa8:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	4922      	ldr	r1, [pc, #136]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60cb      	str	r3, [r1, #12]
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ab6:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	491e      	ldr	r1, [pc, #120]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ad0:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	4918      	ldr	r1, [pc, #96]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
 8002adc:	e006      	b.n	8002aec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ade:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	4914      	ldr	r1, [pc, #80]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d021      	beq.n	8002b3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002af8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	490e      	ldr	r1, [pc, #56]	@ (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
 8002b04:	e021      	b.n	8002b4a <HAL_GPIO_Init+0x2e2>
 8002b06:	bf00      	nop
 8002b08:	10320000 	.word	0x10320000
 8002b0c:	10310000 	.word	0x10310000
 8002b10:	10220000 	.word	0x10220000
 8002b14:	10210000 	.word	0x10210000
 8002b18:	10120000 	.word	0x10120000
 8002b1c:	10110000 	.word	0x10110000
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40010800 	.word	0x40010800
 8002b2c:	40010c00 	.word	0x40010c00
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_GPIO_Init+0x304>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	4909      	ldr	r1, [pc, #36]	@ (8002b6c <HAL_GPIO_Init+0x304>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f47f ae8e 	bne.w	800287c <HAL_GPIO_Init+0x14>
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	372c      	adds	r7, #44	@ 0x2c
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	40010400 	.word	0x40010400

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	611a      	str	r2, [r3, #16]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002baa:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bb6:	4a05      	ldr	r2, [pc, #20]	@ (8002bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f806 	bl	8002bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40010400 	.word	0x40010400

08002bd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e272      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8087 	beq.w	8002d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c04:	4b92      	ldr	r3, [pc, #584]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d00c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c10:	4b8f      	ldr	r3, [pc, #572]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d112      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5e>
 8002c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c28:	d10b      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2a:	4b89      	ldr	r3, [pc, #548]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d06c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x12c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d168      	bne.n	8002d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e24c      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x76>
 8002c4c:	4b80      	ldr	r3, [pc, #512]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a7f      	ldr	r2, [pc, #508]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e02e      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x98>
 8002c62:	4b7b      	ldr	r3, [pc, #492]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7a      	ldr	r2, [pc, #488]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b78      	ldr	r3, [pc, #480]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a77      	ldr	r2, [pc, #476]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e01d      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0xbc>
 8002c86:	4b72      	ldr	r3, [pc, #456]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a71      	ldr	r2, [pc, #452]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b6f      	ldr	r3, [pc, #444]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6e      	ldr	r2, [pc, #440]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b68      	ldr	r3, [pc, #416]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a67      	ldr	r2, [pc, #412]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe ff0a 	bl	8001ad8 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe ff06 	bl	8001ad8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e200      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b5d      	ldr	r3, [pc, #372]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xe4>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fef6 	bl	8001ad8 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fef2 	bl	8001ad8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	@ 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1ec      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x10c>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d2a:	4b49      	ldr	r3, [pc, #292]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d11c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x18c>
 8002d36:	4b46      	ldr	r3, [pc, #280]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	4b43      	ldr	r3, [pc, #268]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x176>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e1c0      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4939      	ldr	r1, [pc, #228]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	e03a      	b.n	8002de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d78:	4b36      	ldr	r3, [pc, #216]	@ (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fe feab 	bl	8001ad8 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe fea7 	bl	8001ad8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e1a1      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	4b2d      	ldr	r3, [pc, #180]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4927      	ldr	r1, [pc, #156]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e015      	b.n	8002de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b26      	ldr	r3, [pc, #152]	@ (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fe8a 	bl	8001ad8 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fe86 	bl	8001ad8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e180      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d03a      	beq.n	8002e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d019      	beq.n	8002e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfa:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e00:	f7fe fe6a 	bl	8001ad8 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e08:	f7fe fe66 	bl	8001ad8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e160      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e26:	2001      	movs	r0, #1
 8002e28:	f000 face 	bl	80033c8 <RCC_Delay>
 8002e2c:	e01c      	b.n	8002e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <HAL_RCC_OscConfig+0x274>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7fe fe50 	bl	8001ad8 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3a:	e00f      	b.n	8002e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fe fe4c 	bl	8001ad8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d908      	bls.n	8002e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e146      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	42420000 	.word	0x42420000
 8002e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4b92      	ldr	r3, [pc, #584]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e9      	bne.n	8002e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a6 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b88      	ldr	r3, [pc, #544]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4a87      	ldr	r2, [pc, #540]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e90:	61d3      	str	r3, [r2, #28]
 8002e92:	4b85      	ldr	r3, [pc, #532]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b82      	ldr	r3, [pc, #520]	@ (80030ac <HAL_RCC_OscConfig+0x4c8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d118      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eae:	4b7f      	ldr	r3, [pc, #508]	@ (80030ac <HAL_RCC_OscConfig+0x4c8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80030ac <HAL_RCC_OscConfig+0x4c8>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eba:	f7fe fe0d 	bl	8001ad8 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec2:	f7fe fe09 	bl	8001ad8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b64      	cmp	r3, #100	@ 0x64
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e103      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	4b75      	ldr	r3, [pc, #468]	@ (80030ac <HAL_RCC_OscConfig+0x4c8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x312>
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a6e      	ldr	r2, [pc, #440]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	e02d      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x334>
 8002efe:	4b6a      	ldr	r3, [pc, #424]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a69      	ldr	r2, [pc, #420]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	4b67      	ldr	r3, [pc, #412]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a66      	ldr	r2, [pc, #408]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6213      	str	r3, [r2, #32]
 8002f16:	e01c      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x356>
 8002f20:	4b61      	ldr	r3, [pc, #388]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4a60      	ldr	r2, [pc, #384]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6213      	str	r3, [r2, #32]
 8002f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4a5d      	ldr	r2, [pc, #372]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6213      	str	r3, [r2, #32]
 8002f38:	e00b      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a5a      	ldr	r2, [pc, #360]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b58      	ldr	r3, [pc, #352]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a57      	ldr	r2, [pc, #348]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fdbd 	bl	8001ad8 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fe fdb9 	bl	8001ad8 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0b1      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	4b4b      	ldr	r3, [pc, #300]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ee      	beq.n	8002f62 <HAL_RCC_OscConfig+0x37e>
 8002f84:	e014      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7fe fda7 	bl	8001ad8 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fe fda3 	bl	8001ad8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e09b      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	4b40      	ldr	r3, [pc, #256]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ee      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a3b      	ldr	r2, [pc, #236]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8087 	beq.w	80030da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fcc:	4b36      	ldr	r3, [pc, #216]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d061      	beq.n	800309c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d146      	bne.n	800306e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b33      	ldr	r3, [pc, #204]	@ (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fd77 	bl	8001ad8 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe fd73 	bl	8001ad8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e06d      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003000:	4b29      	ldr	r3, [pc, #164]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003014:	d108      	bne.n	8003028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003016:	4b24      	ldr	r3, [pc, #144]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4921      	ldr	r1, [pc, #132]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003028:	4b1f      	ldr	r3, [pc, #124]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a19      	ldr	r1, [r3, #32]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	430b      	orrs	r3, r1
 800303a:	491b      	ldr	r1, [pc, #108]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003040:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7fe fd47 	bl	8001ad8 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe fd43 	bl	8001ad8 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e03d      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x46a>
 800306c:	e035      	b.n	80030da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fd30 	bl	8001ad8 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe fd2c 	bl	8001ad8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e026      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308e:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x498>
 800309a:	e01e      	b.n	80030da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e019      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40007000 	.word	0x40007000
 80030b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_RCC_OscConfig+0x500>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000

080030e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0d0      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d910      	bls.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b67      	ldr	r3, [pc, #412]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 0207 	bic.w	r2, r3, #7
 8003112:	4965      	ldr	r1, [pc, #404]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a58      	ldr	r2, [pc, #352]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800314e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a52      	ldr	r2, [pc, #328]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d040      	beq.n	8003208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d115      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b41      	ldr	r3, [pc, #260]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e073      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06b      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c6:	4b39      	ldr	r3, [pc, #228]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4936      	ldr	r1, [pc, #216]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d8:	f7fe fc7e 	bl	8001ad8 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fe fc7a 	bl	8001ad8 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e053      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 020c 	and.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d1eb      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003208:	4b27      	ldr	r3, [pc, #156]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d210      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	4922      	ldr	r1, [pc, #136]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f821 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490a      	ldr	r1, [pc, #40]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fbdc 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40021000 	.word	0x40021000
 80032b0:	08006ac8 	.word	0x08006ac8
 80032b4:	20000004 	.word	0x20000004
 80032b8:	20000008 	.word	0x20000008

080032bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	2300      	movs	r3, #0
 80032d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x94>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d002      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x30>
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0x36>
 80032ea:	e027      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032ec:	4b19      	ldr	r3, [pc, #100]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ee:	613b      	str	r3, [r7, #16]
      break;
 80032f0:	e027      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	0c9b      	lsrs	r3, r3, #18
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	4a17      	ldr	r2, [pc, #92]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032fc:	5cd3      	ldrb	r3, [r2, r3]
 80032fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d010      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800330a:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x94>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	0c5b      	lsrs	r3, r3, #17
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	4a11      	ldr	r2, [pc, #68]	@ (800335c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0d      	ldr	r2, [pc, #52]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x98>)
 800331e:	fb03 f202 	mul.w	r2, r3, r2
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	e004      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a0c      	ldr	r2, [pc, #48]	@ (8003360 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003330:	fb02 f303 	mul.w	r3, r2, r3
 8003334:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	613b      	str	r3, [r7, #16]
      break;
 800333a:	e002      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x98>)
 800333e:	613b      	str	r3, [r7, #16]
      break;
 8003340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003342:	693b      	ldr	r3, [r7, #16]
}
 8003344:	4618      	mov	r0, r3
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	007a1200 	.word	0x007a1200
 8003358:	08006ae0 	.word	0x08006ae0
 800335c:	08006af0 	.word	0x08006af0
 8003360:	003d0900 	.word	0x003d0900

08003364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003368:	4b02      	ldr	r3, [pc, #8]	@ (8003374 <HAL_RCC_GetHCLKFreq+0x10>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800337c:	f7ff fff2 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	@ (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	08006ad8 	.word	0x08006ad8

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033a4:	f7ff ffde 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	0adb      	lsrs	r3, r3, #11
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	@ (80033c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	08006ad8 	.word	0x08006ad8

080033c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033d0:	4b0a      	ldr	r3, [pc, #40]	@ (80033fc <RCC_Delay+0x34>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003400 <RCC_Delay+0x38>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	0a5b      	lsrs	r3, r3, #9
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033e4:	bf00      	nop
  }
  while (Delay --);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	60fa      	str	r2, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f9      	bne.n	80033e4 <RCC_Delay+0x1c>
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	20000004 	.word	0x20000004
 8003400:	10624dd3 	.word	0x10624dd3

08003404 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d07d      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003424:	4b4f      	ldr	r3, [pc, #316]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	4b4c      	ldr	r3, [pc, #304]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	4a4b      	ldr	r2, [pc, #300]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343a:	61d3      	str	r3, [r2, #28]
 800343c:	4b49      	ldr	r3, [pc, #292]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003448:	2301      	movs	r3, #1
 800344a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344c:	4b46      	ldr	r3, [pc, #280]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d118      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003458:	4b43      	ldr	r3, [pc, #268]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a42      	ldr	r2, [pc, #264]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003462:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003464:	f7fe fb38 	bl	8001ad8 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	e008      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346c:	f7fe fb34 	bl	8001ad8 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	@ 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e06d      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347e:	4b3a      	ldr	r3, [pc, #232]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800348a:	4b36      	ldr	r3, [pc, #216]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003492:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d02e      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d027      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034b2:	4b2e      	ldr	r3, [pc, #184]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b8:	4b2c      	ldr	r3, [pc, #176]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034be:	4a29      	ldr	r2, [pc, #164]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d014      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fe fb03 	bl	8001ad8 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d4:	e00a      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe faff 	bl	8001ad8 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e036      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ee      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4917      	ldr	r1, [pc, #92]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	4313      	orrs	r3, r2
 8003508:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003510:	4b14      	ldr	r3, [pc, #80]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	4a13      	ldr	r2, [pc, #76]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800351a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003528:	4b0e      	ldr	r3, [pc, #56]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	490b      	ldr	r1, [pc, #44]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003546:	4b07      	ldr	r3, [pc, #28]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	4904      	ldr	r1, [pc, #16]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003554:	4313      	orrs	r3, r2
 8003556:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	40007000 	.word	0x40007000
 800356c:	42420440 	.word	0x42420440

08003570 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e076      	b.n	8003670 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	2b00      	cmp	r3, #0
 8003588:	d108      	bne.n	800359c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003592:	d009      	beq.n	80035a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	61da      	str	r2, [r3, #28]
 800359a:	e005      	b.n	80035a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe f816 	bl	80015f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362c:	ea42 0103 	orr.w	r1, r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003634:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	0c1a      	lsrs	r2, r3, #16
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f002 0204 	and.w	r2, r2, #4
 800364e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800365e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e041      	b.n	800370e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fd fff2 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f000 fa5c 	bl	8003b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d001      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e03a      	b.n	80037a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a18      	ldr	r2, [pc, #96]	@ (80037b0 <HAL_TIM_Base_Start_IT+0x98>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00e      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x58>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375a:	d009      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x58>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a14      	ldr	r2, [pc, #80]	@ (80037b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d004      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x58>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a13      	ldr	r2, [pc, #76]	@ (80037b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d111      	bne.n	8003794 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b06      	cmp	r3, #6
 8003780:	d010      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003792:	e007      	b.n	80037a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800

080037bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d020      	beq.n	8003820 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01b      	beq.n	8003820 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0202 	mvn.w	r2, #2
 80037f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f998 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f98b 	bl	8003b2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f99a 	bl	8003b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d020      	beq.n	800386c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01b      	beq.n	800386c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0204 	mvn.w	r2, #4
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f972 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f965 	bl	8003b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f974 	bl	8003b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d020      	beq.n	80038b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01b      	beq.n	80038b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0208 	mvn.w	r2, #8
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2204      	movs	r2, #4
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f94c 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f93f 	bl	8003b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f94e 	bl	8003b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d020      	beq.n	8003904 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01b      	beq.n	8003904 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0210 	mvn.w	r2, #16
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2208      	movs	r2, #8
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f926 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f919 	bl	8003b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f928 	bl	8003b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00c      	beq.n	8003928 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0201 	mvn.w	r2, #1
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fd80 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa7f 	bl	8003e4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8f8 	bl	8003b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00c      	beq.n	8003994 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0220 	mvn.w	r2, #32
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fa52 	bl	8003e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIM_ConfigClockSource+0x1c>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e0b4      	b.n	8003b22 <HAL_TIM_ConfigClockSource+0x186>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039f0:	d03e      	beq.n	8003a70 <HAL_TIM_ConfigClockSource+0xd4>
 80039f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039f6:	f200 8087 	bhi.w	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039fe:	f000 8086 	beq.w	8003b0e <HAL_TIM_ConfigClockSource+0x172>
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a06:	d87f      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a08:	2b70      	cmp	r3, #112	@ 0x70
 8003a0a:	d01a      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0xa6>
 8003a0c:	2b70      	cmp	r3, #112	@ 0x70
 8003a0e:	d87b      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a10:	2b60      	cmp	r3, #96	@ 0x60
 8003a12:	d050      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x11a>
 8003a14:	2b60      	cmp	r3, #96	@ 0x60
 8003a16:	d877      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a18:	2b50      	cmp	r3, #80	@ 0x50
 8003a1a:	d03c      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0xfa>
 8003a1c:	2b50      	cmp	r3, #80	@ 0x50
 8003a1e:	d873      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b40      	cmp	r3, #64	@ 0x40
 8003a22:	d058      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x13a>
 8003a24:	2b40      	cmp	r3, #64	@ 0x40
 8003a26:	d86f      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b30      	cmp	r3, #48	@ 0x30
 8003a2a:	d064      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a2c:	2b30      	cmp	r3, #48	@ 0x30
 8003a2e:	d86b      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d060      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d867      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05c      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d05a      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a40:	e062      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a52:	f000 f974 	bl	8003d3e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	609a      	str	r2, [r3, #8]
      break;
 8003a6e:	e04f      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a80:	f000 f95d 	bl	8003d3e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a92:	609a      	str	r2, [r3, #8]
      break;
 8003a94:	e03c      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f000 f8d4 	bl	8003c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2150      	movs	r1, #80	@ 0x50
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f92b 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 8003ab4:	e02c      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f000 f8f2 	bl	8003cac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2160      	movs	r1, #96	@ 0x60
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f91b 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 8003ad4:	e01c      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f000 f8b4 	bl	8003c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2140      	movs	r1, #64	@ 0x40
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f90b 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 8003af4:	e00c      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f000 f902 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 8003b06:	e003      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e000      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
	...

08003b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a2f      	ldr	r2, [pc, #188]	@ (8003c44 <TIM_Base_SetConfig+0xd0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_Base_SetConfig+0x30>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b92:	d007      	beq.n	8003ba4 <TIM_Base_SetConfig+0x30>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a2c      	ldr	r2, [pc, #176]	@ (8003c48 <TIM_Base_SetConfig+0xd4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_Base_SetConfig+0x30>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c4c <TIM_Base_SetConfig+0xd8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d108      	bne.n	8003bb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a22      	ldr	r2, [pc, #136]	@ (8003c44 <TIM_Base_SetConfig+0xd0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00b      	beq.n	8003bd6 <TIM_Base_SetConfig+0x62>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc4:	d007      	beq.n	8003bd6 <TIM_Base_SetConfig+0x62>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c48 <TIM_Base_SetConfig+0xd4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_Base_SetConfig+0x62>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c4c <TIM_Base_SetConfig+0xd8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d108      	bne.n	8003be8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c44 <TIM_Base_SetConfig+0xd0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d103      	bne.n	8003c1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f023 0201 	bic.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	611a      	str	r2, [r3, #16]
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	40000800 	.word	0x40000800

08003c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f023 0201 	bic.w	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 030a 	bic.w	r3, r3, #10
 8003c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f023 0210 	bic.w	r2, r3, #16
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	031b      	lsls	r3, r3, #12
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f043 0307 	orr.w	r3, r3, #7
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	021a      	lsls	r2, r3, #8
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	609a      	str	r2, [r3, #8]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e046      	b.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a16      	ldr	r2, [pc, #88]	@ (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de0:	d009      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a12      	ldr	r2, [pc, #72]	@ (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a10      	ldr	r2, [pc, #64]	@ (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10c      	bne.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800

08003e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e042      	b.n	8003ef4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd fc26 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2224      	movs	r2, #36	@ 0x24
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f82b 	bl	8003efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f36:	f023 030c 	bic.w	r3, r3, #12
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	430b      	orrs	r3, r1
 8003f42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004010 <UART_SetConfig+0x114>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d103      	bne.n	8003f6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7ff fa1c 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	e002      	b.n	8003f72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f6c:	f7ff fa04 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8003f70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	009a      	lsls	r2, r3, #2
 8003f7c:	441a      	add	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	4a22      	ldr	r2, [pc, #136]	@ (8004014 <UART_SetConfig+0x118>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	0119      	lsls	r1, r3, #4
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009a      	lsls	r2, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <UART_SetConfig+0x118>)
 8003faa:	fba3 0302 	umull	r0, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2064      	movs	r0, #100	@ 0x64
 8003fb2:	fb00 f303 	mul.w	r3, r0, r3
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	3332      	adds	r3, #50	@ 0x32
 8003fbc:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <UART_SetConfig+0x118>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fc8:	4419      	add	r1, r3
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009a      	lsls	r2, r3, #2
 8003fd4:	441a      	add	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8004014 <UART_SetConfig+0x118>)
 8003fe2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2064      	movs	r0, #100	@ 0x64
 8003fea:	fb00 f303 	mul.w	r3, r0, r3
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	3332      	adds	r3, #50	@ 0x32
 8003ff4:	4a07      	ldr	r2, [pc, #28]	@ (8004014 <UART_SetConfig+0x118>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	440a      	add	r2, r1
 8004006:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40013800 	.word	0x40013800
 8004014:	51eb851f 	.word	0x51eb851f

08004018 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800401c:	4904      	ldr	r1, [pc, #16]	@ (8004030 <MX_FATFS_Init+0x18>)
 800401e:	4805      	ldr	r0, [pc, #20]	@ (8004034 <MX_FATFS_Init+0x1c>)
 8004020:	f000 f8a6 	bl	8004170 <FATFS_LinkDriver>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	4b03      	ldr	r3, [pc, #12]	@ (8004038 <MX_FATFS_Init+0x20>)
 800402a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800402c:	bf00      	nop
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000520 	.word	0x20000520
 8004034:	20000010 	.word	0x20000010
 8004038:	2000051c 	.word	0x2000051c

0800403c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004046:	4b05      	ldr	r3, [pc, #20]	@ (800405c <USER_initialize+0x20>)
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800404c:	4b03      	ldr	r3, [pc, #12]	@ (800405c <USER_initialize+0x20>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004052:	4618      	mov	r0, r3
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	2000000d 	.word	0x2000000d

08004060 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800406a:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <USER_status+0x20>)
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004070:	4b03      	ldr	r3, [pc, #12]	@ (8004080 <USER_status+0x20>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	2000000d 	.word	0x2000000d

08004084 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4603      	mov	r3, r0
 8004092:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004094:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80040b0:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	603a      	str	r2, [r7, #0]
 80040c6:	71fb      	strb	r3, [r7, #7]
 80040c8:	460b      	mov	r3, r1
 80040ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
    return res;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80040f2:	4b1e      	ldr	r3, [pc, #120]	@ (800416c <FATFS_LinkDriverEx+0x90>)
 80040f4:	7a5b      	ldrb	r3, [r3, #9]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d831      	bhi.n	8004160 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80040fc:	4b1b      	ldr	r3, [pc, #108]	@ (800416c <FATFS_LinkDriverEx+0x90>)
 80040fe:	7a5b      	ldrb	r3, [r3, #9]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	4b19      	ldr	r3, [pc, #100]	@ (800416c <FATFS_LinkDriverEx+0x90>)
 8004106:	2100      	movs	r1, #0
 8004108:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800410a:	4b18      	ldr	r3, [pc, #96]	@ (800416c <FATFS_LinkDriverEx+0x90>)
 800410c:	7a5b      	ldrb	r3, [r3, #9]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	4a16      	ldr	r2, [pc, #88]	@ (800416c <FATFS_LinkDriverEx+0x90>)
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800411a:	4b14      	ldr	r3, [pc, #80]	@ (800416c <FATFS_LinkDriverEx+0x90>)
 800411c:	7a5b      	ldrb	r3, [r3, #9]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	4b12      	ldr	r3, [pc, #72]	@ (800416c <FATFS_LinkDriverEx+0x90>)
 8004124:	4413      	add	r3, r2
 8004126:	79fa      	ldrb	r2, [r7, #7]
 8004128:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800412a:	4b10      	ldr	r3, [pc, #64]	@ (800416c <FATFS_LinkDriverEx+0x90>)
 800412c:	7a5b      	ldrb	r3, [r3, #9]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	b2d1      	uxtb	r1, r2
 8004134:	4a0d      	ldr	r2, [pc, #52]	@ (800416c <FATFS_LinkDriverEx+0x90>)
 8004136:	7251      	strb	r1, [r2, #9]
 8004138:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800413a:	7dbb      	ldrb	r3, [r7, #22]
 800413c:	3330      	adds	r3, #48	@ 0x30
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3301      	adds	r3, #1
 8004148:	223a      	movs	r2, #58	@ 0x3a
 800414a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	3302      	adds	r3, #2
 8004150:	222f      	movs	r2, #47	@ 0x2f
 8004152:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	3303      	adds	r3, #3
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8004160:	7dfb      	ldrb	r3, [r7, #23]
}
 8004162:	4618      	mov	r0, r3
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr
 800416c:	20000524 	.word	0x20000524

08004170 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800417a:	2200      	movs	r2, #0
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ffac 	bl	80040dc <FATFS_LinkDriverEx>
 8004184:	4603      	mov	r3, r0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <__cvt>:
 800418e:	2b00      	cmp	r3, #0
 8004190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004194:	461d      	mov	r5, r3
 8004196:	bfbb      	ittet	lt
 8004198:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800419c:	461d      	movlt	r5, r3
 800419e:	2300      	movge	r3, #0
 80041a0:	232d      	movlt	r3, #45	@ 0x2d
 80041a2:	b088      	sub	sp, #32
 80041a4:	4614      	mov	r4, r2
 80041a6:	bfb8      	it	lt
 80041a8:	4614      	movlt	r4, r2
 80041aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80041ac:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80041ae:	7013      	strb	r3, [r2, #0]
 80041b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80041b2:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80041b6:	f023 0820 	bic.w	r8, r3, #32
 80041ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80041be:	d005      	beq.n	80041cc <__cvt+0x3e>
 80041c0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80041c4:	d100      	bne.n	80041c8 <__cvt+0x3a>
 80041c6:	3601      	adds	r6, #1
 80041c8:	2302      	movs	r3, #2
 80041ca:	e000      	b.n	80041ce <__cvt+0x40>
 80041cc:	2303      	movs	r3, #3
 80041ce:	aa07      	add	r2, sp, #28
 80041d0:	9204      	str	r2, [sp, #16]
 80041d2:	aa06      	add	r2, sp, #24
 80041d4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80041d8:	e9cd 3600 	strd	r3, r6, [sp]
 80041dc:	4622      	mov	r2, r4
 80041de:	462b      	mov	r3, r5
 80041e0:	f000 fe4e 	bl	8004e80 <_dtoa_r>
 80041e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80041e8:	4607      	mov	r7, r0
 80041ea:	d119      	bne.n	8004220 <__cvt+0x92>
 80041ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80041ee:	07db      	lsls	r3, r3, #31
 80041f0:	d50e      	bpl.n	8004210 <__cvt+0x82>
 80041f2:	eb00 0906 	add.w	r9, r0, r6
 80041f6:	2200      	movs	r2, #0
 80041f8:	2300      	movs	r3, #0
 80041fa:	4620      	mov	r0, r4
 80041fc:	4629      	mov	r1, r5
 80041fe:	f7fc fbd3 	bl	80009a8 <__aeabi_dcmpeq>
 8004202:	b108      	cbz	r0, 8004208 <__cvt+0x7a>
 8004204:	f8cd 901c 	str.w	r9, [sp, #28]
 8004208:	2230      	movs	r2, #48	@ 0x30
 800420a:	9b07      	ldr	r3, [sp, #28]
 800420c:	454b      	cmp	r3, r9
 800420e:	d31e      	bcc.n	800424e <__cvt+0xc0>
 8004210:	4638      	mov	r0, r7
 8004212:	9b07      	ldr	r3, [sp, #28]
 8004214:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004216:	1bdb      	subs	r3, r3, r7
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	b008      	add	sp, #32
 800421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004220:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004224:	eb00 0906 	add.w	r9, r0, r6
 8004228:	d1e5      	bne.n	80041f6 <__cvt+0x68>
 800422a:	7803      	ldrb	r3, [r0, #0]
 800422c:	2b30      	cmp	r3, #48	@ 0x30
 800422e:	d10a      	bne.n	8004246 <__cvt+0xb8>
 8004230:	2200      	movs	r2, #0
 8004232:	2300      	movs	r3, #0
 8004234:	4620      	mov	r0, r4
 8004236:	4629      	mov	r1, r5
 8004238:	f7fc fbb6 	bl	80009a8 <__aeabi_dcmpeq>
 800423c:	b918      	cbnz	r0, 8004246 <__cvt+0xb8>
 800423e:	f1c6 0601 	rsb	r6, r6, #1
 8004242:	f8ca 6000 	str.w	r6, [sl]
 8004246:	f8da 3000 	ldr.w	r3, [sl]
 800424a:	4499      	add	r9, r3
 800424c:	e7d3      	b.n	80041f6 <__cvt+0x68>
 800424e:	1c59      	adds	r1, r3, #1
 8004250:	9107      	str	r1, [sp, #28]
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e7d9      	b.n	800420a <__cvt+0x7c>

08004256 <__exponent>:
 8004256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004258:	2900      	cmp	r1, #0
 800425a:	bfb6      	itet	lt
 800425c:	232d      	movlt	r3, #45	@ 0x2d
 800425e:	232b      	movge	r3, #43	@ 0x2b
 8004260:	4249      	neglt	r1, r1
 8004262:	2909      	cmp	r1, #9
 8004264:	7002      	strb	r2, [r0, #0]
 8004266:	7043      	strb	r3, [r0, #1]
 8004268:	dd29      	ble.n	80042be <__exponent+0x68>
 800426a:	f10d 0307 	add.w	r3, sp, #7
 800426e:	461d      	mov	r5, r3
 8004270:	270a      	movs	r7, #10
 8004272:	fbb1 f6f7 	udiv	r6, r1, r7
 8004276:	461a      	mov	r2, r3
 8004278:	fb07 1416 	mls	r4, r7, r6, r1
 800427c:	3430      	adds	r4, #48	@ 0x30
 800427e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004282:	460c      	mov	r4, r1
 8004284:	2c63      	cmp	r4, #99	@ 0x63
 8004286:	4631      	mov	r1, r6
 8004288:	f103 33ff 	add.w	r3, r3, #4294967295
 800428c:	dcf1      	bgt.n	8004272 <__exponent+0x1c>
 800428e:	3130      	adds	r1, #48	@ 0x30
 8004290:	1e94      	subs	r4, r2, #2
 8004292:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004296:	4623      	mov	r3, r4
 8004298:	1c41      	adds	r1, r0, #1
 800429a:	42ab      	cmp	r3, r5
 800429c:	d30a      	bcc.n	80042b4 <__exponent+0x5e>
 800429e:	f10d 0309 	add.w	r3, sp, #9
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	42ac      	cmp	r4, r5
 80042a6:	bf88      	it	hi
 80042a8:	2300      	movhi	r3, #0
 80042aa:	3302      	adds	r3, #2
 80042ac:	4403      	add	r3, r0
 80042ae:	1a18      	subs	r0, r3, r0
 80042b0:	b003      	add	sp, #12
 80042b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80042b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80042bc:	e7ed      	b.n	800429a <__exponent+0x44>
 80042be:	2330      	movs	r3, #48	@ 0x30
 80042c0:	3130      	adds	r1, #48	@ 0x30
 80042c2:	7083      	strb	r3, [r0, #2]
 80042c4:	70c1      	strb	r1, [r0, #3]
 80042c6:	1d03      	adds	r3, r0, #4
 80042c8:	e7f1      	b.n	80042ae <__exponent+0x58>
	...

080042cc <_printf_float>:
 80042cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d0:	b091      	sub	sp, #68	@ 0x44
 80042d2:	460c      	mov	r4, r1
 80042d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80042d8:	4616      	mov	r6, r2
 80042da:	461f      	mov	r7, r3
 80042dc:	4605      	mov	r5, r0
 80042de:	f000 fcbf 	bl	8004c60 <_localeconv_r>
 80042e2:	6803      	ldr	r3, [r0, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	9308      	str	r3, [sp, #32]
 80042e8:	f7fb ff32 	bl	8000150 <strlen>
 80042ec:	2300      	movs	r3, #0
 80042ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80042f0:	f8d8 3000 	ldr.w	r3, [r8]
 80042f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80042f6:	3307      	adds	r3, #7
 80042f8:	f023 0307 	bic.w	r3, r3, #7
 80042fc:	f103 0208 	add.w	r2, r3, #8
 8004300:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004304:	f8d4 b000 	ldr.w	fp, [r4]
 8004308:	f8c8 2000 	str.w	r2, [r8]
 800430c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004310:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004314:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004316:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800431a:	f04f 32ff 	mov.w	r2, #4294967295
 800431e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004322:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004326:	4b9c      	ldr	r3, [pc, #624]	@ (8004598 <_printf_float+0x2cc>)
 8004328:	f7fc fb70 	bl	8000a0c <__aeabi_dcmpun>
 800432c:	bb70      	cbnz	r0, 800438c <_printf_float+0xc0>
 800432e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004332:	f04f 32ff 	mov.w	r2, #4294967295
 8004336:	4b98      	ldr	r3, [pc, #608]	@ (8004598 <_printf_float+0x2cc>)
 8004338:	f7fc fb4a 	bl	80009d0 <__aeabi_dcmple>
 800433c:	bb30      	cbnz	r0, 800438c <_printf_float+0xc0>
 800433e:	2200      	movs	r2, #0
 8004340:	2300      	movs	r3, #0
 8004342:	4640      	mov	r0, r8
 8004344:	4649      	mov	r1, r9
 8004346:	f7fc fb39 	bl	80009bc <__aeabi_dcmplt>
 800434a:	b110      	cbz	r0, 8004352 <_printf_float+0x86>
 800434c:	232d      	movs	r3, #45	@ 0x2d
 800434e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004352:	4a92      	ldr	r2, [pc, #584]	@ (800459c <_printf_float+0x2d0>)
 8004354:	4b92      	ldr	r3, [pc, #584]	@ (80045a0 <_printf_float+0x2d4>)
 8004356:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800435a:	bf8c      	ite	hi
 800435c:	4690      	movhi	r8, r2
 800435e:	4698      	movls	r8, r3
 8004360:	2303      	movs	r3, #3
 8004362:	f04f 0900 	mov.w	r9, #0
 8004366:	6123      	str	r3, [r4, #16]
 8004368:	f02b 0304 	bic.w	r3, fp, #4
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	4633      	mov	r3, r6
 8004370:	4621      	mov	r1, r4
 8004372:	4628      	mov	r0, r5
 8004374:	9700      	str	r7, [sp, #0]
 8004376:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004378:	f000 f9d4 	bl	8004724 <_printf_common>
 800437c:	3001      	adds	r0, #1
 800437e:	f040 8090 	bne.w	80044a2 <_printf_float+0x1d6>
 8004382:	f04f 30ff 	mov.w	r0, #4294967295
 8004386:	b011      	add	sp, #68	@ 0x44
 8004388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800438c:	4642      	mov	r2, r8
 800438e:	464b      	mov	r3, r9
 8004390:	4640      	mov	r0, r8
 8004392:	4649      	mov	r1, r9
 8004394:	f7fc fb3a 	bl	8000a0c <__aeabi_dcmpun>
 8004398:	b148      	cbz	r0, 80043ae <_printf_float+0xe2>
 800439a:	464b      	mov	r3, r9
 800439c:	2b00      	cmp	r3, #0
 800439e:	bfb8      	it	lt
 80043a0:	232d      	movlt	r3, #45	@ 0x2d
 80043a2:	4a80      	ldr	r2, [pc, #512]	@ (80045a4 <_printf_float+0x2d8>)
 80043a4:	bfb8      	it	lt
 80043a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80043aa:	4b7f      	ldr	r3, [pc, #508]	@ (80045a8 <_printf_float+0x2dc>)
 80043ac:	e7d3      	b.n	8004356 <_printf_float+0x8a>
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	d13f      	bne.n	8004438 <_printf_float+0x16c>
 80043b8:	2306      	movs	r3, #6
 80043ba:	6063      	str	r3, [r4, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	9206      	str	r2, [sp, #24]
 80043c6:	aa0e      	add	r2, sp, #56	@ 0x38
 80043c8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80043cc:	aa0d      	add	r2, sp, #52	@ 0x34
 80043ce:	9203      	str	r2, [sp, #12]
 80043d0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80043d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80043d8:	6863      	ldr	r3, [r4, #4]
 80043da:	4642      	mov	r2, r8
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	4628      	mov	r0, r5
 80043e0:	464b      	mov	r3, r9
 80043e2:	910a      	str	r1, [sp, #40]	@ 0x28
 80043e4:	f7ff fed3 	bl	800418e <__cvt>
 80043e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80043ea:	4680      	mov	r8, r0
 80043ec:	2947      	cmp	r1, #71	@ 0x47
 80043ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80043f0:	d128      	bne.n	8004444 <_printf_float+0x178>
 80043f2:	1cc8      	adds	r0, r1, #3
 80043f4:	db02      	blt.n	80043fc <_printf_float+0x130>
 80043f6:	6863      	ldr	r3, [r4, #4]
 80043f8:	4299      	cmp	r1, r3
 80043fa:	dd40      	ble.n	800447e <_printf_float+0x1b2>
 80043fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004400:	fa5f fa8a 	uxtb.w	sl, sl
 8004404:	4652      	mov	r2, sl
 8004406:	3901      	subs	r1, #1
 8004408:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800440c:	910d      	str	r1, [sp, #52]	@ 0x34
 800440e:	f7ff ff22 	bl	8004256 <__exponent>
 8004412:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004414:	4681      	mov	r9, r0
 8004416:	1813      	adds	r3, r2, r0
 8004418:	2a01      	cmp	r2, #1
 800441a:	6123      	str	r3, [r4, #16]
 800441c:	dc02      	bgt.n	8004424 <_printf_float+0x158>
 800441e:	6822      	ldr	r2, [r4, #0]
 8004420:	07d2      	lsls	r2, r2, #31
 8004422:	d501      	bpl.n	8004428 <_printf_float+0x15c>
 8004424:	3301      	adds	r3, #1
 8004426:	6123      	str	r3, [r4, #16]
 8004428:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800442c:	2b00      	cmp	r3, #0
 800442e:	d09e      	beq.n	800436e <_printf_float+0xa2>
 8004430:	232d      	movs	r3, #45	@ 0x2d
 8004432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004436:	e79a      	b.n	800436e <_printf_float+0xa2>
 8004438:	2947      	cmp	r1, #71	@ 0x47
 800443a:	d1bf      	bne.n	80043bc <_printf_float+0xf0>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1bd      	bne.n	80043bc <_printf_float+0xf0>
 8004440:	2301      	movs	r3, #1
 8004442:	e7ba      	b.n	80043ba <_printf_float+0xee>
 8004444:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004448:	d9dc      	bls.n	8004404 <_printf_float+0x138>
 800444a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800444e:	d118      	bne.n	8004482 <_printf_float+0x1b6>
 8004450:	2900      	cmp	r1, #0
 8004452:	6863      	ldr	r3, [r4, #4]
 8004454:	dd0b      	ble.n	800446e <_printf_float+0x1a2>
 8004456:	6121      	str	r1, [r4, #16]
 8004458:	b913      	cbnz	r3, 8004460 <_printf_float+0x194>
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	07d0      	lsls	r0, r2, #31
 800445e:	d502      	bpl.n	8004466 <_printf_float+0x19a>
 8004460:	3301      	adds	r3, #1
 8004462:	440b      	add	r3, r1
 8004464:	6123      	str	r3, [r4, #16]
 8004466:	f04f 0900 	mov.w	r9, #0
 800446a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800446c:	e7dc      	b.n	8004428 <_printf_float+0x15c>
 800446e:	b913      	cbnz	r3, 8004476 <_printf_float+0x1aa>
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	07d2      	lsls	r2, r2, #31
 8004474:	d501      	bpl.n	800447a <_printf_float+0x1ae>
 8004476:	3302      	adds	r3, #2
 8004478:	e7f4      	b.n	8004464 <_printf_float+0x198>
 800447a:	2301      	movs	r3, #1
 800447c:	e7f2      	b.n	8004464 <_printf_float+0x198>
 800447e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004484:	4299      	cmp	r1, r3
 8004486:	db05      	blt.n	8004494 <_printf_float+0x1c8>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	6121      	str	r1, [r4, #16]
 800448c:	07d8      	lsls	r0, r3, #31
 800448e:	d5ea      	bpl.n	8004466 <_printf_float+0x19a>
 8004490:	1c4b      	adds	r3, r1, #1
 8004492:	e7e7      	b.n	8004464 <_printf_float+0x198>
 8004494:	2900      	cmp	r1, #0
 8004496:	bfcc      	ite	gt
 8004498:	2201      	movgt	r2, #1
 800449a:	f1c1 0202 	rsble	r2, r1, #2
 800449e:	4413      	add	r3, r2
 80044a0:	e7e0      	b.n	8004464 <_printf_float+0x198>
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	055a      	lsls	r2, r3, #21
 80044a6:	d407      	bmi.n	80044b8 <_printf_float+0x1ec>
 80044a8:	6923      	ldr	r3, [r4, #16]
 80044aa:	4642      	mov	r2, r8
 80044ac:	4631      	mov	r1, r6
 80044ae:	4628      	mov	r0, r5
 80044b0:	47b8      	blx	r7
 80044b2:	3001      	adds	r0, #1
 80044b4:	d12b      	bne.n	800450e <_printf_float+0x242>
 80044b6:	e764      	b.n	8004382 <_printf_float+0xb6>
 80044b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80044bc:	f240 80dc 	bls.w	8004678 <_printf_float+0x3ac>
 80044c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044c4:	2200      	movs	r2, #0
 80044c6:	2300      	movs	r3, #0
 80044c8:	f7fc fa6e 	bl	80009a8 <__aeabi_dcmpeq>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d033      	beq.n	8004538 <_printf_float+0x26c>
 80044d0:	2301      	movs	r3, #1
 80044d2:	4631      	mov	r1, r6
 80044d4:	4628      	mov	r0, r5
 80044d6:	4a35      	ldr	r2, [pc, #212]	@ (80045ac <_printf_float+0x2e0>)
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	f43f af51 	beq.w	8004382 <_printf_float+0xb6>
 80044e0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80044e4:	4543      	cmp	r3, r8
 80044e6:	db02      	blt.n	80044ee <_printf_float+0x222>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	07d8      	lsls	r0, r3, #31
 80044ec:	d50f      	bpl.n	800450e <_printf_float+0x242>
 80044ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044f2:	4631      	mov	r1, r6
 80044f4:	4628      	mov	r0, r5
 80044f6:	47b8      	blx	r7
 80044f8:	3001      	adds	r0, #1
 80044fa:	f43f af42 	beq.w	8004382 <_printf_float+0xb6>
 80044fe:	f04f 0900 	mov.w	r9, #0
 8004502:	f108 38ff 	add.w	r8, r8, #4294967295
 8004506:	f104 0a1a 	add.w	sl, r4, #26
 800450a:	45c8      	cmp	r8, r9
 800450c:	dc09      	bgt.n	8004522 <_printf_float+0x256>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	079b      	lsls	r3, r3, #30
 8004512:	f100 8102 	bmi.w	800471a <_printf_float+0x44e>
 8004516:	68e0      	ldr	r0, [r4, #12]
 8004518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800451a:	4298      	cmp	r0, r3
 800451c:	bfb8      	it	lt
 800451e:	4618      	movlt	r0, r3
 8004520:	e731      	b.n	8004386 <_printf_float+0xba>
 8004522:	2301      	movs	r3, #1
 8004524:	4652      	mov	r2, sl
 8004526:	4631      	mov	r1, r6
 8004528:	4628      	mov	r0, r5
 800452a:	47b8      	blx	r7
 800452c:	3001      	adds	r0, #1
 800452e:	f43f af28 	beq.w	8004382 <_printf_float+0xb6>
 8004532:	f109 0901 	add.w	r9, r9, #1
 8004536:	e7e8      	b.n	800450a <_printf_float+0x23e>
 8004538:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800453a:	2b00      	cmp	r3, #0
 800453c:	dc38      	bgt.n	80045b0 <_printf_float+0x2e4>
 800453e:	2301      	movs	r3, #1
 8004540:	4631      	mov	r1, r6
 8004542:	4628      	mov	r0, r5
 8004544:	4a19      	ldr	r2, [pc, #100]	@ (80045ac <_printf_float+0x2e0>)
 8004546:	47b8      	blx	r7
 8004548:	3001      	adds	r0, #1
 800454a:	f43f af1a 	beq.w	8004382 <_printf_float+0xb6>
 800454e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004552:	ea59 0303 	orrs.w	r3, r9, r3
 8004556:	d102      	bne.n	800455e <_printf_float+0x292>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	07d9      	lsls	r1, r3, #31
 800455c:	d5d7      	bpl.n	800450e <_printf_float+0x242>
 800455e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004562:	4631      	mov	r1, r6
 8004564:	4628      	mov	r0, r5
 8004566:	47b8      	blx	r7
 8004568:	3001      	adds	r0, #1
 800456a:	f43f af0a 	beq.w	8004382 <_printf_float+0xb6>
 800456e:	f04f 0a00 	mov.w	sl, #0
 8004572:	f104 0b1a 	add.w	fp, r4, #26
 8004576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004578:	425b      	negs	r3, r3
 800457a:	4553      	cmp	r3, sl
 800457c:	dc01      	bgt.n	8004582 <_printf_float+0x2b6>
 800457e:	464b      	mov	r3, r9
 8004580:	e793      	b.n	80044aa <_printf_float+0x1de>
 8004582:	2301      	movs	r3, #1
 8004584:	465a      	mov	r2, fp
 8004586:	4631      	mov	r1, r6
 8004588:	4628      	mov	r0, r5
 800458a:	47b8      	blx	r7
 800458c:	3001      	adds	r0, #1
 800458e:	f43f aef8 	beq.w	8004382 <_printf_float+0xb6>
 8004592:	f10a 0a01 	add.w	sl, sl, #1
 8004596:	e7ee      	b.n	8004576 <_printf_float+0x2aa>
 8004598:	7fefffff 	.word	0x7fefffff
 800459c:	08006af6 	.word	0x08006af6
 80045a0:	08006af2 	.word	0x08006af2
 80045a4:	08006afe 	.word	0x08006afe
 80045a8:	08006afa 	.word	0x08006afa
 80045ac:	08006b02 	.word	0x08006b02
 80045b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80045b2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80045b6:	4553      	cmp	r3, sl
 80045b8:	bfa8      	it	ge
 80045ba:	4653      	movge	r3, sl
 80045bc:	2b00      	cmp	r3, #0
 80045be:	4699      	mov	r9, r3
 80045c0:	dc36      	bgt.n	8004630 <_printf_float+0x364>
 80045c2:	f04f 0b00 	mov.w	fp, #0
 80045c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045ca:	f104 021a 	add.w	r2, r4, #26
 80045ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80045d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80045d2:	eba3 0309 	sub.w	r3, r3, r9
 80045d6:	455b      	cmp	r3, fp
 80045d8:	dc31      	bgt.n	800463e <_printf_float+0x372>
 80045da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045dc:	459a      	cmp	sl, r3
 80045de:	dc3a      	bgt.n	8004656 <_printf_float+0x38a>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	07da      	lsls	r2, r3, #31
 80045e4:	d437      	bmi.n	8004656 <_printf_float+0x38a>
 80045e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045e8:	ebaa 0903 	sub.w	r9, sl, r3
 80045ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045ee:	ebaa 0303 	sub.w	r3, sl, r3
 80045f2:	4599      	cmp	r9, r3
 80045f4:	bfa8      	it	ge
 80045f6:	4699      	movge	r9, r3
 80045f8:	f1b9 0f00 	cmp.w	r9, #0
 80045fc:	dc33      	bgt.n	8004666 <_printf_float+0x39a>
 80045fe:	f04f 0800 	mov.w	r8, #0
 8004602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004606:	f104 0b1a 	add.w	fp, r4, #26
 800460a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800460c:	ebaa 0303 	sub.w	r3, sl, r3
 8004610:	eba3 0309 	sub.w	r3, r3, r9
 8004614:	4543      	cmp	r3, r8
 8004616:	f77f af7a 	ble.w	800450e <_printf_float+0x242>
 800461a:	2301      	movs	r3, #1
 800461c:	465a      	mov	r2, fp
 800461e:	4631      	mov	r1, r6
 8004620:	4628      	mov	r0, r5
 8004622:	47b8      	blx	r7
 8004624:	3001      	adds	r0, #1
 8004626:	f43f aeac 	beq.w	8004382 <_printf_float+0xb6>
 800462a:	f108 0801 	add.w	r8, r8, #1
 800462e:	e7ec      	b.n	800460a <_printf_float+0x33e>
 8004630:	4642      	mov	r2, r8
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	47b8      	blx	r7
 8004638:	3001      	adds	r0, #1
 800463a:	d1c2      	bne.n	80045c2 <_printf_float+0x2f6>
 800463c:	e6a1      	b.n	8004382 <_printf_float+0xb6>
 800463e:	2301      	movs	r3, #1
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	920a      	str	r2, [sp, #40]	@ 0x28
 8004646:	47b8      	blx	r7
 8004648:	3001      	adds	r0, #1
 800464a:	f43f ae9a 	beq.w	8004382 <_printf_float+0xb6>
 800464e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004650:	f10b 0b01 	add.w	fp, fp, #1
 8004654:	e7bb      	b.n	80045ce <_printf_float+0x302>
 8004656:	4631      	mov	r1, r6
 8004658:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800465c:	4628      	mov	r0, r5
 800465e:	47b8      	blx	r7
 8004660:	3001      	adds	r0, #1
 8004662:	d1c0      	bne.n	80045e6 <_printf_float+0x31a>
 8004664:	e68d      	b.n	8004382 <_printf_float+0xb6>
 8004666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004668:	464b      	mov	r3, r9
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	4442      	add	r2, r8
 8004670:	47b8      	blx	r7
 8004672:	3001      	adds	r0, #1
 8004674:	d1c3      	bne.n	80045fe <_printf_float+0x332>
 8004676:	e684      	b.n	8004382 <_printf_float+0xb6>
 8004678:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800467c:	f1ba 0f01 	cmp.w	sl, #1
 8004680:	dc01      	bgt.n	8004686 <_printf_float+0x3ba>
 8004682:	07db      	lsls	r3, r3, #31
 8004684:	d536      	bpl.n	80046f4 <_printf_float+0x428>
 8004686:	2301      	movs	r3, #1
 8004688:	4642      	mov	r2, r8
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	f43f ae76 	beq.w	8004382 <_printf_float+0xb6>
 8004696:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800469a:	4631      	mov	r1, r6
 800469c:	4628      	mov	r0, r5
 800469e:	47b8      	blx	r7
 80046a0:	3001      	adds	r0, #1
 80046a2:	f43f ae6e 	beq.w	8004382 <_printf_float+0xb6>
 80046a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80046aa:	2200      	movs	r2, #0
 80046ac:	2300      	movs	r3, #0
 80046ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046b2:	f7fc f979 	bl	80009a8 <__aeabi_dcmpeq>
 80046b6:	b9c0      	cbnz	r0, 80046ea <_printf_float+0x41e>
 80046b8:	4653      	mov	r3, sl
 80046ba:	f108 0201 	add.w	r2, r8, #1
 80046be:	4631      	mov	r1, r6
 80046c0:	4628      	mov	r0, r5
 80046c2:	47b8      	blx	r7
 80046c4:	3001      	adds	r0, #1
 80046c6:	d10c      	bne.n	80046e2 <_printf_float+0x416>
 80046c8:	e65b      	b.n	8004382 <_printf_float+0xb6>
 80046ca:	2301      	movs	r3, #1
 80046cc:	465a      	mov	r2, fp
 80046ce:	4631      	mov	r1, r6
 80046d0:	4628      	mov	r0, r5
 80046d2:	47b8      	blx	r7
 80046d4:	3001      	adds	r0, #1
 80046d6:	f43f ae54 	beq.w	8004382 <_printf_float+0xb6>
 80046da:	f108 0801 	add.w	r8, r8, #1
 80046de:	45d0      	cmp	r8, sl
 80046e0:	dbf3      	blt.n	80046ca <_printf_float+0x3fe>
 80046e2:	464b      	mov	r3, r9
 80046e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80046e8:	e6e0      	b.n	80044ac <_printf_float+0x1e0>
 80046ea:	f04f 0800 	mov.w	r8, #0
 80046ee:	f104 0b1a 	add.w	fp, r4, #26
 80046f2:	e7f4      	b.n	80046de <_printf_float+0x412>
 80046f4:	2301      	movs	r3, #1
 80046f6:	4642      	mov	r2, r8
 80046f8:	e7e1      	b.n	80046be <_printf_float+0x3f2>
 80046fa:	2301      	movs	r3, #1
 80046fc:	464a      	mov	r2, r9
 80046fe:	4631      	mov	r1, r6
 8004700:	4628      	mov	r0, r5
 8004702:	47b8      	blx	r7
 8004704:	3001      	adds	r0, #1
 8004706:	f43f ae3c 	beq.w	8004382 <_printf_float+0xb6>
 800470a:	f108 0801 	add.w	r8, r8, #1
 800470e:	68e3      	ldr	r3, [r4, #12]
 8004710:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004712:	1a5b      	subs	r3, r3, r1
 8004714:	4543      	cmp	r3, r8
 8004716:	dcf0      	bgt.n	80046fa <_printf_float+0x42e>
 8004718:	e6fd      	b.n	8004516 <_printf_float+0x24a>
 800471a:	f04f 0800 	mov.w	r8, #0
 800471e:	f104 0919 	add.w	r9, r4, #25
 8004722:	e7f4      	b.n	800470e <_printf_float+0x442>

08004724 <_printf_common>:
 8004724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004728:	4616      	mov	r6, r2
 800472a:	4698      	mov	r8, r3
 800472c:	688a      	ldr	r2, [r1, #8]
 800472e:	690b      	ldr	r3, [r1, #16]
 8004730:	4607      	mov	r7, r0
 8004732:	4293      	cmp	r3, r2
 8004734:	bfb8      	it	lt
 8004736:	4613      	movlt	r3, r2
 8004738:	6033      	str	r3, [r6, #0]
 800473a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800473e:	460c      	mov	r4, r1
 8004740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004744:	b10a      	cbz	r2, 800474a <_printf_common+0x26>
 8004746:	3301      	adds	r3, #1
 8004748:	6033      	str	r3, [r6, #0]
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	0699      	lsls	r1, r3, #26
 800474e:	bf42      	ittt	mi
 8004750:	6833      	ldrmi	r3, [r6, #0]
 8004752:	3302      	addmi	r3, #2
 8004754:	6033      	strmi	r3, [r6, #0]
 8004756:	6825      	ldr	r5, [r4, #0]
 8004758:	f015 0506 	ands.w	r5, r5, #6
 800475c:	d106      	bne.n	800476c <_printf_common+0x48>
 800475e:	f104 0a19 	add.w	sl, r4, #25
 8004762:	68e3      	ldr	r3, [r4, #12]
 8004764:	6832      	ldr	r2, [r6, #0]
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	42ab      	cmp	r3, r5
 800476a:	dc2b      	bgt.n	80047c4 <_printf_common+0xa0>
 800476c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	3b00      	subs	r3, #0
 8004774:	bf18      	it	ne
 8004776:	2301      	movne	r3, #1
 8004778:	0692      	lsls	r2, r2, #26
 800477a:	d430      	bmi.n	80047de <_printf_common+0xba>
 800477c:	4641      	mov	r1, r8
 800477e:	4638      	mov	r0, r7
 8004780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004784:	47c8      	blx	r9
 8004786:	3001      	adds	r0, #1
 8004788:	d023      	beq.n	80047d2 <_printf_common+0xae>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	6922      	ldr	r2, [r4, #16]
 800478e:	f003 0306 	and.w	r3, r3, #6
 8004792:	2b04      	cmp	r3, #4
 8004794:	bf14      	ite	ne
 8004796:	2500      	movne	r5, #0
 8004798:	6833      	ldreq	r3, [r6, #0]
 800479a:	f04f 0600 	mov.w	r6, #0
 800479e:	bf08      	it	eq
 80047a0:	68e5      	ldreq	r5, [r4, #12]
 80047a2:	f104 041a 	add.w	r4, r4, #26
 80047a6:	bf08      	it	eq
 80047a8:	1aed      	subeq	r5, r5, r3
 80047aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80047ae:	bf08      	it	eq
 80047b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bfc4      	itt	gt
 80047b8:	1a9b      	subgt	r3, r3, r2
 80047ba:	18ed      	addgt	r5, r5, r3
 80047bc:	42b5      	cmp	r5, r6
 80047be:	d11a      	bne.n	80047f6 <_printf_common+0xd2>
 80047c0:	2000      	movs	r0, #0
 80047c2:	e008      	b.n	80047d6 <_printf_common+0xb2>
 80047c4:	2301      	movs	r3, #1
 80047c6:	4652      	mov	r2, sl
 80047c8:	4641      	mov	r1, r8
 80047ca:	4638      	mov	r0, r7
 80047cc:	47c8      	blx	r9
 80047ce:	3001      	adds	r0, #1
 80047d0:	d103      	bne.n	80047da <_printf_common+0xb6>
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047da:	3501      	adds	r5, #1
 80047dc:	e7c1      	b.n	8004762 <_printf_common+0x3e>
 80047de:	2030      	movs	r0, #48	@ 0x30
 80047e0:	18e1      	adds	r1, r4, r3
 80047e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047ec:	4422      	add	r2, r4
 80047ee:	3302      	adds	r3, #2
 80047f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047f4:	e7c2      	b.n	800477c <_printf_common+0x58>
 80047f6:	2301      	movs	r3, #1
 80047f8:	4622      	mov	r2, r4
 80047fa:	4641      	mov	r1, r8
 80047fc:	4638      	mov	r0, r7
 80047fe:	47c8      	blx	r9
 8004800:	3001      	adds	r0, #1
 8004802:	d0e6      	beq.n	80047d2 <_printf_common+0xae>
 8004804:	3601      	adds	r6, #1
 8004806:	e7d9      	b.n	80047bc <_printf_common+0x98>

08004808 <_printf_i>:
 8004808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800480c:	7e0f      	ldrb	r7, [r1, #24]
 800480e:	4691      	mov	r9, r2
 8004810:	2f78      	cmp	r7, #120	@ 0x78
 8004812:	4680      	mov	r8, r0
 8004814:	460c      	mov	r4, r1
 8004816:	469a      	mov	sl, r3
 8004818:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800481a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800481e:	d807      	bhi.n	8004830 <_printf_i+0x28>
 8004820:	2f62      	cmp	r7, #98	@ 0x62
 8004822:	d80a      	bhi.n	800483a <_printf_i+0x32>
 8004824:	2f00      	cmp	r7, #0
 8004826:	f000 80d1 	beq.w	80049cc <_printf_i+0x1c4>
 800482a:	2f58      	cmp	r7, #88	@ 0x58
 800482c:	f000 80b8 	beq.w	80049a0 <_printf_i+0x198>
 8004830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004834:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004838:	e03a      	b.n	80048b0 <_printf_i+0xa8>
 800483a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800483e:	2b15      	cmp	r3, #21
 8004840:	d8f6      	bhi.n	8004830 <_printf_i+0x28>
 8004842:	a101      	add	r1, pc, #4	@ (adr r1, 8004848 <_printf_i+0x40>)
 8004844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004848:	080048a1 	.word	0x080048a1
 800484c:	080048b5 	.word	0x080048b5
 8004850:	08004831 	.word	0x08004831
 8004854:	08004831 	.word	0x08004831
 8004858:	08004831 	.word	0x08004831
 800485c:	08004831 	.word	0x08004831
 8004860:	080048b5 	.word	0x080048b5
 8004864:	08004831 	.word	0x08004831
 8004868:	08004831 	.word	0x08004831
 800486c:	08004831 	.word	0x08004831
 8004870:	08004831 	.word	0x08004831
 8004874:	080049b3 	.word	0x080049b3
 8004878:	080048df 	.word	0x080048df
 800487c:	0800496d 	.word	0x0800496d
 8004880:	08004831 	.word	0x08004831
 8004884:	08004831 	.word	0x08004831
 8004888:	080049d5 	.word	0x080049d5
 800488c:	08004831 	.word	0x08004831
 8004890:	080048df 	.word	0x080048df
 8004894:	08004831 	.word	0x08004831
 8004898:	08004831 	.word	0x08004831
 800489c:	08004975 	.word	0x08004975
 80048a0:	6833      	ldr	r3, [r6, #0]
 80048a2:	1d1a      	adds	r2, r3, #4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6032      	str	r2, [r6, #0]
 80048a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048b0:	2301      	movs	r3, #1
 80048b2:	e09c      	b.n	80049ee <_printf_i+0x1e6>
 80048b4:	6833      	ldr	r3, [r6, #0]
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	1d19      	adds	r1, r3, #4
 80048ba:	6031      	str	r1, [r6, #0]
 80048bc:	0606      	lsls	r6, r0, #24
 80048be:	d501      	bpl.n	80048c4 <_printf_i+0xbc>
 80048c0:	681d      	ldr	r5, [r3, #0]
 80048c2:	e003      	b.n	80048cc <_printf_i+0xc4>
 80048c4:	0645      	lsls	r5, r0, #25
 80048c6:	d5fb      	bpl.n	80048c0 <_printf_i+0xb8>
 80048c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048cc:	2d00      	cmp	r5, #0
 80048ce:	da03      	bge.n	80048d8 <_printf_i+0xd0>
 80048d0:	232d      	movs	r3, #45	@ 0x2d
 80048d2:	426d      	negs	r5, r5
 80048d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048d8:	230a      	movs	r3, #10
 80048da:	4858      	ldr	r0, [pc, #352]	@ (8004a3c <_printf_i+0x234>)
 80048dc:	e011      	b.n	8004902 <_printf_i+0xfa>
 80048de:	6821      	ldr	r1, [r4, #0]
 80048e0:	6833      	ldr	r3, [r6, #0]
 80048e2:	0608      	lsls	r0, r1, #24
 80048e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80048e8:	d402      	bmi.n	80048f0 <_printf_i+0xe8>
 80048ea:	0649      	lsls	r1, r1, #25
 80048ec:	bf48      	it	mi
 80048ee:	b2ad      	uxthmi	r5, r5
 80048f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80048f2:	6033      	str	r3, [r6, #0]
 80048f4:	bf14      	ite	ne
 80048f6:	230a      	movne	r3, #10
 80048f8:	2308      	moveq	r3, #8
 80048fa:	4850      	ldr	r0, [pc, #320]	@ (8004a3c <_printf_i+0x234>)
 80048fc:	2100      	movs	r1, #0
 80048fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004902:	6866      	ldr	r6, [r4, #4]
 8004904:	2e00      	cmp	r6, #0
 8004906:	60a6      	str	r6, [r4, #8]
 8004908:	db05      	blt.n	8004916 <_printf_i+0x10e>
 800490a:	6821      	ldr	r1, [r4, #0]
 800490c:	432e      	orrs	r6, r5
 800490e:	f021 0104 	bic.w	r1, r1, #4
 8004912:	6021      	str	r1, [r4, #0]
 8004914:	d04b      	beq.n	80049ae <_printf_i+0x1a6>
 8004916:	4616      	mov	r6, r2
 8004918:	fbb5 f1f3 	udiv	r1, r5, r3
 800491c:	fb03 5711 	mls	r7, r3, r1, r5
 8004920:	5dc7      	ldrb	r7, [r0, r7]
 8004922:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004926:	462f      	mov	r7, r5
 8004928:	42bb      	cmp	r3, r7
 800492a:	460d      	mov	r5, r1
 800492c:	d9f4      	bls.n	8004918 <_printf_i+0x110>
 800492e:	2b08      	cmp	r3, #8
 8004930:	d10b      	bne.n	800494a <_printf_i+0x142>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	07df      	lsls	r7, r3, #31
 8004936:	d508      	bpl.n	800494a <_printf_i+0x142>
 8004938:	6923      	ldr	r3, [r4, #16]
 800493a:	6861      	ldr	r1, [r4, #4]
 800493c:	4299      	cmp	r1, r3
 800493e:	bfde      	ittt	le
 8004940:	2330      	movle	r3, #48	@ 0x30
 8004942:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004946:	f106 36ff 	addle.w	r6, r6, #4294967295
 800494a:	1b92      	subs	r2, r2, r6
 800494c:	6122      	str	r2, [r4, #16]
 800494e:	464b      	mov	r3, r9
 8004950:	4621      	mov	r1, r4
 8004952:	4640      	mov	r0, r8
 8004954:	f8cd a000 	str.w	sl, [sp]
 8004958:	aa03      	add	r2, sp, #12
 800495a:	f7ff fee3 	bl	8004724 <_printf_common>
 800495e:	3001      	adds	r0, #1
 8004960:	d14a      	bne.n	80049f8 <_printf_i+0x1f0>
 8004962:	f04f 30ff 	mov.w	r0, #4294967295
 8004966:	b004      	add	sp, #16
 8004968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	f043 0320 	orr.w	r3, r3, #32
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	2778      	movs	r7, #120	@ 0x78
 8004976:	4832      	ldr	r0, [pc, #200]	@ (8004a40 <_printf_i+0x238>)
 8004978:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	6831      	ldr	r1, [r6, #0]
 8004980:	061f      	lsls	r7, r3, #24
 8004982:	f851 5b04 	ldr.w	r5, [r1], #4
 8004986:	d402      	bmi.n	800498e <_printf_i+0x186>
 8004988:	065f      	lsls	r7, r3, #25
 800498a:	bf48      	it	mi
 800498c:	b2ad      	uxthmi	r5, r5
 800498e:	6031      	str	r1, [r6, #0]
 8004990:	07d9      	lsls	r1, r3, #31
 8004992:	bf44      	itt	mi
 8004994:	f043 0320 	orrmi.w	r3, r3, #32
 8004998:	6023      	strmi	r3, [r4, #0]
 800499a:	b11d      	cbz	r5, 80049a4 <_printf_i+0x19c>
 800499c:	2310      	movs	r3, #16
 800499e:	e7ad      	b.n	80048fc <_printf_i+0xf4>
 80049a0:	4826      	ldr	r0, [pc, #152]	@ (8004a3c <_printf_i+0x234>)
 80049a2:	e7e9      	b.n	8004978 <_printf_i+0x170>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	f023 0320 	bic.w	r3, r3, #32
 80049aa:	6023      	str	r3, [r4, #0]
 80049ac:	e7f6      	b.n	800499c <_printf_i+0x194>
 80049ae:	4616      	mov	r6, r2
 80049b0:	e7bd      	b.n	800492e <_printf_i+0x126>
 80049b2:	6833      	ldr	r3, [r6, #0]
 80049b4:	6825      	ldr	r5, [r4, #0]
 80049b6:	1d18      	adds	r0, r3, #4
 80049b8:	6961      	ldr	r1, [r4, #20]
 80049ba:	6030      	str	r0, [r6, #0]
 80049bc:	062e      	lsls	r6, r5, #24
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	d501      	bpl.n	80049c6 <_printf_i+0x1be>
 80049c2:	6019      	str	r1, [r3, #0]
 80049c4:	e002      	b.n	80049cc <_printf_i+0x1c4>
 80049c6:	0668      	lsls	r0, r5, #25
 80049c8:	d5fb      	bpl.n	80049c2 <_printf_i+0x1ba>
 80049ca:	8019      	strh	r1, [r3, #0]
 80049cc:	2300      	movs	r3, #0
 80049ce:	4616      	mov	r6, r2
 80049d0:	6123      	str	r3, [r4, #16]
 80049d2:	e7bc      	b.n	800494e <_printf_i+0x146>
 80049d4:	6833      	ldr	r3, [r6, #0]
 80049d6:	2100      	movs	r1, #0
 80049d8:	1d1a      	adds	r2, r3, #4
 80049da:	6032      	str	r2, [r6, #0]
 80049dc:	681e      	ldr	r6, [r3, #0]
 80049de:	6862      	ldr	r2, [r4, #4]
 80049e0:	4630      	mov	r0, r6
 80049e2:	f000 f9b4 	bl	8004d4e <memchr>
 80049e6:	b108      	cbz	r0, 80049ec <_printf_i+0x1e4>
 80049e8:	1b80      	subs	r0, r0, r6
 80049ea:	6060      	str	r0, [r4, #4]
 80049ec:	6863      	ldr	r3, [r4, #4]
 80049ee:	6123      	str	r3, [r4, #16]
 80049f0:	2300      	movs	r3, #0
 80049f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049f6:	e7aa      	b.n	800494e <_printf_i+0x146>
 80049f8:	4632      	mov	r2, r6
 80049fa:	4649      	mov	r1, r9
 80049fc:	4640      	mov	r0, r8
 80049fe:	6923      	ldr	r3, [r4, #16]
 8004a00:	47d0      	blx	sl
 8004a02:	3001      	adds	r0, #1
 8004a04:	d0ad      	beq.n	8004962 <_printf_i+0x15a>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	079b      	lsls	r3, r3, #30
 8004a0a:	d413      	bmi.n	8004a34 <_printf_i+0x22c>
 8004a0c:	68e0      	ldr	r0, [r4, #12]
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	4298      	cmp	r0, r3
 8004a12:	bfb8      	it	lt
 8004a14:	4618      	movlt	r0, r3
 8004a16:	e7a6      	b.n	8004966 <_printf_i+0x15e>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4632      	mov	r2, r6
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	4640      	mov	r0, r8
 8004a20:	47d0      	blx	sl
 8004a22:	3001      	adds	r0, #1
 8004a24:	d09d      	beq.n	8004962 <_printf_i+0x15a>
 8004a26:	3501      	adds	r5, #1
 8004a28:	68e3      	ldr	r3, [r4, #12]
 8004a2a:	9903      	ldr	r1, [sp, #12]
 8004a2c:	1a5b      	subs	r3, r3, r1
 8004a2e:	42ab      	cmp	r3, r5
 8004a30:	dcf2      	bgt.n	8004a18 <_printf_i+0x210>
 8004a32:	e7eb      	b.n	8004a0c <_printf_i+0x204>
 8004a34:	2500      	movs	r5, #0
 8004a36:	f104 0619 	add.w	r6, r4, #25
 8004a3a:	e7f5      	b.n	8004a28 <_printf_i+0x220>
 8004a3c:	08006b04 	.word	0x08006b04
 8004a40:	08006b15 	.word	0x08006b15

08004a44 <std>:
 8004a44:	2300      	movs	r3, #0
 8004a46:	b510      	push	{r4, lr}
 8004a48:	4604      	mov	r4, r0
 8004a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a52:	6083      	str	r3, [r0, #8]
 8004a54:	8181      	strh	r1, [r0, #12]
 8004a56:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a58:	81c2      	strh	r2, [r0, #14]
 8004a5a:	6183      	str	r3, [r0, #24]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	2208      	movs	r2, #8
 8004a60:	305c      	adds	r0, #92	@ 0x5c
 8004a62:	f000 f8f4 	bl	8004c4e <memset>
 8004a66:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <std+0x58>)
 8004a68:	6224      	str	r4, [r4, #32]
 8004a6a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <std+0x5c>)
 8004a6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a70:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa4 <std+0x60>)
 8004a72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a74:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <std+0x64>)
 8004a76:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a78:	4b0c      	ldr	r3, [pc, #48]	@ (8004aac <std+0x68>)
 8004a7a:	429c      	cmp	r4, r3
 8004a7c:	d006      	beq.n	8004a8c <std+0x48>
 8004a7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a82:	4294      	cmp	r4, r2
 8004a84:	d002      	beq.n	8004a8c <std+0x48>
 8004a86:	33d0      	adds	r3, #208	@ 0xd0
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	d105      	bne.n	8004a98 <std+0x54>
 8004a8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a94:	f000 b958 	b.w	8004d48 <__retarget_lock_init_recursive>
 8004a98:	bd10      	pop	{r4, pc}
 8004a9a:	bf00      	nop
 8004a9c:	08004bc9 	.word	0x08004bc9
 8004aa0:	08004beb 	.word	0x08004beb
 8004aa4:	08004c23 	.word	0x08004c23
 8004aa8:	08004c47 	.word	0x08004c47
 8004aac:	20000530 	.word	0x20000530

08004ab0 <stdio_exit_handler>:
 8004ab0:	4a02      	ldr	r2, [pc, #8]	@ (8004abc <stdio_exit_handler+0xc>)
 8004ab2:	4903      	ldr	r1, [pc, #12]	@ (8004ac0 <stdio_exit_handler+0x10>)
 8004ab4:	4803      	ldr	r0, [pc, #12]	@ (8004ac4 <stdio_exit_handler+0x14>)
 8004ab6:	f000 b869 	b.w	8004b8c <_fwalk_sglue>
 8004aba:	bf00      	nop
 8004abc:	20000024 	.word	0x20000024
 8004ac0:	08006419 	.word	0x08006419
 8004ac4:	20000034 	.word	0x20000034

08004ac8 <cleanup_stdio>:
 8004ac8:	6841      	ldr	r1, [r0, #4]
 8004aca:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <cleanup_stdio+0x34>)
 8004acc:	b510      	push	{r4, lr}
 8004ace:	4299      	cmp	r1, r3
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	d001      	beq.n	8004ad8 <cleanup_stdio+0x10>
 8004ad4:	f001 fca0 	bl	8006418 <_fflush_r>
 8004ad8:	68a1      	ldr	r1, [r4, #8]
 8004ada:	4b09      	ldr	r3, [pc, #36]	@ (8004b00 <cleanup_stdio+0x38>)
 8004adc:	4299      	cmp	r1, r3
 8004ade:	d002      	beq.n	8004ae6 <cleanup_stdio+0x1e>
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f001 fc99 	bl	8006418 <_fflush_r>
 8004ae6:	68e1      	ldr	r1, [r4, #12]
 8004ae8:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <cleanup_stdio+0x3c>)
 8004aea:	4299      	cmp	r1, r3
 8004aec:	d004      	beq.n	8004af8 <cleanup_stdio+0x30>
 8004aee:	4620      	mov	r0, r4
 8004af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af4:	f001 bc90 	b.w	8006418 <_fflush_r>
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	bf00      	nop
 8004afc:	20000530 	.word	0x20000530
 8004b00:	20000598 	.word	0x20000598
 8004b04:	20000600 	.word	0x20000600

08004b08 <global_stdio_init.part.0>:
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <global_stdio_init.part.0+0x30>)
 8004b0c:	4c0b      	ldr	r4, [pc, #44]	@ (8004b3c <global_stdio_init.part.0+0x34>)
 8004b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004b40 <global_stdio_init.part.0+0x38>)
 8004b10:	4620      	mov	r0, r4
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	2104      	movs	r1, #4
 8004b16:	2200      	movs	r2, #0
 8004b18:	f7ff ff94 	bl	8004a44 <std>
 8004b1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b20:	2201      	movs	r2, #1
 8004b22:	2109      	movs	r1, #9
 8004b24:	f7ff ff8e 	bl	8004a44 <std>
 8004b28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b32:	2112      	movs	r1, #18
 8004b34:	f7ff bf86 	b.w	8004a44 <std>
 8004b38:	20000668 	.word	0x20000668
 8004b3c:	20000530 	.word	0x20000530
 8004b40:	08004ab1 	.word	0x08004ab1

08004b44 <__sfp_lock_acquire>:
 8004b44:	4801      	ldr	r0, [pc, #4]	@ (8004b4c <__sfp_lock_acquire+0x8>)
 8004b46:	f000 b900 	b.w	8004d4a <__retarget_lock_acquire_recursive>
 8004b4a:	bf00      	nop
 8004b4c:	20000671 	.word	0x20000671

08004b50 <__sfp_lock_release>:
 8004b50:	4801      	ldr	r0, [pc, #4]	@ (8004b58 <__sfp_lock_release+0x8>)
 8004b52:	f000 b8fb 	b.w	8004d4c <__retarget_lock_release_recursive>
 8004b56:	bf00      	nop
 8004b58:	20000671 	.word	0x20000671

08004b5c <__sinit>:
 8004b5c:	b510      	push	{r4, lr}
 8004b5e:	4604      	mov	r4, r0
 8004b60:	f7ff fff0 	bl	8004b44 <__sfp_lock_acquire>
 8004b64:	6a23      	ldr	r3, [r4, #32]
 8004b66:	b11b      	cbz	r3, 8004b70 <__sinit+0x14>
 8004b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b6c:	f7ff bff0 	b.w	8004b50 <__sfp_lock_release>
 8004b70:	4b04      	ldr	r3, [pc, #16]	@ (8004b84 <__sinit+0x28>)
 8004b72:	6223      	str	r3, [r4, #32]
 8004b74:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <__sinit+0x2c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f5      	bne.n	8004b68 <__sinit+0xc>
 8004b7c:	f7ff ffc4 	bl	8004b08 <global_stdio_init.part.0>
 8004b80:	e7f2      	b.n	8004b68 <__sinit+0xc>
 8004b82:	bf00      	nop
 8004b84:	08004ac9 	.word	0x08004ac9
 8004b88:	20000668 	.word	0x20000668

08004b8c <_fwalk_sglue>:
 8004b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b90:	4607      	mov	r7, r0
 8004b92:	4688      	mov	r8, r1
 8004b94:	4614      	mov	r4, r2
 8004b96:	2600      	movs	r6, #0
 8004b98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b9c:	f1b9 0901 	subs.w	r9, r9, #1
 8004ba0:	d505      	bpl.n	8004bae <_fwalk_sglue+0x22>
 8004ba2:	6824      	ldr	r4, [r4, #0]
 8004ba4:	2c00      	cmp	r4, #0
 8004ba6:	d1f7      	bne.n	8004b98 <_fwalk_sglue+0xc>
 8004ba8:	4630      	mov	r0, r6
 8004baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bae:	89ab      	ldrh	r3, [r5, #12]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d907      	bls.n	8004bc4 <_fwalk_sglue+0x38>
 8004bb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	d003      	beq.n	8004bc4 <_fwalk_sglue+0x38>
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	47c0      	blx	r8
 8004bc2:	4306      	orrs	r6, r0
 8004bc4:	3568      	adds	r5, #104	@ 0x68
 8004bc6:	e7e9      	b.n	8004b9c <_fwalk_sglue+0x10>

08004bc8 <__sread>:
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	460c      	mov	r4, r1
 8004bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd0:	f000 f86c 	bl	8004cac <_read_r>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	bfab      	itete	ge
 8004bd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004bda:	89a3      	ldrhlt	r3, [r4, #12]
 8004bdc:	181b      	addge	r3, r3, r0
 8004bde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004be2:	bfac      	ite	ge
 8004be4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004be6:	81a3      	strhlt	r3, [r4, #12]
 8004be8:	bd10      	pop	{r4, pc}

08004bea <__swrite>:
 8004bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bee:	461f      	mov	r7, r3
 8004bf0:	898b      	ldrh	r3, [r1, #12]
 8004bf2:	4605      	mov	r5, r0
 8004bf4:	05db      	lsls	r3, r3, #23
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	d505      	bpl.n	8004c08 <__swrite+0x1e>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c04:	f000 f840 	bl	8004c88 <_lseek_r>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	4632      	mov	r2, r6
 8004c0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c10:	81a3      	strh	r3, [r4, #12]
 8004c12:	4628      	mov	r0, r5
 8004c14:	463b      	mov	r3, r7
 8004c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1e:	f000 b857 	b.w	8004cd0 <_write_r>

08004c22 <__sseek>:
 8004c22:	b510      	push	{r4, lr}
 8004c24:	460c      	mov	r4, r1
 8004c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2a:	f000 f82d 	bl	8004c88 <_lseek_r>
 8004c2e:	1c43      	adds	r3, r0, #1
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	bf15      	itete	ne
 8004c34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c3e:	81a3      	strheq	r3, [r4, #12]
 8004c40:	bf18      	it	ne
 8004c42:	81a3      	strhne	r3, [r4, #12]
 8004c44:	bd10      	pop	{r4, pc}

08004c46 <__sclose>:
 8004c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c4a:	f000 b80d 	b.w	8004c68 <_close_r>

08004c4e <memset>:
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4402      	add	r2, r0
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d100      	bne.n	8004c58 <memset+0xa>
 8004c56:	4770      	bx	lr
 8004c58:	f803 1b01 	strb.w	r1, [r3], #1
 8004c5c:	e7f9      	b.n	8004c52 <memset+0x4>
	...

08004c60 <_localeconv_r>:
 8004c60:	4800      	ldr	r0, [pc, #0]	@ (8004c64 <_localeconv_r+0x4>)
 8004c62:	4770      	bx	lr
 8004c64:	20000170 	.word	0x20000170

08004c68 <_close_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4d05      	ldr	r5, [pc, #20]	@ (8004c84 <_close_r+0x1c>)
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	f7fc fe45 	bl	8001902 <_close>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_close_r+0x1a>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_close_r+0x1a>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	2000066c 	.word	0x2000066c

08004c88 <_lseek_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	2200      	movs	r2, #0
 8004c92:	4d05      	ldr	r5, [pc, #20]	@ (8004ca8 <_lseek_r+0x20>)
 8004c94:	602a      	str	r2, [r5, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f7fc fe57 	bl	800194a <_lseek>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_lseek_r+0x1e>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_lseek_r+0x1e>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	2000066c 	.word	0x2000066c

08004cac <_read_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4d05      	ldr	r5, [pc, #20]	@ (8004ccc <_read_r+0x20>)
 8004cb8:	602a      	str	r2, [r5, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f7fc fde8 	bl	8001890 <_read>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_read_r+0x1e>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_read_r+0x1e>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	2000066c 	.word	0x2000066c

08004cd0 <_write_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	2200      	movs	r2, #0
 8004cda:	4d05      	ldr	r5, [pc, #20]	@ (8004cf0 <_write_r+0x20>)
 8004cdc:	602a      	str	r2, [r5, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f7fc fdf3 	bl	80018ca <_write>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_write_r+0x1e>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_write_r+0x1e>
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	2000066c 	.word	0x2000066c

08004cf4 <__errno>:
 8004cf4:	4b01      	ldr	r3, [pc, #4]	@ (8004cfc <__errno+0x8>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000030 	.word	0x20000030

08004d00 <__libc_init_array>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	2600      	movs	r6, #0
 8004d04:	4d0c      	ldr	r5, [pc, #48]	@ (8004d38 <__libc_init_array+0x38>)
 8004d06:	4c0d      	ldr	r4, [pc, #52]	@ (8004d3c <__libc_init_array+0x3c>)
 8004d08:	1b64      	subs	r4, r4, r5
 8004d0a:	10a4      	asrs	r4, r4, #2
 8004d0c:	42a6      	cmp	r6, r4
 8004d0e:	d109      	bne.n	8004d24 <__libc_init_array+0x24>
 8004d10:	f001 fece 	bl	8006ab0 <_init>
 8004d14:	2600      	movs	r6, #0
 8004d16:	4d0a      	ldr	r5, [pc, #40]	@ (8004d40 <__libc_init_array+0x40>)
 8004d18:	4c0a      	ldr	r4, [pc, #40]	@ (8004d44 <__libc_init_array+0x44>)
 8004d1a:	1b64      	subs	r4, r4, r5
 8004d1c:	10a4      	asrs	r4, r4, #2
 8004d1e:	42a6      	cmp	r6, r4
 8004d20:	d105      	bne.n	8004d2e <__libc_init_array+0x2e>
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d28:	4798      	blx	r3
 8004d2a:	3601      	adds	r6, #1
 8004d2c:	e7ee      	b.n	8004d0c <__libc_init_array+0xc>
 8004d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d32:	4798      	blx	r3
 8004d34:	3601      	adds	r6, #1
 8004d36:	e7f2      	b.n	8004d1e <__libc_init_array+0x1e>
 8004d38:	08006e6c 	.word	0x08006e6c
 8004d3c:	08006e6c 	.word	0x08006e6c
 8004d40:	08006e6c 	.word	0x08006e6c
 8004d44:	08006e70 	.word	0x08006e70

08004d48 <__retarget_lock_init_recursive>:
 8004d48:	4770      	bx	lr

08004d4a <__retarget_lock_acquire_recursive>:
 8004d4a:	4770      	bx	lr

08004d4c <__retarget_lock_release_recursive>:
 8004d4c:	4770      	bx	lr

08004d4e <memchr>:
 8004d4e:	4603      	mov	r3, r0
 8004d50:	b510      	push	{r4, lr}
 8004d52:	b2c9      	uxtb	r1, r1
 8004d54:	4402      	add	r2, r0
 8004d56:	4293      	cmp	r3, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	d101      	bne.n	8004d60 <memchr+0x12>
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	e003      	b.n	8004d68 <memchr+0x1a>
 8004d60:	7804      	ldrb	r4, [r0, #0]
 8004d62:	3301      	adds	r3, #1
 8004d64:	428c      	cmp	r4, r1
 8004d66:	d1f6      	bne.n	8004d56 <memchr+0x8>
 8004d68:	bd10      	pop	{r4, pc}

08004d6a <quorem>:
 8004d6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6e:	6903      	ldr	r3, [r0, #16]
 8004d70:	690c      	ldr	r4, [r1, #16]
 8004d72:	4607      	mov	r7, r0
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	db7e      	blt.n	8004e76 <quorem+0x10c>
 8004d78:	3c01      	subs	r4, #1
 8004d7a:	00a3      	lsls	r3, r4, #2
 8004d7c:	f100 0514 	add.w	r5, r0, #20
 8004d80:	f101 0814 	add.w	r8, r1, #20
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d94:	3301      	adds	r3, #1
 8004d96:	429a      	cmp	r2, r3
 8004d98:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004da0:	d32e      	bcc.n	8004e00 <quorem+0x96>
 8004da2:	f04f 0a00 	mov.w	sl, #0
 8004da6:	46c4      	mov	ip, r8
 8004da8:	46ae      	mov	lr, r5
 8004daa:	46d3      	mov	fp, sl
 8004dac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004db0:	b298      	uxth	r0, r3
 8004db2:	fb06 a000 	mla	r0, r6, r0, sl
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	0c02      	lsrs	r2, r0, #16
 8004dba:	fb06 2303 	mla	r3, r6, r3, r2
 8004dbe:	f8de 2000 	ldr.w	r2, [lr]
 8004dc2:	b280      	uxth	r0, r0
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	1a12      	subs	r2, r2, r0
 8004dc8:	445a      	add	r2, fp
 8004dca:	f8de 0000 	ldr.w	r0, [lr]
 8004dce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004dd8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ddc:	b292      	uxth	r2, r2
 8004dde:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004de2:	45e1      	cmp	r9, ip
 8004de4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004de8:	f84e 2b04 	str.w	r2, [lr], #4
 8004dec:	d2de      	bcs.n	8004dac <quorem+0x42>
 8004dee:	9b00      	ldr	r3, [sp, #0]
 8004df0:	58eb      	ldr	r3, [r5, r3]
 8004df2:	b92b      	cbnz	r3, 8004e00 <quorem+0x96>
 8004df4:	9b01      	ldr	r3, [sp, #4]
 8004df6:	3b04      	subs	r3, #4
 8004df8:	429d      	cmp	r5, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	d32f      	bcc.n	8004e5e <quorem+0xf4>
 8004dfe:	613c      	str	r4, [r7, #16]
 8004e00:	4638      	mov	r0, r7
 8004e02:	f001 f981 	bl	8006108 <__mcmp>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	db25      	blt.n	8004e56 <quorem+0xec>
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e12:	f8d1 c000 	ldr.w	ip, [r1]
 8004e16:	fa1f fe82 	uxth.w	lr, r2
 8004e1a:	fa1f f38c 	uxth.w	r3, ip
 8004e1e:	eba3 030e 	sub.w	r3, r3, lr
 8004e22:	4403      	add	r3, r0
 8004e24:	0c12      	lsrs	r2, r2, #16
 8004e26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004e2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e34:	45c1      	cmp	r9, r8
 8004e36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e3a:	f841 3b04 	str.w	r3, [r1], #4
 8004e3e:	d2e6      	bcs.n	8004e0e <quorem+0xa4>
 8004e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e48:	b922      	cbnz	r2, 8004e54 <quorem+0xea>
 8004e4a:	3b04      	subs	r3, #4
 8004e4c:	429d      	cmp	r5, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	d30b      	bcc.n	8004e6a <quorem+0x100>
 8004e52:	613c      	str	r4, [r7, #16]
 8004e54:	3601      	adds	r6, #1
 8004e56:	4630      	mov	r0, r6
 8004e58:	b003      	add	sp, #12
 8004e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	d1cb      	bne.n	8004dfe <quorem+0x94>
 8004e66:	3c01      	subs	r4, #1
 8004e68:	e7c6      	b.n	8004df8 <quorem+0x8e>
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	3b04      	subs	r3, #4
 8004e6e:	2a00      	cmp	r2, #0
 8004e70:	d1ef      	bne.n	8004e52 <quorem+0xe8>
 8004e72:	3c01      	subs	r4, #1
 8004e74:	e7ea      	b.n	8004e4c <quorem+0xe2>
 8004e76:	2000      	movs	r0, #0
 8004e78:	e7ee      	b.n	8004e58 <quorem+0xee>
 8004e7a:	0000      	movs	r0, r0
 8004e7c:	0000      	movs	r0, r0
	...

08004e80 <_dtoa_r>:
 8004e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e84:	4614      	mov	r4, r2
 8004e86:	461d      	mov	r5, r3
 8004e88:	69c7      	ldr	r7, [r0, #28]
 8004e8a:	b097      	sub	sp, #92	@ 0x5c
 8004e8c:	4681      	mov	r9, r0
 8004e8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004e92:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004e94:	b97f      	cbnz	r7, 8004eb6 <_dtoa_r+0x36>
 8004e96:	2010      	movs	r0, #16
 8004e98:	f000 fe0e 	bl	8005ab8 <malloc>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004ea2:	b920      	cbnz	r0, 8004eae <_dtoa_r+0x2e>
 8004ea4:	21ef      	movs	r1, #239	@ 0xef
 8004ea6:	4bac      	ldr	r3, [pc, #688]	@ (8005158 <_dtoa_r+0x2d8>)
 8004ea8:	48ac      	ldr	r0, [pc, #688]	@ (800515c <_dtoa_r+0x2dc>)
 8004eaa:	f001 fafb 	bl	80064a4 <__assert_func>
 8004eae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004eb2:	6007      	str	r7, [r0, #0]
 8004eb4:	60c7      	str	r7, [r0, #12]
 8004eb6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004eba:	6819      	ldr	r1, [r3, #0]
 8004ebc:	b159      	cbz	r1, 8004ed6 <_dtoa_r+0x56>
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	4093      	lsls	r3, r2
 8004ec4:	604a      	str	r2, [r1, #4]
 8004ec6:	608b      	str	r3, [r1, #8]
 8004ec8:	4648      	mov	r0, r9
 8004eca:	f000 feeb 	bl	8005ca4 <_Bfree>
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	1e2b      	subs	r3, r5, #0
 8004ed8:	bfaf      	iteee	ge
 8004eda:	2300      	movge	r3, #0
 8004edc:	2201      	movlt	r2, #1
 8004ede:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004ee2:	9307      	strlt	r3, [sp, #28]
 8004ee4:	bfa8      	it	ge
 8004ee6:	6033      	strge	r3, [r6, #0]
 8004ee8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004eec:	4b9c      	ldr	r3, [pc, #624]	@ (8005160 <_dtoa_r+0x2e0>)
 8004eee:	bfb8      	it	lt
 8004ef0:	6032      	strlt	r2, [r6, #0]
 8004ef2:	ea33 0308 	bics.w	r3, r3, r8
 8004ef6:	d112      	bne.n	8004f1e <_dtoa_r+0x9e>
 8004ef8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004efc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004f04:	4323      	orrs	r3, r4
 8004f06:	f000 855e 	beq.w	80059c6 <_dtoa_r+0xb46>
 8004f0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005164 <_dtoa_r+0x2e4>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8560 	beq.w	80059d6 <_dtoa_r+0xb56>
 8004f16:	f10a 0303 	add.w	r3, sl, #3
 8004f1a:	f000 bd5a 	b.w	80059d2 <_dtoa_r+0xb52>
 8004f1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f7fb fd3b 	bl	80009a8 <__aeabi_dcmpeq>
 8004f32:	4607      	mov	r7, r0
 8004f34:	b158      	cbz	r0, 8004f4e <_dtoa_r+0xce>
 8004f36:	2301      	movs	r3, #1
 8004f38:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f3e:	b113      	cbz	r3, 8004f46 <_dtoa_r+0xc6>
 8004f40:	4b89      	ldr	r3, [pc, #548]	@ (8005168 <_dtoa_r+0x2e8>)
 8004f42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800516c <_dtoa_r+0x2ec>
 8004f4a:	f000 bd44 	b.w	80059d6 <_dtoa_r+0xb56>
 8004f4e:	ab14      	add	r3, sp, #80	@ 0x50
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	ab15      	add	r3, sp, #84	@ 0x54
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	4648      	mov	r0, r9
 8004f58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004f5c:	f001 f984 	bl	8006268 <__d2b>
 8004f60:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004f64:	9003      	str	r0, [sp, #12]
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	d078      	beq.n	800505c <_dtoa_r+0x1dc>
 8004f6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f70:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f78:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f7c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004f80:	9712      	str	r7, [sp, #72]	@ 0x48
 8004f82:	4619      	mov	r1, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	4b7a      	ldr	r3, [pc, #488]	@ (8005170 <_dtoa_r+0x2f0>)
 8004f88:	f7fb f8ee 	bl	8000168 <__aeabi_dsub>
 8004f8c:	a36c      	add	r3, pc, #432	@ (adr r3, 8005140 <_dtoa_r+0x2c0>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f7fb faa1 	bl	80004d8 <__aeabi_dmul>
 8004f96:	a36c      	add	r3, pc, #432	@ (adr r3, 8005148 <_dtoa_r+0x2c8>)
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f7fb f8e6 	bl	800016c <__adddf3>
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	460d      	mov	r5, r1
 8004fa6:	f7fb fa2d 	bl	8000404 <__aeabi_i2d>
 8004faa:	a369      	add	r3, pc, #420	@ (adr r3, 8005150 <_dtoa_r+0x2d0>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb fa92 	bl	80004d8 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	f7fb f8d6 	bl	800016c <__adddf3>
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	460d      	mov	r5, r1
 8004fc4:	f7fb fd38 	bl	8000a38 <__aeabi_d2iz>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4607      	mov	r7, r0
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4620      	mov	r0, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	f7fb fcf3 	bl	80009bc <__aeabi_dcmplt>
 8004fd6:	b140      	cbz	r0, 8004fea <_dtoa_r+0x16a>
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f7fb fa13 	bl	8000404 <__aeabi_i2d>
 8004fde:	4622      	mov	r2, r4
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	f7fb fce1 	bl	80009a8 <__aeabi_dcmpeq>
 8004fe6:	b900      	cbnz	r0, 8004fea <_dtoa_r+0x16a>
 8004fe8:	3f01      	subs	r7, #1
 8004fea:	2f16      	cmp	r7, #22
 8004fec:	d854      	bhi.n	8005098 <_dtoa_r+0x218>
 8004fee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ff2:	4b60      	ldr	r3, [pc, #384]	@ (8005174 <_dtoa_r+0x2f4>)
 8004ff4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f7fb fcde 	bl	80009bc <__aeabi_dcmplt>
 8005000:	2800      	cmp	r0, #0
 8005002:	d04b      	beq.n	800509c <_dtoa_r+0x21c>
 8005004:	2300      	movs	r3, #0
 8005006:	3f01      	subs	r7, #1
 8005008:	930f      	str	r3, [sp, #60]	@ 0x3c
 800500a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800500c:	1b9b      	subs	r3, r3, r6
 800500e:	1e5a      	subs	r2, r3, #1
 8005010:	bf49      	itett	mi
 8005012:	f1c3 0301 	rsbmi	r3, r3, #1
 8005016:	2300      	movpl	r3, #0
 8005018:	9304      	strmi	r3, [sp, #16]
 800501a:	2300      	movmi	r3, #0
 800501c:	9209      	str	r2, [sp, #36]	@ 0x24
 800501e:	bf54      	ite	pl
 8005020:	9304      	strpl	r3, [sp, #16]
 8005022:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005024:	2f00      	cmp	r7, #0
 8005026:	db3b      	blt.n	80050a0 <_dtoa_r+0x220>
 8005028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800502a:	970e      	str	r7, [sp, #56]	@ 0x38
 800502c:	443b      	add	r3, r7
 800502e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005030:	2300      	movs	r3, #0
 8005032:	930a      	str	r3, [sp, #40]	@ 0x28
 8005034:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005036:	2b09      	cmp	r3, #9
 8005038:	d865      	bhi.n	8005106 <_dtoa_r+0x286>
 800503a:	2b05      	cmp	r3, #5
 800503c:	bfc4      	itt	gt
 800503e:	3b04      	subgt	r3, #4
 8005040:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005042:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005044:	bfc8      	it	gt
 8005046:	2400      	movgt	r4, #0
 8005048:	f1a3 0302 	sub.w	r3, r3, #2
 800504c:	bfd8      	it	le
 800504e:	2401      	movle	r4, #1
 8005050:	2b03      	cmp	r3, #3
 8005052:	d864      	bhi.n	800511e <_dtoa_r+0x29e>
 8005054:	e8df f003 	tbb	[pc, r3]
 8005058:	2c385553 	.word	0x2c385553
 800505c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005060:	441e      	add	r6, r3
 8005062:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005066:	2b20      	cmp	r3, #32
 8005068:	bfc1      	itttt	gt
 800506a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800506e:	fa08 f803 	lslgt.w	r8, r8, r3
 8005072:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005076:	fa24 f303 	lsrgt.w	r3, r4, r3
 800507a:	bfd6      	itet	le
 800507c:	f1c3 0320 	rsble	r3, r3, #32
 8005080:	ea48 0003 	orrgt.w	r0, r8, r3
 8005084:	fa04 f003 	lslle.w	r0, r4, r3
 8005088:	f7fb f9ac 	bl	80003e4 <__aeabi_ui2d>
 800508c:	2201      	movs	r2, #1
 800508e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005092:	3e01      	subs	r6, #1
 8005094:	9212      	str	r2, [sp, #72]	@ 0x48
 8005096:	e774      	b.n	8004f82 <_dtoa_r+0x102>
 8005098:	2301      	movs	r3, #1
 800509a:	e7b5      	b.n	8005008 <_dtoa_r+0x188>
 800509c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800509e:	e7b4      	b.n	800500a <_dtoa_r+0x18a>
 80050a0:	9b04      	ldr	r3, [sp, #16]
 80050a2:	1bdb      	subs	r3, r3, r7
 80050a4:	9304      	str	r3, [sp, #16]
 80050a6:	427b      	negs	r3, r7
 80050a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80050aa:	2300      	movs	r3, #0
 80050ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80050ae:	e7c1      	b.n	8005034 <_dtoa_r+0x1b4>
 80050b0:	2301      	movs	r3, #1
 80050b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050b6:	eb07 0b03 	add.w	fp, r7, r3
 80050ba:	f10b 0301 	add.w	r3, fp, #1
 80050be:	2b01      	cmp	r3, #1
 80050c0:	9308      	str	r3, [sp, #32]
 80050c2:	bfb8      	it	lt
 80050c4:	2301      	movlt	r3, #1
 80050c6:	e006      	b.n	80050d6 <_dtoa_r+0x256>
 80050c8:	2301      	movs	r3, #1
 80050ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	dd28      	ble.n	8005124 <_dtoa_r+0x2a4>
 80050d2:	469b      	mov	fp, r3
 80050d4:	9308      	str	r3, [sp, #32]
 80050d6:	2100      	movs	r1, #0
 80050d8:	2204      	movs	r2, #4
 80050da:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80050de:	f102 0514 	add.w	r5, r2, #20
 80050e2:	429d      	cmp	r5, r3
 80050e4:	d926      	bls.n	8005134 <_dtoa_r+0x2b4>
 80050e6:	6041      	str	r1, [r0, #4]
 80050e8:	4648      	mov	r0, r9
 80050ea:	f000 fd9b 	bl	8005c24 <_Balloc>
 80050ee:	4682      	mov	sl, r0
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d143      	bne.n	800517c <_dtoa_r+0x2fc>
 80050f4:	4602      	mov	r2, r0
 80050f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80050fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005178 <_dtoa_r+0x2f8>)
 80050fc:	e6d4      	b.n	8004ea8 <_dtoa_r+0x28>
 80050fe:	2300      	movs	r3, #0
 8005100:	e7e3      	b.n	80050ca <_dtoa_r+0x24a>
 8005102:	2300      	movs	r3, #0
 8005104:	e7d5      	b.n	80050b2 <_dtoa_r+0x232>
 8005106:	2401      	movs	r4, #1
 8005108:	2300      	movs	r3, #0
 800510a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800510c:	9320      	str	r3, [sp, #128]	@ 0x80
 800510e:	f04f 3bff 	mov.w	fp, #4294967295
 8005112:	2200      	movs	r2, #0
 8005114:	2312      	movs	r3, #18
 8005116:	f8cd b020 	str.w	fp, [sp, #32]
 800511a:	9221      	str	r2, [sp, #132]	@ 0x84
 800511c:	e7db      	b.n	80050d6 <_dtoa_r+0x256>
 800511e:	2301      	movs	r3, #1
 8005120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005122:	e7f4      	b.n	800510e <_dtoa_r+0x28e>
 8005124:	f04f 0b01 	mov.w	fp, #1
 8005128:	465b      	mov	r3, fp
 800512a:	f8cd b020 	str.w	fp, [sp, #32]
 800512e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005132:	e7d0      	b.n	80050d6 <_dtoa_r+0x256>
 8005134:	3101      	adds	r1, #1
 8005136:	0052      	lsls	r2, r2, #1
 8005138:	e7d1      	b.n	80050de <_dtoa_r+0x25e>
 800513a:	bf00      	nop
 800513c:	f3af 8000 	nop.w
 8005140:	636f4361 	.word	0x636f4361
 8005144:	3fd287a7 	.word	0x3fd287a7
 8005148:	8b60c8b3 	.word	0x8b60c8b3
 800514c:	3fc68a28 	.word	0x3fc68a28
 8005150:	509f79fb 	.word	0x509f79fb
 8005154:	3fd34413 	.word	0x3fd34413
 8005158:	08006b33 	.word	0x08006b33
 800515c:	08006b4a 	.word	0x08006b4a
 8005160:	7ff00000 	.word	0x7ff00000
 8005164:	08006b2f 	.word	0x08006b2f
 8005168:	08006b03 	.word	0x08006b03
 800516c:	08006b02 	.word	0x08006b02
 8005170:	3ff80000 	.word	0x3ff80000
 8005174:	08006c98 	.word	0x08006c98
 8005178:	08006ba2 	.word	0x08006ba2
 800517c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005180:	6018      	str	r0, [r3, #0]
 8005182:	9b08      	ldr	r3, [sp, #32]
 8005184:	2b0e      	cmp	r3, #14
 8005186:	f200 80a1 	bhi.w	80052cc <_dtoa_r+0x44c>
 800518a:	2c00      	cmp	r4, #0
 800518c:	f000 809e 	beq.w	80052cc <_dtoa_r+0x44c>
 8005190:	2f00      	cmp	r7, #0
 8005192:	dd33      	ble.n	80051fc <_dtoa_r+0x37c>
 8005194:	4b9c      	ldr	r3, [pc, #624]	@ (8005408 <_dtoa_r+0x588>)
 8005196:	f007 020f 	and.w	r2, r7, #15
 800519a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800519e:	05f8      	lsls	r0, r7, #23
 80051a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80051a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80051ac:	d516      	bpl.n	80051dc <_dtoa_r+0x35c>
 80051ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051b2:	4b96      	ldr	r3, [pc, #600]	@ (800540c <_dtoa_r+0x58c>)
 80051b4:	2603      	movs	r6, #3
 80051b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051ba:	f7fb fab7 	bl	800072c <__aeabi_ddiv>
 80051be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80051c2:	f004 040f 	and.w	r4, r4, #15
 80051c6:	4d91      	ldr	r5, [pc, #580]	@ (800540c <_dtoa_r+0x58c>)
 80051c8:	b954      	cbnz	r4, 80051e0 <_dtoa_r+0x360>
 80051ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80051ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051d2:	f7fb faab 	bl	800072c <__aeabi_ddiv>
 80051d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80051da:	e028      	b.n	800522e <_dtoa_r+0x3ae>
 80051dc:	2602      	movs	r6, #2
 80051de:	e7f2      	b.n	80051c6 <_dtoa_r+0x346>
 80051e0:	07e1      	lsls	r1, r4, #31
 80051e2:	d508      	bpl.n	80051f6 <_dtoa_r+0x376>
 80051e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80051e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051ec:	f7fb f974 	bl	80004d8 <__aeabi_dmul>
 80051f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051f4:	3601      	adds	r6, #1
 80051f6:	1064      	asrs	r4, r4, #1
 80051f8:	3508      	adds	r5, #8
 80051fa:	e7e5      	b.n	80051c8 <_dtoa_r+0x348>
 80051fc:	f000 80af 	beq.w	800535e <_dtoa_r+0x4de>
 8005200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005204:	427c      	negs	r4, r7
 8005206:	4b80      	ldr	r3, [pc, #512]	@ (8005408 <_dtoa_r+0x588>)
 8005208:	f004 020f 	and.w	r2, r4, #15
 800520c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fb f960 	bl	80004d8 <__aeabi_dmul>
 8005218:	2602      	movs	r6, #2
 800521a:	2300      	movs	r3, #0
 800521c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005220:	4d7a      	ldr	r5, [pc, #488]	@ (800540c <_dtoa_r+0x58c>)
 8005222:	1124      	asrs	r4, r4, #4
 8005224:	2c00      	cmp	r4, #0
 8005226:	f040 808f 	bne.w	8005348 <_dtoa_r+0x4c8>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1d3      	bne.n	80051d6 <_dtoa_r+0x356>
 800522e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005232:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8094 	beq.w	8005362 <_dtoa_r+0x4e2>
 800523a:	2200      	movs	r2, #0
 800523c:	4620      	mov	r0, r4
 800523e:	4629      	mov	r1, r5
 8005240:	4b73      	ldr	r3, [pc, #460]	@ (8005410 <_dtoa_r+0x590>)
 8005242:	f7fb fbbb 	bl	80009bc <__aeabi_dcmplt>
 8005246:	2800      	cmp	r0, #0
 8005248:	f000 808b 	beq.w	8005362 <_dtoa_r+0x4e2>
 800524c:	9b08      	ldr	r3, [sp, #32]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8087 	beq.w	8005362 <_dtoa_r+0x4e2>
 8005254:	f1bb 0f00 	cmp.w	fp, #0
 8005258:	dd34      	ble.n	80052c4 <_dtoa_r+0x444>
 800525a:	4620      	mov	r0, r4
 800525c:	2200      	movs	r2, #0
 800525e:	4629      	mov	r1, r5
 8005260:	4b6c      	ldr	r3, [pc, #432]	@ (8005414 <_dtoa_r+0x594>)
 8005262:	f7fb f939 	bl	80004d8 <__aeabi_dmul>
 8005266:	465c      	mov	r4, fp
 8005268:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800526c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005270:	3601      	adds	r6, #1
 8005272:	4630      	mov	r0, r6
 8005274:	f7fb f8c6 	bl	8000404 <__aeabi_i2d>
 8005278:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800527c:	f7fb f92c 	bl	80004d8 <__aeabi_dmul>
 8005280:	2200      	movs	r2, #0
 8005282:	4b65      	ldr	r3, [pc, #404]	@ (8005418 <_dtoa_r+0x598>)
 8005284:	f7fa ff72 	bl	800016c <__adddf3>
 8005288:	4605      	mov	r5, r0
 800528a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800528e:	2c00      	cmp	r4, #0
 8005290:	d16a      	bne.n	8005368 <_dtoa_r+0x4e8>
 8005292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005296:	2200      	movs	r2, #0
 8005298:	4b60      	ldr	r3, [pc, #384]	@ (800541c <_dtoa_r+0x59c>)
 800529a:	f7fa ff65 	bl	8000168 <__aeabi_dsub>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80052a6:	462a      	mov	r2, r5
 80052a8:	4633      	mov	r3, r6
 80052aa:	f7fb fba5 	bl	80009f8 <__aeabi_dcmpgt>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	f040 8298 	bne.w	80057e4 <_dtoa_r+0x964>
 80052b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052b8:	462a      	mov	r2, r5
 80052ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80052be:	f7fb fb7d 	bl	80009bc <__aeabi_dcmplt>
 80052c2:	bb38      	cbnz	r0, 8005314 <_dtoa_r+0x494>
 80052c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80052c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80052cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f2c0 8157 	blt.w	8005582 <_dtoa_r+0x702>
 80052d4:	2f0e      	cmp	r7, #14
 80052d6:	f300 8154 	bgt.w	8005582 <_dtoa_r+0x702>
 80052da:	4b4b      	ldr	r3, [pc, #300]	@ (8005408 <_dtoa_r+0x588>)
 80052dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f280 80e5 	bge.w	80054ba <_dtoa_r+0x63a>
 80052f0:	9b08      	ldr	r3, [sp, #32]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f300 80e1 	bgt.w	80054ba <_dtoa_r+0x63a>
 80052f8:	d10c      	bne.n	8005314 <_dtoa_r+0x494>
 80052fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052fe:	2200      	movs	r2, #0
 8005300:	4b46      	ldr	r3, [pc, #280]	@ (800541c <_dtoa_r+0x59c>)
 8005302:	f7fb f8e9 	bl	80004d8 <__aeabi_dmul>
 8005306:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800530a:	f7fb fb6b 	bl	80009e4 <__aeabi_dcmpge>
 800530e:	2800      	cmp	r0, #0
 8005310:	f000 8266 	beq.w	80057e0 <_dtoa_r+0x960>
 8005314:	2400      	movs	r4, #0
 8005316:	4625      	mov	r5, r4
 8005318:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800531a:	4656      	mov	r6, sl
 800531c:	ea6f 0803 	mvn.w	r8, r3
 8005320:	2700      	movs	r7, #0
 8005322:	4621      	mov	r1, r4
 8005324:	4648      	mov	r0, r9
 8005326:	f000 fcbd 	bl	8005ca4 <_Bfree>
 800532a:	2d00      	cmp	r5, #0
 800532c:	f000 80bd 	beq.w	80054aa <_dtoa_r+0x62a>
 8005330:	b12f      	cbz	r7, 800533e <_dtoa_r+0x4be>
 8005332:	42af      	cmp	r7, r5
 8005334:	d003      	beq.n	800533e <_dtoa_r+0x4be>
 8005336:	4639      	mov	r1, r7
 8005338:	4648      	mov	r0, r9
 800533a:	f000 fcb3 	bl	8005ca4 <_Bfree>
 800533e:	4629      	mov	r1, r5
 8005340:	4648      	mov	r0, r9
 8005342:	f000 fcaf 	bl	8005ca4 <_Bfree>
 8005346:	e0b0      	b.n	80054aa <_dtoa_r+0x62a>
 8005348:	07e2      	lsls	r2, r4, #31
 800534a:	d505      	bpl.n	8005358 <_dtoa_r+0x4d8>
 800534c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005350:	f7fb f8c2 	bl	80004d8 <__aeabi_dmul>
 8005354:	2301      	movs	r3, #1
 8005356:	3601      	adds	r6, #1
 8005358:	1064      	asrs	r4, r4, #1
 800535a:	3508      	adds	r5, #8
 800535c:	e762      	b.n	8005224 <_dtoa_r+0x3a4>
 800535e:	2602      	movs	r6, #2
 8005360:	e765      	b.n	800522e <_dtoa_r+0x3ae>
 8005362:	46b8      	mov	r8, r7
 8005364:	9c08      	ldr	r4, [sp, #32]
 8005366:	e784      	b.n	8005272 <_dtoa_r+0x3f2>
 8005368:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <_dtoa_r+0x588>)
 800536a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800536c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005370:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005374:	4454      	add	r4, sl
 8005376:	2900      	cmp	r1, #0
 8005378:	d054      	beq.n	8005424 <_dtoa_r+0x5a4>
 800537a:	2000      	movs	r0, #0
 800537c:	4928      	ldr	r1, [pc, #160]	@ (8005420 <_dtoa_r+0x5a0>)
 800537e:	f7fb f9d5 	bl	800072c <__aeabi_ddiv>
 8005382:	4633      	mov	r3, r6
 8005384:	462a      	mov	r2, r5
 8005386:	f7fa feef 	bl	8000168 <__aeabi_dsub>
 800538a:	4656      	mov	r6, sl
 800538c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005390:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005394:	f7fb fb50 	bl	8000a38 <__aeabi_d2iz>
 8005398:	4605      	mov	r5, r0
 800539a:	f7fb f833 	bl	8000404 <__aeabi_i2d>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053a6:	f7fa fedf 	bl	8000168 <__aeabi_dsub>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	3530      	adds	r5, #48	@ 0x30
 80053b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80053b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053b8:	f806 5b01 	strb.w	r5, [r6], #1
 80053bc:	f7fb fafe 	bl	80009bc <__aeabi_dcmplt>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d172      	bne.n	80054aa <_dtoa_r+0x62a>
 80053c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053c8:	2000      	movs	r0, #0
 80053ca:	4911      	ldr	r1, [pc, #68]	@ (8005410 <_dtoa_r+0x590>)
 80053cc:	f7fa fecc 	bl	8000168 <__aeabi_dsub>
 80053d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053d4:	f7fb faf2 	bl	80009bc <__aeabi_dcmplt>
 80053d8:	2800      	cmp	r0, #0
 80053da:	f040 80b4 	bne.w	8005546 <_dtoa_r+0x6c6>
 80053de:	42a6      	cmp	r6, r4
 80053e0:	f43f af70 	beq.w	80052c4 <_dtoa_r+0x444>
 80053e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80053e8:	2200      	movs	r2, #0
 80053ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <_dtoa_r+0x594>)
 80053ec:	f7fb f874 	bl	80004d8 <__aeabi_dmul>
 80053f0:	2200      	movs	r2, #0
 80053f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053fa:	4b06      	ldr	r3, [pc, #24]	@ (8005414 <_dtoa_r+0x594>)
 80053fc:	f7fb f86c 	bl	80004d8 <__aeabi_dmul>
 8005400:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005404:	e7c4      	b.n	8005390 <_dtoa_r+0x510>
 8005406:	bf00      	nop
 8005408:	08006c98 	.word	0x08006c98
 800540c:	08006c70 	.word	0x08006c70
 8005410:	3ff00000 	.word	0x3ff00000
 8005414:	40240000 	.word	0x40240000
 8005418:	401c0000 	.word	0x401c0000
 800541c:	40140000 	.word	0x40140000
 8005420:	3fe00000 	.word	0x3fe00000
 8005424:	4631      	mov	r1, r6
 8005426:	4628      	mov	r0, r5
 8005428:	f7fb f856 	bl	80004d8 <__aeabi_dmul>
 800542c:	4656      	mov	r6, sl
 800542e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005432:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005438:	f7fb fafe 	bl	8000a38 <__aeabi_d2iz>
 800543c:	4605      	mov	r5, r0
 800543e:	f7fa ffe1 	bl	8000404 <__aeabi_i2d>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800544a:	f7fa fe8d 	bl	8000168 <__aeabi_dsub>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	3530      	adds	r5, #48	@ 0x30
 8005454:	f806 5b01 	strb.w	r5, [r6], #1
 8005458:	42a6      	cmp	r6, r4
 800545a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	d124      	bne.n	80054ae <_dtoa_r+0x62e>
 8005464:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005468:	4bae      	ldr	r3, [pc, #696]	@ (8005724 <_dtoa_r+0x8a4>)
 800546a:	f7fa fe7f 	bl	800016c <__adddf3>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005476:	f7fb fabf 	bl	80009f8 <__aeabi_dcmpgt>
 800547a:	2800      	cmp	r0, #0
 800547c:	d163      	bne.n	8005546 <_dtoa_r+0x6c6>
 800547e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005482:	2000      	movs	r0, #0
 8005484:	49a7      	ldr	r1, [pc, #668]	@ (8005724 <_dtoa_r+0x8a4>)
 8005486:	f7fa fe6f 	bl	8000168 <__aeabi_dsub>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005492:	f7fb fa93 	bl	80009bc <__aeabi_dcmplt>
 8005496:	2800      	cmp	r0, #0
 8005498:	f43f af14 	beq.w	80052c4 <_dtoa_r+0x444>
 800549c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800549e:	1e73      	subs	r3, r6, #1
 80054a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054a6:	2b30      	cmp	r3, #48	@ 0x30
 80054a8:	d0f8      	beq.n	800549c <_dtoa_r+0x61c>
 80054aa:	4647      	mov	r7, r8
 80054ac:	e03b      	b.n	8005526 <_dtoa_r+0x6a6>
 80054ae:	4b9e      	ldr	r3, [pc, #632]	@ (8005728 <_dtoa_r+0x8a8>)
 80054b0:	f7fb f812 	bl	80004d8 <__aeabi_dmul>
 80054b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054b8:	e7bc      	b.n	8005434 <_dtoa_r+0x5b4>
 80054ba:	4656      	mov	r6, sl
 80054bc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80054c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054c4:	4620      	mov	r0, r4
 80054c6:	4629      	mov	r1, r5
 80054c8:	f7fb f930 	bl	800072c <__aeabi_ddiv>
 80054cc:	f7fb fab4 	bl	8000a38 <__aeabi_d2iz>
 80054d0:	4680      	mov	r8, r0
 80054d2:	f7fa ff97 	bl	8000404 <__aeabi_i2d>
 80054d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054da:	f7fa fffd 	bl	80004d8 <__aeabi_dmul>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4620      	mov	r0, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	f7fa fe3f 	bl	8000168 <__aeabi_dsub>
 80054ea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80054ee:	9d08      	ldr	r5, [sp, #32]
 80054f0:	f806 4b01 	strb.w	r4, [r6], #1
 80054f4:	eba6 040a 	sub.w	r4, r6, sl
 80054f8:	42a5      	cmp	r5, r4
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	d133      	bne.n	8005568 <_dtoa_r+0x6e8>
 8005500:	f7fa fe34 	bl	800016c <__adddf3>
 8005504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005508:	4604      	mov	r4, r0
 800550a:	460d      	mov	r5, r1
 800550c:	f7fb fa74 	bl	80009f8 <__aeabi_dcmpgt>
 8005510:	b9c0      	cbnz	r0, 8005544 <_dtoa_r+0x6c4>
 8005512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005516:	4620      	mov	r0, r4
 8005518:	4629      	mov	r1, r5
 800551a:	f7fb fa45 	bl	80009a8 <__aeabi_dcmpeq>
 800551e:	b110      	cbz	r0, 8005526 <_dtoa_r+0x6a6>
 8005520:	f018 0f01 	tst.w	r8, #1
 8005524:	d10e      	bne.n	8005544 <_dtoa_r+0x6c4>
 8005526:	4648      	mov	r0, r9
 8005528:	9903      	ldr	r1, [sp, #12]
 800552a:	f000 fbbb 	bl	8005ca4 <_Bfree>
 800552e:	2300      	movs	r3, #0
 8005530:	7033      	strb	r3, [r6, #0]
 8005532:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005534:	3701      	adds	r7, #1
 8005536:	601f      	str	r7, [r3, #0]
 8005538:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 824b 	beq.w	80059d6 <_dtoa_r+0xb56>
 8005540:	601e      	str	r6, [r3, #0]
 8005542:	e248      	b.n	80059d6 <_dtoa_r+0xb56>
 8005544:	46b8      	mov	r8, r7
 8005546:	4633      	mov	r3, r6
 8005548:	461e      	mov	r6, r3
 800554a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800554e:	2a39      	cmp	r2, #57	@ 0x39
 8005550:	d106      	bne.n	8005560 <_dtoa_r+0x6e0>
 8005552:	459a      	cmp	sl, r3
 8005554:	d1f8      	bne.n	8005548 <_dtoa_r+0x6c8>
 8005556:	2230      	movs	r2, #48	@ 0x30
 8005558:	f108 0801 	add.w	r8, r8, #1
 800555c:	f88a 2000 	strb.w	r2, [sl]
 8005560:	781a      	ldrb	r2, [r3, #0]
 8005562:	3201      	adds	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e7a0      	b.n	80054aa <_dtoa_r+0x62a>
 8005568:	2200      	movs	r2, #0
 800556a:	4b6f      	ldr	r3, [pc, #444]	@ (8005728 <_dtoa_r+0x8a8>)
 800556c:	f7fa ffb4 	bl	80004d8 <__aeabi_dmul>
 8005570:	2200      	movs	r2, #0
 8005572:	2300      	movs	r3, #0
 8005574:	4604      	mov	r4, r0
 8005576:	460d      	mov	r5, r1
 8005578:	f7fb fa16 	bl	80009a8 <__aeabi_dcmpeq>
 800557c:	2800      	cmp	r0, #0
 800557e:	d09f      	beq.n	80054c0 <_dtoa_r+0x640>
 8005580:	e7d1      	b.n	8005526 <_dtoa_r+0x6a6>
 8005582:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005584:	2a00      	cmp	r2, #0
 8005586:	f000 80ea 	beq.w	800575e <_dtoa_r+0x8de>
 800558a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800558c:	2a01      	cmp	r2, #1
 800558e:	f300 80cd 	bgt.w	800572c <_dtoa_r+0x8ac>
 8005592:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005594:	2a00      	cmp	r2, #0
 8005596:	f000 80c1 	beq.w	800571c <_dtoa_r+0x89c>
 800559a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800559e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80055a0:	9e04      	ldr	r6, [sp, #16]
 80055a2:	9a04      	ldr	r2, [sp, #16]
 80055a4:	2101      	movs	r1, #1
 80055a6:	441a      	add	r2, r3
 80055a8:	9204      	str	r2, [sp, #16]
 80055aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055ac:	4648      	mov	r0, r9
 80055ae:	441a      	add	r2, r3
 80055b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80055b2:	f000 fc2b 	bl	8005e0c <__i2b>
 80055b6:	4605      	mov	r5, r0
 80055b8:	b166      	cbz	r6, 80055d4 <_dtoa_r+0x754>
 80055ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055bc:	2b00      	cmp	r3, #0
 80055be:	dd09      	ble.n	80055d4 <_dtoa_r+0x754>
 80055c0:	42b3      	cmp	r3, r6
 80055c2:	bfa8      	it	ge
 80055c4:	4633      	movge	r3, r6
 80055c6:	9a04      	ldr	r2, [sp, #16]
 80055c8:	1af6      	subs	r6, r6, r3
 80055ca:	1ad2      	subs	r2, r2, r3
 80055cc:	9204      	str	r2, [sp, #16]
 80055ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055d6:	b30b      	cbz	r3, 800561c <_dtoa_r+0x79c>
 80055d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80c6 	beq.w	800576c <_dtoa_r+0x8ec>
 80055e0:	2c00      	cmp	r4, #0
 80055e2:	f000 80c0 	beq.w	8005766 <_dtoa_r+0x8e6>
 80055e6:	4629      	mov	r1, r5
 80055e8:	4622      	mov	r2, r4
 80055ea:	4648      	mov	r0, r9
 80055ec:	f000 fcc6 	bl	8005f7c <__pow5mult>
 80055f0:	9a03      	ldr	r2, [sp, #12]
 80055f2:	4601      	mov	r1, r0
 80055f4:	4605      	mov	r5, r0
 80055f6:	4648      	mov	r0, r9
 80055f8:	f000 fc1e 	bl	8005e38 <__multiply>
 80055fc:	9903      	ldr	r1, [sp, #12]
 80055fe:	4680      	mov	r8, r0
 8005600:	4648      	mov	r0, r9
 8005602:	f000 fb4f 	bl	8005ca4 <_Bfree>
 8005606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005608:	1b1b      	subs	r3, r3, r4
 800560a:	930a      	str	r3, [sp, #40]	@ 0x28
 800560c:	f000 80b1 	beq.w	8005772 <_dtoa_r+0x8f2>
 8005610:	4641      	mov	r1, r8
 8005612:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005614:	4648      	mov	r0, r9
 8005616:	f000 fcb1 	bl	8005f7c <__pow5mult>
 800561a:	9003      	str	r0, [sp, #12]
 800561c:	2101      	movs	r1, #1
 800561e:	4648      	mov	r0, r9
 8005620:	f000 fbf4 	bl	8005e0c <__i2b>
 8005624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005626:	4604      	mov	r4, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 81d8 	beq.w	80059de <_dtoa_r+0xb5e>
 800562e:	461a      	mov	r2, r3
 8005630:	4601      	mov	r1, r0
 8005632:	4648      	mov	r0, r9
 8005634:	f000 fca2 	bl	8005f7c <__pow5mult>
 8005638:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800563a:	4604      	mov	r4, r0
 800563c:	2b01      	cmp	r3, #1
 800563e:	f300 809f 	bgt.w	8005780 <_dtoa_r+0x900>
 8005642:	9b06      	ldr	r3, [sp, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f040 8097 	bne.w	8005778 <_dtoa_r+0x8f8>
 800564a:	9b07      	ldr	r3, [sp, #28]
 800564c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005650:	2b00      	cmp	r3, #0
 8005652:	f040 8093 	bne.w	800577c <_dtoa_r+0x8fc>
 8005656:	9b07      	ldr	r3, [sp, #28]
 8005658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800565c:	0d1b      	lsrs	r3, r3, #20
 800565e:	051b      	lsls	r3, r3, #20
 8005660:	b133      	cbz	r3, 8005670 <_dtoa_r+0x7f0>
 8005662:	9b04      	ldr	r3, [sp, #16]
 8005664:	3301      	adds	r3, #1
 8005666:	9304      	str	r3, [sp, #16]
 8005668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800566a:	3301      	adds	r3, #1
 800566c:	9309      	str	r3, [sp, #36]	@ 0x24
 800566e:	2301      	movs	r3, #1
 8005670:	930a      	str	r3, [sp, #40]	@ 0x28
 8005672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 81b8 	beq.w	80059ea <_dtoa_r+0xb6a>
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005680:	6918      	ldr	r0, [r3, #16]
 8005682:	f000 fb77 	bl	8005d74 <__hi0bits>
 8005686:	f1c0 0020 	rsb	r0, r0, #32
 800568a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800568c:	4418      	add	r0, r3
 800568e:	f010 001f 	ands.w	r0, r0, #31
 8005692:	f000 8082 	beq.w	800579a <_dtoa_r+0x91a>
 8005696:	f1c0 0320 	rsb	r3, r0, #32
 800569a:	2b04      	cmp	r3, #4
 800569c:	dd73      	ble.n	8005786 <_dtoa_r+0x906>
 800569e:	9b04      	ldr	r3, [sp, #16]
 80056a0:	f1c0 001c 	rsb	r0, r0, #28
 80056a4:	4403      	add	r3, r0
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056aa:	4406      	add	r6, r0
 80056ac:	4403      	add	r3, r0
 80056ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b0:	9b04      	ldr	r3, [sp, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	dd05      	ble.n	80056c2 <_dtoa_r+0x842>
 80056b6:	461a      	mov	r2, r3
 80056b8:	4648      	mov	r0, r9
 80056ba:	9903      	ldr	r1, [sp, #12]
 80056bc:	f000 fcb8 	bl	8006030 <__lshift>
 80056c0:	9003      	str	r0, [sp, #12]
 80056c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	dd05      	ble.n	80056d4 <_dtoa_r+0x854>
 80056c8:	4621      	mov	r1, r4
 80056ca:	461a      	mov	r2, r3
 80056cc:	4648      	mov	r0, r9
 80056ce:	f000 fcaf 	bl	8006030 <__lshift>
 80056d2:	4604      	mov	r4, r0
 80056d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d061      	beq.n	800579e <_dtoa_r+0x91e>
 80056da:	4621      	mov	r1, r4
 80056dc:	9803      	ldr	r0, [sp, #12]
 80056de:	f000 fd13 	bl	8006108 <__mcmp>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	da5b      	bge.n	800579e <_dtoa_r+0x91e>
 80056e6:	2300      	movs	r3, #0
 80056e8:	220a      	movs	r2, #10
 80056ea:	4648      	mov	r0, r9
 80056ec:	9903      	ldr	r1, [sp, #12]
 80056ee:	f000 fafb 	bl	8005ce8 <__multadd>
 80056f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056f4:	f107 38ff 	add.w	r8, r7, #4294967295
 80056f8:	9003      	str	r0, [sp, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 8177 	beq.w	80059ee <_dtoa_r+0xb6e>
 8005700:	4629      	mov	r1, r5
 8005702:	2300      	movs	r3, #0
 8005704:	220a      	movs	r2, #10
 8005706:	4648      	mov	r0, r9
 8005708:	f000 faee 	bl	8005ce8 <__multadd>
 800570c:	f1bb 0f00 	cmp.w	fp, #0
 8005710:	4605      	mov	r5, r0
 8005712:	dc6f      	bgt.n	80057f4 <_dtoa_r+0x974>
 8005714:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005716:	2b02      	cmp	r3, #2
 8005718:	dc49      	bgt.n	80057ae <_dtoa_r+0x92e>
 800571a:	e06b      	b.n	80057f4 <_dtoa_r+0x974>
 800571c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800571e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005722:	e73c      	b.n	800559e <_dtoa_r+0x71e>
 8005724:	3fe00000 	.word	0x3fe00000
 8005728:	40240000 	.word	0x40240000
 800572c:	9b08      	ldr	r3, [sp, #32]
 800572e:	1e5c      	subs	r4, r3, #1
 8005730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005732:	42a3      	cmp	r3, r4
 8005734:	db09      	blt.n	800574a <_dtoa_r+0x8ca>
 8005736:	1b1c      	subs	r4, r3, r4
 8005738:	9b08      	ldr	r3, [sp, #32]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f6bf af30 	bge.w	80055a0 <_dtoa_r+0x720>
 8005740:	9b04      	ldr	r3, [sp, #16]
 8005742:	9a08      	ldr	r2, [sp, #32]
 8005744:	1a9e      	subs	r6, r3, r2
 8005746:	2300      	movs	r3, #0
 8005748:	e72b      	b.n	80055a2 <_dtoa_r+0x722>
 800574a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800574c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800574e:	1ae3      	subs	r3, r4, r3
 8005750:	441a      	add	r2, r3
 8005752:	940a      	str	r4, [sp, #40]	@ 0x28
 8005754:	9e04      	ldr	r6, [sp, #16]
 8005756:	2400      	movs	r4, #0
 8005758:	9b08      	ldr	r3, [sp, #32]
 800575a:	920e      	str	r2, [sp, #56]	@ 0x38
 800575c:	e721      	b.n	80055a2 <_dtoa_r+0x722>
 800575e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005760:	9e04      	ldr	r6, [sp, #16]
 8005762:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005764:	e728      	b.n	80055b8 <_dtoa_r+0x738>
 8005766:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800576a:	e751      	b.n	8005610 <_dtoa_r+0x790>
 800576c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800576e:	9903      	ldr	r1, [sp, #12]
 8005770:	e750      	b.n	8005614 <_dtoa_r+0x794>
 8005772:	f8cd 800c 	str.w	r8, [sp, #12]
 8005776:	e751      	b.n	800561c <_dtoa_r+0x79c>
 8005778:	2300      	movs	r3, #0
 800577a:	e779      	b.n	8005670 <_dtoa_r+0x7f0>
 800577c:	9b06      	ldr	r3, [sp, #24]
 800577e:	e777      	b.n	8005670 <_dtoa_r+0x7f0>
 8005780:	2300      	movs	r3, #0
 8005782:	930a      	str	r3, [sp, #40]	@ 0x28
 8005784:	e779      	b.n	800567a <_dtoa_r+0x7fa>
 8005786:	d093      	beq.n	80056b0 <_dtoa_r+0x830>
 8005788:	9a04      	ldr	r2, [sp, #16]
 800578a:	331c      	adds	r3, #28
 800578c:	441a      	add	r2, r3
 800578e:	9204      	str	r2, [sp, #16]
 8005790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005792:	441e      	add	r6, r3
 8005794:	441a      	add	r2, r3
 8005796:	9209      	str	r2, [sp, #36]	@ 0x24
 8005798:	e78a      	b.n	80056b0 <_dtoa_r+0x830>
 800579a:	4603      	mov	r3, r0
 800579c:	e7f4      	b.n	8005788 <_dtoa_r+0x908>
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	46b8      	mov	r8, r7
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	dc20      	bgt.n	80057e8 <_dtoa_r+0x968>
 80057a6:	469b      	mov	fp, r3
 80057a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	dd1e      	ble.n	80057ec <_dtoa_r+0x96c>
 80057ae:	f1bb 0f00 	cmp.w	fp, #0
 80057b2:	f47f adb1 	bne.w	8005318 <_dtoa_r+0x498>
 80057b6:	4621      	mov	r1, r4
 80057b8:	465b      	mov	r3, fp
 80057ba:	2205      	movs	r2, #5
 80057bc:	4648      	mov	r0, r9
 80057be:	f000 fa93 	bl	8005ce8 <__multadd>
 80057c2:	4601      	mov	r1, r0
 80057c4:	4604      	mov	r4, r0
 80057c6:	9803      	ldr	r0, [sp, #12]
 80057c8:	f000 fc9e 	bl	8006108 <__mcmp>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	f77f ada3 	ble.w	8005318 <_dtoa_r+0x498>
 80057d2:	4656      	mov	r6, sl
 80057d4:	2331      	movs	r3, #49	@ 0x31
 80057d6:	f108 0801 	add.w	r8, r8, #1
 80057da:	f806 3b01 	strb.w	r3, [r6], #1
 80057de:	e59f      	b.n	8005320 <_dtoa_r+0x4a0>
 80057e0:	46b8      	mov	r8, r7
 80057e2:	9c08      	ldr	r4, [sp, #32]
 80057e4:	4625      	mov	r5, r4
 80057e6:	e7f4      	b.n	80057d2 <_dtoa_r+0x952>
 80057e8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80057ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 8101 	beq.w	80059f6 <_dtoa_r+0xb76>
 80057f4:	2e00      	cmp	r6, #0
 80057f6:	dd05      	ble.n	8005804 <_dtoa_r+0x984>
 80057f8:	4629      	mov	r1, r5
 80057fa:	4632      	mov	r2, r6
 80057fc:	4648      	mov	r0, r9
 80057fe:	f000 fc17 	bl	8006030 <__lshift>
 8005802:	4605      	mov	r5, r0
 8005804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d05c      	beq.n	80058c4 <_dtoa_r+0xa44>
 800580a:	4648      	mov	r0, r9
 800580c:	6869      	ldr	r1, [r5, #4]
 800580e:	f000 fa09 	bl	8005c24 <_Balloc>
 8005812:	4606      	mov	r6, r0
 8005814:	b928      	cbnz	r0, 8005822 <_dtoa_r+0x9a2>
 8005816:	4602      	mov	r2, r0
 8005818:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800581c:	4b80      	ldr	r3, [pc, #512]	@ (8005a20 <_dtoa_r+0xba0>)
 800581e:	f7ff bb43 	b.w	8004ea8 <_dtoa_r+0x28>
 8005822:	692a      	ldr	r2, [r5, #16]
 8005824:	f105 010c 	add.w	r1, r5, #12
 8005828:	3202      	adds	r2, #2
 800582a:	0092      	lsls	r2, r2, #2
 800582c:	300c      	adds	r0, #12
 800582e:	f000 fe2b 	bl	8006488 <memcpy>
 8005832:	2201      	movs	r2, #1
 8005834:	4631      	mov	r1, r6
 8005836:	4648      	mov	r0, r9
 8005838:	f000 fbfa 	bl	8006030 <__lshift>
 800583c:	462f      	mov	r7, r5
 800583e:	4605      	mov	r5, r0
 8005840:	f10a 0301 	add.w	r3, sl, #1
 8005844:	9304      	str	r3, [sp, #16]
 8005846:	eb0a 030b 	add.w	r3, sl, fp
 800584a:	930a      	str	r3, [sp, #40]	@ 0x28
 800584c:	9b06      	ldr	r3, [sp, #24]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	9309      	str	r3, [sp, #36]	@ 0x24
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	4621      	mov	r1, r4
 8005858:	9803      	ldr	r0, [sp, #12]
 800585a:	f103 3bff 	add.w	fp, r3, #4294967295
 800585e:	f7ff fa84 	bl	8004d6a <quorem>
 8005862:	4603      	mov	r3, r0
 8005864:	4639      	mov	r1, r7
 8005866:	3330      	adds	r3, #48	@ 0x30
 8005868:	9006      	str	r0, [sp, #24]
 800586a:	9803      	ldr	r0, [sp, #12]
 800586c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800586e:	f000 fc4b 	bl	8006108 <__mcmp>
 8005872:	462a      	mov	r2, r5
 8005874:	9008      	str	r0, [sp, #32]
 8005876:	4621      	mov	r1, r4
 8005878:	4648      	mov	r0, r9
 800587a:	f000 fc61 	bl	8006140 <__mdiff>
 800587e:	68c2      	ldr	r2, [r0, #12]
 8005880:	4606      	mov	r6, r0
 8005882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005884:	bb02      	cbnz	r2, 80058c8 <_dtoa_r+0xa48>
 8005886:	4601      	mov	r1, r0
 8005888:	9803      	ldr	r0, [sp, #12]
 800588a:	f000 fc3d 	bl	8006108 <__mcmp>
 800588e:	4602      	mov	r2, r0
 8005890:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005892:	4631      	mov	r1, r6
 8005894:	4648      	mov	r0, r9
 8005896:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800589a:	f000 fa03 	bl	8005ca4 <_Bfree>
 800589e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80058a2:	9e04      	ldr	r6, [sp, #16]
 80058a4:	ea42 0103 	orr.w	r1, r2, r3
 80058a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058aa:	4319      	orrs	r1, r3
 80058ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058ae:	d10d      	bne.n	80058cc <_dtoa_r+0xa4c>
 80058b0:	2b39      	cmp	r3, #57	@ 0x39
 80058b2:	d027      	beq.n	8005904 <_dtoa_r+0xa84>
 80058b4:	9a08      	ldr	r2, [sp, #32]
 80058b6:	2a00      	cmp	r2, #0
 80058b8:	dd01      	ble.n	80058be <_dtoa_r+0xa3e>
 80058ba:	9b06      	ldr	r3, [sp, #24]
 80058bc:	3331      	adds	r3, #49	@ 0x31
 80058be:	f88b 3000 	strb.w	r3, [fp]
 80058c2:	e52e      	b.n	8005322 <_dtoa_r+0x4a2>
 80058c4:	4628      	mov	r0, r5
 80058c6:	e7b9      	b.n	800583c <_dtoa_r+0x9bc>
 80058c8:	2201      	movs	r2, #1
 80058ca:	e7e2      	b.n	8005892 <_dtoa_r+0xa12>
 80058cc:	9908      	ldr	r1, [sp, #32]
 80058ce:	2900      	cmp	r1, #0
 80058d0:	db04      	blt.n	80058dc <_dtoa_r+0xa5c>
 80058d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80058d4:	4301      	orrs	r1, r0
 80058d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058d8:	4301      	orrs	r1, r0
 80058da:	d120      	bne.n	800591e <_dtoa_r+0xa9e>
 80058dc:	2a00      	cmp	r2, #0
 80058de:	ddee      	ble.n	80058be <_dtoa_r+0xa3e>
 80058e0:	2201      	movs	r2, #1
 80058e2:	9903      	ldr	r1, [sp, #12]
 80058e4:	4648      	mov	r0, r9
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	f000 fba2 	bl	8006030 <__lshift>
 80058ec:	4621      	mov	r1, r4
 80058ee:	9003      	str	r0, [sp, #12]
 80058f0:	f000 fc0a 	bl	8006108 <__mcmp>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	9b04      	ldr	r3, [sp, #16]
 80058f8:	dc02      	bgt.n	8005900 <_dtoa_r+0xa80>
 80058fa:	d1e0      	bne.n	80058be <_dtoa_r+0xa3e>
 80058fc:	07da      	lsls	r2, r3, #31
 80058fe:	d5de      	bpl.n	80058be <_dtoa_r+0xa3e>
 8005900:	2b39      	cmp	r3, #57	@ 0x39
 8005902:	d1da      	bne.n	80058ba <_dtoa_r+0xa3a>
 8005904:	2339      	movs	r3, #57	@ 0x39
 8005906:	f88b 3000 	strb.w	r3, [fp]
 800590a:	4633      	mov	r3, r6
 800590c:	461e      	mov	r6, r3
 800590e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005912:	3b01      	subs	r3, #1
 8005914:	2a39      	cmp	r2, #57	@ 0x39
 8005916:	d04e      	beq.n	80059b6 <_dtoa_r+0xb36>
 8005918:	3201      	adds	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	e501      	b.n	8005322 <_dtoa_r+0x4a2>
 800591e:	2a00      	cmp	r2, #0
 8005920:	dd03      	ble.n	800592a <_dtoa_r+0xaaa>
 8005922:	2b39      	cmp	r3, #57	@ 0x39
 8005924:	d0ee      	beq.n	8005904 <_dtoa_r+0xa84>
 8005926:	3301      	adds	r3, #1
 8005928:	e7c9      	b.n	80058be <_dtoa_r+0xa3e>
 800592a:	9a04      	ldr	r2, [sp, #16]
 800592c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800592e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005932:	428a      	cmp	r2, r1
 8005934:	d028      	beq.n	8005988 <_dtoa_r+0xb08>
 8005936:	2300      	movs	r3, #0
 8005938:	220a      	movs	r2, #10
 800593a:	9903      	ldr	r1, [sp, #12]
 800593c:	4648      	mov	r0, r9
 800593e:	f000 f9d3 	bl	8005ce8 <__multadd>
 8005942:	42af      	cmp	r7, r5
 8005944:	9003      	str	r0, [sp, #12]
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	f04f 020a 	mov.w	r2, #10
 800594e:	4639      	mov	r1, r7
 8005950:	4648      	mov	r0, r9
 8005952:	d107      	bne.n	8005964 <_dtoa_r+0xae4>
 8005954:	f000 f9c8 	bl	8005ce8 <__multadd>
 8005958:	4607      	mov	r7, r0
 800595a:	4605      	mov	r5, r0
 800595c:	9b04      	ldr	r3, [sp, #16]
 800595e:	3301      	adds	r3, #1
 8005960:	9304      	str	r3, [sp, #16]
 8005962:	e777      	b.n	8005854 <_dtoa_r+0x9d4>
 8005964:	f000 f9c0 	bl	8005ce8 <__multadd>
 8005968:	4629      	mov	r1, r5
 800596a:	4607      	mov	r7, r0
 800596c:	2300      	movs	r3, #0
 800596e:	220a      	movs	r2, #10
 8005970:	4648      	mov	r0, r9
 8005972:	f000 f9b9 	bl	8005ce8 <__multadd>
 8005976:	4605      	mov	r5, r0
 8005978:	e7f0      	b.n	800595c <_dtoa_r+0xadc>
 800597a:	f1bb 0f00 	cmp.w	fp, #0
 800597e:	bfcc      	ite	gt
 8005980:	465e      	movgt	r6, fp
 8005982:	2601      	movle	r6, #1
 8005984:	2700      	movs	r7, #0
 8005986:	4456      	add	r6, sl
 8005988:	2201      	movs	r2, #1
 800598a:	9903      	ldr	r1, [sp, #12]
 800598c:	4648      	mov	r0, r9
 800598e:	9304      	str	r3, [sp, #16]
 8005990:	f000 fb4e 	bl	8006030 <__lshift>
 8005994:	4621      	mov	r1, r4
 8005996:	9003      	str	r0, [sp, #12]
 8005998:	f000 fbb6 	bl	8006108 <__mcmp>
 800599c:	2800      	cmp	r0, #0
 800599e:	dcb4      	bgt.n	800590a <_dtoa_r+0xa8a>
 80059a0:	d102      	bne.n	80059a8 <_dtoa_r+0xb28>
 80059a2:	9b04      	ldr	r3, [sp, #16]
 80059a4:	07db      	lsls	r3, r3, #31
 80059a6:	d4b0      	bmi.n	800590a <_dtoa_r+0xa8a>
 80059a8:	4633      	mov	r3, r6
 80059aa:	461e      	mov	r6, r3
 80059ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059b0:	2a30      	cmp	r2, #48	@ 0x30
 80059b2:	d0fa      	beq.n	80059aa <_dtoa_r+0xb2a>
 80059b4:	e4b5      	b.n	8005322 <_dtoa_r+0x4a2>
 80059b6:	459a      	cmp	sl, r3
 80059b8:	d1a8      	bne.n	800590c <_dtoa_r+0xa8c>
 80059ba:	2331      	movs	r3, #49	@ 0x31
 80059bc:	f108 0801 	add.w	r8, r8, #1
 80059c0:	f88a 3000 	strb.w	r3, [sl]
 80059c4:	e4ad      	b.n	8005322 <_dtoa_r+0x4a2>
 80059c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80059c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005a24 <_dtoa_r+0xba4>
 80059cc:	b11b      	cbz	r3, 80059d6 <_dtoa_r+0xb56>
 80059ce:	f10a 0308 	add.w	r3, sl, #8
 80059d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	4650      	mov	r0, sl
 80059d8:	b017      	add	sp, #92	@ 0x5c
 80059da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	f77f ae2e 	ble.w	8005642 <_dtoa_r+0x7c2>
 80059e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80059ea:	2001      	movs	r0, #1
 80059ec:	e64d      	b.n	800568a <_dtoa_r+0x80a>
 80059ee:	f1bb 0f00 	cmp.w	fp, #0
 80059f2:	f77f aed9 	ble.w	80057a8 <_dtoa_r+0x928>
 80059f6:	4656      	mov	r6, sl
 80059f8:	4621      	mov	r1, r4
 80059fa:	9803      	ldr	r0, [sp, #12]
 80059fc:	f7ff f9b5 	bl	8004d6a <quorem>
 8005a00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005a04:	f806 3b01 	strb.w	r3, [r6], #1
 8005a08:	eba6 020a 	sub.w	r2, r6, sl
 8005a0c:	4593      	cmp	fp, r2
 8005a0e:	ddb4      	ble.n	800597a <_dtoa_r+0xafa>
 8005a10:	2300      	movs	r3, #0
 8005a12:	220a      	movs	r2, #10
 8005a14:	4648      	mov	r0, r9
 8005a16:	9903      	ldr	r1, [sp, #12]
 8005a18:	f000 f966 	bl	8005ce8 <__multadd>
 8005a1c:	9003      	str	r0, [sp, #12]
 8005a1e:	e7eb      	b.n	80059f8 <_dtoa_r+0xb78>
 8005a20:	08006ba2 	.word	0x08006ba2
 8005a24:	08006b26 	.word	0x08006b26

08005a28 <_free_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	d040      	beq.n	8005ab2 <_free_r+0x8a>
 8005a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a34:	1f0c      	subs	r4, r1, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bfb8      	it	lt
 8005a3a:	18e4      	addlt	r4, r4, r3
 8005a3c:	f000 f8e6 	bl	8005c0c <__malloc_lock>
 8005a40:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <_free_r+0x8c>)
 8005a42:	6813      	ldr	r3, [r2, #0]
 8005a44:	b933      	cbnz	r3, 8005a54 <_free_r+0x2c>
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	6014      	str	r4, [r2, #0]
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a50:	f000 b8e2 	b.w	8005c18 <__malloc_unlock>
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d908      	bls.n	8005a6a <_free_r+0x42>
 8005a58:	6820      	ldr	r0, [r4, #0]
 8005a5a:	1821      	adds	r1, r4, r0
 8005a5c:	428b      	cmp	r3, r1
 8005a5e:	bf01      	itttt	eq
 8005a60:	6819      	ldreq	r1, [r3, #0]
 8005a62:	685b      	ldreq	r3, [r3, #4]
 8005a64:	1809      	addeq	r1, r1, r0
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	e7ed      	b.n	8005a46 <_free_r+0x1e>
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b10b      	cbz	r3, 8005a74 <_free_r+0x4c>
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	d9fa      	bls.n	8005a6a <_free_r+0x42>
 8005a74:	6811      	ldr	r1, [r2, #0]
 8005a76:	1850      	adds	r0, r2, r1
 8005a78:	42a0      	cmp	r0, r4
 8005a7a:	d10b      	bne.n	8005a94 <_free_r+0x6c>
 8005a7c:	6820      	ldr	r0, [r4, #0]
 8005a7e:	4401      	add	r1, r0
 8005a80:	1850      	adds	r0, r2, r1
 8005a82:	4283      	cmp	r3, r0
 8005a84:	6011      	str	r1, [r2, #0]
 8005a86:	d1e0      	bne.n	8005a4a <_free_r+0x22>
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4408      	add	r0, r1
 8005a8e:	6010      	str	r0, [r2, #0]
 8005a90:	6053      	str	r3, [r2, #4]
 8005a92:	e7da      	b.n	8005a4a <_free_r+0x22>
 8005a94:	d902      	bls.n	8005a9c <_free_r+0x74>
 8005a96:	230c      	movs	r3, #12
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	e7d6      	b.n	8005a4a <_free_r+0x22>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	1821      	adds	r1, r4, r0
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	bf01      	itttt	eq
 8005aa4:	6819      	ldreq	r1, [r3, #0]
 8005aa6:	685b      	ldreq	r3, [r3, #4]
 8005aa8:	1809      	addeq	r1, r1, r0
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6063      	str	r3, [r4, #4]
 8005aae:	6054      	str	r4, [r2, #4]
 8005ab0:	e7cb      	b.n	8005a4a <_free_r+0x22>
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20000678 	.word	0x20000678

08005ab8 <malloc>:
 8005ab8:	4b02      	ldr	r3, [pc, #8]	@ (8005ac4 <malloc+0xc>)
 8005aba:	4601      	mov	r1, r0
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	f000 b825 	b.w	8005b0c <_malloc_r>
 8005ac2:	bf00      	nop
 8005ac4:	20000030 	.word	0x20000030

08005ac8 <sbrk_aligned>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4e0f      	ldr	r6, [pc, #60]	@ (8005b08 <sbrk_aligned+0x40>)
 8005acc:	460c      	mov	r4, r1
 8005ace:	6831      	ldr	r1, [r6, #0]
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	b911      	cbnz	r1, 8005ada <sbrk_aligned+0x12>
 8005ad4:	f000 fcc8 	bl	8006468 <_sbrk_r>
 8005ad8:	6030      	str	r0, [r6, #0]
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 fcc3 	bl	8006468 <_sbrk_r>
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	d103      	bne.n	8005aee <sbrk_aligned+0x26>
 8005ae6:	f04f 34ff 	mov.w	r4, #4294967295
 8005aea:	4620      	mov	r0, r4
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
 8005aee:	1cc4      	adds	r4, r0, #3
 8005af0:	f024 0403 	bic.w	r4, r4, #3
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d0f8      	beq.n	8005aea <sbrk_aligned+0x22>
 8005af8:	1a21      	subs	r1, r4, r0
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 fcb4 	bl	8006468 <_sbrk_r>
 8005b00:	3001      	adds	r0, #1
 8005b02:	d1f2      	bne.n	8005aea <sbrk_aligned+0x22>
 8005b04:	e7ef      	b.n	8005ae6 <sbrk_aligned+0x1e>
 8005b06:	bf00      	nop
 8005b08:	20000674 	.word	0x20000674

08005b0c <_malloc_r>:
 8005b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b10:	1ccd      	adds	r5, r1, #3
 8005b12:	f025 0503 	bic.w	r5, r5, #3
 8005b16:	3508      	adds	r5, #8
 8005b18:	2d0c      	cmp	r5, #12
 8005b1a:	bf38      	it	cc
 8005b1c:	250c      	movcc	r5, #12
 8005b1e:	2d00      	cmp	r5, #0
 8005b20:	4606      	mov	r6, r0
 8005b22:	db01      	blt.n	8005b28 <_malloc_r+0x1c>
 8005b24:	42a9      	cmp	r1, r5
 8005b26:	d904      	bls.n	8005b32 <_malloc_r+0x26>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	6033      	str	r3, [r6, #0]
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c08 <_malloc_r+0xfc>
 8005b36:	f000 f869 	bl	8005c0c <__malloc_lock>
 8005b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b3e:	461c      	mov	r4, r3
 8005b40:	bb44      	cbnz	r4, 8005b94 <_malloc_r+0x88>
 8005b42:	4629      	mov	r1, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff ffbf 	bl	8005ac8 <sbrk_aligned>
 8005b4a:	1c43      	adds	r3, r0, #1
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	d158      	bne.n	8005c02 <_malloc_r+0xf6>
 8005b50:	f8d8 4000 	ldr.w	r4, [r8]
 8005b54:	4627      	mov	r7, r4
 8005b56:	2f00      	cmp	r7, #0
 8005b58:	d143      	bne.n	8005be2 <_malloc_r+0xd6>
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	d04b      	beq.n	8005bf6 <_malloc_r+0xea>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	4639      	mov	r1, r7
 8005b62:	4630      	mov	r0, r6
 8005b64:	eb04 0903 	add.w	r9, r4, r3
 8005b68:	f000 fc7e 	bl	8006468 <_sbrk_r>
 8005b6c:	4581      	cmp	r9, r0
 8005b6e:	d142      	bne.n	8005bf6 <_malloc_r+0xea>
 8005b70:	6821      	ldr	r1, [r4, #0]
 8005b72:	4630      	mov	r0, r6
 8005b74:	1a6d      	subs	r5, r5, r1
 8005b76:	4629      	mov	r1, r5
 8005b78:	f7ff ffa6 	bl	8005ac8 <sbrk_aligned>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d03a      	beq.n	8005bf6 <_malloc_r+0xea>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	442b      	add	r3, r5
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	bb62      	cbnz	r2, 8005be8 <_malloc_r+0xdc>
 8005b8e:	f8c8 7000 	str.w	r7, [r8]
 8005b92:	e00f      	b.n	8005bb4 <_malloc_r+0xa8>
 8005b94:	6822      	ldr	r2, [r4, #0]
 8005b96:	1b52      	subs	r2, r2, r5
 8005b98:	d420      	bmi.n	8005bdc <_malloc_r+0xd0>
 8005b9a:	2a0b      	cmp	r2, #11
 8005b9c:	d917      	bls.n	8005bce <_malloc_r+0xc2>
 8005b9e:	1961      	adds	r1, r4, r5
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	6025      	str	r5, [r4, #0]
 8005ba4:	bf18      	it	ne
 8005ba6:	6059      	strne	r1, [r3, #4]
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	bf08      	it	eq
 8005bac:	f8c8 1000 	streq.w	r1, [r8]
 8005bb0:	5162      	str	r2, [r4, r5]
 8005bb2:	604b      	str	r3, [r1, #4]
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 f82f 	bl	8005c18 <__malloc_unlock>
 8005bba:	f104 000b 	add.w	r0, r4, #11
 8005bbe:	1d23      	adds	r3, r4, #4
 8005bc0:	f020 0007 	bic.w	r0, r0, #7
 8005bc4:	1ac2      	subs	r2, r0, r3
 8005bc6:	bf1c      	itt	ne
 8005bc8:	1a1b      	subne	r3, r3, r0
 8005bca:	50a3      	strne	r3, [r4, r2]
 8005bcc:	e7af      	b.n	8005b2e <_malloc_r+0x22>
 8005bce:	6862      	ldr	r2, [r4, #4]
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	bf0c      	ite	eq
 8005bd4:	f8c8 2000 	streq.w	r2, [r8]
 8005bd8:	605a      	strne	r2, [r3, #4]
 8005bda:	e7eb      	b.n	8005bb4 <_malloc_r+0xa8>
 8005bdc:	4623      	mov	r3, r4
 8005bde:	6864      	ldr	r4, [r4, #4]
 8005be0:	e7ae      	b.n	8005b40 <_malloc_r+0x34>
 8005be2:	463c      	mov	r4, r7
 8005be4:	687f      	ldr	r7, [r7, #4]
 8005be6:	e7b6      	b.n	8005b56 <_malloc_r+0x4a>
 8005be8:	461a      	mov	r2, r3
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	d1fb      	bne.n	8005be8 <_malloc_r+0xdc>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	6053      	str	r3, [r2, #4]
 8005bf4:	e7de      	b.n	8005bb4 <_malloc_r+0xa8>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	6033      	str	r3, [r6, #0]
 8005bfc:	f000 f80c 	bl	8005c18 <__malloc_unlock>
 8005c00:	e794      	b.n	8005b2c <_malloc_r+0x20>
 8005c02:	6005      	str	r5, [r0, #0]
 8005c04:	e7d6      	b.n	8005bb4 <_malloc_r+0xa8>
 8005c06:	bf00      	nop
 8005c08:	20000678 	.word	0x20000678

08005c0c <__malloc_lock>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	@ (8005c14 <__malloc_lock+0x8>)
 8005c0e:	f7ff b89c 	b.w	8004d4a <__retarget_lock_acquire_recursive>
 8005c12:	bf00      	nop
 8005c14:	20000670 	.word	0x20000670

08005c18 <__malloc_unlock>:
 8005c18:	4801      	ldr	r0, [pc, #4]	@ (8005c20 <__malloc_unlock+0x8>)
 8005c1a:	f7ff b897 	b.w	8004d4c <__retarget_lock_release_recursive>
 8005c1e:	bf00      	nop
 8005c20:	20000670 	.word	0x20000670

08005c24 <_Balloc>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	69c6      	ldr	r6, [r0, #28]
 8005c28:	4604      	mov	r4, r0
 8005c2a:	460d      	mov	r5, r1
 8005c2c:	b976      	cbnz	r6, 8005c4c <_Balloc+0x28>
 8005c2e:	2010      	movs	r0, #16
 8005c30:	f7ff ff42 	bl	8005ab8 <malloc>
 8005c34:	4602      	mov	r2, r0
 8005c36:	61e0      	str	r0, [r4, #28]
 8005c38:	b920      	cbnz	r0, 8005c44 <_Balloc+0x20>
 8005c3a:	216b      	movs	r1, #107	@ 0x6b
 8005c3c:	4b17      	ldr	r3, [pc, #92]	@ (8005c9c <_Balloc+0x78>)
 8005c3e:	4818      	ldr	r0, [pc, #96]	@ (8005ca0 <_Balloc+0x7c>)
 8005c40:	f000 fc30 	bl	80064a4 <__assert_func>
 8005c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c48:	6006      	str	r6, [r0, #0]
 8005c4a:	60c6      	str	r6, [r0, #12]
 8005c4c:	69e6      	ldr	r6, [r4, #28]
 8005c4e:	68f3      	ldr	r3, [r6, #12]
 8005c50:	b183      	cbz	r3, 8005c74 <_Balloc+0x50>
 8005c52:	69e3      	ldr	r3, [r4, #28]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c5a:	b9b8      	cbnz	r0, 8005c8c <_Balloc+0x68>
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f605 	lsl.w	r6, r1, r5
 8005c62:	1d72      	adds	r2, r6, #5
 8005c64:	4620      	mov	r0, r4
 8005c66:	0092      	lsls	r2, r2, #2
 8005c68:	f000 fc3a 	bl	80064e0 <_calloc_r>
 8005c6c:	b160      	cbz	r0, 8005c88 <_Balloc+0x64>
 8005c6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c72:	e00e      	b.n	8005c92 <_Balloc+0x6e>
 8005c74:	2221      	movs	r2, #33	@ 0x21
 8005c76:	2104      	movs	r1, #4
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 fc31 	bl	80064e0 <_calloc_r>
 8005c7e:	69e3      	ldr	r3, [r4, #28]
 8005c80:	60f0      	str	r0, [r6, #12]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e4      	bne.n	8005c52 <_Balloc+0x2e>
 8005c88:	2000      	movs	r0, #0
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	6802      	ldr	r2, [r0, #0]
 8005c8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c92:	2300      	movs	r3, #0
 8005c94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c98:	e7f7      	b.n	8005c8a <_Balloc+0x66>
 8005c9a:	bf00      	nop
 8005c9c:	08006b33 	.word	0x08006b33
 8005ca0:	08006bb3 	.word	0x08006bb3

08005ca4 <_Bfree>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	69c6      	ldr	r6, [r0, #28]
 8005ca8:	4605      	mov	r5, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	b976      	cbnz	r6, 8005ccc <_Bfree+0x28>
 8005cae:	2010      	movs	r0, #16
 8005cb0:	f7ff ff02 	bl	8005ab8 <malloc>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	61e8      	str	r0, [r5, #28]
 8005cb8:	b920      	cbnz	r0, 8005cc4 <_Bfree+0x20>
 8005cba:	218f      	movs	r1, #143	@ 0x8f
 8005cbc:	4b08      	ldr	r3, [pc, #32]	@ (8005ce0 <_Bfree+0x3c>)
 8005cbe:	4809      	ldr	r0, [pc, #36]	@ (8005ce4 <_Bfree+0x40>)
 8005cc0:	f000 fbf0 	bl	80064a4 <__assert_func>
 8005cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cc8:	6006      	str	r6, [r0, #0]
 8005cca:	60c6      	str	r6, [r0, #12]
 8005ccc:	b13c      	cbz	r4, 8005cde <_Bfree+0x3a>
 8005cce:	69eb      	ldr	r3, [r5, #28]
 8005cd0:	6862      	ldr	r2, [r4, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cd8:	6021      	str	r1, [r4, #0]
 8005cda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	08006b33 	.word	0x08006b33
 8005ce4:	08006bb3 	.word	0x08006bb3

08005ce8 <__multadd>:
 8005ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cec:	4607      	mov	r7, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	461e      	mov	r6, r3
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	690d      	ldr	r5, [r1, #16]
 8005cf6:	f101 0c14 	add.w	ip, r1, #20
 8005cfa:	f8dc 3000 	ldr.w	r3, [ip]
 8005cfe:	3001      	adds	r0, #1
 8005d00:	b299      	uxth	r1, r3
 8005d02:	fb02 6101 	mla	r1, r2, r1, r6
 8005d06:	0c1e      	lsrs	r6, r3, #16
 8005d08:	0c0b      	lsrs	r3, r1, #16
 8005d0a:	fb02 3306 	mla	r3, r2, r6, r3
 8005d0e:	b289      	uxth	r1, r1
 8005d10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d14:	4285      	cmp	r5, r0
 8005d16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d1a:	f84c 1b04 	str.w	r1, [ip], #4
 8005d1e:	dcec      	bgt.n	8005cfa <__multadd+0x12>
 8005d20:	b30e      	cbz	r6, 8005d66 <__multadd+0x7e>
 8005d22:	68a3      	ldr	r3, [r4, #8]
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	dc19      	bgt.n	8005d5c <__multadd+0x74>
 8005d28:	6861      	ldr	r1, [r4, #4]
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	3101      	adds	r1, #1
 8005d2e:	f7ff ff79 	bl	8005c24 <_Balloc>
 8005d32:	4680      	mov	r8, r0
 8005d34:	b928      	cbnz	r0, 8005d42 <__multadd+0x5a>
 8005d36:	4602      	mov	r2, r0
 8005d38:	21ba      	movs	r1, #186	@ 0xba
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d6c <__multadd+0x84>)
 8005d3c:	480c      	ldr	r0, [pc, #48]	@ (8005d70 <__multadd+0x88>)
 8005d3e:	f000 fbb1 	bl	80064a4 <__assert_func>
 8005d42:	6922      	ldr	r2, [r4, #16]
 8005d44:	f104 010c 	add.w	r1, r4, #12
 8005d48:	3202      	adds	r2, #2
 8005d4a:	0092      	lsls	r2, r2, #2
 8005d4c:	300c      	adds	r0, #12
 8005d4e:	f000 fb9b 	bl	8006488 <memcpy>
 8005d52:	4621      	mov	r1, r4
 8005d54:	4638      	mov	r0, r7
 8005d56:	f7ff ffa5 	bl	8005ca4 <_Bfree>
 8005d5a:	4644      	mov	r4, r8
 8005d5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d60:	3501      	adds	r5, #1
 8005d62:	615e      	str	r6, [r3, #20]
 8005d64:	6125      	str	r5, [r4, #16]
 8005d66:	4620      	mov	r0, r4
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6c:	08006ba2 	.word	0x08006ba2
 8005d70:	08006bb3 	.word	0x08006bb3

08005d74 <__hi0bits>:
 8005d74:	4603      	mov	r3, r0
 8005d76:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005d7a:	bf3a      	itte	cc
 8005d7c:	0403      	lslcc	r3, r0, #16
 8005d7e:	2010      	movcc	r0, #16
 8005d80:	2000      	movcs	r0, #0
 8005d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d86:	bf3c      	itt	cc
 8005d88:	021b      	lslcc	r3, r3, #8
 8005d8a:	3008      	addcc	r0, #8
 8005d8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d90:	bf3c      	itt	cc
 8005d92:	011b      	lslcc	r3, r3, #4
 8005d94:	3004      	addcc	r0, #4
 8005d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d9a:	bf3c      	itt	cc
 8005d9c:	009b      	lslcc	r3, r3, #2
 8005d9e:	3002      	addcc	r0, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	db05      	blt.n	8005db0 <__hi0bits+0x3c>
 8005da4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005da8:	f100 0001 	add.w	r0, r0, #1
 8005dac:	bf08      	it	eq
 8005dae:	2020      	moveq	r0, #32
 8005db0:	4770      	bx	lr

08005db2 <__lo0bits>:
 8005db2:	6803      	ldr	r3, [r0, #0]
 8005db4:	4602      	mov	r2, r0
 8005db6:	f013 0007 	ands.w	r0, r3, #7
 8005dba:	d00b      	beq.n	8005dd4 <__lo0bits+0x22>
 8005dbc:	07d9      	lsls	r1, r3, #31
 8005dbe:	d421      	bmi.n	8005e04 <__lo0bits+0x52>
 8005dc0:	0798      	lsls	r0, r3, #30
 8005dc2:	bf49      	itett	mi
 8005dc4:	085b      	lsrmi	r3, r3, #1
 8005dc6:	089b      	lsrpl	r3, r3, #2
 8005dc8:	2001      	movmi	r0, #1
 8005dca:	6013      	strmi	r3, [r2, #0]
 8005dcc:	bf5c      	itt	pl
 8005dce:	2002      	movpl	r0, #2
 8005dd0:	6013      	strpl	r3, [r2, #0]
 8005dd2:	4770      	bx	lr
 8005dd4:	b299      	uxth	r1, r3
 8005dd6:	b909      	cbnz	r1, 8005ddc <__lo0bits+0x2a>
 8005dd8:	2010      	movs	r0, #16
 8005dda:	0c1b      	lsrs	r3, r3, #16
 8005ddc:	b2d9      	uxtb	r1, r3
 8005dde:	b909      	cbnz	r1, 8005de4 <__lo0bits+0x32>
 8005de0:	3008      	adds	r0, #8
 8005de2:	0a1b      	lsrs	r3, r3, #8
 8005de4:	0719      	lsls	r1, r3, #28
 8005de6:	bf04      	itt	eq
 8005de8:	091b      	lsreq	r3, r3, #4
 8005dea:	3004      	addeq	r0, #4
 8005dec:	0799      	lsls	r1, r3, #30
 8005dee:	bf04      	itt	eq
 8005df0:	089b      	lsreq	r3, r3, #2
 8005df2:	3002      	addeq	r0, #2
 8005df4:	07d9      	lsls	r1, r3, #31
 8005df6:	d403      	bmi.n	8005e00 <__lo0bits+0x4e>
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	f100 0001 	add.w	r0, r0, #1
 8005dfe:	d003      	beq.n	8005e08 <__lo0bits+0x56>
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	4770      	bx	lr
 8005e04:	2000      	movs	r0, #0
 8005e06:	4770      	bx	lr
 8005e08:	2020      	movs	r0, #32
 8005e0a:	4770      	bx	lr

08005e0c <__i2b>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	460c      	mov	r4, r1
 8005e10:	2101      	movs	r1, #1
 8005e12:	f7ff ff07 	bl	8005c24 <_Balloc>
 8005e16:	4602      	mov	r2, r0
 8005e18:	b928      	cbnz	r0, 8005e26 <__i2b+0x1a>
 8005e1a:	f240 1145 	movw	r1, #325	@ 0x145
 8005e1e:	4b04      	ldr	r3, [pc, #16]	@ (8005e30 <__i2b+0x24>)
 8005e20:	4804      	ldr	r0, [pc, #16]	@ (8005e34 <__i2b+0x28>)
 8005e22:	f000 fb3f 	bl	80064a4 <__assert_func>
 8005e26:	2301      	movs	r3, #1
 8005e28:	6144      	str	r4, [r0, #20]
 8005e2a:	6103      	str	r3, [r0, #16]
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	bf00      	nop
 8005e30:	08006ba2 	.word	0x08006ba2
 8005e34:	08006bb3 	.word	0x08006bb3

08005e38 <__multiply>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	4617      	mov	r7, r2
 8005e3e:	690a      	ldr	r2, [r1, #16]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4689      	mov	r9, r1
 8005e44:	429a      	cmp	r2, r3
 8005e46:	bfa2      	ittt	ge
 8005e48:	463b      	movge	r3, r7
 8005e4a:	460f      	movge	r7, r1
 8005e4c:	4699      	movge	r9, r3
 8005e4e:	693d      	ldr	r5, [r7, #16]
 8005e50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	eb05 060a 	add.w	r6, r5, sl
 8005e5c:	42b3      	cmp	r3, r6
 8005e5e:	b085      	sub	sp, #20
 8005e60:	bfb8      	it	lt
 8005e62:	3101      	addlt	r1, #1
 8005e64:	f7ff fede 	bl	8005c24 <_Balloc>
 8005e68:	b930      	cbnz	r0, 8005e78 <__multiply+0x40>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005e70:	4b40      	ldr	r3, [pc, #256]	@ (8005f74 <__multiply+0x13c>)
 8005e72:	4841      	ldr	r0, [pc, #260]	@ (8005f78 <__multiply+0x140>)
 8005e74:	f000 fb16 	bl	80064a4 <__assert_func>
 8005e78:	f100 0414 	add.w	r4, r0, #20
 8005e7c:	4623      	mov	r3, r4
 8005e7e:	2200      	movs	r2, #0
 8005e80:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005e84:	4573      	cmp	r3, lr
 8005e86:	d320      	bcc.n	8005eca <__multiply+0x92>
 8005e88:	f107 0814 	add.w	r8, r7, #20
 8005e8c:	f109 0114 	add.w	r1, r9, #20
 8005e90:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005e94:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005e98:	9302      	str	r3, [sp, #8]
 8005e9a:	1beb      	subs	r3, r5, r7
 8005e9c:	3b15      	subs	r3, #21
 8005e9e:	f023 0303 	bic.w	r3, r3, #3
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	3715      	adds	r7, #21
 8005ea6:	42bd      	cmp	r5, r7
 8005ea8:	bf38      	it	cc
 8005eaa:	2304      	movcc	r3, #4
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	9b02      	ldr	r3, [sp, #8]
 8005eb0:	9103      	str	r1, [sp, #12]
 8005eb2:	428b      	cmp	r3, r1
 8005eb4:	d80c      	bhi.n	8005ed0 <__multiply+0x98>
 8005eb6:	2e00      	cmp	r6, #0
 8005eb8:	dd03      	ble.n	8005ec2 <__multiply+0x8a>
 8005eba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d055      	beq.n	8005f6e <__multiply+0x136>
 8005ec2:	6106      	str	r6, [r0, #16]
 8005ec4:	b005      	add	sp, #20
 8005ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eca:	f843 2b04 	str.w	r2, [r3], #4
 8005ece:	e7d9      	b.n	8005e84 <__multiply+0x4c>
 8005ed0:	f8b1 a000 	ldrh.w	sl, [r1]
 8005ed4:	f1ba 0f00 	cmp.w	sl, #0
 8005ed8:	d01f      	beq.n	8005f1a <__multiply+0xe2>
 8005eda:	46c4      	mov	ip, r8
 8005edc:	46a1      	mov	r9, r4
 8005ede:	2700      	movs	r7, #0
 8005ee0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005ee4:	f8d9 3000 	ldr.w	r3, [r9]
 8005ee8:	fa1f fb82 	uxth.w	fp, r2
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	fb0a 330b 	mla	r3, sl, fp, r3
 8005ef2:	443b      	add	r3, r7
 8005ef4:	f8d9 7000 	ldr.w	r7, [r9]
 8005ef8:	0c12      	lsrs	r2, r2, #16
 8005efa:	0c3f      	lsrs	r7, r7, #16
 8005efc:	fb0a 7202 	mla	r2, sl, r2, r7
 8005f00:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f0a:	4565      	cmp	r5, ip
 8005f0c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005f10:	f849 3b04 	str.w	r3, [r9], #4
 8005f14:	d8e4      	bhi.n	8005ee0 <__multiply+0xa8>
 8005f16:	9b01      	ldr	r3, [sp, #4]
 8005f18:	50e7      	str	r7, [r4, r3]
 8005f1a:	9b03      	ldr	r3, [sp, #12]
 8005f1c:	3104      	adds	r1, #4
 8005f1e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005f22:	f1b9 0f00 	cmp.w	r9, #0
 8005f26:	d020      	beq.n	8005f6a <__multiply+0x132>
 8005f28:	4647      	mov	r7, r8
 8005f2a:	46a4      	mov	ip, r4
 8005f2c:	f04f 0a00 	mov.w	sl, #0
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	f8b7 b000 	ldrh.w	fp, [r7]
 8005f36:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	fb09 220b 	mla	r2, r9, fp, r2
 8005f40:	4452      	add	r2, sl
 8005f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f46:	f84c 3b04 	str.w	r3, [ip], #4
 8005f4a:	f857 3b04 	ldr.w	r3, [r7], #4
 8005f4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f52:	f8bc 3000 	ldrh.w	r3, [ip]
 8005f56:	42bd      	cmp	r5, r7
 8005f58:	fb09 330a 	mla	r3, r9, sl, r3
 8005f5c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005f60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f64:	d8e5      	bhi.n	8005f32 <__multiply+0xfa>
 8005f66:	9a01      	ldr	r2, [sp, #4]
 8005f68:	50a3      	str	r3, [r4, r2]
 8005f6a:	3404      	adds	r4, #4
 8005f6c:	e79f      	b.n	8005eae <__multiply+0x76>
 8005f6e:	3e01      	subs	r6, #1
 8005f70:	e7a1      	b.n	8005eb6 <__multiply+0x7e>
 8005f72:	bf00      	nop
 8005f74:	08006ba2 	.word	0x08006ba2
 8005f78:	08006bb3 	.word	0x08006bb3

08005f7c <__pow5mult>:
 8005f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f80:	4615      	mov	r5, r2
 8005f82:	f012 0203 	ands.w	r2, r2, #3
 8005f86:	4607      	mov	r7, r0
 8005f88:	460e      	mov	r6, r1
 8005f8a:	d007      	beq.n	8005f9c <__pow5mult+0x20>
 8005f8c:	4c25      	ldr	r4, [pc, #148]	@ (8006024 <__pow5mult+0xa8>)
 8005f8e:	3a01      	subs	r2, #1
 8005f90:	2300      	movs	r3, #0
 8005f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f96:	f7ff fea7 	bl	8005ce8 <__multadd>
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	10ad      	asrs	r5, r5, #2
 8005f9e:	d03d      	beq.n	800601c <__pow5mult+0xa0>
 8005fa0:	69fc      	ldr	r4, [r7, #28]
 8005fa2:	b97c      	cbnz	r4, 8005fc4 <__pow5mult+0x48>
 8005fa4:	2010      	movs	r0, #16
 8005fa6:	f7ff fd87 	bl	8005ab8 <malloc>
 8005faa:	4602      	mov	r2, r0
 8005fac:	61f8      	str	r0, [r7, #28]
 8005fae:	b928      	cbnz	r0, 8005fbc <__pow5mult+0x40>
 8005fb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8006028 <__pow5mult+0xac>)
 8005fb6:	481d      	ldr	r0, [pc, #116]	@ (800602c <__pow5mult+0xb0>)
 8005fb8:	f000 fa74 	bl	80064a4 <__assert_func>
 8005fbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fc0:	6004      	str	r4, [r0, #0]
 8005fc2:	60c4      	str	r4, [r0, #12]
 8005fc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005fc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fcc:	b94c      	cbnz	r4, 8005fe2 <__pow5mult+0x66>
 8005fce:	f240 2171 	movw	r1, #625	@ 0x271
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f7ff ff1a 	bl	8005e0c <__i2b>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4604      	mov	r4, r0
 8005fdc:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fe0:	6003      	str	r3, [r0, #0]
 8005fe2:	f04f 0900 	mov.w	r9, #0
 8005fe6:	07eb      	lsls	r3, r5, #31
 8005fe8:	d50a      	bpl.n	8006000 <__pow5mult+0x84>
 8005fea:	4631      	mov	r1, r6
 8005fec:	4622      	mov	r2, r4
 8005fee:	4638      	mov	r0, r7
 8005ff0:	f7ff ff22 	bl	8005e38 <__multiply>
 8005ff4:	4680      	mov	r8, r0
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	f7ff fe53 	bl	8005ca4 <_Bfree>
 8005ffe:	4646      	mov	r6, r8
 8006000:	106d      	asrs	r5, r5, #1
 8006002:	d00b      	beq.n	800601c <__pow5mult+0xa0>
 8006004:	6820      	ldr	r0, [r4, #0]
 8006006:	b938      	cbnz	r0, 8006018 <__pow5mult+0x9c>
 8006008:	4622      	mov	r2, r4
 800600a:	4621      	mov	r1, r4
 800600c:	4638      	mov	r0, r7
 800600e:	f7ff ff13 	bl	8005e38 <__multiply>
 8006012:	6020      	str	r0, [r4, #0]
 8006014:	f8c0 9000 	str.w	r9, [r0]
 8006018:	4604      	mov	r4, r0
 800601a:	e7e4      	b.n	8005fe6 <__pow5mult+0x6a>
 800601c:	4630      	mov	r0, r6
 800601e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006022:	bf00      	nop
 8006024:	08006c64 	.word	0x08006c64
 8006028:	08006b33 	.word	0x08006b33
 800602c:	08006bb3 	.word	0x08006bb3

08006030 <__lshift>:
 8006030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006034:	460c      	mov	r4, r1
 8006036:	4607      	mov	r7, r0
 8006038:	4691      	mov	r9, r2
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	6849      	ldr	r1, [r1, #4]
 800603e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006042:	68a3      	ldr	r3, [r4, #8]
 8006044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006048:	f108 0601 	add.w	r6, r8, #1
 800604c:	42b3      	cmp	r3, r6
 800604e:	db0b      	blt.n	8006068 <__lshift+0x38>
 8006050:	4638      	mov	r0, r7
 8006052:	f7ff fde7 	bl	8005c24 <_Balloc>
 8006056:	4605      	mov	r5, r0
 8006058:	b948      	cbnz	r0, 800606e <__lshift+0x3e>
 800605a:	4602      	mov	r2, r0
 800605c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006060:	4b27      	ldr	r3, [pc, #156]	@ (8006100 <__lshift+0xd0>)
 8006062:	4828      	ldr	r0, [pc, #160]	@ (8006104 <__lshift+0xd4>)
 8006064:	f000 fa1e 	bl	80064a4 <__assert_func>
 8006068:	3101      	adds	r1, #1
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	e7ee      	b.n	800604c <__lshift+0x1c>
 800606e:	2300      	movs	r3, #0
 8006070:	f100 0114 	add.w	r1, r0, #20
 8006074:	f100 0210 	add.w	r2, r0, #16
 8006078:	4618      	mov	r0, r3
 800607a:	4553      	cmp	r3, sl
 800607c:	db33      	blt.n	80060e6 <__lshift+0xb6>
 800607e:	6920      	ldr	r0, [r4, #16]
 8006080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006084:	f104 0314 	add.w	r3, r4, #20
 8006088:	f019 091f 	ands.w	r9, r9, #31
 800608c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006090:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006094:	d02b      	beq.n	80060ee <__lshift+0xbe>
 8006096:	468a      	mov	sl, r1
 8006098:	2200      	movs	r2, #0
 800609a:	f1c9 0e20 	rsb	lr, r9, #32
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	fa00 f009 	lsl.w	r0, r0, r9
 80060a4:	4310      	orrs	r0, r2
 80060a6:	f84a 0b04 	str.w	r0, [sl], #4
 80060aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ae:	459c      	cmp	ip, r3
 80060b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80060b4:	d8f3      	bhi.n	800609e <__lshift+0x6e>
 80060b6:	ebac 0304 	sub.w	r3, ip, r4
 80060ba:	3b15      	subs	r3, #21
 80060bc:	f023 0303 	bic.w	r3, r3, #3
 80060c0:	3304      	adds	r3, #4
 80060c2:	f104 0015 	add.w	r0, r4, #21
 80060c6:	4560      	cmp	r0, ip
 80060c8:	bf88      	it	hi
 80060ca:	2304      	movhi	r3, #4
 80060cc:	50ca      	str	r2, [r1, r3]
 80060ce:	b10a      	cbz	r2, 80060d4 <__lshift+0xa4>
 80060d0:	f108 0602 	add.w	r6, r8, #2
 80060d4:	3e01      	subs	r6, #1
 80060d6:	4638      	mov	r0, r7
 80060d8:	4621      	mov	r1, r4
 80060da:	612e      	str	r6, [r5, #16]
 80060dc:	f7ff fde2 	bl	8005ca4 <_Bfree>
 80060e0:	4628      	mov	r0, r5
 80060e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80060ea:	3301      	adds	r3, #1
 80060ec:	e7c5      	b.n	800607a <__lshift+0x4a>
 80060ee:	3904      	subs	r1, #4
 80060f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f4:	459c      	cmp	ip, r3
 80060f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80060fa:	d8f9      	bhi.n	80060f0 <__lshift+0xc0>
 80060fc:	e7ea      	b.n	80060d4 <__lshift+0xa4>
 80060fe:	bf00      	nop
 8006100:	08006ba2 	.word	0x08006ba2
 8006104:	08006bb3 	.word	0x08006bb3

08006108 <__mcmp>:
 8006108:	4603      	mov	r3, r0
 800610a:	690a      	ldr	r2, [r1, #16]
 800610c:	6900      	ldr	r0, [r0, #16]
 800610e:	b530      	push	{r4, r5, lr}
 8006110:	1a80      	subs	r0, r0, r2
 8006112:	d10e      	bne.n	8006132 <__mcmp+0x2a>
 8006114:	3314      	adds	r3, #20
 8006116:	3114      	adds	r1, #20
 8006118:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800611c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006120:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006124:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006128:	4295      	cmp	r5, r2
 800612a:	d003      	beq.n	8006134 <__mcmp+0x2c>
 800612c:	d205      	bcs.n	800613a <__mcmp+0x32>
 800612e:	f04f 30ff 	mov.w	r0, #4294967295
 8006132:	bd30      	pop	{r4, r5, pc}
 8006134:	42a3      	cmp	r3, r4
 8006136:	d3f3      	bcc.n	8006120 <__mcmp+0x18>
 8006138:	e7fb      	b.n	8006132 <__mcmp+0x2a>
 800613a:	2001      	movs	r0, #1
 800613c:	e7f9      	b.n	8006132 <__mcmp+0x2a>
	...

08006140 <__mdiff>:
 8006140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	4689      	mov	r9, r1
 8006146:	4606      	mov	r6, r0
 8006148:	4611      	mov	r1, r2
 800614a:	4648      	mov	r0, r9
 800614c:	4614      	mov	r4, r2
 800614e:	f7ff ffdb 	bl	8006108 <__mcmp>
 8006152:	1e05      	subs	r5, r0, #0
 8006154:	d112      	bne.n	800617c <__mdiff+0x3c>
 8006156:	4629      	mov	r1, r5
 8006158:	4630      	mov	r0, r6
 800615a:	f7ff fd63 	bl	8005c24 <_Balloc>
 800615e:	4602      	mov	r2, r0
 8006160:	b928      	cbnz	r0, 800616e <__mdiff+0x2e>
 8006162:	f240 2137 	movw	r1, #567	@ 0x237
 8006166:	4b3e      	ldr	r3, [pc, #248]	@ (8006260 <__mdiff+0x120>)
 8006168:	483e      	ldr	r0, [pc, #248]	@ (8006264 <__mdiff+0x124>)
 800616a:	f000 f99b 	bl	80064a4 <__assert_func>
 800616e:	2301      	movs	r3, #1
 8006170:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006174:	4610      	mov	r0, r2
 8006176:	b003      	add	sp, #12
 8006178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617c:	bfbc      	itt	lt
 800617e:	464b      	movlt	r3, r9
 8006180:	46a1      	movlt	r9, r4
 8006182:	4630      	mov	r0, r6
 8006184:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006188:	bfba      	itte	lt
 800618a:	461c      	movlt	r4, r3
 800618c:	2501      	movlt	r5, #1
 800618e:	2500      	movge	r5, #0
 8006190:	f7ff fd48 	bl	8005c24 <_Balloc>
 8006194:	4602      	mov	r2, r0
 8006196:	b918      	cbnz	r0, 80061a0 <__mdiff+0x60>
 8006198:	f240 2145 	movw	r1, #581	@ 0x245
 800619c:	4b30      	ldr	r3, [pc, #192]	@ (8006260 <__mdiff+0x120>)
 800619e:	e7e3      	b.n	8006168 <__mdiff+0x28>
 80061a0:	f100 0b14 	add.w	fp, r0, #20
 80061a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80061a8:	f109 0310 	add.w	r3, r9, #16
 80061ac:	60c5      	str	r5, [r0, #12]
 80061ae:	f04f 0c00 	mov.w	ip, #0
 80061b2:	f109 0514 	add.w	r5, r9, #20
 80061b6:	46d9      	mov	r9, fp
 80061b8:	6926      	ldr	r6, [r4, #16]
 80061ba:	f104 0e14 	add.w	lr, r4, #20
 80061be:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80061c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	9b01      	ldr	r3, [sp, #4]
 80061ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80061ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80061d2:	b281      	uxth	r1, r0
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	fa1f f38a 	uxth.w	r3, sl
 80061da:	1a5b      	subs	r3, r3, r1
 80061dc:	0c00      	lsrs	r0, r0, #16
 80061de:	4463      	add	r3, ip
 80061e0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80061e4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80061ee:	4576      	cmp	r6, lr
 80061f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061f4:	f849 3b04 	str.w	r3, [r9], #4
 80061f8:	d8e6      	bhi.n	80061c8 <__mdiff+0x88>
 80061fa:	1b33      	subs	r3, r6, r4
 80061fc:	3b15      	subs	r3, #21
 80061fe:	f023 0303 	bic.w	r3, r3, #3
 8006202:	3415      	adds	r4, #21
 8006204:	3304      	adds	r3, #4
 8006206:	42a6      	cmp	r6, r4
 8006208:	bf38      	it	cc
 800620a:	2304      	movcc	r3, #4
 800620c:	441d      	add	r5, r3
 800620e:	445b      	add	r3, fp
 8006210:	461e      	mov	r6, r3
 8006212:	462c      	mov	r4, r5
 8006214:	4544      	cmp	r4, r8
 8006216:	d30e      	bcc.n	8006236 <__mdiff+0xf6>
 8006218:	f108 0103 	add.w	r1, r8, #3
 800621c:	1b49      	subs	r1, r1, r5
 800621e:	f021 0103 	bic.w	r1, r1, #3
 8006222:	3d03      	subs	r5, #3
 8006224:	45a8      	cmp	r8, r5
 8006226:	bf38      	it	cc
 8006228:	2100      	movcc	r1, #0
 800622a:	440b      	add	r3, r1
 800622c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006230:	b199      	cbz	r1, 800625a <__mdiff+0x11a>
 8006232:	6117      	str	r7, [r2, #16]
 8006234:	e79e      	b.n	8006174 <__mdiff+0x34>
 8006236:	46e6      	mov	lr, ip
 8006238:	f854 1b04 	ldr.w	r1, [r4], #4
 800623c:	fa1f fc81 	uxth.w	ip, r1
 8006240:	44f4      	add	ip, lr
 8006242:	0c08      	lsrs	r0, r1, #16
 8006244:	4471      	add	r1, lr
 8006246:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800624a:	b289      	uxth	r1, r1
 800624c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006250:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006254:	f846 1b04 	str.w	r1, [r6], #4
 8006258:	e7dc      	b.n	8006214 <__mdiff+0xd4>
 800625a:	3f01      	subs	r7, #1
 800625c:	e7e6      	b.n	800622c <__mdiff+0xec>
 800625e:	bf00      	nop
 8006260:	08006ba2 	.word	0x08006ba2
 8006264:	08006bb3 	.word	0x08006bb3

08006268 <__d2b>:
 8006268:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800626c:	2101      	movs	r1, #1
 800626e:	4690      	mov	r8, r2
 8006270:	4699      	mov	r9, r3
 8006272:	9e08      	ldr	r6, [sp, #32]
 8006274:	f7ff fcd6 	bl	8005c24 <_Balloc>
 8006278:	4604      	mov	r4, r0
 800627a:	b930      	cbnz	r0, 800628a <__d2b+0x22>
 800627c:	4602      	mov	r2, r0
 800627e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006282:	4b23      	ldr	r3, [pc, #140]	@ (8006310 <__d2b+0xa8>)
 8006284:	4823      	ldr	r0, [pc, #140]	@ (8006314 <__d2b+0xac>)
 8006286:	f000 f90d 	bl	80064a4 <__assert_func>
 800628a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800628e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006292:	b10d      	cbz	r5, 8006298 <__d2b+0x30>
 8006294:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	f1b8 0300 	subs.w	r3, r8, #0
 800629e:	d024      	beq.n	80062ea <__d2b+0x82>
 80062a0:	4668      	mov	r0, sp
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	f7ff fd85 	bl	8005db2 <__lo0bits>
 80062a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80062ac:	b1d8      	cbz	r0, 80062e6 <__d2b+0x7e>
 80062ae:	f1c0 0320 	rsb	r3, r0, #32
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	430b      	orrs	r3, r1
 80062b8:	40c2      	lsrs	r2, r0
 80062ba:	6163      	str	r3, [r4, #20]
 80062bc:	9201      	str	r2, [sp, #4]
 80062be:	9b01      	ldr	r3, [sp, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf0c      	ite	eq
 80062c4:	2201      	moveq	r2, #1
 80062c6:	2202      	movne	r2, #2
 80062c8:	61a3      	str	r3, [r4, #24]
 80062ca:	6122      	str	r2, [r4, #16]
 80062cc:	b1ad      	cbz	r5, 80062fa <__d2b+0x92>
 80062ce:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80062d2:	4405      	add	r5, r0
 80062d4:	6035      	str	r5, [r6, #0]
 80062d6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80062da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062dc:	6018      	str	r0, [r3, #0]
 80062de:	4620      	mov	r0, r4
 80062e0:	b002      	add	sp, #8
 80062e2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80062e6:	6161      	str	r1, [r4, #20]
 80062e8:	e7e9      	b.n	80062be <__d2b+0x56>
 80062ea:	a801      	add	r0, sp, #4
 80062ec:	f7ff fd61 	bl	8005db2 <__lo0bits>
 80062f0:	9b01      	ldr	r3, [sp, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	6163      	str	r3, [r4, #20]
 80062f6:	3020      	adds	r0, #32
 80062f8:	e7e7      	b.n	80062ca <__d2b+0x62>
 80062fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80062fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006302:	6030      	str	r0, [r6, #0]
 8006304:	6918      	ldr	r0, [r3, #16]
 8006306:	f7ff fd35 	bl	8005d74 <__hi0bits>
 800630a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800630e:	e7e4      	b.n	80062da <__d2b+0x72>
 8006310:	08006ba2 	.word	0x08006ba2
 8006314:	08006bb3 	.word	0x08006bb3

08006318 <__sflush_r>:
 8006318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	0716      	lsls	r6, r2, #28
 8006320:	4605      	mov	r5, r0
 8006322:	460c      	mov	r4, r1
 8006324:	d454      	bmi.n	80063d0 <__sflush_r+0xb8>
 8006326:	684b      	ldr	r3, [r1, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	dc02      	bgt.n	8006332 <__sflush_r+0x1a>
 800632c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	dd48      	ble.n	80063c4 <__sflush_r+0xac>
 8006332:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006334:	2e00      	cmp	r6, #0
 8006336:	d045      	beq.n	80063c4 <__sflush_r+0xac>
 8006338:	2300      	movs	r3, #0
 800633a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800633e:	682f      	ldr	r7, [r5, #0]
 8006340:	6a21      	ldr	r1, [r4, #32]
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	d030      	beq.n	80063a8 <__sflush_r+0x90>
 8006346:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	0759      	lsls	r1, r3, #29
 800634c:	d505      	bpl.n	800635a <__sflush_r+0x42>
 800634e:	6863      	ldr	r3, [r4, #4]
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006354:	b10b      	cbz	r3, 800635a <__sflush_r+0x42>
 8006356:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006358:	1ad2      	subs	r2, r2, r3
 800635a:	2300      	movs	r3, #0
 800635c:	4628      	mov	r0, r5
 800635e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006360:	6a21      	ldr	r1, [r4, #32]
 8006362:	47b0      	blx	r6
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	d106      	bne.n	8006378 <__sflush_r+0x60>
 800636a:	6829      	ldr	r1, [r5, #0]
 800636c:	291d      	cmp	r1, #29
 800636e:	d82b      	bhi.n	80063c8 <__sflush_r+0xb0>
 8006370:	4a28      	ldr	r2, [pc, #160]	@ (8006414 <__sflush_r+0xfc>)
 8006372:	40ca      	lsrs	r2, r1
 8006374:	07d6      	lsls	r6, r2, #31
 8006376:	d527      	bpl.n	80063c8 <__sflush_r+0xb0>
 8006378:	2200      	movs	r2, #0
 800637a:	6062      	str	r2, [r4, #4]
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	04d9      	lsls	r1, r3, #19
 8006380:	6022      	str	r2, [r4, #0]
 8006382:	d504      	bpl.n	800638e <__sflush_r+0x76>
 8006384:	1c42      	adds	r2, r0, #1
 8006386:	d101      	bne.n	800638c <__sflush_r+0x74>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b903      	cbnz	r3, 800638e <__sflush_r+0x76>
 800638c:	6560      	str	r0, [r4, #84]	@ 0x54
 800638e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006390:	602f      	str	r7, [r5, #0]
 8006392:	b1b9      	cbz	r1, 80063c4 <__sflush_r+0xac>
 8006394:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006398:	4299      	cmp	r1, r3
 800639a:	d002      	beq.n	80063a2 <__sflush_r+0x8a>
 800639c:	4628      	mov	r0, r5
 800639e:	f7ff fb43 	bl	8005a28 <_free_r>
 80063a2:	2300      	movs	r3, #0
 80063a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80063a6:	e00d      	b.n	80063c4 <__sflush_r+0xac>
 80063a8:	2301      	movs	r3, #1
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b0      	blx	r6
 80063ae:	4602      	mov	r2, r0
 80063b0:	1c50      	adds	r0, r2, #1
 80063b2:	d1c9      	bne.n	8006348 <__sflush_r+0x30>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0c6      	beq.n	8006348 <__sflush_r+0x30>
 80063ba:	2b1d      	cmp	r3, #29
 80063bc:	d001      	beq.n	80063c2 <__sflush_r+0xaa>
 80063be:	2b16      	cmp	r3, #22
 80063c0:	d11d      	bne.n	80063fe <__sflush_r+0xe6>
 80063c2:	602f      	str	r7, [r5, #0]
 80063c4:	2000      	movs	r0, #0
 80063c6:	e021      	b.n	800640c <__sflush_r+0xf4>
 80063c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063cc:	b21b      	sxth	r3, r3
 80063ce:	e01a      	b.n	8006406 <__sflush_r+0xee>
 80063d0:	690f      	ldr	r7, [r1, #16]
 80063d2:	2f00      	cmp	r7, #0
 80063d4:	d0f6      	beq.n	80063c4 <__sflush_r+0xac>
 80063d6:	0793      	lsls	r3, r2, #30
 80063d8:	bf18      	it	ne
 80063da:	2300      	movne	r3, #0
 80063dc:	680e      	ldr	r6, [r1, #0]
 80063de:	bf08      	it	eq
 80063e0:	694b      	ldreq	r3, [r1, #20]
 80063e2:	1bf6      	subs	r6, r6, r7
 80063e4:	600f      	str	r7, [r1, #0]
 80063e6:	608b      	str	r3, [r1, #8]
 80063e8:	2e00      	cmp	r6, #0
 80063ea:	ddeb      	ble.n	80063c4 <__sflush_r+0xac>
 80063ec:	4633      	mov	r3, r6
 80063ee:	463a      	mov	r2, r7
 80063f0:	4628      	mov	r0, r5
 80063f2:	6a21      	ldr	r1, [r4, #32]
 80063f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80063f8:	47e0      	blx	ip
 80063fa:	2800      	cmp	r0, #0
 80063fc:	dc07      	bgt.n	800640e <__sflush_r+0xf6>
 80063fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006406:	f04f 30ff 	mov.w	r0, #4294967295
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800640e:	4407      	add	r7, r0
 8006410:	1a36      	subs	r6, r6, r0
 8006412:	e7e9      	b.n	80063e8 <__sflush_r+0xd0>
 8006414:	20400001 	.word	0x20400001

08006418 <_fflush_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	690b      	ldr	r3, [r1, #16]
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	b913      	cbnz	r3, 8006428 <_fflush_r+0x10>
 8006422:	2500      	movs	r5, #0
 8006424:	4628      	mov	r0, r5
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	b118      	cbz	r0, 8006432 <_fflush_r+0x1a>
 800642a:	6a03      	ldr	r3, [r0, #32]
 800642c:	b90b      	cbnz	r3, 8006432 <_fflush_r+0x1a>
 800642e:	f7fe fb95 	bl	8004b5c <__sinit>
 8006432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f3      	beq.n	8006422 <_fflush_r+0xa>
 800643a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800643c:	07d0      	lsls	r0, r2, #31
 800643e:	d404      	bmi.n	800644a <_fflush_r+0x32>
 8006440:	0599      	lsls	r1, r3, #22
 8006442:	d402      	bmi.n	800644a <_fflush_r+0x32>
 8006444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006446:	f7fe fc80 	bl	8004d4a <__retarget_lock_acquire_recursive>
 800644a:	4628      	mov	r0, r5
 800644c:	4621      	mov	r1, r4
 800644e:	f7ff ff63 	bl	8006318 <__sflush_r>
 8006452:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006454:	4605      	mov	r5, r0
 8006456:	07da      	lsls	r2, r3, #31
 8006458:	d4e4      	bmi.n	8006424 <_fflush_r+0xc>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	059b      	lsls	r3, r3, #22
 800645e:	d4e1      	bmi.n	8006424 <_fflush_r+0xc>
 8006460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006462:	f7fe fc73 	bl	8004d4c <__retarget_lock_release_recursive>
 8006466:	e7dd      	b.n	8006424 <_fflush_r+0xc>

08006468 <_sbrk_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	2300      	movs	r3, #0
 800646c:	4d05      	ldr	r5, [pc, #20]	@ (8006484 <_sbrk_r+0x1c>)
 800646e:	4604      	mov	r4, r0
 8006470:	4608      	mov	r0, r1
 8006472:	602b      	str	r3, [r5, #0]
 8006474:	f7fb fa76 	bl	8001964 <_sbrk>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d102      	bne.n	8006482 <_sbrk_r+0x1a>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	b103      	cbz	r3, 8006482 <_sbrk_r+0x1a>
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	2000066c 	.word	0x2000066c

08006488 <memcpy>:
 8006488:	440a      	add	r2, r1
 800648a:	4291      	cmp	r1, r2
 800648c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006490:	d100      	bne.n	8006494 <memcpy+0xc>
 8006492:	4770      	bx	lr
 8006494:	b510      	push	{r4, lr}
 8006496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800649a:	4291      	cmp	r1, r2
 800649c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064a0:	d1f9      	bne.n	8006496 <memcpy+0xe>
 80064a2:	bd10      	pop	{r4, pc}

080064a4 <__assert_func>:
 80064a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064a6:	4614      	mov	r4, r2
 80064a8:	461a      	mov	r2, r3
 80064aa:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <__assert_func+0x2c>)
 80064ac:	4605      	mov	r5, r0
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68d8      	ldr	r0, [r3, #12]
 80064b2:	b14c      	cbz	r4, 80064c8 <__assert_func+0x24>
 80064b4:	4b07      	ldr	r3, [pc, #28]	@ (80064d4 <__assert_func+0x30>)
 80064b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064ba:	9100      	str	r1, [sp, #0]
 80064bc:	462b      	mov	r3, r5
 80064be:	4906      	ldr	r1, [pc, #24]	@ (80064d8 <__assert_func+0x34>)
 80064c0:	f000 f842 	bl	8006548 <fiprintf>
 80064c4:	f000 f852 	bl	800656c <abort>
 80064c8:	4b04      	ldr	r3, [pc, #16]	@ (80064dc <__assert_func+0x38>)
 80064ca:	461c      	mov	r4, r3
 80064cc:	e7f3      	b.n	80064b6 <__assert_func+0x12>
 80064ce:	bf00      	nop
 80064d0:	20000030 	.word	0x20000030
 80064d4:	08006c16 	.word	0x08006c16
 80064d8:	08006c23 	.word	0x08006c23
 80064dc:	08006c51 	.word	0x08006c51

080064e0 <_calloc_r>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	fba1 5402 	umull	r5, r4, r1, r2
 80064e6:	b934      	cbnz	r4, 80064f6 <_calloc_r+0x16>
 80064e8:	4629      	mov	r1, r5
 80064ea:	f7ff fb0f 	bl	8005b0c <_malloc_r>
 80064ee:	4606      	mov	r6, r0
 80064f0:	b928      	cbnz	r0, 80064fe <_calloc_r+0x1e>
 80064f2:	4630      	mov	r0, r6
 80064f4:	bd70      	pop	{r4, r5, r6, pc}
 80064f6:	220c      	movs	r2, #12
 80064f8:	2600      	movs	r6, #0
 80064fa:	6002      	str	r2, [r0, #0]
 80064fc:	e7f9      	b.n	80064f2 <_calloc_r+0x12>
 80064fe:	462a      	mov	r2, r5
 8006500:	4621      	mov	r1, r4
 8006502:	f7fe fba4 	bl	8004c4e <memset>
 8006506:	e7f4      	b.n	80064f2 <_calloc_r+0x12>

08006508 <__ascii_mbtowc>:
 8006508:	b082      	sub	sp, #8
 800650a:	b901      	cbnz	r1, 800650e <__ascii_mbtowc+0x6>
 800650c:	a901      	add	r1, sp, #4
 800650e:	b142      	cbz	r2, 8006522 <__ascii_mbtowc+0x1a>
 8006510:	b14b      	cbz	r3, 8006526 <__ascii_mbtowc+0x1e>
 8006512:	7813      	ldrb	r3, [r2, #0]
 8006514:	600b      	str	r3, [r1, #0]
 8006516:	7812      	ldrb	r2, [r2, #0]
 8006518:	1e10      	subs	r0, r2, #0
 800651a:	bf18      	it	ne
 800651c:	2001      	movne	r0, #1
 800651e:	b002      	add	sp, #8
 8006520:	4770      	bx	lr
 8006522:	4610      	mov	r0, r2
 8006524:	e7fb      	b.n	800651e <__ascii_mbtowc+0x16>
 8006526:	f06f 0001 	mvn.w	r0, #1
 800652a:	e7f8      	b.n	800651e <__ascii_mbtowc+0x16>

0800652c <__ascii_wctomb>:
 800652c:	4603      	mov	r3, r0
 800652e:	4608      	mov	r0, r1
 8006530:	b141      	cbz	r1, 8006544 <__ascii_wctomb+0x18>
 8006532:	2aff      	cmp	r2, #255	@ 0xff
 8006534:	d904      	bls.n	8006540 <__ascii_wctomb+0x14>
 8006536:	228a      	movs	r2, #138	@ 0x8a
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	4770      	bx	lr
 8006540:	2001      	movs	r0, #1
 8006542:	700a      	strb	r2, [r1, #0]
 8006544:	4770      	bx	lr
	...

08006548 <fiprintf>:
 8006548:	b40e      	push	{r1, r2, r3}
 800654a:	b503      	push	{r0, r1, lr}
 800654c:	4601      	mov	r1, r0
 800654e:	ab03      	add	r3, sp, #12
 8006550:	4805      	ldr	r0, [pc, #20]	@ (8006568 <fiprintf+0x20>)
 8006552:	f853 2b04 	ldr.w	r2, [r3], #4
 8006556:	6800      	ldr	r0, [r0, #0]
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	f000 f835 	bl	80065c8 <_vfiprintf_r>
 800655e:	b002      	add	sp, #8
 8006560:	f85d eb04 	ldr.w	lr, [sp], #4
 8006564:	b003      	add	sp, #12
 8006566:	4770      	bx	lr
 8006568:	20000030 	.word	0x20000030

0800656c <abort>:
 800656c:	2006      	movs	r0, #6
 800656e:	b508      	push	{r3, lr}
 8006570:	f000 f9fe 	bl	8006970 <raise>
 8006574:	2001      	movs	r0, #1
 8006576:	f7fb f980 	bl	800187a <_exit>

0800657a <__sfputc_r>:
 800657a:	6893      	ldr	r3, [r2, #8]
 800657c:	b410      	push	{r4}
 800657e:	3b01      	subs	r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	6093      	str	r3, [r2, #8]
 8006584:	da07      	bge.n	8006596 <__sfputc_r+0x1c>
 8006586:	6994      	ldr	r4, [r2, #24]
 8006588:	42a3      	cmp	r3, r4
 800658a:	db01      	blt.n	8006590 <__sfputc_r+0x16>
 800658c:	290a      	cmp	r1, #10
 800658e:	d102      	bne.n	8006596 <__sfputc_r+0x1c>
 8006590:	bc10      	pop	{r4}
 8006592:	f000 b931 	b.w	80067f8 <__swbuf_r>
 8006596:	6813      	ldr	r3, [r2, #0]
 8006598:	1c58      	adds	r0, r3, #1
 800659a:	6010      	str	r0, [r2, #0]
 800659c:	7019      	strb	r1, [r3, #0]
 800659e:	4608      	mov	r0, r1
 80065a0:	bc10      	pop	{r4}
 80065a2:	4770      	bx	lr

080065a4 <__sfputs_r>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	4606      	mov	r6, r0
 80065a8:	460f      	mov	r7, r1
 80065aa:	4614      	mov	r4, r2
 80065ac:	18d5      	adds	r5, r2, r3
 80065ae:	42ac      	cmp	r4, r5
 80065b0:	d101      	bne.n	80065b6 <__sfputs_r+0x12>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e007      	b.n	80065c6 <__sfputs_r+0x22>
 80065b6:	463a      	mov	r2, r7
 80065b8:	4630      	mov	r0, r6
 80065ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065be:	f7ff ffdc 	bl	800657a <__sfputc_r>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	d1f3      	bne.n	80065ae <__sfputs_r+0xa>
 80065c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065c8 <_vfiprintf_r>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	460d      	mov	r5, r1
 80065ce:	4614      	mov	r4, r2
 80065d0:	4698      	mov	r8, r3
 80065d2:	4606      	mov	r6, r0
 80065d4:	b09d      	sub	sp, #116	@ 0x74
 80065d6:	b118      	cbz	r0, 80065e0 <_vfiprintf_r+0x18>
 80065d8:	6a03      	ldr	r3, [r0, #32]
 80065da:	b90b      	cbnz	r3, 80065e0 <_vfiprintf_r+0x18>
 80065dc:	f7fe fabe 	bl	8004b5c <__sinit>
 80065e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065e2:	07d9      	lsls	r1, r3, #31
 80065e4:	d405      	bmi.n	80065f2 <_vfiprintf_r+0x2a>
 80065e6:	89ab      	ldrh	r3, [r5, #12]
 80065e8:	059a      	lsls	r2, r3, #22
 80065ea:	d402      	bmi.n	80065f2 <_vfiprintf_r+0x2a>
 80065ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ee:	f7fe fbac 	bl	8004d4a <__retarget_lock_acquire_recursive>
 80065f2:	89ab      	ldrh	r3, [r5, #12]
 80065f4:	071b      	lsls	r3, r3, #28
 80065f6:	d501      	bpl.n	80065fc <_vfiprintf_r+0x34>
 80065f8:	692b      	ldr	r3, [r5, #16]
 80065fa:	b99b      	cbnz	r3, 8006624 <_vfiprintf_r+0x5c>
 80065fc:	4629      	mov	r1, r5
 80065fe:	4630      	mov	r0, r6
 8006600:	f000 f938 	bl	8006874 <__swsetup_r>
 8006604:	b170      	cbz	r0, 8006624 <_vfiprintf_r+0x5c>
 8006606:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006608:	07dc      	lsls	r4, r3, #31
 800660a:	d504      	bpl.n	8006616 <_vfiprintf_r+0x4e>
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	b01d      	add	sp, #116	@ 0x74
 8006612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006616:	89ab      	ldrh	r3, [r5, #12]
 8006618:	0598      	lsls	r0, r3, #22
 800661a:	d4f7      	bmi.n	800660c <_vfiprintf_r+0x44>
 800661c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800661e:	f7fe fb95 	bl	8004d4c <__retarget_lock_release_recursive>
 8006622:	e7f3      	b.n	800660c <_vfiprintf_r+0x44>
 8006624:	2300      	movs	r3, #0
 8006626:	9309      	str	r3, [sp, #36]	@ 0x24
 8006628:	2320      	movs	r3, #32
 800662a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800662e:	2330      	movs	r3, #48	@ 0x30
 8006630:	f04f 0901 	mov.w	r9, #1
 8006634:	f8cd 800c 	str.w	r8, [sp, #12]
 8006638:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80067e4 <_vfiprintf_r+0x21c>
 800663c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006640:	4623      	mov	r3, r4
 8006642:	469a      	mov	sl, r3
 8006644:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006648:	b10a      	cbz	r2, 800664e <_vfiprintf_r+0x86>
 800664a:	2a25      	cmp	r2, #37	@ 0x25
 800664c:	d1f9      	bne.n	8006642 <_vfiprintf_r+0x7a>
 800664e:	ebba 0b04 	subs.w	fp, sl, r4
 8006652:	d00b      	beq.n	800666c <_vfiprintf_r+0xa4>
 8006654:	465b      	mov	r3, fp
 8006656:	4622      	mov	r2, r4
 8006658:	4629      	mov	r1, r5
 800665a:	4630      	mov	r0, r6
 800665c:	f7ff ffa2 	bl	80065a4 <__sfputs_r>
 8006660:	3001      	adds	r0, #1
 8006662:	f000 80a7 	beq.w	80067b4 <_vfiprintf_r+0x1ec>
 8006666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006668:	445a      	add	r2, fp
 800666a:	9209      	str	r2, [sp, #36]	@ 0x24
 800666c:	f89a 3000 	ldrb.w	r3, [sl]
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 809f 	beq.w	80067b4 <_vfiprintf_r+0x1ec>
 8006676:	2300      	movs	r3, #0
 8006678:	f04f 32ff 	mov.w	r2, #4294967295
 800667c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006680:	f10a 0a01 	add.w	sl, sl, #1
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	9307      	str	r3, [sp, #28]
 8006688:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800668c:	931a      	str	r3, [sp, #104]	@ 0x68
 800668e:	4654      	mov	r4, sl
 8006690:	2205      	movs	r2, #5
 8006692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006696:	4853      	ldr	r0, [pc, #332]	@ (80067e4 <_vfiprintf_r+0x21c>)
 8006698:	f7fe fb59 	bl	8004d4e <memchr>
 800669c:	9a04      	ldr	r2, [sp, #16]
 800669e:	b9d8      	cbnz	r0, 80066d8 <_vfiprintf_r+0x110>
 80066a0:	06d1      	lsls	r1, r2, #27
 80066a2:	bf44      	itt	mi
 80066a4:	2320      	movmi	r3, #32
 80066a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066aa:	0713      	lsls	r3, r2, #28
 80066ac:	bf44      	itt	mi
 80066ae:	232b      	movmi	r3, #43	@ 0x2b
 80066b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066b4:	f89a 3000 	ldrb.w	r3, [sl]
 80066b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ba:	d015      	beq.n	80066e8 <_vfiprintf_r+0x120>
 80066bc:	4654      	mov	r4, sl
 80066be:	2000      	movs	r0, #0
 80066c0:	f04f 0c0a 	mov.w	ip, #10
 80066c4:	9a07      	ldr	r2, [sp, #28]
 80066c6:	4621      	mov	r1, r4
 80066c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066cc:	3b30      	subs	r3, #48	@ 0x30
 80066ce:	2b09      	cmp	r3, #9
 80066d0:	d94b      	bls.n	800676a <_vfiprintf_r+0x1a2>
 80066d2:	b1b0      	cbz	r0, 8006702 <_vfiprintf_r+0x13a>
 80066d4:	9207      	str	r2, [sp, #28]
 80066d6:	e014      	b.n	8006702 <_vfiprintf_r+0x13a>
 80066d8:	eba0 0308 	sub.w	r3, r0, r8
 80066dc:	fa09 f303 	lsl.w	r3, r9, r3
 80066e0:	4313      	orrs	r3, r2
 80066e2:	46a2      	mov	sl, r4
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	e7d2      	b.n	800668e <_vfiprintf_r+0xc6>
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	1d19      	adds	r1, r3, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	9103      	str	r1, [sp, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bfbb      	ittet	lt
 80066f4:	425b      	neglt	r3, r3
 80066f6:	f042 0202 	orrlt.w	r2, r2, #2
 80066fa:	9307      	strge	r3, [sp, #28]
 80066fc:	9307      	strlt	r3, [sp, #28]
 80066fe:	bfb8      	it	lt
 8006700:	9204      	strlt	r2, [sp, #16]
 8006702:	7823      	ldrb	r3, [r4, #0]
 8006704:	2b2e      	cmp	r3, #46	@ 0x2e
 8006706:	d10a      	bne.n	800671e <_vfiprintf_r+0x156>
 8006708:	7863      	ldrb	r3, [r4, #1]
 800670a:	2b2a      	cmp	r3, #42	@ 0x2a
 800670c:	d132      	bne.n	8006774 <_vfiprintf_r+0x1ac>
 800670e:	9b03      	ldr	r3, [sp, #12]
 8006710:	3402      	adds	r4, #2
 8006712:	1d1a      	adds	r2, r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	9203      	str	r2, [sp, #12]
 8006718:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800671c:	9305      	str	r3, [sp, #20]
 800671e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80067e8 <_vfiprintf_r+0x220>
 8006722:	2203      	movs	r2, #3
 8006724:	4650      	mov	r0, sl
 8006726:	7821      	ldrb	r1, [r4, #0]
 8006728:	f7fe fb11 	bl	8004d4e <memchr>
 800672c:	b138      	cbz	r0, 800673e <_vfiprintf_r+0x176>
 800672e:	2240      	movs	r2, #64	@ 0x40
 8006730:	9b04      	ldr	r3, [sp, #16]
 8006732:	eba0 000a 	sub.w	r0, r0, sl
 8006736:	4082      	lsls	r2, r0
 8006738:	4313      	orrs	r3, r2
 800673a:	3401      	adds	r4, #1
 800673c:	9304      	str	r3, [sp, #16]
 800673e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006742:	2206      	movs	r2, #6
 8006744:	4829      	ldr	r0, [pc, #164]	@ (80067ec <_vfiprintf_r+0x224>)
 8006746:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800674a:	f7fe fb00 	bl	8004d4e <memchr>
 800674e:	2800      	cmp	r0, #0
 8006750:	d03f      	beq.n	80067d2 <_vfiprintf_r+0x20a>
 8006752:	4b27      	ldr	r3, [pc, #156]	@ (80067f0 <_vfiprintf_r+0x228>)
 8006754:	bb1b      	cbnz	r3, 800679e <_vfiprintf_r+0x1d6>
 8006756:	9b03      	ldr	r3, [sp, #12]
 8006758:	3307      	adds	r3, #7
 800675a:	f023 0307 	bic.w	r3, r3, #7
 800675e:	3308      	adds	r3, #8
 8006760:	9303      	str	r3, [sp, #12]
 8006762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006764:	443b      	add	r3, r7
 8006766:	9309      	str	r3, [sp, #36]	@ 0x24
 8006768:	e76a      	b.n	8006640 <_vfiprintf_r+0x78>
 800676a:	460c      	mov	r4, r1
 800676c:	2001      	movs	r0, #1
 800676e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006772:	e7a8      	b.n	80066c6 <_vfiprintf_r+0xfe>
 8006774:	2300      	movs	r3, #0
 8006776:	f04f 0c0a 	mov.w	ip, #10
 800677a:	4619      	mov	r1, r3
 800677c:	3401      	adds	r4, #1
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	4620      	mov	r0, r4
 8006782:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006786:	3a30      	subs	r2, #48	@ 0x30
 8006788:	2a09      	cmp	r2, #9
 800678a:	d903      	bls.n	8006794 <_vfiprintf_r+0x1cc>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0c6      	beq.n	800671e <_vfiprintf_r+0x156>
 8006790:	9105      	str	r1, [sp, #20]
 8006792:	e7c4      	b.n	800671e <_vfiprintf_r+0x156>
 8006794:	4604      	mov	r4, r0
 8006796:	2301      	movs	r3, #1
 8006798:	fb0c 2101 	mla	r1, ip, r1, r2
 800679c:	e7f0      	b.n	8006780 <_vfiprintf_r+0x1b8>
 800679e:	ab03      	add	r3, sp, #12
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	462a      	mov	r2, r5
 80067a4:	4630      	mov	r0, r6
 80067a6:	4b13      	ldr	r3, [pc, #76]	@ (80067f4 <_vfiprintf_r+0x22c>)
 80067a8:	a904      	add	r1, sp, #16
 80067aa:	f7fd fd8f 	bl	80042cc <_printf_float>
 80067ae:	4607      	mov	r7, r0
 80067b0:	1c78      	adds	r0, r7, #1
 80067b2:	d1d6      	bne.n	8006762 <_vfiprintf_r+0x19a>
 80067b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067b6:	07d9      	lsls	r1, r3, #31
 80067b8:	d405      	bmi.n	80067c6 <_vfiprintf_r+0x1fe>
 80067ba:	89ab      	ldrh	r3, [r5, #12]
 80067bc:	059a      	lsls	r2, r3, #22
 80067be:	d402      	bmi.n	80067c6 <_vfiprintf_r+0x1fe>
 80067c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067c2:	f7fe fac3 	bl	8004d4c <__retarget_lock_release_recursive>
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	065b      	lsls	r3, r3, #25
 80067ca:	f53f af1f 	bmi.w	800660c <_vfiprintf_r+0x44>
 80067ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067d0:	e71e      	b.n	8006610 <_vfiprintf_r+0x48>
 80067d2:	ab03      	add	r3, sp, #12
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	462a      	mov	r2, r5
 80067d8:	4630      	mov	r0, r6
 80067da:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <_vfiprintf_r+0x22c>)
 80067dc:	a904      	add	r1, sp, #16
 80067de:	f7fe f813 	bl	8004808 <_printf_i>
 80067e2:	e7e4      	b.n	80067ae <_vfiprintf_r+0x1e6>
 80067e4:	08006c52 	.word	0x08006c52
 80067e8:	08006c58 	.word	0x08006c58
 80067ec:	08006c5c 	.word	0x08006c5c
 80067f0:	080042cd 	.word	0x080042cd
 80067f4:	080065a5 	.word	0x080065a5

080067f8 <__swbuf_r>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	460e      	mov	r6, r1
 80067fc:	4614      	mov	r4, r2
 80067fe:	4605      	mov	r5, r0
 8006800:	b118      	cbz	r0, 800680a <__swbuf_r+0x12>
 8006802:	6a03      	ldr	r3, [r0, #32]
 8006804:	b90b      	cbnz	r3, 800680a <__swbuf_r+0x12>
 8006806:	f7fe f9a9 	bl	8004b5c <__sinit>
 800680a:	69a3      	ldr	r3, [r4, #24]
 800680c:	60a3      	str	r3, [r4, #8]
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	071a      	lsls	r2, r3, #28
 8006812:	d501      	bpl.n	8006818 <__swbuf_r+0x20>
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	b943      	cbnz	r3, 800682a <__swbuf_r+0x32>
 8006818:	4621      	mov	r1, r4
 800681a:	4628      	mov	r0, r5
 800681c:	f000 f82a 	bl	8006874 <__swsetup_r>
 8006820:	b118      	cbz	r0, 800682a <__swbuf_r+0x32>
 8006822:	f04f 37ff 	mov.w	r7, #4294967295
 8006826:	4638      	mov	r0, r7
 8006828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	6922      	ldr	r2, [r4, #16]
 800682e:	b2f6      	uxtb	r6, r6
 8006830:	1a98      	subs	r0, r3, r2
 8006832:	6963      	ldr	r3, [r4, #20]
 8006834:	4637      	mov	r7, r6
 8006836:	4283      	cmp	r3, r0
 8006838:	dc05      	bgt.n	8006846 <__swbuf_r+0x4e>
 800683a:	4621      	mov	r1, r4
 800683c:	4628      	mov	r0, r5
 800683e:	f7ff fdeb 	bl	8006418 <_fflush_r>
 8006842:	2800      	cmp	r0, #0
 8006844:	d1ed      	bne.n	8006822 <__swbuf_r+0x2a>
 8006846:	68a3      	ldr	r3, [r4, #8]
 8006848:	3b01      	subs	r3, #1
 800684a:	60a3      	str	r3, [r4, #8]
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	6022      	str	r2, [r4, #0]
 8006852:	701e      	strb	r6, [r3, #0]
 8006854:	6962      	ldr	r2, [r4, #20]
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	429a      	cmp	r2, r3
 800685a:	d004      	beq.n	8006866 <__swbuf_r+0x6e>
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	07db      	lsls	r3, r3, #31
 8006860:	d5e1      	bpl.n	8006826 <__swbuf_r+0x2e>
 8006862:	2e0a      	cmp	r6, #10
 8006864:	d1df      	bne.n	8006826 <__swbuf_r+0x2e>
 8006866:	4621      	mov	r1, r4
 8006868:	4628      	mov	r0, r5
 800686a:	f7ff fdd5 	bl	8006418 <_fflush_r>
 800686e:	2800      	cmp	r0, #0
 8006870:	d0d9      	beq.n	8006826 <__swbuf_r+0x2e>
 8006872:	e7d6      	b.n	8006822 <__swbuf_r+0x2a>

08006874 <__swsetup_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4b29      	ldr	r3, [pc, #164]	@ (800691c <__swsetup_r+0xa8>)
 8006878:	4605      	mov	r5, r0
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	460c      	mov	r4, r1
 800687e:	b118      	cbz	r0, 8006888 <__swsetup_r+0x14>
 8006880:	6a03      	ldr	r3, [r0, #32]
 8006882:	b90b      	cbnz	r3, 8006888 <__swsetup_r+0x14>
 8006884:	f7fe f96a 	bl	8004b5c <__sinit>
 8006888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800688c:	0719      	lsls	r1, r3, #28
 800688e:	d422      	bmi.n	80068d6 <__swsetup_r+0x62>
 8006890:	06da      	lsls	r2, r3, #27
 8006892:	d407      	bmi.n	80068a4 <__swsetup_r+0x30>
 8006894:	2209      	movs	r2, #9
 8006896:	602a      	str	r2, [r5, #0]
 8006898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	81a3      	strh	r3, [r4, #12]
 80068a2:	e033      	b.n	800690c <__swsetup_r+0x98>
 80068a4:	0758      	lsls	r0, r3, #29
 80068a6:	d512      	bpl.n	80068ce <__swsetup_r+0x5a>
 80068a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068aa:	b141      	cbz	r1, 80068be <__swsetup_r+0x4a>
 80068ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068b0:	4299      	cmp	r1, r3
 80068b2:	d002      	beq.n	80068ba <__swsetup_r+0x46>
 80068b4:	4628      	mov	r0, r5
 80068b6:	f7ff f8b7 	bl	8005a28 <_free_r>
 80068ba:	2300      	movs	r3, #0
 80068bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	2300      	movs	r3, #0
 80068c8:	6063      	str	r3, [r4, #4]
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	f043 0308 	orr.w	r3, r3, #8
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	b94b      	cbnz	r3, 80068ee <__swsetup_r+0x7a>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068e4:	d003      	beq.n	80068ee <__swsetup_r+0x7a>
 80068e6:	4621      	mov	r1, r4
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 f882 	bl	80069f2 <__smakebuf_r>
 80068ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068f2:	f013 0201 	ands.w	r2, r3, #1
 80068f6:	d00a      	beq.n	800690e <__swsetup_r+0x9a>
 80068f8:	2200      	movs	r2, #0
 80068fa:	60a2      	str	r2, [r4, #8]
 80068fc:	6962      	ldr	r2, [r4, #20]
 80068fe:	4252      	negs	r2, r2
 8006900:	61a2      	str	r2, [r4, #24]
 8006902:	6922      	ldr	r2, [r4, #16]
 8006904:	b942      	cbnz	r2, 8006918 <__swsetup_r+0xa4>
 8006906:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800690a:	d1c5      	bne.n	8006898 <__swsetup_r+0x24>
 800690c:	bd38      	pop	{r3, r4, r5, pc}
 800690e:	0799      	lsls	r1, r3, #30
 8006910:	bf58      	it	pl
 8006912:	6962      	ldrpl	r2, [r4, #20]
 8006914:	60a2      	str	r2, [r4, #8]
 8006916:	e7f4      	b.n	8006902 <__swsetup_r+0x8e>
 8006918:	2000      	movs	r0, #0
 800691a:	e7f7      	b.n	800690c <__swsetup_r+0x98>
 800691c:	20000030 	.word	0x20000030

08006920 <_raise_r>:
 8006920:	291f      	cmp	r1, #31
 8006922:	b538      	push	{r3, r4, r5, lr}
 8006924:	4605      	mov	r5, r0
 8006926:	460c      	mov	r4, r1
 8006928:	d904      	bls.n	8006934 <_raise_r+0x14>
 800692a:	2316      	movs	r3, #22
 800692c:	6003      	str	r3, [r0, #0]
 800692e:	f04f 30ff 	mov.w	r0, #4294967295
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006936:	b112      	cbz	r2, 800693e <_raise_r+0x1e>
 8006938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800693c:	b94b      	cbnz	r3, 8006952 <_raise_r+0x32>
 800693e:	4628      	mov	r0, r5
 8006940:	f000 f830 	bl	80069a4 <_getpid_r>
 8006944:	4622      	mov	r2, r4
 8006946:	4601      	mov	r1, r0
 8006948:	4628      	mov	r0, r5
 800694a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800694e:	f000 b817 	b.w	8006980 <_kill_r>
 8006952:	2b01      	cmp	r3, #1
 8006954:	d00a      	beq.n	800696c <_raise_r+0x4c>
 8006956:	1c59      	adds	r1, r3, #1
 8006958:	d103      	bne.n	8006962 <_raise_r+0x42>
 800695a:	2316      	movs	r3, #22
 800695c:	6003      	str	r3, [r0, #0]
 800695e:	2001      	movs	r0, #1
 8006960:	e7e7      	b.n	8006932 <_raise_r+0x12>
 8006962:	2100      	movs	r1, #0
 8006964:	4620      	mov	r0, r4
 8006966:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800696a:	4798      	blx	r3
 800696c:	2000      	movs	r0, #0
 800696e:	e7e0      	b.n	8006932 <_raise_r+0x12>

08006970 <raise>:
 8006970:	4b02      	ldr	r3, [pc, #8]	@ (800697c <raise+0xc>)
 8006972:	4601      	mov	r1, r0
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	f7ff bfd3 	b.w	8006920 <_raise_r>
 800697a:	bf00      	nop
 800697c:	20000030 	.word	0x20000030

08006980 <_kill_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	2300      	movs	r3, #0
 8006984:	4d06      	ldr	r5, [pc, #24]	@ (80069a0 <_kill_r+0x20>)
 8006986:	4604      	mov	r4, r0
 8006988:	4608      	mov	r0, r1
 800698a:	4611      	mov	r1, r2
 800698c:	602b      	str	r3, [r5, #0]
 800698e:	f7fa ff64 	bl	800185a <_kill>
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	d102      	bne.n	800699c <_kill_r+0x1c>
 8006996:	682b      	ldr	r3, [r5, #0]
 8006998:	b103      	cbz	r3, 800699c <_kill_r+0x1c>
 800699a:	6023      	str	r3, [r4, #0]
 800699c:	bd38      	pop	{r3, r4, r5, pc}
 800699e:	bf00      	nop
 80069a0:	2000066c 	.word	0x2000066c

080069a4 <_getpid_r>:
 80069a4:	f7fa bf52 	b.w	800184c <_getpid>

080069a8 <__swhatbuf_r>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	460c      	mov	r4, r1
 80069ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b0:	4615      	mov	r5, r2
 80069b2:	2900      	cmp	r1, #0
 80069b4:	461e      	mov	r6, r3
 80069b6:	b096      	sub	sp, #88	@ 0x58
 80069b8:	da0c      	bge.n	80069d4 <__swhatbuf_r+0x2c>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	2100      	movs	r1, #0
 80069be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069c2:	bf14      	ite	ne
 80069c4:	2340      	movne	r3, #64	@ 0x40
 80069c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069ca:	2000      	movs	r0, #0
 80069cc:	6031      	str	r1, [r6, #0]
 80069ce:	602b      	str	r3, [r5, #0]
 80069d0:	b016      	add	sp, #88	@ 0x58
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	466a      	mov	r2, sp
 80069d6:	f000 f849 	bl	8006a6c <_fstat_r>
 80069da:	2800      	cmp	r0, #0
 80069dc:	dbed      	blt.n	80069ba <__swhatbuf_r+0x12>
 80069de:	9901      	ldr	r1, [sp, #4]
 80069e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069e8:	4259      	negs	r1, r3
 80069ea:	4159      	adcs	r1, r3
 80069ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069f0:	e7eb      	b.n	80069ca <__swhatbuf_r+0x22>

080069f2 <__smakebuf_r>:
 80069f2:	898b      	ldrh	r3, [r1, #12]
 80069f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069f6:	079d      	lsls	r5, r3, #30
 80069f8:	4606      	mov	r6, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	d507      	bpl.n	8006a0e <__smakebuf_r+0x1c>
 80069fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	6123      	str	r3, [r4, #16]
 8006a06:	2301      	movs	r3, #1
 8006a08:	6163      	str	r3, [r4, #20]
 8006a0a:	b003      	add	sp, #12
 8006a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a0e:	466a      	mov	r2, sp
 8006a10:	ab01      	add	r3, sp, #4
 8006a12:	f7ff ffc9 	bl	80069a8 <__swhatbuf_r>
 8006a16:	9f00      	ldr	r7, [sp, #0]
 8006a18:	4605      	mov	r5, r0
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f7ff f875 	bl	8005b0c <_malloc_r>
 8006a22:	b948      	cbnz	r0, 8006a38 <__smakebuf_r+0x46>
 8006a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a28:	059a      	lsls	r2, r3, #22
 8006a2a:	d4ee      	bmi.n	8006a0a <__smakebuf_r+0x18>
 8006a2c:	f023 0303 	bic.w	r3, r3, #3
 8006a30:	f043 0302 	orr.w	r3, r3, #2
 8006a34:	81a3      	strh	r3, [r4, #12]
 8006a36:	e7e2      	b.n	80069fe <__smakebuf_r+0xc>
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	9b01      	ldr	r3, [sp, #4]
 8006a46:	6020      	str	r0, [r4, #0]
 8006a48:	b15b      	cbz	r3, 8006a62 <__smakebuf_r+0x70>
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a50:	f000 f81e 	bl	8006a90 <_isatty_r>
 8006a54:	b128      	cbz	r0, 8006a62 <__smakebuf_r+0x70>
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f023 0303 	bic.w	r3, r3, #3
 8006a5c:	f043 0301 	orr.w	r3, r3, #1
 8006a60:	81a3      	strh	r3, [r4, #12]
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	431d      	orrs	r5, r3
 8006a66:	81a5      	strh	r5, [r4, #12]
 8006a68:	e7cf      	b.n	8006a0a <__smakebuf_r+0x18>
	...

08006a6c <_fstat_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	2300      	movs	r3, #0
 8006a70:	4d06      	ldr	r5, [pc, #24]	@ (8006a8c <_fstat_r+0x20>)
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	f7fa ff4d 	bl	8001918 <_fstat>
 8006a7e:	1c43      	adds	r3, r0, #1
 8006a80:	d102      	bne.n	8006a88 <_fstat_r+0x1c>
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	b103      	cbz	r3, 8006a88 <_fstat_r+0x1c>
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	2000066c 	.word	0x2000066c

08006a90 <_isatty_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	2300      	movs	r3, #0
 8006a94:	4d05      	ldr	r5, [pc, #20]	@ (8006aac <_isatty_r+0x1c>)
 8006a96:	4604      	mov	r4, r0
 8006a98:	4608      	mov	r0, r1
 8006a9a:	602b      	str	r3, [r5, #0]
 8006a9c:	f7fa ff4b 	bl	8001936 <_isatty>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d102      	bne.n	8006aaa <_isatty_r+0x1a>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	b103      	cbz	r3, 8006aaa <_isatty_r+0x1a>
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	2000066c 	.word	0x2000066c

08006ab0 <_init>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr

08006abc <_fini>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	bf00      	nop
 8006ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac2:	bc08      	pop	{r3}
 8006ac4:	469e      	mov	lr, r3
 8006ac6:	4770      	bx	lr
