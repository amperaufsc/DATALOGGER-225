
Datalogger V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007138  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08007248  08007248  00008248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075dc  080075dc  000091ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080075dc  080075dc  000085dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075e4  080075e4  000091ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e4  080075e4  000085e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075e8  080075e8  000085e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  080075ec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001ec  080077d8  000091ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  080077d8  00009500  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8a6  00000000  00000000  00009215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a10  00000000  00000000  00017abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c38  00000000  00000000  0001b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7e2  00000000  00000000  0001c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012922  00000000  00000000  000368ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000947bb  00000000  00000000  0004920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd9c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005238  00000000  00000000  000dda0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e2c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08007230 	.word	0x08007230

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08007230 	.word	0x08007230

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <ReadPosition>:
#include "main.h"
#include "adc_multi.h"
#include "math.h"

/* Exported functions --------------------------------------------------------*/
float ReadPosition(float voltage){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	float position = (voltage / 3.3f)* 75.0f; // Converte Tensão em Milimetros
 8000f4c:	4907      	ldr	r1, [pc, #28]	@ (8000f6c <ReadPosition+0x28>)
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff5c 	bl	8000e0c <__aeabi_fdiv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4906      	ldr	r1, [pc, #24]	@ (8000f70 <ReadPosition+0x2c>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fea3 	bl	8000ca4 <__aeabi_fmul>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	60fb      	str	r3, [r7, #12]
	return position;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40533333 	.word	0x40533333
 8000f70:	42960000 	.word	0x42960000

08000f74 <ReadVoltage>:

float ReadVoltage(uint16_t Analog_Val) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
    float voltage = (Analog_Val * 3.3f) / ((1 << 12) - 1.0f); // Converte um valor analogico para tensão
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe3b 	bl	8000bfc <__aeabi_i2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4907      	ldr	r1, [pc, #28]	@ (8000fa8 <ReadVoltage+0x34>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe8a 	bl	8000ca4 <__aeabi_fmul>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4906      	ldr	r1, [pc, #24]	@ (8000fac <ReadVoltage+0x38>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff39 	bl	8000e0c <__aeabi_fdiv>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	60fb      	str	r3, [r7, #12]
    return voltage;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40533333 	.word	0x40533333
 8000fac:	457ff000 	.word	0x457ff000

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb6:	f000 fd5f 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fba:	f000 f873 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbe:	f000 f9e3 	bl	8001388 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc2:	f000 f9c3 	bl	800134c <MX_DMA_Init>
  MX_ADC1_Init();
 8000fc6:	f000 f8c9 	bl	800115c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000fca:	f000 f93b 	bl	8001244 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000fce:	f003 fbe3 	bl	8004798 <MX_FATFS_Init>
  MX_TIM4_Init();
 8000fd2:	f000 f96d 	bl	80012b0 <MX_TIM4_Init>
  MX_CAN_Init();
 8000fd6:	f000 f8ff 	bl	80011d8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000fda:	4828      	ldr	r0, [pc, #160]	@ (800107c <main+0xcc>)
 8000fdc:	f001 fa6a 	bl	80024b4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4826      	ldr	r0, [pc, #152]	@ (800107c <main+0xcc>)
 8000fe4:	f001 fbcb 	bl	800277e <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 7; // Tamanho do dado
 8000fe8:	4b25      	ldr	r3, [pc, #148]	@ (8001080 <main+0xd0>)
 8000fea:	2207      	movs	r2, #7
 8000fec:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <main+0xd0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <main+0xd0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 	0X446; // Id da mensagem
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <main+0xd0>)
 8000ffc:	f240 4246 	movw	r2, #1094	@ 0x446
 8001000:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim4);
 8001002:	4820      	ldr	r0, [pc, #128]	@ (8001084 <main+0xd4>)
 8001004:	f003 f826 	bl	8004054 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_VAL, READSIZE);
 8001008:	2201      	movs	r2, #1
 800100a:	491f      	ldr	r1, [pc, #124]	@ (8001088 <main+0xd8>)
 800100c:	481f      	ldr	r0, [pc, #124]	@ (800108c <main+0xdc>)
 800100e:	f000 fe6d 	bl	8001cec <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(state_machine == READY_TO_DRIVE){
 8001012:	e02e      	b.n	8001072 <main+0xc2>
		  if(SendData == 1){
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <main+0xe0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d127      	bne.n	800106c <main+0xbc>
		  if(IsADCFinished == 1){
 800101c:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <main+0xe4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d123      	bne.n	800106c <main+0xbc>
			  for(int i = 0; i < READSIZE; i++){
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	e01a      	b.n	8001060 <main+0xb0>
				  ADC_Voltage[i] = ReadVoltage(ADC_VAL[i]); // Recebe as tensões convertidas
 800102a:	4a17      	ldr	r2, [pc, #92]	@ (8001088 <main+0xd8>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff9e 	bl	8000f74 <ReadVoltage>
 8001038:	4602      	mov	r2, r0
 800103a:	4917      	ldr	r1, [pc, #92]	@ (8001098 <main+0xe8>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  ADC_Position[i] = ReadPosition(ADC_Voltage[i]); // Recebe a Tensão e converte em Posição do potenciometro linear
 8001042:	4a15      	ldr	r2, [pc, #84]	@ (8001098 <main+0xe8>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff7a 	bl	8000f44 <ReadPosition>
 8001050:	4602      	mov	r2, r0
 8001052:	4912      	ldr	r1, [pc, #72]	@ (800109c <main+0xec>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  for(int i = 0; i < READSIZE; i++){
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	dde1      	ble.n	800102a <main+0x7a>
			  }
			  IsADCFinished = 0;
 8001066:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <main+0xe4>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
		  }}
		  SendData = 0;
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <main+0xe0>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
	  while(state_machine == READY_TO_DRIVE){
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <main+0xf0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d0cc      	beq.n	8001014 <main+0x64>
 800107a:	e7fa      	b.n	8001072 <main+0xc2>
 800107c:	2000027c 	.word	0x2000027c
 8001080:	20000358 	.word	0x20000358
 8001084:	200002fc 	.word	0x200002fc
 8001088:	20000344 	.word	0x20000344
 800108c:	20000208 	.word	0x20000208
 8001090:	20000354 	.word	0x20000354
 8001094:	20000350 	.word	0x20000350
 8001098:	20000348 	.word	0x20000348
 800109c:	2000034c 	.word	0x2000034c
 80010a0:	20000000 	.word	0x20000000

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	@ 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ae:	2228      	movs	r2, #40	@ 0x28
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 f98b 	bl	80053ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e2:	2301      	movs	r3, #1
 80010e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fa42 	bl	8003584 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001106:	f000 f9dd 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2102      	movs	r1, #2
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fcae 	bl	8003a88 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001132:	f000 f9c7 	bl	80014c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001136:	2302      	movs	r3, #2
 8001138:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800113a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800113e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fdfc 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800114e:	f000 f9b9 	bl	80014c4 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3750      	adds	r7, #80	@ 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_ADC1_Init+0x74>)
 800116e:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <MX_ADC1_Init+0x78>)
 8001170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <MX_ADC1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <MX_ADC1_Init+0x74>)
 800117a:	2201      	movs	r2, #1
 800117c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800117e:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_ADC1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <MX_ADC1_Init+0x74>)
 8001186:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800118a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118c:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <MX_ADC1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_ADC1_Init+0x74>)
 8001194:	2201      	movs	r2, #1
 8001196:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001198:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <MX_ADC1_Init+0x74>)
 800119a:	f000 fccf 	bl	8001b3c <HAL_ADC_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 f98e 	bl	80014c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011b0:	2307      	movs	r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_ADC1_Init+0x74>)
 80011ba:	f000 fe87 	bl	8001ecc <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011c4:	f000 f97e 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000208 	.word	0x20000208
 80011d4:	40012400 	.word	0x40012400

080011d8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80011dc:	4b17      	ldr	r3, [pc, #92]	@ (800123c <MX_CAN_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	@ (8001240 <MX_CAN_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80011e2:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_CAN_Init+0x64>)
 80011e4:	2212      	movs	r2, #18
 80011e6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_CAN_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <MX_CAN_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_CAN_Init+0x64>)
 80011f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_CAN_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_CAN_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_CAN_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_CAN_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_CAN_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_CAN_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_CAN_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_CAN_Init+0x64>)
 8001228:	f001 f849 	bl	80022be <HAL_CAN_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001232:	f000 f947 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000027c 	.word	0x2000027c
 8001240:	40006400 	.word	0x40006400

08001244 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800124a:	4a18      	ldr	r2, [pc, #96]	@ (80012ac <MX_SPI1_Init+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001250:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001254:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001274:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001278:	2210      	movs	r2, #16
 800127a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001290:	220a      	movs	r2, #10
 8001292:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001296:	f002 fe09 	bl	8003eac <HAL_SPI_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012a0:	f000 f910 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200002a4 	.word	0x200002a4
 80012ac:	40013000 	.word	0x40013000

080012b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <MX_TIM4_Init+0x94>)
 80012ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001348 <MX_TIM4_Init+0x98>)
 80012d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3600;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_TIM4_Init+0x94>)
 80012d4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80012d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_TIM4_Init+0x94>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200;
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <MX_TIM4_Init+0x94>)
 80012e2:	22c8      	movs	r2, #200	@ 0xc8
 80012e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_TIM4_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <MX_TIM4_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012f2:	4814      	ldr	r0, [pc, #80]	@ (8001344 <MX_TIM4_Init+0x94>)
 80012f4:	f002 fe5e 	bl	8003fb4 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 f8e1 	bl	80014c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <MX_TIM4_Init+0x94>)
 8001310:	f002 ffe2 	bl	80042d8 <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 f8d3 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <MX_TIM4_Init+0x94>)
 800132c:	f003 f9c4 	bl	80046b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001336:	f000 f8c5 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002fc 	.word	0x200002fc
 8001348:	40000800 	.word	0x40000800

0800134c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001352:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_DMA_Init+0x38>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <MX_DMA_Init+0x38>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_DMA_Init+0x38>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	200b      	movs	r0, #11
 8001370:	f001 fd25 	bl	8002dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001374:	200b      	movs	r0, #11
 8001376:	f001 fd3e 	bl	8002df6 <HAL_NVIC_EnableIRQ>

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139c:	4b2d      	ldr	r3, [pc, #180]	@ (8001454 <MX_GPIO_Init+0xcc>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b4:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a26      	ldr	r2, [pc, #152]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a20      	ldr	r2, [pc, #128]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_GPIO_Init+0xcc>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2110      	movs	r1, #16
 8001400:	4815      	ldr	r0, [pc, #84]	@ (8001458 <MX_GPIO_Init+0xd0>)
 8001402:	f002 f885 	bl	8003510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001406:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <MX_GPIO_Init+0xd4>)
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	4619      	mov	r1, r3
 800141a:	480f      	ldr	r0, [pc, #60]	@ (8001458 <MX_GPIO_Init+0xd0>)
 800141c:	f001 fef4 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 8001420:	2310      	movs	r3, #16
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2302      	movs	r3, #2
 800142e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	4808      	ldr	r0, [pc, #32]	@ (8001458 <MX_GPIO_Init+0xd0>)
 8001438:	f001 fee6 	bl	8003208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2028      	movs	r0, #40	@ 0x28
 8001442:	f001 fcbc 	bl	8002dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001446:	2028      	movs	r0, #40	@ 0x28
 8001448:	f001 fcd5 	bl	8002df6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000
 8001458:	40011000 	.word	0x40011000
 800145c:	10110000 	.word	0x10110000

08001460 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	SendData = 1;
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000354 	.word	0x20000354

0800147c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

	IsADCFinished = 1;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_ADC_ConvCpltCallback+0x18>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]

}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	20000350 	.word	0x20000350

08001498 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData)==HAL_OK){
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80014a2:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80014a4:	2100      	movs	r1, #0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f001 f848 	bl	800253c <HAL_CAN_GetRxMessage>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
		switch(RxHeader.StdId){
		case 0x1:
 80014b0:	bf00      	nop
		case 0x2:
		}}}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000038c 	.word	0x2000038c
 80014c0:	20000370 	.word	0x20000370

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <Error_Handler+0x8>

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_MspInit+0x5c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4a14      	ldr	r2, [pc, #80]	@ (800152c <HAL_MspInit+0x5c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6193      	str	r3, [r2, #24]
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_MspInit+0x5c>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <HAL_MspInit+0x5c>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a0e      	ldr	r2, [pc, #56]	@ (800152c <HAL_MspInit+0x5c>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <HAL_MspInit+0x5c>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_MspInit+0x60>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_MspInit+0x60>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000

08001534 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a28      	ldr	r2, [pc, #160]	@ (80015f0 <HAL_ADC_MspInit+0xbc>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d149      	bne.n	80015e8 <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <HAL_ADC_MspInit+0xc0>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a26      	ldr	r2, [pc, #152]	@ (80015f4 <HAL_ADC_MspInit+0xc0>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <HAL_ADC_MspInit+0xc0>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <HAL_ADC_MspInit+0xc0>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a20      	ldr	r2, [pc, #128]	@ (80015f4 <HAL_ADC_MspInit+0xc0>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <HAL_ADC_MspInit+0xc0>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001584:	2303      	movs	r3, #3
 8001586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001588:	2303      	movs	r3, #3
 800158a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	4819      	ldr	r0, [pc, #100]	@ (80015f8 <HAL_ADC_MspInit+0xc4>)
 8001594:	f001 fe38 	bl	8003208 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 800159a:	4a19      	ldr	r2, [pc, #100]	@ (8001600 <HAL_ADC_MspInit+0xcc>)
 800159c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 80015b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b8:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 80015ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 80015c2:	2220      	movs	r2, #32
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015cc:	480b      	ldr	r0, [pc, #44]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 80015ce:	f001 fc2d 	bl	8002e2c <HAL_DMA_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80015d8:	f7ff ff74 	bl	80014c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a07      	ldr	r2, [pc, #28]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 80015e0:	621a      	str	r2, [r3, #32]
 80015e2:	4a06      	ldr	r2, [pc, #24]	@ (80015fc <HAL_ADC_MspInit+0xc8>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40012400 	.word	0x40012400
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010800 	.word	0x40010800
 80015fc:	20000238 	.word	0x20000238
 8001600:	40020008 	.word	0x40020008

08001604 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a20      	ldr	r2, [pc, #128]	@ (80016a0 <HAL_CAN_MspInit+0x9c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d139      	bne.n	8001698 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001624:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <HAL_CAN_MspInit+0xa0>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	4a1e      	ldr	r2, [pc, #120]	@ (80016a4 <HAL_CAN_MspInit+0xa0>)
 800162a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800162e:	61d3      	str	r3, [r2, #28]
 8001630:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <HAL_CAN_MspInit+0xa0>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <HAL_CAN_MspInit+0xa0>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a18      	ldr	r2, [pc, #96]	@ (80016a4 <HAL_CAN_MspInit+0xa0>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <HAL_CAN_MspInit+0xa0>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001654:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001658:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4619      	mov	r1, r3
 8001668:	480f      	ldr	r0, [pc, #60]	@ (80016a8 <HAL_CAN_MspInit+0xa4>)
 800166a:	f001 fdcd 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800166e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	4809      	ldr	r0, [pc, #36]	@ (80016a8 <HAL_CAN_MspInit+0xa4>)
 8001684:	f001 fdc0 	bl	8003208 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	2014      	movs	r0, #20
 800168e:	f001 fb96 	bl	8002dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001692:	2014      	movs	r0, #20
 8001694:	f001 fbaf 	bl	8002df6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40006400 	.word	0x40006400
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010800 	.word	0x40010800

080016ac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001734 <HAL_SPI_MspInit+0x88>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d12f      	bne.n	800172c <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <HAL_SPI_MspInit+0x8c>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a19      	ldr	r2, [pc, #100]	@ (8001738 <HAL_SPI_MspInit+0x8c>)
 80016d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <HAL_SPI_MspInit+0x8c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <HAL_SPI_MspInit+0x8c>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a13      	ldr	r2, [pc, #76]	@ (8001738 <HAL_SPI_MspInit+0x8c>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_SPI_MspInit+0x8c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016fc:	23a0      	movs	r3, #160	@ 0xa0
 80016fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4619      	mov	r1, r3
 800170e:	480b      	ldr	r0, [pc, #44]	@ (800173c <HAL_SPI_MspInit+0x90>)
 8001710:	f001 fd7a 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001714:	2340      	movs	r3, #64	@ 0x40
 8001716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	@ (800173c <HAL_SPI_MspInit+0x90>)
 8001728:	f001 fd6e 	bl	8003208 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40013000 	.word	0x40013000
 8001738:	40021000 	.word	0x40021000
 800173c:	40010800 	.word	0x40010800

08001740 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <HAL_TIM_Base_MspInit+0x44>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d113      	bne.n	800177a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001752:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <HAL_TIM_Base_MspInit+0x48>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a0c      	ldr	r2, [pc, #48]	@ (8001788 <HAL_TIM_Base_MspInit+0x48>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_TIM_Base_MspInit+0x48>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	201e      	movs	r0, #30
 8001770:	f001 fb25 	bl	8002dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001774:	201e      	movs	r0, #30
 8001776:	f001 fb3e 	bl	8002df6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40000800 	.word	0x40000800
 8001788:	40021000 	.word	0x40021000

0800178c <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001790:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <SDTimer_Handler+0x3c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <SDTimer_Handler+0x1c>
		Timer1--;
 800179a:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <SDTimer_Handler+0x3c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <SDTimer_Handler+0x3c>)
 80017a6:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <SDTimer_Handler+0x40>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <SDTimer_Handler+0x34>
		Timer2--;
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <SDTimer_Handler+0x40>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <SDTimer_Handler+0x40>)
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	20000395 	.word	0x20000395
 80017cc:	20000396 	.word	0x20000396

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <NMI_Handler+0x4>

080017d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <MemManage_Handler+0x4>

080017e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <SysTick_Handler+0x30>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	3301      	adds	r3, #1
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <SysTick_Handler+0x30>)
 800182c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 800182e:	4b07      	ldr	r3, [pc, #28]	@ (800184c <SysTick_Handler+0x30>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b09      	cmp	r3, #9
 8001836:	d904      	bls.n	8001842 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <SysTick_Handler+0x30>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800183e:	f7ff ffa5 	bl	800178c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f000 f95f 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000394 	.word	0x20000394

08001850 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <DMA1_Channel1_IRQHandler+0x10>)
 8001856:	f001 fba3 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000238 	.word	0x20000238

08001864 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800186a:	f000 ffad 	bl	80027c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000027c 	.word	0x2000027c

08001878 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <TIM4_IRQHandler+0x10>)
 800187e:	f002 fc3b 	bl	80040f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200002fc 	.word	0x200002fc

0800188c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001890:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001894:	f001 fe54 	bl	8003540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return 1;
 80018a0:	2301      	movs	r3, #1
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <_kill>:

int _kill(int pid, int sig)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018b4:	f003 fdde 	bl	8005474 <__errno>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2216      	movs	r2, #22
 80018bc:	601a      	str	r2, [r3, #0]
  return -1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_exit>:

void _exit (int status)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018d2:	f04f 31ff 	mov.w	r1, #4294967295
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffe7 	bl	80018aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <_exit+0x12>

080018e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e00a      	b.n	8001908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018f2:	f3af 8000 	nop.w
 80018f6:	4601      	mov	r1, r0
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	dbf0      	blt.n	80018f2 <_read+0x12>
  }

  return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e009      	b.n	8001940 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	60ba      	str	r2, [r7, #8]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf1      	blt.n	800192c <_write+0x12>
  }
  return len;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_close>:

int _close(int file)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001978:	605a      	str	r2, [r3, #4]
  return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <_isatty>:

int _isatty(int file)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
	...

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f003 fd46 	bl	8005474 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20005000 	.word	0x20005000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	20000398 	.word	0x20000398
 8001a1c:	20000500 	.word	0x20000500

08001a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a2c:	f7ff fff8 	bl	8001a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a32:	490c      	ldr	r1, [pc, #48]	@ (8001a64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a34:	4a0c      	ldr	r2, [pc, #48]	@ (8001a68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a48:	4c09      	ldr	r4, [pc, #36]	@ (8001a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a56:	f003 fd13 	bl	8005480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5a:	f7ff faa9 	bl	8000fb0 <main>
  bx lr
 8001a5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001a68:	080075ec 	.word	0x080075ec
  ldr r2, =_sbss
 8001a6c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001a70:	20000500 	.word	0x20000500

08001a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC1_2_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <HAL_Init+0x28>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	@ (8001aa0 <HAL_Init+0x28>)
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f001 f98d 	bl	8002da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f808 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff fd1c 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_InitTick+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <HAL_InitTick+0x58>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 f9a5 	bl	8002e12 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f001 f96d 	bl	8002dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	@ (8001b00 <HAL_InitTick+0x5c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000004 	.word	0x20000004
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	20000008 	.word	0x20000008

08001b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_IncTick+0x1c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_IncTick+0x20>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a03      	ldr	r2, [pc, #12]	@ (8001b24 <HAL_IncTick+0x20>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	2000000c 	.word	0x2000000c
 8001b24:	2000039c 	.word	0x2000039c

08001b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b02      	ldr	r3, [pc, #8]	@ (8001b38 <HAL_GetTick+0x10>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	2000039c 	.word	0x2000039c

08001b3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0be      	b.n	8001cdc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fcda 	bl	8001534 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 faf5 	bl	8002170 <ADC_ConversionStop_Disable>
 8001b86:	4603      	mov	r3, r0
 8001b88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 8099 	bne.w	8001cca <HAL_ADC_Init+0x18e>
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 8095 	bne.w	8001cca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ba8:	f023 0302 	bic.w	r3, r3, #2
 8001bac:	f043 0202 	orr.w	r2, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7b1b      	ldrb	r3, [r3, #12]
 8001bc2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bd4:	d003      	beq.n	8001bde <HAL_ADC_Init+0xa2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d102      	bne.n	8001be4 <HAL_ADC_Init+0xa8>
 8001bde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be2:	e000      	b.n	8001be6 <HAL_ADC_Init+0xaa>
 8001be4:	2300      	movs	r3, #0
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7d1b      	ldrb	r3, [r3, #20]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d119      	bne.n	8001c28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7b1b      	ldrb	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	035a      	lsls	r2, r3, #13
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e00b      	b.n	8001c28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	f043 0220 	orr.w	r2, r3, #32
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <HAL_ADC_Init+0x1a8>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c58:	d003      	beq.n	8001c62 <HAL_ADC_Init+0x126>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d104      	bne.n	8001c6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	051b      	lsls	r3, r3, #20
 8001c6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c72:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <HAL_ADC_Init+0x1ac>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca6:	e018      	b.n	8001cda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cac:	f023 0312 	bic.w	r3, r3, #18
 8001cb0:	f043 0210 	orr.w	r2, r3, #16
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cc8:	e007      	b.n	8001cda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cce:	f043 0210 	orr.w	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ce8:	ff1f0efe 	.word	0xff1f0efe

08001cec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a64      	ldr	r2, [pc, #400]	@ (8001e94 <HAL_ADC_Start_DMA+0x1a8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_ADC_Start_DMA+0x24>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a63      	ldr	r2, [pc, #396]	@ (8001e98 <HAL_ADC_Start_DMA+0x1ac>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d106      	bne.n	8001d1e <HAL_ADC_Start_DMA+0x32>
 8001d10:	4b60      	ldr	r3, [pc, #384]	@ (8001e94 <HAL_ADC_Start_DMA+0x1a8>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f040 80b3 	bne.w	8001e84 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_Start_DMA+0x40>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0ae      	b.n	8001e8a <HAL_ADC_Start_DMA+0x19e>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f9c1 	bl	80020bc <ADC_Enable>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f040 809a 	bne.w	8001e7a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8001e98 <HAL_ADC_Start_DMA+0x1ac>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d105      	bne.n	8001d70 <HAL_ADC_Start_DMA+0x84>
 8001d64:	4b4b      	ldr	r3, [pc, #300]	@ (8001e94 <HAL_ADC_Start_DMA+0x1a8>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d115      	bne.n	8001d9c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d026      	beq.n	8001dd8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d9a:	e01d      	b.n	8001dd8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a39      	ldr	r2, [pc, #228]	@ (8001e94 <HAL_ADC_Start_DMA+0x1a8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d004      	beq.n	8001dbc <HAL_ADC_Start_DMA+0xd0>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a38      	ldr	r2, [pc, #224]	@ (8001e98 <HAL_ADC_Start_DMA+0x1ac>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d10d      	bne.n	8001dd8 <HAL_ADC_Start_DMA+0xec>
 8001dbc:	4b35      	ldr	r3, [pc, #212]	@ (8001e94 <HAL_ADC_Start_DMA+0x1a8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	f023 0206 	bic.w	r2, r3, #6
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001df0:	e002      	b.n	8001df8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a25      	ldr	r2, [pc, #148]	@ (8001e9c <HAL_ADC_Start_DMA+0x1b0>)
 8001e06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ea0 <HAL_ADC_Start_DMA+0x1b4>)
 8001e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <HAL_ADC_Start_DMA+0x1b8>)
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0202 	mvn.w	r2, #2
 8001e20:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e30:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a18      	ldr	r0, [r3, #32]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	334c      	adds	r3, #76	@ 0x4c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f001 f84d 	bl	8002ee0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e50:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e54:	d108      	bne.n	8001e68 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e64:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e66:	e00f      	b.n	8001e88 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e76:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e78:	e006      	b.n	8001e88 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001e82:	e001      	b.n	8001e88 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40012400 	.word	0x40012400
 8001e98:	40012800 	.word	0x40012800
 8001e9c:	080021f3 	.word	0x080021f3
 8001ea0:	0800226f 	.word	0x0800226f
 8001ea4:	0800228b 	.word	0x0800228b

08001ea8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x20>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e0dc      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x1da>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b06      	cmp	r3, #6
 8001efa:	d81c      	bhi.n	8001f36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b05      	subs	r3, #5
 8001f0e:	221f      	movs	r2, #31
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4019      	ands	r1, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b05      	subs	r3, #5
 8001f28:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f34:	e03c      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d81c      	bhi.n	8001f78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b23      	subs	r3, #35	@ 0x23
 8001f50:	221f      	movs	r2, #31
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	4019      	ands	r1, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	3b23      	subs	r3, #35	@ 0x23
 8001f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f76:	e01b      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	3b41      	subs	r3, #65	@ 0x41
 8001f8a:	221f      	movs	r2, #31
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4019      	ands	r1, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b41      	subs	r3, #65	@ 0x41
 8001fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d91c      	bls.n	8001ff2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b1e      	subs	r3, #30
 8001fca:	2207      	movs	r2, #7
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4019      	ands	r1, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6898      	ldr	r0, [r3, #8]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b1e      	subs	r3, #30
 8001fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	e019      	b.n	8002026 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6919      	ldr	r1, [r3, #16]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	2207      	movs	r2, #7
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	4019      	ands	r1, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6898      	ldr	r0, [r3, #8]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	fa00 f203 	lsl.w	r2, r0, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b10      	cmp	r3, #16
 800202c:	d003      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002032:	2b11      	cmp	r3, #17
 8002034:	d132      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1d      	ldr	r2, [pc, #116]	@ (80020b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d125      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d126      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800205c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b10      	cmp	r3, #16
 8002064:	d11a      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002066:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a13      	ldr	r2, [pc, #76]	@ (80020b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	0c9a      	lsrs	r2, r3, #18
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800207c:	e002      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3b01      	subs	r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f9      	bne.n	800207e <HAL_ADC_ConfigChannel+0x1b2>
 800208a:	e007      	b.n	800209c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	f043 0220 	orr.w	r2, r3, #32
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40012400 	.word	0x40012400
 80020b4:	20000004 	.word	0x20000004
 80020b8:	431bde83 	.word	0x431bde83

080020bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d040      	beq.n	800215c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002168 <ADC_Enable+0xac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1f      	ldr	r2, [pc, #124]	@ (800216c <ADC_Enable+0xb0>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	0c9b      	lsrs	r3, r3, #18
 80020f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020f8:	e002      	b.n	8002100 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002106:	f7ff fd0f 	bl	8001b28 <HAL_GetTick>
 800210a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800210c:	e01f      	b.n	800214e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800210e:	f7ff fd0b 	bl	8001b28 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d918      	bls.n	800214e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b01      	cmp	r3, #1
 8002128:	d011      	beq.n	800214e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	f043 0210 	orr.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e007      	b.n	800215e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d1d8      	bne.n	800210e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000004 	.word	0x20000004
 800216c:	431bde83 	.word	0x431bde83

08002170 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d12e      	bne.n	80021e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800219a:	f7ff fcc5 	bl	8001b28 <HAL_GetTick>
 800219e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021a0:	e01b      	b.n	80021da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021a2:	f7ff fcc1 	bl	8001b28 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d914      	bls.n	80021da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d10d      	bne.n	80021da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	f043 0210 	orr.w	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e007      	b.n	80021ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d0dc      	beq.n	80021a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002204:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002208:	2b00      	cmp	r3, #0
 800220a:	d127      	bne.n	800225c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002222:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002226:	d115      	bne.n	8002254 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800222c:	2b00      	cmp	r3, #0
 800222e:	d111      	bne.n	8002254 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff f911 	bl	800147c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800225a:	e004      	b.n	8002266 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7ff fe13 	bl	8001ea8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	f043 0204 	orr.w	r2, r3, #4
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7ff fe02 	bl	8001eba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0ed      	b.n	80024ac <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff f991 	bl	8001604 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f2:	f7ff fc19 	bl	8001b28 <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022f8:	e012      	b.n	8002320 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022fa:	f7ff fc15 	bl	8001b28 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b0a      	cmp	r3, #10
 8002306:	d90b      	bls.n	8002320 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2205      	movs	r2, #5
 8002318:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0c5      	b.n	80024ac <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0e5      	beq.n	80022fa <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0202 	bic.w	r2, r2, #2
 800233c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800233e:	f7ff fbf3 	bl	8001b28 <HAL_GetTick>
 8002342:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002344:	e012      	b.n	800236c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002346:	f7ff fbef 	bl	8001b28 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b0a      	cmp	r3, #10
 8002352:	d90b      	bls.n	800236c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2205      	movs	r2, #5
 8002364:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e09f      	b.n	80024ac <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e5      	bne.n	8002346 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7e1b      	ldrb	r3, [r3, #24]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d108      	bne.n	8002394 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e007      	b.n	80023a4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7e5b      	ldrb	r3, [r3, #25]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d108      	bne.n	80023be <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e007      	b.n	80023ce <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7e9b      	ldrb	r3, [r3, #26]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d108      	bne.n	80023e8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e007      	b.n	80023f8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0220 	bic.w	r2, r2, #32
 80023f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7edb      	ldrb	r3, [r3, #27]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d108      	bne.n	8002412 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0210 	bic.w	r2, r2, #16
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e007      	b.n	8002422 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0210 	orr.w	r2, r2, #16
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7f1b      	ldrb	r3, [r3, #28]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d108      	bne.n	800243c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0208 	orr.w	r2, r2, #8
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e007      	b.n	800244c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0208 	bic.w	r2, r2, #8
 800244a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7f5b      	ldrb	r3, [r3, #29]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d108      	bne.n	8002466 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0204 	orr.w	r2, r2, #4
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e007      	b.n	8002476 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0204 	bic.w	r2, r2, #4
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	ea42 0103 	orr.w	r1, r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	1e5a      	subs	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d12e      	bne.n	8002526 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024e0:	f7ff fb22 	bl	8001b28 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024e6:	e012      	b.n	800250e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024e8:	f7ff fb1e 	bl	8001b28 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b0a      	cmp	r3, #10
 80024f4:	d90b      	bls.n	800250e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2205      	movs	r2, #5
 8002506:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e012      	b.n	8002534 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e5      	bne.n	80024e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e006      	b.n	8002534 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
  }
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002550:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d003      	beq.n	8002560 <HAL_CAN_GetRxMessage+0x24>
 8002558:	7dfb      	ldrb	r3, [r7, #23]
 800255a:	2b02      	cmp	r3, #2
 800255c:	f040 8103 	bne.w	8002766 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10e      	bne.n	8002584 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d116      	bne.n	80025a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0f7      	b.n	8002774 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0e8      	b.n	8002774 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	331b      	adds	r3, #27
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	4413      	add	r3, r2
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0204 	and.w	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10c      	bne.n	80025da <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	331b      	adds	r3, #27
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	4413      	add	r3, r2
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0d5b      	lsrs	r3, r3, #21
 80025d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e00b      	b.n	80025f2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	331b      	adds	r3, #27
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	4413      	add	r3, r2
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	331b      	adds	r3, #27
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	4413      	add	r3, r2
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0202 	and.w	r2, r3, #2
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	331b      	adds	r3, #27
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	3304      	adds	r3, #4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2208      	movs	r2, #8
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	e00b      	b.n	8002640 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	331b      	adds	r3, #27
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	4413      	add	r3, r2
 8002634:	3304      	adds	r3, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	331b      	adds	r3, #27
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	4413      	add	r3, r2
 800264c:	3304      	adds	r3, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	b2da      	uxtb	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	331b      	adds	r3, #27
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	4413      	add	r3, r2
 8002664:	3304      	adds	r3, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	b29a      	uxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4413      	add	r3, r2
 800267a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	4413      	add	r3, r2
 8002690:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0a1a      	lsrs	r2, r3, #8
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0c1a      	lsrs	r2, r3, #16
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	3302      	adds	r3, #2
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0e1a      	lsrs	r2, r3, #24
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	3303      	adds	r3, #3
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	4413      	add	r3, r2
 80026de:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	3304      	adds	r3, #4
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0a1a      	lsrs	r2, r3, #8
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	3305      	adds	r3, #5
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	0c1a      	lsrs	r2, r3, #16
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	3306      	adds	r3, #6
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	4413      	add	r3, r2
 800272a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e1a      	lsrs	r2, r3, #24
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	3307      	adds	r3, #7
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d108      	bne.n	8002752 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0220 	orr.w	r2, r2, #32
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	e007      	b.n	8002762 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e006      	b.n	8002774 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
  }
}
 8002774:	4618      	mov	r0, r3
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d002      	beq.n	800279c <HAL_CAN_ActivateNotification+0x1e>
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d109      	bne.n	80027b0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6959      	ldr	r1, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e006      	b.n	80027be <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	@ 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d07c      	beq.n	8002908 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d023      	beq.n	8002860 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2201      	movs	r2, #1
 800281e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f983 	bl	8002b36 <HAL_CAN_TxMailbox0CompleteCallback>
 8002830:	e016      	b.n	8002860 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
 8002844:	e00c      	b.n	8002860 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
 8002858:	e002      	b.n	8002860 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f986 	bl	8002b6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d024      	beq.n	80028b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002872:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f962 	bl	8002b48 <HAL_CAN_TxMailbox1CompleteCallback>
 8002884:	e016      	b.n	80028b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
 8002898:	e00c      	b.n	80028b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ac:	e002      	b.n	80028b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f965 	bl	8002b7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d024      	beq.n	8002908 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80028c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f941 	bl	8002b5a <HAL_CAN_TxMailbox2CompleteCallback>
 80028d8:	e016      	b.n	8002908 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ec:	e00c      	b.n	8002908 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002900:	e002      	b.n	8002908 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f944 	bl	8002b90 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00c      	beq.n	800292c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2210      	movs	r2, #16
 800292a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2208      	movs	r2, #8
 8002946:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f92a 	bl	8002ba2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe fd96 	bl	8001498 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00c      	beq.n	8002990 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2210      	movs	r2, #16
 800298e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2208      	movs	r2, #8
 80029aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f90a 	bl	8002bc6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8f2 	bl	8002bb4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2210      	movs	r2, #16
 80029ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8f3 	bl	8002bd8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8eb 	bl	8002bea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d07b      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d072      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d043      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d03e      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a96:	2b60      	cmp	r3, #96	@ 0x60
 8002a98:	d02b      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x32a>
 8002a9a:	2b60      	cmp	r3, #96	@ 0x60
 8002a9c:	d82e      	bhi.n	8002afc <HAL_CAN_IRQHandler+0x334>
 8002a9e:	2b50      	cmp	r3, #80	@ 0x50
 8002aa0:	d022      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x320>
 8002aa2:	2b50      	cmp	r3, #80	@ 0x50
 8002aa4:	d82a      	bhi.n	8002afc <HAL_CAN_IRQHandler+0x334>
 8002aa6:	2b40      	cmp	r3, #64	@ 0x40
 8002aa8:	d019      	beq.n	8002ade <HAL_CAN_IRQHandler+0x316>
 8002aaa:	2b40      	cmp	r3, #64	@ 0x40
 8002aac:	d826      	bhi.n	8002afc <HAL_CAN_IRQHandler+0x334>
 8002aae:	2b30      	cmp	r3, #48	@ 0x30
 8002ab0:	d010      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x30c>
 8002ab2:	2b30      	cmp	r3, #48	@ 0x30
 8002ab4:	d822      	bhi.n	8002afc <HAL_CAN_IRQHandler+0x334>
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d002      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x2f8>
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d005      	beq.n	8002aca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002abe:	e01d      	b.n	8002afc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	f043 0308 	orr.w	r3, r3, #8
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ac8:	e019      	b.n	8002afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	f043 0310 	orr.w	r3, r3, #16
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ad2:	e014      	b.n	8002afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	f043 0320 	orr.w	r3, r3, #32
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002adc:	e00f      	b.n	8002afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ae4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ae6:	e00a      	b.n	8002afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002af0:	e005      	b.n	8002afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002afa:	e000      	b.n	8002afe <HAL_CAN_IRQHandler+0x336>
            break;
 8002afc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002b0c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2204      	movs	r2, #4
 8002b14:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f867 	bl	8002bfc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b2e:	bf00      	nop
 8002b30:	3728      	adds	r7, #40	@ 0x28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
	...

08002c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c42:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	60d3      	str	r3, [r2, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c5c:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <__NVIC_GetPriorityGrouping+0x18>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	f003 0307 	and.w	r3, r3, #7
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	db0b      	blt.n	8002c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	4906      	ldr	r1, [pc, #24]	@ (8002ca8 <__NVIC_EnableIRQ+0x34>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2001      	movs	r0, #1
 8002c96:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	e000e100 	.word	0xe000e100

08002cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db0a      	blt.n	8002cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	490c      	ldr	r1, [pc, #48]	@ (8002cf8 <__NVIC_SetPriority+0x4c>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd4:	e00a      	b.n	8002cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4908      	ldr	r1, [pc, #32]	@ (8002cfc <__NVIC_SetPriority+0x50>)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	3b04      	subs	r3, #4
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	440b      	add	r3, r1
 8002cea:	761a      	strb	r2, [r3, #24]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	@ 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f1c3 0307 	rsb	r3, r3, #7
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	bf28      	it	cs
 8002d1e:	2304      	movcs	r3, #4
 8002d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d902      	bls.n	8002d30 <NVIC_EncodePriority+0x30>
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3b03      	subs	r3, #3
 8002d2e:	e000      	b.n	8002d32 <NVIC_EncodePriority+0x32>
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	401a      	ands	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43d9      	mvns	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d58:	4313      	orrs	r3, r2
         );
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3724      	adds	r7, #36	@ 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d74:	d301      	bcc.n	8002d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00f      	b.n	8002d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <SysTick_Config+0x40>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d82:	210f      	movs	r1, #15
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	f7ff ff90 	bl	8002cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d8c:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <SysTick_Config+0x40>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d92:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <SysTick_Config+0x40>)
 8002d94:	2207      	movs	r2, #7
 8002d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	e000e010 	.word	0xe000e010

08002da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff2d 	bl	8002c10 <__NVIC_SetPriorityGrouping>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd0:	f7ff ff42 	bl	8002c58 <__NVIC_GetPriorityGrouping>
 8002dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	6978      	ldr	r0, [r7, #20]
 8002ddc:	f7ff ff90 	bl	8002d00 <NVIC_EncodePriority>
 8002de0:	4602      	mov	r2, r0
 8002de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff5f 	bl	8002cac <__NVIC_SetPriority>
}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff35 	bl	8002c74 <__NVIC_EnableIRQ>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ffa2 	bl	8002d64 <SysTick_Config>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e043      	b.n	8002eca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b22      	ldr	r3, [pc, #136]	@ (8002ed4 <HAL_DMA_Init+0xa8>)
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a22      	ldr	r2, [pc, #136]	@ (8002ed8 <HAL_DMA_Init+0xac>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	009a      	lsls	r2, r3, #2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <HAL_DMA_Init+0xb0>)
 8002e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e76:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	bffdfff8 	.word	0xbffdfff8
 8002ed8:	cccccccd 	.word	0xcccccccd
 8002edc:	40020000 	.word	0x40020000

08002ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_DMA_Start_IT+0x20>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e04b      	b.n	8002f98 <HAL_DMA_Start_IT+0xb8>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d13a      	bne.n	8002f8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f937 	bl	80031ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 020e 	orr.w	r2, r2, #14
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e00f      	b.n	8002f78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 020a 	orr.w	r2, r2, #10
 8002f76:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e005      	b.n	8002f96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
 8002f94:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d04f      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc8>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d04a      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a66      	ldr	r2, [pc, #408]	@ (8003190 <HAL_DMA_IRQHandler+0x1f0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d029      	beq.n	800304e <HAL_DMA_IRQHandler+0xae>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a65      	ldr	r2, [pc, #404]	@ (8003194 <HAL_DMA_IRQHandler+0x1f4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_IRQHandler+0xaa>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a63      	ldr	r2, [pc, #396]	@ (8003198 <HAL_DMA_IRQHandler+0x1f8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01a      	beq.n	8003044 <HAL_DMA_IRQHandler+0xa4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a62      	ldr	r2, [pc, #392]	@ (800319c <HAL_DMA_IRQHandler+0x1fc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d012      	beq.n	800303e <HAL_DMA_IRQHandler+0x9e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a60      	ldr	r2, [pc, #384]	@ (80031a0 <HAL_DMA_IRQHandler+0x200>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00a      	beq.n	8003038 <HAL_DMA_IRQHandler+0x98>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5f      	ldr	r2, [pc, #380]	@ (80031a4 <HAL_DMA_IRQHandler+0x204>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d102      	bne.n	8003032 <HAL_DMA_IRQHandler+0x92>
 800302c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003030:	e00e      	b.n	8003050 <HAL_DMA_IRQHandler+0xb0>
 8003032:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003036:	e00b      	b.n	8003050 <HAL_DMA_IRQHandler+0xb0>
 8003038:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800303c:	e008      	b.n	8003050 <HAL_DMA_IRQHandler+0xb0>
 800303e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003042:	e005      	b.n	8003050 <HAL_DMA_IRQHandler+0xb0>
 8003044:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003048:	e002      	b.n	8003050 <HAL_DMA_IRQHandler+0xb0>
 800304a:	2340      	movs	r3, #64	@ 0x40
 800304c:	e000      	b.n	8003050 <HAL_DMA_IRQHandler+0xb0>
 800304e:	2304      	movs	r3, #4
 8003050:	4a55      	ldr	r2, [pc, #340]	@ (80031a8 <HAL_DMA_IRQHandler+0x208>)
 8003052:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8094 	beq.w	8003186 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003066:	e08e      	b.n	8003186 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	2202      	movs	r2, #2
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d056      	beq.n	8003126 <HAL_DMA_IRQHandler+0x186>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d051      	beq.n	8003126 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 020a 	bic.w	r2, r2, #10
 800309e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a38      	ldr	r2, [pc, #224]	@ (8003190 <HAL_DMA_IRQHandler+0x1f0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d029      	beq.n	8003106 <HAL_DMA_IRQHandler+0x166>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a37      	ldr	r2, [pc, #220]	@ (8003194 <HAL_DMA_IRQHandler+0x1f4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d022      	beq.n	8003102 <HAL_DMA_IRQHandler+0x162>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a35      	ldr	r2, [pc, #212]	@ (8003198 <HAL_DMA_IRQHandler+0x1f8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01a      	beq.n	80030fc <HAL_DMA_IRQHandler+0x15c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a34      	ldr	r2, [pc, #208]	@ (800319c <HAL_DMA_IRQHandler+0x1fc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d012      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x156>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a32      	ldr	r2, [pc, #200]	@ (80031a0 <HAL_DMA_IRQHandler+0x200>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00a      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x150>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a31      	ldr	r2, [pc, #196]	@ (80031a4 <HAL_DMA_IRQHandler+0x204>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d102      	bne.n	80030ea <HAL_DMA_IRQHandler+0x14a>
 80030e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80030e8:	e00e      	b.n	8003108 <HAL_DMA_IRQHandler+0x168>
 80030ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ee:	e00b      	b.n	8003108 <HAL_DMA_IRQHandler+0x168>
 80030f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030f4:	e008      	b.n	8003108 <HAL_DMA_IRQHandler+0x168>
 80030f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030fa:	e005      	b.n	8003108 <HAL_DMA_IRQHandler+0x168>
 80030fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003100:	e002      	b.n	8003108 <HAL_DMA_IRQHandler+0x168>
 8003102:	2320      	movs	r3, #32
 8003104:	e000      	b.n	8003108 <HAL_DMA_IRQHandler+0x168>
 8003106:	2302      	movs	r3, #2
 8003108:	4a27      	ldr	r2, [pc, #156]	@ (80031a8 <HAL_DMA_IRQHandler+0x208>)
 800310a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003118:	2b00      	cmp	r3, #0
 800311a:	d034      	beq.n	8003186 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003124:	e02f      	b.n	8003186 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	2208      	movs	r2, #8
 800312c:	409a      	lsls	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d028      	beq.n	8003188 <HAL_DMA_IRQHandler+0x1e8>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d023      	beq.n	8003188 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 020e 	bic.w	r2, r2, #14
 800314e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003158:	2101      	movs	r1, #1
 800315a:	fa01 f202 	lsl.w	r2, r1, r2
 800315e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
    }
  }
  return;
 8003186:	bf00      	nop
 8003188:	bf00      	nop
}
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40020008 	.word	0x40020008
 8003194:	4002001c 	.word	0x4002001c
 8003198:	40020030 	.word	0x40020030
 800319c:	40020044 	.word	0x40020044
 80031a0:	40020058 	.word	0x40020058
 80031a4:	4002006c 	.word	0x4002006c
 80031a8:	40020000 	.word	0x40020000

080031ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c2:	2101      	movs	r1, #1
 80031c4:	fa01 f202 	lsl.w	r2, r1, r2
 80031c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d108      	bne.n	80031ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031ea:	e007      	b.n	80031fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
	...

08003208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003208:	b480      	push	{r7}
 800320a:	b08b      	sub	sp, #44	@ 0x2c
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003216:	2300      	movs	r3, #0
 8003218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321a:	e169      	b.n	80034f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800321c:	2201      	movs	r2, #1
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8158 	bne.w	80034ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a9a      	ldr	r2, [pc, #616]	@ (80034a8 <HAL_GPIO_Init+0x2a0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d05e      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003244:	4a98      	ldr	r2, [pc, #608]	@ (80034a8 <HAL_GPIO_Init+0x2a0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d875      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800324a:	4a98      	ldr	r2, [pc, #608]	@ (80034ac <HAL_GPIO_Init+0x2a4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d058      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003250:	4a96      	ldr	r2, [pc, #600]	@ (80034ac <HAL_GPIO_Init+0x2a4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d86f      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003256:	4a96      	ldr	r2, [pc, #600]	@ (80034b0 <HAL_GPIO_Init+0x2a8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d052      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 800325c:	4a94      	ldr	r2, [pc, #592]	@ (80034b0 <HAL_GPIO_Init+0x2a8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d869      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003262:	4a94      	ldr	r2, [pc, #592]	@ (80034b4 <HAL_GPIO_Init+0x2ac>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d04c      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003268:	4a92      	ldr	r2, [pc, #584]	@ (80034b4 <HAL_GPIO_Init+0x2ac>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d863      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800326e:	4a92      	ldr	r2, [pc, #584]	@ (80034b8 <HAL_GPIO_Init+0x2b0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d046      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003274:	4a90      	ldr	r2, [pc, #576]	@ (80034b8 <HAL_GPIO_Init+0x2b0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d85d      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800327a:	2b12      	cmp	r3, #18
 800327c:	d82a      	bhi.n	80032d4 <HAL_GPIO_Init+0xcc>
 800327e:	2b12      	cmp	r3, #18
 8003280:	d859      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003282:	a201      	add	r2, pc, #4	@ (adr r2, 8003288 <HAL_GPIO_Init+0x80>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	08003303 	.word	0x08003303
 800328c:	080032dd 	.word	0x080032dd
 8003290:	080032ef 	.word	0x080032ef
 8003294:	08003331 	.word	0x08003331
 8003298:	08003337 	.word	0x08003337
 800329c:	08003337 	.word	0x08003337
 80032a0:	08003337 	.word	0x08003337
 80032a4:	08003337 	.word	0x08003337
 80032a8:	08003337 	.word	0x08003337
 80032ac:	08003337 	.word	0x08003337
 80032b0:	08003337 	.word	0x08003337
 80032b4:	08003337 	.word	0x08003337
 80032b8:	08003337 	.word	0x08003337
 80032bc:	08003337 	.word	0x08003337
 80032c0:	08003337 	.word	0x08003337
 80032c4:	08003337 	.word	0x08003337
 80032c8:	08003337 	.word	0x08003337
 80032cc:	080032e5 	.word	0x080032e5
 80032d0:	080032f9 	.word	0x080032f9
 80032d4:	4a79      	ldr	r2, [pc, #484]	@ (80034bc <HAL_GPIO_Init+0x2b4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032da:	e02c      	b.n	8003336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	623b      	str	r3, [r7, #32]
          break;
 80032e2:	e029      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	3304      	adds	r3, #4
 80032ea:	623b      	str	r3, [r7, #32]
          break;
 80032ec:	e024      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	3308      	adds	r3, #8
 80032f4:	623b      	str	r3, [r7, #32]
          break;
 80032f6:	e01f      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	330c      	adds	r3, #12
 80032fe:	623b      	str	r3, [r7, #32]
          break;
 8003300:	e01a      	b.n	8003338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800330a:	2304      	movs	r3, #4
 800330c:	623b      	str	r3, [r7, #32]
          break;
 800330e:	e013      	b.n	8003338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003318:	2308      	movs	r3, #8
 800331a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	611a      	str	r2, [r3, #16]
          break;
 8003322:	e009      	b.n	8003338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003324:	2308      	movs	r3, #8
 8003326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	615a      	str	r2, [r3, #20]
          break;
 800332e:	e003      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003330:	2300      	movs	r3, #0
 8003332:	623b      	str	r3, [r7, #32]
          break;
 8003334:	e000      	b.n	8003338 <HAL_GPIO_Init+0x130>
          break;
 8003336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2bff      	cmp	r3, #255	@ 0xff
 800333c:	d801      	bhi.n	8003342 <HAL_GPIO_Init+0x13a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	e001      	b.n	8003346 <HAL_GPIO_Init+0x13e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2bff      	cmp	r3, #255	@ 0xff
 800334c:	d802      	bhi.n	8003354 <HAL_GPIO_Init+0x14c>
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	e002      	b.n	800335a <HAL_GPIO_Init+0x152>
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	3b08      	subs	r3, #8
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	210f      	movs	r1, #15
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	6a39      	ldr	r1, [r7, #32]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	431a      	orrs	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80b1 	beq.w	80034ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003388:	4b4d      	ldr	r3, [pc, #308]	@ (80034c0 <HAL_GPIO_Init+0x2b8>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	4a4c      	ldr	r2, [pc, #304]	@ (80034c0 <HAL_GPIO_Init+0x2b8>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6193      	str	r3, [r2, #24]
 8003394:	4b4a      	ldr	r3, [pc, #296]	@ (80034c0 <HAL_GPIO_Init+0x2b8>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033a0:	4a48      	ldr	r2, [pc, #288]	@ (80034c4 <HAL_GPIO_Init+0x2bc>)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a40      	ldr	r2, [pc, #256]	@ (80034c8 <HAL_GPIO_Init+0x2c0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_GPIO_Init+0x1ec>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a3f      	ldr	r2, [pc, #252]	@ (80034cc <HAL_GPIO_Init+0x2c4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00d      	beq.n	80033f0 <HAL_GPIO_Init+0x1e8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3e      	ldr	r2, [pc, #248]	@ (80034d0 <HAL_GPIO_Init+0x2c8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <HAL_GPIO_Init+0x1e4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3d      	ldr	r2, [pc, #244]	@ (80034d4 <HAL_GPIO_Init+0x2cc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_GPIO_Init+0x1e0>
 80033e4:	2303      	movs	r3, #3
 80033e6:	e006      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033e8:	2304      	movs	r3, #4
 80033ea:	e004      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e002      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033f4:	2300      	movs	r3, #0
 80033f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f8:	f002 0203 	and.w	r2, r2, #3
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	4093      	lsls	r3, r2
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003406:	492f      	ldr	r1, [pc, #188]	@ (80034c4 <HAL_GPIO_Init+0x2bc>)
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003420:	4b2d      	ldr	r3, [pc, #180]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	492c      	ldr	r1, [pc, #176]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800342e:	4b2a      	ldr	r3, [pc, #168]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	43db      	mvns	r3, r3
 8003436:	4928      	ldr	r1, [pc, #160]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003438:	4013      	ands	r3, r2
 800343a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d006      	beq.n	8003456 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003448:	4b23      	ldr	r3, [pc, #140]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	4922      	ldr	r1, [pc, #136]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	60cb      	str	r3, [r1, #12]
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003456:	4b20      	ldr	r3, [pc, #128]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	43db      	mvns	r3, r3
 800345e:	491e      	ldr	r1, [pc, #120]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003460:	4013      	ands	r3, r2
 8003462:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d006      	beq.n	800347e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003470:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	4918      	ldr	r1, [pc, #96]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
 800347c:	e006      	b.n	800348c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800347e:	4b16      	ldr	r3, [pc, #88]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	43db      	mvns	r3, r3
 8003486:	4914      	ldr	r1, [pc, #80]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003488:	4013      	ands	r3, r2
 800348a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d021      	beq.n	80034dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003498:	4b0f      	ldr	r3, [pc, #60]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	490e      	ldr	r1, [pc, #56]	@ (80034d8 <HAL_GPIO_Init+0x2d0>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e021      	b.n	80034ea <HAL_GPIO_Init+0x2e2>
 80034a6:	bf00      	nop
 80034a8:	10320000 	.word	0x10320000
 80034ac:	10310000 	.word	0x10310000
 80034b0:	10220000 	.word	0x10220000
 80034b4:	10210000 	.word	0x10210000
 80034b8:	10120000 	.word	0x10120000
 80034bc:	10110000 	.word	0x10110000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40010800 	.word	0x40010800
 80034cc:	40010c00 	.word	0x40010c00
 80034d0:	40011000 	.word	0x40011000
 80034d4:	40011400 	.word	0x40011400
 80034d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_GPIO_Init+0x304>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	4909      	ldr	r1, [pc, #36]	@ (800350c <HAL_GPIO_Init+0x304>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	3301      	adds	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f47f ae8e 	bne.w	800321c <HAL_GPIO_Init+0x14>
  }
}
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	372c      	adds	r7, #44	@ 0x2c
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40010400 	.word	0x40010400

08003510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
 800351c:	4613      	mov	r3, r2
 800351e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003520:	787b      	ldrb	r3, [r7, #1]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800352c:	e003      	b.n	8003536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	041a      	lsls	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800354a:	4b08      	ldr	r3, [pc, #32]	@ (800356c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003556:	4a05      	ldr	r2, [pc, #20]	@ (800356c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f806 	bl	8003570 <HAL_GPIO_EXTI_Callback>
  }
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40010400 	.word	0x40010400

08003570 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e272      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8087 	beq.w	80036b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a4:	4b92      	ldr	r3, [pc, #584]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d00c      	beq.n	80035ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035b0:	4b8f      	ldr	r3, [pc, #572]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d112      	bne.n	80035e2 <HAL_RCC_OscConfig+0x5e>
 80035bc:	4b8c      	ldr	r3, [pc, #560]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d10b      	bne.n	80035e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ca:	4b89      	ldr	r3, [pc, #548]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d06c      	beq.n	80036b0 <HAL_RCC_OscConfig+0x12c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d168      	bne.n	80036b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e24c      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ea:	d106      	bne.n	80035fa <HAL_RCC_OscConfig+0x76>
 80035ec:	4b80      	ldr	r3, [pc, #512]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a7f      	ldr	r2, [pc, #508]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	e02e      	b.n	8003658 <HAL_RCC_OscConfig+0xd4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x98>
 8003602:	4b7b      	ldr	r3, [pc, #492]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a7a      	ldr	r2, [pc, #488]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b78      	ldr	r3, [pc, #480]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a77      	ldr	r2, [pc, #476]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003614:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e01d      	b.n	8003658 <HAL_RCC_OscConfig+0xd4>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0xbc>
 8003626:	4b72      	ldr	r3, [pc, #456]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a71      	ldr	r2, [pc, #452]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b6f      	ldr	r3, [pc, #444]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6e      	ldr	r2, [pc, #440]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e00b      	b.n	8003658 <HAL_RCC_OscConfig+0xd4>
 8003640:	4b6b      	ldr	r3, [pc, #428]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a6a      	ldr	r2, [pc, #424]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4b68      	ldr	r3, [pc, #416]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a67      	ldr	r2, [pc, #412]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003656:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fe fa62 	bl	8001b28 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003668:	f7fe fa5e 	bl	8001b28 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	@ 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e200      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b5d      	ldr	r3, [pc, #372]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0xe4>
 8003686:	e014      	b.n	80036b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe fa4e 	bl	8001b28 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003690:	f7fe fa4a 	bl	8001b28 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	@ 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1ec      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	4b53      	ldr	r3, [pc, #332]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x10c>
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d063      	beq.n	8003786 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036be:	4b4c      	ldr	r3, [pc, #304]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036ca:	4b49      	ldr	r3, [pc, #292]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d11c      	bne.n	8003710 <HAL_RCC_OscConfig+0x18c>
 80036d6:	4b46      	ldr	r3, [pc, #280]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d116      	bne.n	8003710 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	4b43      	ldr	r3, [pc, #268]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_RCC_OscConfig+0x176>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e1c0      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fa:	4b3d      	ldr	r3, [pc, #244]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4939      	ldr	r1, [pc, #228]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	e03a      	b.n	8003786 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003718:	4b36      	ldr	r3, [pc, #216]	@ (80037f4 <HAL_RCC_OscConfig+0x270>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fe fa03 	bl	8001b28 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003726:	f7fe f9ff 	bl	8001b28 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e1a1      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003738:	4b2d      	ldr	r3, [pc, #180]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4b2a      	ldr	r3, [pc, #168]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4927      	ldr	r1, [pc, #156]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]
 8003758:	e015      	b.n	8003786 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375a:	4b26      	ldr	r3, [pc, #152]	@ (80037f4 <HAL_RCC_OscConfig+0x270>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe f9e2 	bl	8001b28 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003768:	f7fe f9de 	bl	8001b28 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e180      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	4b1d      	ldr	r3, [pc, #116]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d03a      	beq.n	8003808 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d019      	beq.n	80037ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379a:	4b17      	ldr	r3, [pc, #92]	@ (80037f8 <HAL_RCC_OscConfig+0x274>)
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a0:	f7fe f9c2 	bl	8001b28 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a8:	f7fe f9be 	bl	8001b28 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e160      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037c6:	2001      	movs	r0, #1
 80037c8:	f000 fa9c 	bl	8003d04 <RCC_Delay>
 80037cc:	e01c      	b.n	8003808 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ce:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <HAL_RCC_OscConfig+0x274>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d4:	f7fe f9a8 	bl	8001b28 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037da:	e00f      	b.n	80037fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037dc:	f7fe f9a4 	bl	8001b28 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d908      	bls.n	80037fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e146      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	42420000 	.word	0x42420000
 80037f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fc:	4b92      	ldr	r3, [pc, #584]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e9      	bne.n	80037dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80a6 	beq.w	8003962 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003816:	2300      	movs	r3, #0
 8003818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10d      	bne.n	8003842 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003826:	4b88      	ldr	r3, [pc, #544]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	4a87      	ldr	r2, [pc, #540]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003830:	61d3      	str	r3, [r2, #28]
 8003832:	4b85      	ldr	r3, [pc, #532]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383e:	2301      	movs	r3, #1
 8003840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003842:	4b82      	ldr	r3, [pc, #520]	@ (8003a4c <HAL_RCC_OscConfig+0x4c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d118      	bne.n	8003880 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a4c <HAL_RCC_OscConfig+0x4c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7e      	ldr	r2, [pc, #504]	@ (8003a4c <HAL_RCC_OscConfig+0x4c8>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385a:	f7fe f965 	bl	8001b28 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003862:	f7fe f961 	bl	8001b28 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b64      	cmp	r3, #100	@ 0x64
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e103      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003874:	4b75      	ldr	r3, [pc, #468]	@ (8003a4c <HAL_RCC_OscConfig+0x4c8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x312>
 8003888:	4b6f      	ldr	r3, [pc, #444]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	4a6e      	ldr	r2, [pc, #440]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6213      	str	r3, [r2, #32]
 8003894:	e02d      	b.n	80038f2 <HAL_RCC_OscConfig+0x36e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x334>
 800389e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	4a69      	ldr	r2, [pc, #420]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	6213      	str	r3, [r2, #32]
 80038aa:	4b67      	ldr	r3, [pc, #412]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	4a66      	ldr	r2, [pc, #408]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	6213      	str	r3, [r2, #32]
 80038b6:	e01c      	b.n	80038f2 <HAL_RCC_OscConfig+0x36e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b05      	cmp	r3, #5
 80038be:	d10c      	bne.n	80038da <HAL_RCC_OscConfig+0x356>
 80038c0:	4b61      	ldr	r3, [pc, #388]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	4a60      	ldr	r2, [pc, #384]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	6213      	str	r3, [r2, #32]
 80038cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6213      	str	r3, [r2, #32]
 80038d8:	e00b      	b.n	80038f2 <HAL_RCC_OscConfig+0x36e>
 80038da:	4b5b      	ldr	r3, [pc, #364]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	4a5a      	ldr	r2, [pc, #360]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	6213      	str	r3, [r2, #32]
 80038e6:	4b58      	ldr	r3, [pc, #352]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	4a57      	ldr	r2, [pc, #348]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d015      	beq.n	8003926 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fa:	f7fe f915 	bl	8001b28 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003900:	e00a      	b.n	8003918 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7fe f911 	bl	8001b28 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003910:	4293      	cmp	r3, r2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e0b1      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003918:	4b4b      	ldr	r3, [pc, #300]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ee      	beq.n	8003902 <HAL_RCC_OscConfig+0x37e>
 8003924:	e014      	b.n	8003950 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003926:	f7fe f8ff 	bl	8001b28 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fe f8fb 	bl	8001b28 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e09b      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003944:	4b40      	ldr	r3, [pc, #256]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ee      	bne.n	800392e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003956:	4b3c      	ldr	r3, [pc, #240]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	4a3b      	ldr	r2, [pc, #236]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003960:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8087 	beq.w	8003a7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800396c:	4b36      	ldr	r3, [pc, #216]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b08      	cmp	r3, #8
 8003976:	d061      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d146      	bne.n	8003a0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003980:	4b33      	ldr	r3, [pc, #204]	@ (8003a50 <HAL_RCC_OscConfig+0x4cc>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003986:	f7fe f8cf 	bl	8001b28 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fe f8cb 	bl	8001b28 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e06d      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a0:	4b29      	ldr	r3, [pc, #164]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f0      	bne.n	800398e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b4:	d108      	bne.n	80039c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039b6:	4b24      	ldr	r3, [pc, #144]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4921      	ldr	r1, [pc, #132]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a19      	ldr	r1, [r3, #32]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	430b      	orrs	r3, r1
 80039da:	491b      	ldr	r1, [pc, #108]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a50 <HAL_RCC_OscConfig+0x4cc>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e6:	f7fe f89f 	bl	8001b28 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ee:	f7fe f89b 	bl	8001b28 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e03d      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x46a>
 8003a0c:	e035      	b.n	8003a7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b10      	ldr	r3, [pc, #64]	@ (8003a50 <HAL_RCC_OscConfig+0x4cc>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fe f888 	bl	8001b28 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fe f884 	bl	8001b28 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e026      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2e:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x498>
 8003a3a:	e01e      	b.n	8003a7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e019      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCC_OscConfig+0x500>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0d0      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d910      	bls.n	8003acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b67      	ldr	r3, [pc, #412]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0207 	bic.w	r2, r3, #7
 8003ab2:	4965      	ldr	r1, [pc, #404]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b63      	ldr	r3, [pc, #396]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0b8      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae4:	4b59      	ldr	r3, [pc, #356]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4a58      	ldr	r2, [pc, #352]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003afc:	4b53      	ldr	r3, [pc, #332]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4a52      	ldr	r2, [pc, #328]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b50      	ldr	r3, [pc, #320]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	494d      	ldr	r1, [pc, #308]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d040      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b47      	ldr	r3, [pc, #284]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d115      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	4b41      	ldr	r3, [pc, #260]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e073      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b56:	4b3d      	ldr	r3, [pc, #244]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e06b      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b66:	4b39      	ldr	r3, [pc, #228]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f023 0203 	bic.w	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4936      	ldr	r1, [pc, #216]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b78:	f7fd ffd6 	bl	8001b28 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b80:	f7fd ffd2 	bl	8001b28 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e053      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	4b2d      	ldr	r3, [pc, #180]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 020c 	and.w	r2, r3, #12
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d1eb      	bne.n	8003b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b27      	ldr	r3, [pc, #156]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d210      	bcs.n	8003bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b24      	ldr	r3, [pc, #144]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 0207 	bic.w	r2, r3, #7
 8003bbe:	4922      	ldr	r1, [pc, #136]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e032      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be4:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4916      	ldr	r1, [pc, #88]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c02:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	490e      	ldr	r1, [pc, #56]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c16:	f000 f821 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	490a      	ldr	r1, [pc, #40]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	5ccb      	ldrb	r3, [r1, r3]
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	4a09      	ldr	r2, [pc, #36]	@ (8003c54 <HAL_RCC_ClockConfig+0x1cc>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c32:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_RCC_ClockConfig+0x1d0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd ff34 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40022000 	.word	0x40022000
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	08007248 	.word	0x08007248
 8003c54:	20000004 	.word	0x20000004
 8003c58:	20000008 	.word	0x20000008

08003c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c76:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d002      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0x30>
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x36>
 8003c8a:	e027      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c8c:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c8e:	613b      	str	r3, [r7, #16]
      break;
 8003c90:	e027      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	0c9b      	lsrs	r3, r3, #18
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	4a17      	ldr	r2, [pc, #92]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c9c:	5cd3      	ldrb	r3, [r2, r3]
 8003c9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d010      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003caa:	4b11      	ldr	r3, [pc, #68]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	0c5b      	lsrs	r3, r3, #17
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	4a11      	ldr	r2, [pc, #68]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cb6:	5cd3      	ldrb	r3, [r2, r3]
 8003cb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cbe:	fb03 f202 	mul.w	r2, r3, r2
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	e004      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a0c      	ldr	r2, [pc, #48]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	613b      	str	r3, [r7, #16]
      break;
 8003cda:	e002      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cdc:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cde:	613b      	str	r3, [r7, #16]
      break;
 8003ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce2:	693b      	ldr	r3, [r7, #16]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	007a1200 	.word	0x007a1200
 8003cf8:	08007258 	.word	0x08007258
 8003cfc:	08007268 	.word	0x08007268
 8003d00:	003d0900 	.word	0x003d0900

08003d04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <RCC_Delay+0x34>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <RCC_Delay+0x38>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	0a5b      	lsrs	r3, r3, #9
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d20:	bf00      	nop
  }
  while (Delay --);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1e5a      	subs	r2, r3, #1
 8003d26:	60fa      	str	r2, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f9      	bne.n	8003d20 <RCC_Delay+0x1c>
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	20000004 	.word	0x20000004
 8003d3c:	10624dd3 	.word	0x10624dd3

08003d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d07d      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d60:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10d      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	61d3      	str	r3, [r2, #28]
 8003d78:	4b49      	ldr	r3, [pc, #292]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d88:	4b46      	ldr	r3, [pc, #280]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d118      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d94:	4b43      	ldr	r3, [pc, #268]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a42      	ldr	r2, [pc, #264]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da0:	f7fd fec2 	bl	8001b28 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	e008      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da8:	f7fd febe 	bl	8001b28 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	@ 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e06d      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dba:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dc6:	4b36      	ldr	r3, [pc, #216]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d02e      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d027      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003de4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dee:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003df4:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dfa:	4a29      	ldr	r2, [pc, #164]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d014      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fd fe8d 	bl	8001b28 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fd fe89 	bl	8001b28 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e036      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ee      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4917      	ldr	r1, [pc, #92]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	4a13      	ldr	r2, [pc, #76]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	490b      	ldr	r1, [pc, #44]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e82:	4b07      	ldr	r3, [pc, #28]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	4904      	ldr	r1, [pc, #16]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40007000 	.word	0x40007000
 8003ea8:	42420440 	.word	0x42420440

08003eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e076      	b.n	8003fac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d108      	bne.n	8003ed8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ece:	d009      	beq.n	8003ee4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	61da      	str	r2, [r3, #28]
 8003ed6:	e005      	b.n	8003ee4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd fbd4 	bl	80016ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f68:	ea42 0103 	orr.w	r1, r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	0c1a      	lsrs	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f002 0204 	and.w	r2, r2, #4
 8003f8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e041      	b.n	800404a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd fbb0 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f000 fa5c 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d001      	beq.n	800406c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e03a      	b.n	80040e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a18      	ldr	r2, [pc, #96]	@ (80040ec <HAL_TIM_Base_Start_IT+0x98>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x58>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004096:	d009      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x58>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a14      	ldr	r2, [pc, #80]	@ (80040f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x58>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a13      	ldr	r2, [pc, #76]	@ (80040f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d111      	bne.n	80040d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b06      	cmp	r3, #6
 80040bc:	d010      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ce:	e007      	b.n	80040e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800

080040f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d020      	beq.n	800415c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01b      	beq.n	800415c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0202 	mvn.w	r2, #2
 800412c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f998 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f98b 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f99a 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d020      	beq.n	80041a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01b      	beq.n	80041a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0204 	mvn.w	r2, #4
 8004178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f972 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004194:	e005      	b.n	80041a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f965 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f974 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d020      	beq.n	80041f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01b      	beq.n	80041f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0208 	mvn.w	r2, #8
 80041c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2204      	movs	r2, #4
 80041ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f94c 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 80041e0:	e005      	b.n	80041ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f93f 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f94e 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d020      	beq.n	8004240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01b      	beq.n	8004240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0210 	mvn.w	r2, #16
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2208      	movs	r2, #8
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f926 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f919 	bl	8004466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f928 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00c      	beq.n	8004264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0201 	mvn.w	r2, #1
 800425c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fd f8fe 	bl	8001460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00c      	beq.n	8004288 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa7f 	bl	8004786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8f8 	bl	800449c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00c      	beq.n	80042d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0220 	mvn.w	r2, #32
 80042c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fa52 	bl	8004774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_TIM_ConfigClockSource+0x1c>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e0b4      	b.n	800445e <HAL_TIM_ConfigClockSource+0x186>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800431a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432c:	d03e      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0xd4>
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004332:	f200 8087 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433a:	f000 8086 	beq.w	800444a <HAL_TIM_ConfigClockSource+0x172>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004342:	d87f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b70      	cmp	r3, #112	@ 0x70
 8004346:	d01a      	beq.n	800437e <HAL_TIM_ConfigClockSource+0xa6>
 8004348:	2b70      	cmp	r3, #112	@ 0x70
 800434a:	d87b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b60      	cmp	r3, #96	@ 0x60
 800434e:	d050      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004350:	2b60      	cmp	r3, #96	@ 0x60
 8004352:	d877      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b50      	cmp	r3, #80	@ 0x50
 8004356:	d03c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004358:	2b50      	cmp	r3, #80	@ 0x50
 800435a:	d873      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d058      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x13a>
 8004360:	2b40      	cmp	r3, #64	@ 0x40
 8004362:	d86f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b30      	cmp	r3, #48	@ 0x30
 8004366:	d064      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	2b30      	cmp	r3, #48	@ 0x30
 800436a:	d86b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d060      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d867      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05c      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004378:	2b10      	cmp	r3, #16
 800437a:	d05a      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 800437c:	e062      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438e:	f000 f974 	bl	800467a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	609a      	str	r2, [r3, #8]
      break;
 80043aa:	e04f      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043bc:	f000 f95d 	bl	800467a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ce:	609a      	str	r2, [r3, #8]
      break;
 80043d0:	e03c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 f8d4 	bl	800458c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2150      	movs	r1, #80	@ 0x50
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f92b 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e02c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 f8f2 	bl	80045e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2160      	movs	r1, #96	@ 0x60
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f91b 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004410:	e01c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	461a      	mov	r2, r3
 8004420:	f000 f8b4 	bl	800458c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2140      	movs	r1, #64	@ 0x40
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f90b 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004430:	e00c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f000 f902 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004442:	e003      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	e000      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800444a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
	...

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004580 <TIM_Base_SetConfig+0xd0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <TIM_Base_SetConfig+0x30>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ce:	d007      	beq.n	80044e0 <TIM_Base_SetConfig+0x30>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <TIM_Base_SetConfig+0xd4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_Base_SetConfig+0x30>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a2b      	ldr	r2, [pc, #172]	@ (8004588 <TIM_Base_SetConfig+0xd8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d108      	bne.n	80044f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a22      	ldr	r2, [pc, #136]	@ (8004580 <TIM_Base_SetConfig+0xd0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00b      	beq.n	8004512 <TIM_Base_SetConfig+0x62>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004500:	d007      	beq.n	8004512 <TIM_Base_SetConfig+0x62>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a1f      	ldr	r2, [pc, #124]	@ (8004584 <TIM_Base_SetConfig+0xd4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_Base_SetConfig+0x62>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1e      	ldr	r2, [pc, #120]	@ (8004588 <TIM_Base_SetConfig+0xd8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d108      	bne.n	8004524 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0d      	ldr	r2, [pc, #52]	@ (8004580 <TIM_Base_SetConfig+0xd0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d103      	bne.n	8004558 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f023 0201 	bic.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	611a      	str	r2, [r3, #16]
  }
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800

0800458c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0201 	bic.w	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 030a 	bic.w	r3, r3, #10
 80045c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0210 	bic.w	r2, r3, #16
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	031b      	lsls	r3, r3, #12
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004624:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	621a      	str	r2, [r3, #32]
}
 800463c:	bf00      	nop
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	f043 0307 	orr.w	r3, r3, #7
 8004668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr

0800467a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800467a:	b480      	push	{r7}
 800467c:	b087      	sub	sp, #28
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004694:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	021a      	lsls	r2, r3, #8
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	431a      	orrs	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	609a      	str	r2, [r3, #8]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e046      	b.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a16      	ldr	r2, [pc, #88]	@ (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00e      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471c:	d009      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a12      	ldr	r2, [pc, #72]	@ (800476c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d004      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a10      	ldr	r2, [pc, #64]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d10c      	bne.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4313      	orrs	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800

08004774 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800479c:	4904      	ldr	r1, [pc, #16]	@ (80047b0 <MX_FATFS_Init+0x18>)
 800479e:	4805      	ldr	r0, [pc, #20]	@ (80047b4 <MX_FATFS_Init+0x1c>)
 80047a0:	f000 f8a6 	bl	80048f0 <FATFS_LinkDriver>
 80047a4:	4603      	mov	r3, r0
 80047a6:	461a      	mov	r2, r3
 80047a8:	4b03      	ldr	r3, [pc, #12]	@ (80047b8 <MX_FATFS_Init+0x20>)
 80047aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	200003a4 	.word	0x200003a4
 80047b4:	20000010 	.word	0x20000010
 80047b8:	200003a0 	.word	0x200003a0

080047bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80047c6:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <USER_initialize+0x20>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
    return Stat;
 80047cc:	4b03      	ldr	r3, [pc, #12]	@ (80047dc <USER_initialize+0x20>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr
 80047dc:	2000000d 	.word	0x2000000d

080047e0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80047ea:	4b05      	ldr	r3, [pc, #20]	@ (8004800 <USER_status+0x20>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
    return Stat;
 80047f0:	4b03      	ldr	r3, [pc, #12]	@ (8004800 <USER_status+0x20>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr
 8004800:	2000000d 	.word	0x2000000d

08004804 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	4603      	mov	r3, r0
 8004812:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004814:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004830:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	603a      	str	r2, [r7, #0]
 8004846:	71fb      	strb	r3, [r7, #7]
 8004848:	460b      	mov	r3, r1
 800484a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
    return res;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004872:	4b1e      	ldr	r3, [pc, #120]	@ (80048ec <FATFS_LinkDriverEx+0x90>)
 8004874:	7a5b      	ldrb	r3, [r3, #9]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	d831      	bhi.n	80048e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800487c:	4b1b      	ldr	r3, [pc, #108]	@ (80048ec <FATFS_LinkDriverEx+0x90>)
 800487e:	7a5b      	ldrb	r3, [r3, #9]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	4b19      	ldr	r3, [pc, #100]	@ (80048ec <FATFS_LinkDriverEx+0x90>)
 8004886:	2100      	movs	r1, #0
 8004888:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800488a:	4b18      	ldr	r3, [pc, #96]	@ (80048ec <FATFS_LinkDriverEx+0x90>)
 800488c:	7a5b      	ldrb	r3, [r3, #9]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4a16      	ldr	r2, [pc, #88]	@ (80048ec <FATFS_LinkDriverEx+0x90>)
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800489a:	4b14      	ldr	r3, [pc, #80]	@ (80048ec <FATFS_LinkDriverEx+0x90>)
 800489c:	7a5b      	ldrb	r3, [r3, #9]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <FATFS_LinkDriverEx+0x90>)
 80048a4:	4413      	add	r3, r2
 80048a6:	79fa      	ldrb	r2, [r7, #7]
 80048a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80048aa:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <FATFS_LinkDriverEx+0x90>)
 80048ac:	7a5b      	ldrb	r3, [r3, #9]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	b2d1      	uxtb	r1, r2
 80048b4:	4a0d      	ldr	r2, [pc, #52]	@ (80048ec <FATFS_LinkDriverEx+0x90>)
 80048b6:	7251      	strb	r1, [r2, #9]
 80048b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80048ba:	7dbb      	ldrb	r3, [r7, #22]
 80048bc:	3330      	adds	r3, #48	@ 0x30
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	3301      	adds	r3, #1
 80048c8:	223a      	movs	r2, #58	@ 0x3a
 80048ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	3302      	adds	r3, #2
 80048d0:	222f      	movs	r2, #47	@ 0x2f
 80048d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	3303      	adds	r3, #3
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr
 80048ec:	200003a8 	.word	0x200003a8

080048f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80048fa:	2200      	movs	r2, #0
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff ffac 	bl	800485c <FATFS_LinkDriverEx>
 8004904:	4603      	mov	r3, r0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <__cvt>:
 800490e:	2b00      	cmp	r3, #0
 8004910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	461d      	mov	r5, r3
 8004916:	bfbb      	ittet	lt
 8004918:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800491c:	461d      	movlt	r5, r3
 800491e:	2300      	movge	r3, #0
 8004920:	232d      	movlt	r3, #45	@ 0x2d
 8004922:	b088      	sub	sp, #32
 8004924:	4614      	mov	r4, r2
 8004926:	bfb8      	it	lt
 8004928:	4614      	movlt	r4, r2
 800492a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800492c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800492e:	7013      	strb	r3, [r2, #0]
 8004930:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004932:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004936:	f023 0820 	bic.w	r8, r3, #32
 800493a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800493e:	d005      	beq.n	800494c <__cvt+0x3e>
 8004940:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004944:	d100      	bne.n	8004948 <__cvt+0x3a>
 8004946:	3601      	adds	r6, #1
 8004948:	2302      	movs	r3, #2
 800494a:	e000      	b.n	800494e <__cvt+0x40>
 800494c:	2303      	movs	r3, #3
 800494e:	aa07      	add	r2, sp, #28
 8004950:	9204      	str	r2, [sp, #16]
 8004952:	aa06      	add	r2, sp, #24
 8004954:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004958:	e9cd 3600 	strd	r3, r6, [sp]
 800495c:	4622      	mov	r2, r4
 800495e:	462b      	mov	r3, r5
 8004960:	f000 fe4e 	bl	8005600 <_dtoa_r>
 8004964:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004968:	4607      	mov	r7, r0
 800496a:	d119      	bne.n	80049a0 <__cvt+0x92>
 800496c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800496e:	07db      	lsls	r3, r3, #31
 8004970:	d50e      	bpl.n	8004990 <__cvt+0x82>
 8004972:	eb00 0906 	add.w	r9, r0, r6
 8004976:	2200      	movs	r2, #0
 8004978:	2300      	movs	r3, #0
 800497a:	4620      	mov	r0, r4
 800497c:	4629      	mov	r1, r5
 800497e:	f7fc f813 	bl	80009a8 <__aeabi_dcmpeq>
 8004982:	b108      	cbz	r0, 8004988 <__cvt+0x7a>
 8004984:	f8cd 901c 	str.w	r9, [sp, #28]
 8004988:	2230      	movs	r2, #48	@ 0x30
 800498a:	9b07      	ldr	r3, [sp, #28]
 800498c:	454b      	cmp	r3, r9
 800498e:	d31e      	bcc.n	80049ce <__cvt+0xc0>
 8004990:	4638      	mov	r0, r7
 8004992:	9b07      	ldr	r3, [sp, #28]
 8004994:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004996:	1bdb      	subs	r3, r3, r7
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	b008      	add	sp, #32
 800499c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049a4:	eb00 0906 	add.w	r9, r0, r6
 80049a8:	d1e5      	bne.n	8004976 <__cvt+0x68>
 80049aa:	7803      	ldrb	r3, [r0, #0]
 80049ac:	2b30      	cmp	r3, #48	@ 0x30
 80049ae:	d10a      	bne.n	80049c6 <__cvt+0xb8>
 80049b0:	2200      	movs	r2, #0
 80049b2:	2300      	movs	r3, #0
 80049b4:	4620      	mov	r0, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	f7fb fff6 	bl	80009a8 <__aeabi_dcmpeq>
 80049bc:	b918      	cbnz	r0, 80049c6 <__cvt+0xb8>
 80049be:	f1c6 0601 	rsb	r6, r6, #1
 80049c2:	f8ca 6000 	str.w	r6, [sl]
 80049c6:	f8da 3000 	ldr.w	r3, [sl]
 80049ca:	4499      	add	r9, r3
 80049cc:	e7d3      	b.n	8004976 <__cvt+0x68>
 80049ce:	1c59      	adds	r1, r3, #1
 80049d0:	9107      	str	r1, [sp, #28]
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	e7d9      	b.n	800498a <__cvt+0x7c>

080049d6 <__exponent>:
 80049d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049d8:	2900      	cmp	r1, #0
 80049da:	bfb6      	itet	lt
 80049dc:	232d      	movlt	r3, #45	@ 0x2d
 80049de:	232b      	movge	r3, #43	@ 0x2b
 80049e0:	4249      	neglt	r1, r1
 80049e2:	2909      	cmp	r1, #9
 80049e4:	7002      	strb	r2, [r0, #0]
 80049e6:	7043      	strb	r3, [r0, #1]
 80049e8:	dd29      	ble.n	8004a3e <__exponent+0x68>
 80049ea:	f10d 0307 	add.w	r3, sp, #7
 80049ee:	461d      	mov	r5, r3
 80049f0:	270a      	movs	r7, #10
 80049f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80049f6:	461a      	mov	r2, r3
 80049f8:	fb07 1416 	mls	r4, r7, r6, r1
 80049fc:	3430      	adds	r4, #48	@ 0x30
 80049fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a02:	460c      	mov	r4, r1
 8004a04:	2c63      	cmp	r4, #99	@ 0x63
 8004a06:	4631      	mov	r1, r6
 8004a08:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a0c:	dcf1      	bgt.n	80049f2 <__exponent+0x1c>
 8004a0e:	3130      	adds	r1, #48	@ 0x30
 8004a10:	1e94      	subs	r4, r2, #2
 8004a12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a16:	4623      	mov	r3, r4
 8004a18:	1c41      	adds	r1, r0, #1
 8004a1a:	42ab      	cmp	r3, r5
 8004a1c:	d30a      	bcc.n	8004a34 <__exponent+0x5e>
 8004a1e:	f10d 0309 	add.w	r3, sp, #9
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	42ac      	cmp	r4, r5
 8004a26:	bf88      	it	hi
 8004a28:	2300      	movhi	r3, #0
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	4403      	add	r3, r0
 8004a2e:	1a18      	subs	r0, r3, r0
 8004a30:	b003      	add	sp, #12
 8004a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a34:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a38:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a3c:	e7ed      	b.n	8004a1a <__exponent+0x44>
 8004a3e:	2330      	movs	r3, #48	@ 0x30
 8004a40:	3130      	adds	r1, #48	@ 0x30
 8004a42:	7083      	strb	r3, [r0, #2]
 8004a44:	70c1      	strb	r1, [r0, #3]
 8004a46:	1d03      	adds	r3, r0, #4
 8004a48:	e7f1      	b.n	8004a2e <__exponent+0x58>
	...

08004a4c <_printf_float>:
 8004a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a50:	b091      	sub	sp, #68	@ 0x44
 8004a52:	460c      	mov	r4, r1
 8004a54:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004a58:	4616      	mov	r6, r2
 8004a5a:	461f      	mov	r7, r3
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	f000 fcbf 	bl	80053e0 <_localeconv_r>
 8004a62:	6803      	ldr	r3, [r0, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	9308      	str	r3, [sp, #32]
 8004a68:	f7fb fb72 	bl	8000150 <strlen>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a70:	f8d8 3000 	ldr.w	r3, [r8]
 8004a74:	9009      	str	r0, [sp, #36]	@ 0x24
 8004a76:	3307      	adds	r3, #7
 8004a78:	f023 0307 	bic.w	r3, r3, #7
 8004a7c:	f103 0208 	add.w	r2, r3, #8
 8004a80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a84:	f8d4 b000 	ldr.w	fp, [r4]
 8004a88:	f8c8 2000 	str.w	r2, [r8]
 8004a8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a96:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004aa2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8004d18 <_printf_float+0x2cc>)
 8004aa8:	f7fb ffb0 	bl	8000a0c <__aeabi_dcmpun>
 8004aac:	bb70      	cbnz	r0, 8004b0c <_printf_float+0xc0>
 8004aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab6:	4b98      	ldr	r3, [pc, #608]	@ (8004d18 <_printf_float+0x2cc>)
 8004ab8:	f7fb ff8a 	bl	80009d0 <__aeabi_dcmple>
 8004abc:	bb30      	cbnz	r0, 8004b0c <_printf_float+0xc0>
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	f7fb ff79 	bl	80009bc <__aeabi_dcmplt>
 8004aca:	b110      	cbz	r0, 8004ad2 <_printf_float+0x86>
 8004acc:	232d      	movs	r3, #45	@ 0x2d
 8004ace:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ad2:	4a92      	ldr	r2, [pc, #584]	@ (8004d1c <_printf_float+0x2d0>)
 8004ad4:	4b92      	ldr	r3, [pc, #584]	@ (8004d20 <_printf_float+0x2d4>)
 8004ad6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ada:	bf8c      	ite	hi
 8004adc:	4690      	movhi	r8, r2
 8004ade:	4698      	movls	r8, r3
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	f04f 0900 	mov.w	r9, #0
 8004ae6:	6123      	str	r3, [r4, #16]
 8004ae8:	f02b 0304 	bic.w	r3, fp, #4
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	4633      	mov	r3, r6
 8004af0:	4621      	mov	r1, r4
 8004af2:	4628      	mov	r0, r5
 8004af4:	9700      	str	r7, [sp, #0]
 8004af6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004af8:	f000 f9d4 	bl	8004ea4 <_printf_common>
 8004afc:	3001      	adds	r0, #1
 8004afe:	f040 8090 	bne.w	8004c22 <_printf_float+0x1d6>
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295
 8004b06:	b011      	add	sp, #68	@ 0x44
 8004b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	4640      	mov	r0, r8
 8004b12:	4649      	mov	r1, r9
 8004b14:	f7fb ff7a 	bl	8000a0c <__aeabi_dcmpun>
 8004b18:	b148      	cbz	r0, 8004b2e <_printf_float+0xe2>
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bfb8      	it	lt
 8004b20:	232d      	movlt	r3, #45	@ 0x2d
 8004b22:	4a80      	ldr	r2, [pc, #512]	@ (8004d24 <_printf_float+0x2d8>)
 8004b24:	bfb8      	it	lt
 8004b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d28 <_printf_float+0x2dc>)
 8004b2c:	e7d3      	b.n	8004ad6 <_printf_float+0x8a>
 8004b2e:	6863      	ldr	r3, [r4, #4]
 8004b30:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	d13f      	bne.n	8004bb8 <_printf_float+0x16c>
 8004b38:	2306      	movs	r3, #6
 8004b3a:	6063      	str	r3, [r4, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	9206      	str	r2, [sp, #24]
 8004b46:	aa0e      	add	r2, sp, #56	@ 0x38
 8004b48:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004b4c:	aa0d      	add	r2, sp, #52	@ 0x34
 8004b4e:	9203      	str	r2, [sp, #12]
 8004b50:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004b54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	4642      	mov	r2, r8
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	4628      	mov	r0, r5
 8004b60:	464b      	mov	r3, r9
 8004b62:	910a      	str	r1, [sp, #40]	@ 0x28
 8004b64:	f7ff fed3 	bl	800490e <__cvt>
 8004b68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b6a:	4680      	mov	r8, r0
 8004b6c:	2947      	cmp	r1, #71	@ 0x47
 8004b6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004b70:	d128      	bne.n	8004bc4 <_printf_float+0x178>
 8004b72:	1cc8      	adds	r0, r1, #3
 8004b74:	db02      	blt.n	8004b7c <_printf_float+0x130>
 8004b76:	6863      	ldr	r3, [r4, #4]
 8004b78:	4299      	cmp	r1, r3
 8004b7a:	dd40      	ble.n	8004bfe <_printf_float+0x1b2>
 8004b7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b80:	fa5f fa8a 	uxtb.w	sl, sl
 8004b84:	4652      	mov	r2, sl
 8004b86:	3901      	subs	r1, #1
 8004b88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b8c:	910d      	str	r1, [sp, #52]	@ 0x34
 8004b8e:	f7ff ff22 	bl	80049d6 <__exponent>
 8004b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b94:	4681      	mov	r9, r0
 8004b96:	1813      	adds	r3, r2, r0
 8004b98:	2a01      	cmp	r2, #1
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	dc02      	bgt.n	8004ba4 <_printf_float+0x158>
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	07d2      	lsls	r2, r2, #31
 8004ba2:	d501      	bpl.n	8004ba8 <_printf_float+0x15c>
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	6123      	str	r3, [r4, #16]
 8004ba8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d09e      	beq.n	8004aee <_printf_float+0xa2>
 8004bb0:	232d      	movs	r3, #45	@ 0x2d
 8004bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb6:	e79a      	b.n	8004aee <_printf_float+0xa2>
 8004bb8:	2947      	cmp	r1, #71	@ 0x47
 8004bba:	d1bf      	bne.n	8004b3c <_printf_float+0xf0>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1bd      	bne.n	8004b3c <_printf_float+0xf0>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e7ba      	b.n	8004b3a <_printf_float+0xee>
 8004bc4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bc8:	d9dc      	bls.n	8004b84 <_printf_float+0x138>
 8004bca:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004bce:	d118      	bne.n	8004c02 <_printf_float+0x1b6>
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	6863      	ldr	r3, [r4, #4]
 8004bd4:	dd0b      	ble.n	8004bee <_printf_float+0x1a2>
 8004bd6:	6121      	str	r1, [r4, #16]
 8004bd8:	b913      	cbnz	r3, 8004be0 <_printf_float+0x194>
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	07d0      	lsls	r0, r2, #31
 8004bde:	d502      	bpl.n	8004be6 <_printf_float+0x19a>
 8004be0:	3301      	adds	r3, #1
 8004be2:	440b      	add	r3, r1
 8004be4:	6123      	str	r3, [r4, #16]
 8004be6:	f04f 0900 	mov.w	r9, #0
 8004bea:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004bec:	e7dc      	b.n	8004ba8 <_printf_float+0x15c>
 8004bee:	b913      	cbnz	r3, 8004bf6 <_printf_float+0x1aa>
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	07d2      	lsls	r2, r2, #31
 8004bf4:	d501      	bpl.n	8004bfa <_printf_float+0x1ae>
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	e7f4      	b.n	8004be4 <_printf_float+0x198>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e7f2      	b.n	8004be4 <_printf_float+0x198>
 8004bfe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c04:	4299      	cmp	r1, r3
 8004c06:	db05      	blt.n	8004c14 <_printf_float+0x1c8>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	6121      	str	r1, [r4, #16]
 8004c0c:	07d8      	lsls	r0, r3, #31
 8004c0e:	d5ea      	bpl.n	8004be6 <_printf_float+0x19a>
 8004c10:	1c4b      	adds	r3, r1, #1
 8004c12:	e7e7      	b.n	8004be4 <_printf_float+0x198>
 8004c14:	2900      	cmp	r1, #0
 8004c16:	bfcc      	ite	gt
 8004c18:	2201      	movgt	r2, #1
 8004c1a:	f1c1 0202 	rsble	r2, r1, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	e7e0      	b.n	8004be4 <_printf_float+0x198>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	055a      	lsls	r2, r3, #21
 8004c26:	d407      	bmi.n	8004c38 <_printf_float+0x1ec>
 8004c28:	6923      	ldr	r3, [r4, #16]
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	d12b      	bne.n	8004c8e <_printf_float+0x242>
 8004c36:	e764      	b.n	8004b02 <_printf_float+0xb6>
 8004c38:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c3c:	f240 80dc 	bls.w	8004df8 <_printf_float+0x3ac>
 8004c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c44:	2200      	movs	r2, #0
 8004c46:	2300      	movs	r3, #0
 8004c48:	f7fb feae 	bl	80009a8 <__aeabi_dcmpeq>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d033      	beq.n	8004cb8 <_printf_float+0x26c>
 8004c50:	2301      	movs	r3, #1
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
 8004c56:	4a35      	ldr	r2, [pc, #212]	@ (8004d2c <_printf_float+0x2e0>)
 8004c58:	47b8      	blx	r7
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	f43f af51 	beq.w	8004b02 <_printf_float+0xb6>
 8004c60:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004c64:	4543      	cmp	r3, r8
 8004c66:	db02      	blt.n	8004c6e <_printf_float+0x222>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	07d8      	lsls	r0, r3, #31
 8004c6c:	d50f      	bpl.n	8004c8e <_printf_float+0x242>
 8004c6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c72:	4631      	mov	r1, r6
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b8      	blx	r7
 8004c78:	3001      	adds	r0, #1
 8004c7a:	f43f af42 	beq.w	8004b02 <_printf_float+0xb6>
 8004c7e:	f04f 0900 	mov.w	r9, #0
 8004c82:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c86:	f104 0a1a 	add.w	sl, r4, #26
 8004c8a:	45c8      	cmp	r8, r9
 8004c8c:	dc09      	bgt.n	8004ca2 <_printf_float+0x256>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	079b      	lsls	r3, r3, #30
 8004c92:	f100 8102 	bmi.w	8004e9a <_printf_float+0x44e>
 8004c96:	68e0      	ldr	r0, [r4, #12]
 8004c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c9a:	4298      	cmp	r0, r3
 8004c9c:	bfb8      	it	lt
 8004c9e:	4618      	movlt	r0, r3
 8004ca0:	e731      	b.n	8004b06 <_printf_float+0xba>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4652      	mov	r2, sl
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	4628      	mov	r0, r5
 8004caa:	47b8      	blx	r7
 8004cac:	3001      	adds	r0, #1
 8004cae:	f43f af28 	beq.w	8004b02 <_printf_float+0xb6>
 8004cb2:	f109 0901 	add.w	r9, r9, #1
 8004cb6:	e7e8      	b.n	8004c8a <_printf_float+0x23e>
 8004cb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dc38      	bgt.n	8004d30 <_printf_float+0x2e4>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	4a19      	ldr	r2, [pc, #100]	@ (8004d2c <_printf_float+0x2e0>)
 8004cc6:	47b8      	blx	r7
 8004cc8:	3001      	adds	r0, #1
 8004cca:	f43f af1a 	beq.w	8004b02 <_printf_float+0xb6>
 8004cce:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004cd2:	ea59 0303 	orrs.w	r3, r9, r3
 8004cd6:	d102      	bne.n	8004cde <_printf_float+0x292>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	07d9      	lsls	r1, r3, #31
 8004cdc:	d5d7      	bpl.n	8004c8e <_printf_float+0x242>
 8004cde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f af0a 	beq.w	8004b02 <_printf_float+0xb6>
 8004cee:	f04f 0a00 	mov.w	sl, #0
 8004cf2:	f104 0b1a 	add.w	fp, r4, #26
 8004cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cf8:	425b      	negs	r3, r3
 8004cfa:	4553      	cmp	r3, sl
 8004cfc:	dc01      	bgt.n	8004d02 <_printf_float+0x2b6>
 8004cfe:	464b      	mov	r3, r9
 8004d00:	e793      	b.n	8004c2a <_printf_float+0x1de>
 8004d02:	2301      	movs	r3, #1
 8004d04:	465a      	mov	r2, fp
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b8      	blx	r7
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	f43f aef8 	beq.w	8004b02 <_printf_float+0xb6>
 8004d12:	f10a 0a01 	add.w	sl, sl, #1
 8004d16:	e7ee      	b.n	8004cf6 <_printf_float+0x2aa>
 8004d18:	7fefffff 	.word	0x7fefffff
 8004d1c:	0800726e 	.word	0x0800726e
 8004d20:	0800726a 	.word	0x0800726a
 8004d24:	08007276 	.word	0x08007276
 8004d28:	08007272 	.word	0x08007272
 8004d2c:	0800727a 	.word	0x0800727a
 8004d30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d32:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d36:	4553      	cmp	r3, sl
 8004d38:	bfa8      	it	ge
 8004d3a:	4653      	movge	r3, sl
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	4699      	mov	r9, r3
 8004d40:	dc36      	bgt.n	8004db0 <_printf_float+0x364>
 8004d42:	f04f 0b00 	mov.w	fp, #0
 8004d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d4a:	f104 021a 	add.w	r2, r4, #26
 8004d4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d52:	eba3 0309 	sub.w	r3, r3, r9
 8004d56:	455b      	cmp	r3, fp
 8004d58:	dc31      	bgt.n	8004dbe <_printf_float+0x372>
 8004d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d5c:	459a      	cmp	sl, r3
 8004d5e:	dc3a      	bgt.n	8004dd6 <_printf_float+0x38a>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	07da      	lsls	r2, r3, #31
 8004d64:	d437      	bmi.n	8004dd6 <_printf_float+0x38a>
 8004d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d68:	ebaa 0903 	sub.w	r9, sl, r3
 8004d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8004d72:	4599      	cmp	r9, r3
 8004d74:	bfa8      	it	ge
 8004d76:	4699      	movge	r9, r3
 8004d78:	f1b9 0f00 	cmp.w	r9, #0
 8004d7c:	dc33      	bgt.n	8004de6 <_printf_float+0x39a>
 8004d7e:	f04f 0800 	mov.w	r8, #0
 8004d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d86:	f104 0b1a 	add.w	fp, r4, #26
 8004d8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8004d90:	eba3 0309 	sub.w	r3, r3, r9
 8004d94:	4543      	cmp	r3, r8
 8004d96:	f77f af7a 	ble.w	8004c8e <_printf_float+0x242>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	465a      	mov	r2, fp
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f aeac 	beq.w	8004b02 <_printf_float+0xb6>
 8004daa:	f108 0801 	add.w	r8, r8, #1
 8004dae:	e7ec      	b.n	8004d8a <_printf_float+0x33e>
 8004db0:	4642      	mov	r2, r8
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	d1c2      	bne.n	8004d42 <_printf_float+0x2f6>
 8004dbc:	e6a1      	b.n	8004b02 <_printf_float+0xb6>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	920a      	str	r2, [sp, #40]	@ 0x28
 8004dc6:	47b8      	blx	r7
 8004dc8:	3001      	adds	r0, #1
 8004dca:	f43f ae9a 	beq.w	8004b02 <_printf_float+0xb6>
 8004dce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dd0:	f10b 0b01 	add.w	fp, fp, #1
 8004dd4:	e7bb      	b.n	8004d4e <_printf_float+0x302>
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	d1c0      	bne.n	8004d66 <_printf_float+0x31a>
 8004de4:	e68d      	b.n	8004b02 <_printf_float+0xb6>
 8004de6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004de8:	464b      	mov	r3, r9
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	4442      	add	r2, r8
 8004df0:	47b8      	blx	r7
 8004df2:	3001      	adds	r0, #1
 8004df4:	d1c3      	bne.n	8004d7e <_printf_float+0x332>
 8004df6:	e684      	b.n	8004b02 <_printf_float+0xb6>
 8004df8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004dfc:	f1ba 0f01 	cmp.w	sl, #1
 8004e00:	dc01      	bgt.n	8004e06 <_printf_float+0x3ba>
 8004e02:	07db      	lsls	r3, r3, #31
 8004e04:	d536      	bpl.n	8004e74 <_printf_float+0x428>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4642      	mov	r2, r8
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	47b8      	blx	r7
 8004e10:	3001      	adds	r0, #1
 8004e12:	f43f ae76 	beq.w	8004b02 <_printf_float+0xb6>
 8004e16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f ae6e 	beq.w	8004b02 <_printf_float+0xb6>
 8004e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e32:	f7fb fdb9 	bl	80009a8 <__aeabi_dcmpeq>
 8004e36:	b9c0      	cbnz	r0, 8004e6a <_printf_float+0x41e>
 8004e38:	4653      	mov	r3, sl
 8004e3a:	f108 0201 	add.w	r2, r8, #1
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b8      	blx	r7
 8004e44:	3001      	adds	r0, #1
 8004e46:	d10c      	bne.n	8004e62 <_printf_float+0x416>
 8004e48:	e65b      	b.n	8004b02 <_printf_float+0xb6>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	465a      	mov	r2, fp
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	f43f ae54 	beq.w	8004b02 <_printf_float+0xb6>
 8004e5a:	f108 0801 	add.w	r8, r8, #1
 8004e5e:	45d0      	cmp	r8, sl
 8004e60:	dbf3      	blt.n	8004e4a <_printf_float+0x3fe>
 8004e62:	464b      	mov	r3, r9
 8004e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e68:	e6e0      	b.n	8004c2c <_printf_float+0x1e0>
 8004e6a:	f04f 0800 	mov.w	r8, #0
 8004e6e:	f104 0b1a 	add.w	fp, r4, #26
 8004e72:	e7f4      	b.n	8004e5e <_printf_float+0x412>
 8004e74:	2301      	movs	r3, #1
 8004e76:	4642      	mov	r2, r8
 8004e78:	e7e1      	b.n	8004e3e <_printf_float+0x3f2>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	464a      	mov	r2, r9
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	f43f ae3c 	beq.w	8004b02 <_printf_float+0xb6>
 8004e8a:	f108 0801 	add.w	r8, r8, #1
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e92:	1a5b      	subs	r3, r3, r1
 8004e94:	4543      	cmp	r3, r8
 8004e96:	dcf0      	bgt.n	8004e7a <_printf_float+0x42e>
 8004e98:	e6fd      	b.n	8004c96 <_printf_float+0x24a>
 8004e9a:	f04f 0800 	mov.w	r8, #0
 8004e9e:	f104 0919 	add.w	r9, r4, #25
 8004ea2:	e7f4      	b.n	8004e8e <_printf_float+0x442>

08004ea4 <_printf_common>:
 8004ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	4698      	mov	r8, r3
 8004eac:	688a      	ldr	r2, [r1, #8]
 8004eae:	690b      	ldr	r3, [r1, #16]
 8004eb0:	4607      	mov	r7, r0
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	bfb8      	it	lt
 8004eb6:	4613      	movlt	r3, r2
 8004eb8:	6033      	str	r3, [r6, #0]
 8004eba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ec4:	b10a      	cbz	r2, 8004eca <_printf_common+0x26>
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	6033      	str	r3, [r6, #0]
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	0699      	lsls	r1, r3, #26
 8004ece:	bf42      	ittt	mi
 8004ed0:	6833      	ldrmi	r3, [r6, #0]
 8004ed2:	3302      	addmi	r3, #2
 8004ed4:	6033      	strmi	r3, [r6, #0]
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	f015 0506 	ands.w	r5, r5, #6
 8004edc:	d106      	bne.n	8004eec <_printf_common+0x48>
 8004ede:	f104 0a19 	add.w	sl, r4, #25
 8004ee2:	68e3      	ldr	r3, [r4, #12]
 8004ee4:	6832      	ldr	r2, [r6, #0]
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	42ab      	cmp	r3, r5
 8004eea:	dc2b      	bgt.n	8004f44 <_printf_common+0xa0>
 8004eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	3b00      	subs	r3, #0
 8004ef4:	bf18      	it	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	0692      	lsls	r2, r2, #26
 8004efa:	d430      	bmi.n	8004f5e <_printf_common+0xba>
 8004efc:	4641      	mov	r1, r8
 8004efe:	4638      	mov	r0, r7
 8004f00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f04:	47c8      	blx	r9
 8004f06:	3001      	adds	r0, #1
 8004f08:	d023      	beq.n	8004f52 <_printf_common+0xae>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	6922      	ldr	r2, [r4, #16]
 8004f0e:	f003 0306 	and.w	r3, r3, #6
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	bf14      	ite	ne
 8004f16:	2500      	movne	r5, #0
 8004f18:	6833      	ldreq	r3, [r6, #0]
 8004f1a:	f04f 0600 	mov.w	r6, #0
 8004f1e:	bf08      	it	eq
 8004f20:	68e5      	ldreq	r5, [r4, #12]
 8004f22:	f104 041a 	add.w	r4, r4, #26
 8004f26:	bf08      	it	eq
 8004f28:	1aed      	subeq	r5, r5, r3
 8004f2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f2e:	bf08      	it	eq
 8004f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f34:	4293      	cmp	r3, r2
 8004f36:	bfc4      	itt	gt
 8004f38:	1a9b      	subgt	r3, r3, r2
 8004f3a:	18ed      	addgt	r5, r5, r3
 8004f3c:	42b5      	cmp	r5, r6
 8004f3e:	d11a      	bne.n	8004f76 <_printf_common+0xd2>
 8004f40:	2000      	movs	r0, #0
 8004f42:	e008      	b.n	8004f56 <_printf_common+0xb2>
 8004f44:	2301      	movs	r3, #1
 8004f46:	4652      	mov	r2, sl
 8004f48:	4641      	mov	r1, r8
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	47c8      	blx	r9
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d103      	bne.n	8004f5a <_printf_common+0xb6>
 8004f52:	f04f 30ff 	mov.w	r0, #4294967295
 8004f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5a:	3501      	adds	r5, #1
 8004f5c:	e7c1      	b.n	8004ee2 <_printf_common+0x3e>
 8004f5e:	2030      	movs	r0, #48	@ 0x30
 8004f60:	18e1      	adds	r1, r4, r3
 8004f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f6c:	4422      	add	r2, r4
 8004f6e:	3302      	adds	r3, #2
 8004f70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f74:	e7c2      	b.n	8004efc <_printf_common+0x58>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4622      	mov	r2, r4
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	47c8      	blx	r9
 8004f80:	3001      	adds	r0, #1
 8004f82:	d0e6      	beq.n	8004f52 <_printf_common+0xae>
 8004f84:	3601      	adds	r6, #1
 8004f86:	e7d9      	b.n	8004f3c <_printf_common+0x98>

08004f88 <_printf_i>:
 8004f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	7e0f      	ldrb	r7, [r1, #24]
 8004f8e:	4691      	mov	r9, r2
 8004f90:	2f78      	cmp	r7, #120	@ 0x78
 8004f92:	4680      	mov	r8, r0
 8004f94:	460c      	mov	r4, r1
 8004f96:	469a      	mov	sl, r3
 8004f98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f9e:	d807      	bhi.n	8004fb0 <_printf_i+0x28>
 8004fa0:	2f62      	cmp	r7, #98	@ 0x62
 8004fa2:	d80a      	bhi.n	8004fba <_printf_i+0x32>
 8004fa4:	2f00      	cmp	r7, #0
 8004fa6:	f000 80d1 	beq.w	800514c <_printf_i+0x1c4>
 8004faa:	2f58      	cmp	r7, #88	@ 0x58
 8004fac:	f000 80b8 	beq.w	8005120 <_printf_i+0x198>
 8004fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fb8:	e03a      	b.n	8005030 <_printf_i+0xa8>
 8004fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fbe:	2b15      	cmp	r3, #21
 8004fc0:	d8f6      	bhi.n	8004fb0 <_printf_i+0x28>
 8004fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8004fc8 <_printf_i+0x40>)
 8004fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fc8:	08005021 	.word	0x08005021
 8004fcc:	08005035 	.word	0x08005035
 8004fd0:	08004fb1 	.word	0x08004fb1
 8004fd4:	08004fb1 	.word	0x08004fb1
 8004fd8:	08004fb1 	.word	0x08004fb1
 8004fdc:	08004fb1 	.word	0x08004fb1
 8004fe0:	08005035 	.word	0x08005035
 8004fe4:	08004fb1 	.word	0x08004fb1
 8004fe8:	08004fb1 	.word	0x08004fb1
 8004fec:	08004fb1 	.word	0x08004fb1
 8004ff0:	08004fb1 	.word	0x08004fb1
 8004ff4:	08005133 	.word	0x08005133
 8004ff8:	0800505f 	.word	0x0800505f
 8004ffc:	080050ed 	.word	0x080050ed
 8005000:	08004fb1 	.word	0x08004fb1
 8005004:	08004fb1 	.word	0x08004fb1
 8005008:	08005155 	.word	0x08005155
 800500c:	08004fb1 	.word	0x08004fb1
 8005010:	0800505f 	.word	0x0800505f
 8005014:	08004fb1 	.word	0x08004fb1
 8005018:	08004fb1 	.word	0x08004fb1
 800501c:	080050f5 	.word	0x080050f5
 8005020:	6833      	ldr	r3, [r6, #0]
 8005022:	1d1a      	adds	r2, r3, #4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6032      	str	r2, [r6, #0]
 8005028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800502c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005030:	2301      	movs	r3, #1
 8005032:	e09c      	b.n	800516e <_printf_i+0x1e6>
 8005034:	6833      	ldr	r3, [r6, #0]
 8005036:	6820      	ldr	r0, [r4, #0]
 8005038:	1d19      	adds	r1, r3, #4
 800503a:	6031      	str	r1, [r6, #0]
 800503c:	0606      	lsls	r6, r0, #24
 800503e:	d501      	bpl.n	8005044 <_printf_i+0xbc>
 8005040:	681d      	ldr	r5, [r3, #0]
 8005042:	e003      	b.n	800504c <_printf_i+0xc4>
 8005044:	0645      	lsls	r5, r0, #25
 8005046:	d5fb      	bpl.n	8005040 <_printf_i+0xb8>
 8005048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800504c:	2d00      	cmp	r5, #0
 800504e:	da03      	bge.n	8005058 <_printf_i+0xd0>
 8005050:	232d      	movs	r3, #45	@ 0x2d
 8005052:	426d      	negs	r5, r5
 8005054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005058:	230a      	movs	r3, #10
 800505a:	4858      	ldr	r0, [pc, #352]	@ (80051bc <_printf_i+0x234>)
 800505c:	e011      	b.n	8005082 <_printf_i+0xfa>
 800505e:	6821      	ldr	r1, [r4, #0]
 8005060:	6833      	ldr	r3, [r6, #0]
 8005062:	0608      	lsls	r0, r1, #24
 8005064:	f853 5b04 	ldr.w	r5, [r3], #4
 8005068:	d402      	bmi.n	8005070 <_printf_i+0xe8>
 800506a:	0649      	lsls	r1, r1, #25
 800506c:	bf48      	it	mi
 800506e:	b2ad      	uxthmi	r5, r5
 8005070:	2f6f      	cmp	r7, #111	@ 0x6f
 8005072:	6033      	str	r3, [r6, #0]
 8005074:	bf14      	ite	ne
 8005076:	230a      	movne	r3, #10
 8005078:	2308      	moveq	r3, #8
 800507a:	4850      	ldr	r0, [pc, #320]	@ (80051bc <_printf_i+0x234>)
 800507c:	2100      	movs	r1, #0
 800507e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005082:	6866      	ldr	r6, [r4, #4]
 8005084:	2e00      	cmp	r6, #0
 8005086:	60a6      	str	r6, [r4, #8]
 8005088:	db05      	blt.n	8005096 <_printf_i+0x10e>
 800508a:	6821      	ldr	r1, [r4, #0]
 800508c:	432e      	orrs	r6, r5
 800508e:	f021 0104 	bic.w	r1, r1, #4
 8005092:	6021      	str	r1, [r4, #0]
 8005094:	d04b      	beq.n	800512e <_printf_i+0x1a6>
 8005096:	4616      	mov	r6, r2
 8005098:	fbb5 f1f3 	udiv	r1, r5, r3
 800509c:	fb03 5711 	mls	r7, r3, r1, r5
 80050a0:	5dc7      	ldrb	r7, [r0, r7]
 80050a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050a6:	462f      	mov	r7, r5
 80050a8:	42bb      	cmp	r3, r7
 80050aa:	460d      	mov	r5, r1
 80050ac:	d9f4      	bls.n	8005098 <_printf_i+0x110>
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d10b      	bne.n	80050ca <_printf_i+0x142>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	07df      	lsls	r7, r3, #31
 80050b6:	d508      	bpl.n	80050ca <_printf_i+0x142>
 80050b8:	6923      	ldr	r3, [r4, #16]
 80050ba:	6861      	ldr	r1, [r4, #4]
 80050bc:	4299      	cmp	r1, r3
 80050be:	bfde      	ittt	le
 80050c0:	2330      	movle	r3, #48	@ 0x30
 80050c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050ca:	1b92      	subs	r2, r2, r6
 80050cc:	6122      	str	r2, [r4, #16]
 80050ce:	464b      	mov	r3, r9
 80050d0:	4621      	mov	r1, r4
 80050d2:	4640      	mov	r0, r8
 80050d4:	f8cd a000 	str.w	sl, [sp]
 80050d8:	aa03      	add	r2, sp, #12
 80050da:	f7ff fee3 	bl	8004ea4 <_printf_common>
 80050de:	3001      	adds	r0, #1
 80050e0:	d14a      	bne.n	8005178 <_printf_i+0x1f0>
 80050e2:	f04f 30ff 	mov.w	r0, #4294967295
 80050e6:	b004      	add	sp, #16
 80050e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	f043 0320 	orr.w	r3, r3, #32
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	2778      	movs	r7, #120	@ 0x78
 80050f6:	4832      	ldr	r0, [pc, #200]	@ (80051c0 <_printf_i+0x238>)
 80050f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	6831      	ldr	r1, [r6, #0]
 8005100:	061f      	lsls	r7, r3, #24
 8005102:	f851 5b04 	ldr.w	r5, [r1], #4
 8005106:	d402      	bmi.n	800510e <_printf_i+0x186>
 8005108:	065f      	lsls	r7, r3, #25
 800510a:	bf48      	it	mi
 800510c:	b2ad      	uxthmi	r5, r5
 800510e:	6031      	str	r1, [r6, #0]
 8005110:	07d9      	lsls	r1, r3, #31
 8005112:	bf44      	itt	mi
 8005114:	f043 0320 	orrmi.w	r3, r3, #32
 8005118:	6023      	strmi	r3, [r4, #0]
 800511a:	b11d      	cbz	r5, 8005124 <_printf_i+0x19c>
 800511c:	2310      	movs	r3, #16
 800511e:	e7ad      	b.n	800507c <_printf_i+0xf4>
 8005120:	4826      	ldr	r0, [pc, #152]	@ (80051bc <_printf_i+0x234>)
 8005122:	e7e9      	b.n	80050f8 <_printf_i+0x170>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	f023 0320 	bic.w	r3, r3, #32
 800512a:	6023      	str	r3, [r4, #0]
 800512c:	e7f6      	b.n	800511c <_printf_i+0x194>
 800512e:	4616      	mov	r6, r2
 8005130:	e7bd      	b.n	80050ae <_printf_i+0x126>
 8005132:	6833      	ldr	r3, [r6, #0]
 8005134:	6825      	ldr	r5, [r4, #0]
 8005136:	1d18      	adds	r0, r3, #4
 8005138:	6961      	ldr	r1, [r4, #20]
 800513a:	6030      	str	r0, [r6, #0]
 800513c:	062e      	lsls	r6, r5, #24
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	d501      	bpl.n	8005146 <_printf_i+0x1be>
 8005142:	6019      	str	r1, [r3, #0]
 8005144:	e002      	b.n	800514c <_printf_i+0x1c4>
 8005146:	0668      	lsls	r0, r5, #25
 8005148:	d5fb      	bpl.n	8005142 <_printf_i+0x1ba>
 800514a:	8019      	strh	r1, [r3, #0]
 800514c:	2300      	movs	r3, #0
 800514e:	4616      	mov	r6, r2
 8005150:	6123      	str	r3, [r4, #16]
 8005152:	e7bc      	b.n	80050ce <_printf_i+0x146>
 8005154:	6833      	ldr	r3, [r6, #0]
 8005156:	2100      	movs	r1, #0
 8005158:	1d1a      	adds	r2, r3, #4
 800515a:	6032      	str	r2, [r6, #0]
 800515c:	681e      	ldr	r6, [r3, #0]
 800515e:	6862      	ldr	r2, [r4, #4]
 8005160:	4630      	mov	r0, r6
 8005162:	f000 f9b4 	bl	80054ce <memchr>
 8005166:	b108      	cbz	r0, 800516c <_printf_i+0x1e4>
 8005168:	1b80      	subs	r0, r0, r6
 800516a:	6060      	str	r0, [r4, #4]
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	2300      	movs	r3, #0
 8005172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005176:	e7aa      	b.n	80050ce <_printf_i+0x146>
 8005178:	4632      	mov	r2, r6
 800517a:	4649      	mov	r1, r9
 800517c:	4640      	mov	r0, r8
 800517e:	6923      	ldr	r3, [r4, #16]
 8005180:	47d0      	blx	sl
 8005182:	3001      	adds	r0, #1
 8005184:	d0ad      	beq.n	80050e2 <_printf_i+0x15a>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	079b      	lsls	r3, r3, #30
 800518a:	d413      	bmi.n	80051b4 <_printf_i+0x22c>
 800518c:	68e0      	ldr	r0, [r4, #12]
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	4298      	cmp	r0, r3
 8005192:	bfb8      	it	lt
 8005194:	4618      	movlt	r0, r3
 8005196:	e7a6      	b.n	80050e6 <_printf_i+0x15e>
 8005198:	2301      	movs	r3, #1
 800519a:	4632      	mov	r2, r6
 800519c:	4649      	mov	r1, r9
 800519e:	4640      	mov	r0, r8
 80051a0:	47d0      	blx	sl
 80051a2:	3001      	adds	r0, #1
 80051a4:	d09d      	beq.n	80050e2 <_printf_i+0x15a>
 80051a6:	3501      	adds	r5, #1
 80051a8:	68e3      	ldr	r3, [r4, #12]
 80051aa:	9903      	ldr	r1, [sp, #12]
 80051ac:	1a5b      	subs	r3, r3, r1
 80051ae:	42ab      	cmp	r3, r5
 80051b0:	dcf2      	bgt.n	8005198 <_printf_i+0x210>
 80051b2:	e7eb      	b.n	800518c <_printf_i+0x204>
 80051b4:	2500      	movs	r5, #0
 80051b6:	f104 0619 	add.w	r6, r4, #25
 80051ba:	e7f5      	b.n	80051a8 <_printf_i+0x220>
 80051bc:	0800727c 	.word	0x0800727c
 80051c0:	0800728d 	.word	0x0800728d

080051c4 <std>:
 80051c4:	2300      	movs	r3, #0
 80051c6:	b510      	push	{r4, lr}
 80051c8:	4604      	mov	r4, r0
 80051ca:	e9c0 3300 	strd	r3, r3, [r0]
 80051ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051d2:	6083      	str	r3, [r0, #8]
 80051d4:	8181      	strh	r1, [r0, #12]
 80051d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80051d8:	81c2      	strh	r2, [r0, #14]
 80051da:	6183      	str	r3, [r0, #24]
 80051dc:	4619      	mov	r1, r3
 80051de:	2208      	movs	r2, #8
 80051e0:	305c      	adds	r0, #92	@ 0x5c
 80051e2:	f000 f8f4 	bl	80053ce <memset>
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <std+0x58>)
 80051e8:	6224      	str	r4, [r4, #32]
 80051ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80051ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005220 <std+0x5c>)
 80051ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <std+0x60>)
 80051f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <std+0x64>)
 80051f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80051f8:	4b0c      	ldr	r3, [pc, #48]	@ (800522c <std+0x68>)
 80051fa:	429c      	cmp	r4, r3
 80051fc:	d006      	beq.n	800520c <std+0x48>
 80051fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005202:	4294      	cmp	r4, r2
 8005204:	d002      	beq.n	800520c <std+0x48>
 8005206:	33d0      	adds	r3, #208	@ 0xd0
 8005208:	429c      	cmp	r4, r3
 800520a:	d105      	bne.n	8005218 <std+0x54>
 800520c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005214:	f000 b958 	b.w	80054c8 <__retarget_lock_init_recursive>
 8005218:	bd10      	pop	{r4, pc}
 800521a:	bf00      	nop
 800521c:	08005349 	.word	0x08005349
 8005220:	0800536b 	.word	0x0800536b
 8005224:	080053a3 	.word	0x080053a3
 8005228:	080053c7 	.word	0x080053c7
 800522c:	200003b4 	.word	0x200003b4

08005230 <stdio_exit_handler>:
 8005230:	4a02      	ldr	r2, [pc, #8]	@ (800523c <stdio_exit_handler+0xc>)
 8005232:	4903      	ldr	r1, [pc, #12]	@ (8005240 <stdio_exit_handler+0x10>)
 8005234:	4803      	ldr	r0, [pc, #12]	@ (8005244 <stdio_exit_handler+0x14>)
 8005236:	f000 b869 	b.w	800530c <_fwalk_sglue>
 800523a:	bf00      	nop
 800523c:	20000024 	.word	0x20000024
 8005240:	08006b99 	.word	0x08006b99
 8005244:	20000034 	.word	0x20000034

08005248 <cleanup_stdio>:
 8005248:	6841      	ldr	r1, [r0, #4]
 800524a:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <cleanup_stdio+0x34>)
 800524c:	b510      	push	{r4, lr}
 800524e:	4299      	cmp	r1, r3
 8005250:	4604      	mov	r4, r0
 8005252:	d001      	beq.n	8005258 <cleanup_stdio+0x10>
 8005254:	f001 fca0 	bl	8006b98 <_fflush_r>
 8005258:	68a1      	ldr	r1, [r4, #8]
 800525a:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <cleanup_stdio+0x38>)
 800525c:	4299      	cmp	r1, r3
 800525e:	d002      	beq.n	8005266 <cleanup_stdio+0x1e>
 8005260:	4620      	mov	r0, r4
 8005262:	f001 fc99 	bl	8006b98 <_fflush_r>
 8005266:	68e1      	ldr	r1, [r4, #12]
 8005268:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <cleanup_stdio+0x3c>)
 800526a:	4299      	cmp	r1, r3
 800526c:	d004      	beq.n	8005278 <cleanup_stdio+0x30>
 800526e:	4620      	mov	r0, r4
 8005270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005274:	f001 bc90 	b.w	8006b98 <_fflush_r>
 8005278:	bd10      	pop	{r4, pc}
 800527a:	bf00      	nop
 800527c:	200003b4 	.word	0x200003b4
 8005280:	2000041c 	.word	0x2000041c
 8005284:	20000484 	.word	0x20000484

08005288 <global_stdio_init.part.0>:
 8005288:	b510      	push	{r4, lr}
 800528a:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <global_stdio_init.part.0+0x30>)
 800528c:	4c0b      	ldr	r4, [pc, #44]	@ (80052bc <global_stdio_init.part.0+0x34>)
 800528e:	4a0c      	ldr	r2, [pc, #48]	@ (80052c0 <global_stdio_init.part.0+0x38>)
 8005290:	4620      	mov	r0, r4
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	2104      	movs	r1, #4
 8005296:	2200      	movs	r2, #0
 8005298:	f7ff ff94 	bl	80051c4 <std>
 800529c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052a0:	2201      	movs	r2, #1
 80052a2:	2109      	movs	r1, #9
 80052a4:	f7ff ff8e 	bl	80051c4 <std>
 80052a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052ac:	2202      	movs	r2, #2
 80052ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b2:	2112      	movs	r1, #18
 80052b4:	f7ff bf86 	b.w	80051c4 <std>
 80052b8:	200004ec 	.word	0x200004ec
 80052bc:	200003b4 	.word	0x200003b4
 80052c0:	08005231 	.word	0x08005231

080052c4 <__sfp_lock_acquire>:
 80052c4:	4801      	ldr	r0, [pc, #4]	@ (80052cc <__sfp_lock_acquire+0x8>)
 80052c6:	f000 b900 	b.w	80054ca <__retarget_lock_acquire_recursive>
 80052ca:	bf00      	nop
 80052cc:	200004f5 	.word	0x200004f5

080052d0 <__sfp_lock_release>:
 80052d0:	4801      	ldr	r0, [pc, #4]	@ (80052d8 <__sfp_lock_release+0x8>)
 80052d2:	f000 b8fb 	b.w	80054cc <__retarget_lock_release_recursive>
 80052d6:	bf00      	nop
 80052d8:	200004f5 	.word	0x200004f5

080052dc <__sinit>:
 80052dc:	b510      	push	{r4, lr}
 80052de:	4604      	mov	r4, r0
 80052e0:	f7ff fff0 	bl	80052c4 <__sfp_lock_acquire>
 80052e4:	6a23      	ldr	r3, [r4, #32]
 80052e6:	b11b      	cbz	r3, 80052f0 <__sinit+0x14>
 80052e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ec:	f7ff bff0 	b.w	80052d0 <__sfp_lock_release>
 80052f0:	4b04      	ldr	r3, [pc, #16]	@ (8005304 <__sinit+0x28>)
 80052f2:	6223      	str	r3, [r4, #32]
 80052f4:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <__sinit+0x2c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f5      	bne.n	80052e8 <__sinit+0xc>
 80052fc:	f7ff ffc4 	bl	8005288 <global_stdio_init.part.0>
 8005300:	e7f2      	b.n	80052e8 <__sinit+0xc>
 8005302:	bf00      	nop
 8005304:	08005249 	.word	0x08005249
 8005308:	200004ec 	.word	0x200004ec

0800530c <_fwalk_sglue>:
 800530c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005310:	4607      	mov	r7, r0
 8005312:	4688      	mov	r8, r1
 8005314:	4614      	mov	r4, r2
 8005316:	2600      	movs	r6, #0
 8005318:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800531c:	f1b9 0901 	subs.w	r9, r9, #1
 8005320:	d505      	bpl.n	800532e <_fwalk_sglue+0x22>
 8005322:	6824      	ldr	r4, [r4, #0]
 8005324:	2c00      	cmp	r4, #0
 8005326:	d1f7      	bne.n	8005318 <_fwalk_sglue+0xc>
 8005328:	4630      	mov	r0, r6
 800532a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d907      	bls.n	8005344 <_fwalk_sglue+0x38>
 8005334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005338:	3301      	adds	r3, #1
 800533a:	d003      	beq.n	8005344 <_fwalk_sglue+0x38>
 800533c:	4629      	mov	r1, r5
 800533e:	4638      	mov	r0, r7
 8005340:	47c0      	blx	r8
 8005342:	4306      	orrs	r6, r0
 8005344:	3568      	adds	r5, #104	@ 0x68
 8005346:	e7e9      	b.n	800531c <_fwalk_sglue+0x10>

08005348 <__sread>:
 8005348:	b510      	push	{r4, lr}
 800534a:	460c      	mov	r4, r1
 800534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005350:	f000 f86c 	bl	800542c <_read_r>
 8005354:	2800      	cmp	r0, #0
 8005356:	bfab      	itete	ge
 8005358:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800535a:	89a3      	ldrhlt	r3, [r4, #12]
 800535c:	181b      	addge	r3, r3, r0
 800535e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005362:	bfac      	ite	ge
 8005364:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005366:	81a3      	strhlt	r3, [r4, #12]
 8005368:	bd10      	pop	{r4, pc}

0800536a <__swrite>:
 800536a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536e:	461f      	mov	r7, r3
 8005370:	898b      	ldrh	r3, [r1, #12]
 8005372:	4605      	mov	r5, r0
 8005374:	05db      	lsls	r3, r3, #23
 8005376:	460c      	mov	r4, r1
 8005378:	4616      	mov	r6, r2
 800537a:	d505      	bpl.n	8005388 <__swrite+0x1e>
 800537c:	2302      	movs	r3, #2
 800537e:	2200      	movs	r2, #0
 8005380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005384:	f000 f840 	bl	8005408 <_lseek_r>
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	4632      	mov	r2, r6
 800538c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	4628      	mov	r0, r5
 8005394:	463b      	mov	r3, r7
 8005396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800539a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539e:	f000 b857 	b.w	8005450 <_write_r>

080053a2 <__sseek>:
 80053a2:	b510      	push	{r4, lr}
 80053a4:	460c      	mov	r4, r1
 80053a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053aa:	f000 f82d 	bl	8005408 <_lseek_r>
 80053ae:	1c43      	adds	r3, r0, #1
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	bf15      	itete	ne
 80053b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053be:	81a3      	strheq	r3, [r4, #12]
 80053c0:	bf18      	it	ne
 80053c2:	81a3      	strhne	r3, [r4, #12]
 80053c4:	bd10      	pop	{r4, pc}

080053c6 <__sclose>:
 80053c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ca:	f000 b80d 	b.w	80053e8 <_close_r>

080053ce <memset>:
 80053ce:	4603      	mov	r3, r0
 80053d0:	4402      	add	r2, r0
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d100      	bne.n	80053d8 <memset+0xa>
 80053d6:	4770      	bx	lr
 80053d8:	f803 1b01 	strb.w	r1, [r3], #1
 80053dc:	e7f9      	b.n	80053d2 <memset+0x4>
	...

080053e0 <_localeconv_r>:
 80053e0:	4800      	ldr	r0, [pc, #0]	@ (80053e4 <_localeconv_r+0x4>)
 80053e2:	4770      	bx	lr
 80053e4:	20000170 	.word	0x20000170

080053e8 <_close_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	2300      	movs	r3, #0
 80053ec:	4d05      	ldr	r5, [pc, #20]	@ (8005404 <_close_r+0x1c>)
 80053ee:	4604      	mov	r4, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	f7fc faad 	bl	8001952 <_close>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_close_r+0x1a>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_close_r+0x1a>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	200004f0 	.word	0x200004f0

08005408 <_lseek_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
 800540e:	4611      	mov	r1, r2
 8005410:	2200      	movs	r2, #0
 8005412:	4d05      	ldr	r5, [pc, #20]	@ (8005428 <_lseek_r+0x20>)
 8005414:	602a      	str	r2, [r5, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f7fc fabf 	bl	800199a <_lseek>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_lseek_r+0x1e>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_lseek_r+0x1e>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	200004f0 	.word	0x200004f0

0800542c <_read_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	4604      	mov	r4, r0
 8005430:	4608      	mov	r0, r1
 8005432:	4611      	mov	r1, r2
 8005434:	2200      	movs	r2, #0
 8005436:	4d05      	ldr	r5, [pc, #20]	@ (800544c <_read_r+0x20>)
 8005438:	602a      	str	r2, [r5, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	f7fc fa50 	bl	80018e0 <_read>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d102      	bne.n	800544a <_read_r+0x1e>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	b103      	cbz	r3, 800544a <_read_r+0x1e>
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	200004f0 	.word	0x200004f0

08005450 <_write_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	2200      	movs	r2, #0
 800545a:	4d05      	ldr	r5, [pc, #20]	@ (8005470 <_write_r+0x20>)
 800545c:	602a      	str	r2, [r5, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	f7fc fa5b 	bl	800191a <_write>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d102      	bne.n	800546e <_write_r+0x1e>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	b103      	cbz	r3, 800546e <_write_r+0x1e>
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	200004f0 	.word	0x200004f0

08005474 <__errno>:
 8005474:	4b01      	ldr	r3, [pc, #4]	@ (800547c <__errno+0x8>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000030 	.word	0x20000030

08005480 <__libc_init_array>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	2600      	movs	r6, #0
 8005484:	4d0c      	ldr	r5, [pc, #48]	@ (80054b8 <__libc_init_array+0x38>)
 8005486:	4c0d      	ldr	r4, [pc, #52]	@ (80054bc <__libc_init_array+0x3c>)
 8005488:	1b64      	subs	r4, r4, r5
 800548a:	10a4      	asrs	r4, r4, #2
 800548c:	42a6      	cmp	r6, r4
 800548e:	d109      	bne.n	80054a4 <__libc_init_array+0x24>
 8005490:	f001 fece 	bl	8007230 <_init>
 8005494:	2600      	movs	r6, #0
 8005496:	4d0a      	ldr	r5, [pc, #40]	@ (80054c0 <__libc_init_array+0x40>)
 8005498:	4c0a      	ldr	r4, [pc, #40]	@ (80054c4 <__libc_init_array+0x44>)
 800549a:	1b64      	subs	r4, r4, r5
 800549c:	10a4      	asrs	r4, r4, #2
 800549e:	42a6      	cmp	r6, r4
 80054a0:	d105      	bne.n	80054ae <__libc_init_array+0x2e>
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a8:	4798      	blx	r3
 80054aa:	3601      	adds	r6, #1
 80054ac:	e7ee      	b.n	800548c <__libc_init_array+0xc>
 80054ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b2:	4798      	blx	r3
 80054b4:	3601      	adds	r6, #1
 80054b6:	e7f2      	b.n	800549e <__libc_init_array+0x1e>
 80054b8:	080075e4 	.word	0x080075e4
 80054bc:	080075e4 	.word	0x080075e4
 80054c0:	080075e4 	.word	0x080075e4
 80054c4:	080075e8 	.word	0x080075e8

080054c8 <__retarget_lock_init_recursive>:
 80054c8:	4770      	bx	lr

080054ca <__retarget_lock_acquire_recursive>:
 80054ca:	4770      	bx	lr

080054cc <__retarget_lock_release_recursive>:
 80054cc:	4770      	bx	lr

080054ce <memchr>:
 80054ce:	4603      	mov	r3, r0
 80054d0:	b510      	push	{r4, lr}
 80054d2:	b2c9      	uxtb	r1, r1
 80054d4:	4402      	add	r2, r0
 80054d6:	4293      	cmp	r3, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	d101      	bne.n	80054e0 <memchr+0x12>
 80054dc:	2000      	movs	r0, #0
 80054de:	e003      	b.n	80054e8 <memchr+0x1a>
 80054e0:	7804      	ldrb	r4, [r0, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	428c      	cmp	r4, r1
 80054e6:	d1f6      	bne.n	80054d6 <memchr+0x8>
 80054e8:	bd10      	pop	{r4, pc}

080054ea <quorem>:
 80054ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ee:	6903      	ldr	r3, [r0, #16]
 80054f0:	690c      	ldr	r4, [r1, #16]
 80054f2:	4607      	mov	r7, r0
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	db7e      	blt.n	80055f6 <quorem+0x10c>
 80054f8:	3c01      	subs	r4, #1
 80054fa:	00a3      	lsls	r3, r4, #2
 80054fc:	f100 0514 	add.w	r5, r0, #20
 8005500:	f101 0814 	add.w	r8, r1, #20
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005514:	3301      	adds	r3, #1
 8005516:	429a      	cmp	r2, r3
 8005518:	fbb2 f6f3 	udiv	r6, r2, r3
 800551c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005520:	d32e      	bcc.n	8005580 <quorem+0x96>
 8005522:	f04f 0a00 	mov.w	sl, #0
 8005526:	46c4      	mov	ip, r8
 8005528:	46ae      	mov	lr, r5
 800552a:	46d3      	mov	fp, sl
 800552c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005530:	b298      	uxth	r0, r3
 8005532:	fb06 a000 	mla	r0, r6, r0, sl
 8005536:	0c1b      	lsrs	r3, r3, #16
 8005538:	0c02      	lsrs	r2, r0, #16
 800553a:	fb06 2303 	mla	r3, r6, r3, r2
 800553e:	f8de 2000 	ldr.w	r2, [lr]
 8005542:	b280      	uxth	r0, r0
 8005544:	b292      	uxth	r2, r2
 8005546:	1a12      	subs	r2, r2, r0
 8005548:	445a      	add	r2, fp
 800554a:	f8de 0000 	ldr.w	r0, [lr]
 800554e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005552:	b29b      	uxth	r3, r3
 8005554:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005558:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800555c:	b292      	uxth	r2, r2
 800555e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005562:	45e1      	cmp	r9, ip
 8005564:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005568:	f84e 2b04 	str.w	r2, [lr], #4
 800556c:	d2de      	bcs.n	800552c <quorem+0x42>
 800556e:	9b00      	ldr	r3, [sp, #0]
 8005570:	58eb      	ldr	r3, [r5, r3]
 8005572:	b92b      	cbnz	r3, 8005580 <quorem+0x96>
 8005574:	9b01      	ldr	r3, [sp, #4]
 8005576:	3b04      	subs	r3, #4
 8005578:	429d      	cmp	r5, r3
 800557a:	461a      	mov	r2, r3
 800557c:	d32f      	bcc.n	80055de <quorem+0xf4>
 800557e:	613c      	str	r4, [r7, #16]
 8005580:	4638      	mov	r0, r7
 8005582:	f001 f981 	bl	8006888 <__mcmp>
 8005586:	2800      	cmp	r0, #0
 8005588:	db25      	blt.n	80055d6 <quorem+0xec>
 800558a:	4629      	mov	r1, r5
 800558c:	2000      	movs	r0, #0
 800558e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005592:	f8d1 c000 	ldr.w	ip, [r1]
 8005596:	fa1f fe82 	uxth.w	lr, r2
 800559a:	fa1f f38c 	uxth.w	r3, ip
 800559e:	eba3 030e 	sub.w	r3, r3, lr
 80055a2:	4403      	add	r3, r0
 80055a4:	0c12      	lsrs	r2, r2, #16
 80055a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055b4:	45c1      	cmp	r9, r8
 80055b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055ba:	f841 3b04 	str.w	r3, [r1], #4
 80055be:	d2e6      	bcs.n	800558e <quorem+0xa4>
 80055c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055c8:	b922      	cbnz	r2, 80055d4 <quorem+0xea>
 80055ca:	3b04      	subs	r3, #4
 80055cc:	429d      	cmp	r5, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	d30b      	bcc.n	80055ea <quorem+0x100>
 80055d2:	613c      	str	r4, [r7, #16]
 80055d4:	3601      	adds	r6, #1
 80055d6:	4630      	mov	r0, r6
 80055d8:	b003      	add	sp, #12
 80055da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	3b04      	subs	r3, #4
 80055e2:	2a00      	cmp	r2, #0
 80055e4:	d1cb      	bne.n	800557e <quorem+0x94>
 80055e6:	3c01      	subs	r4, #1
 80055e8:	e7c6      	b.n	8005578 <quorem+0x8e>
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	3b04      	subs	r3, #4
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	d1ef      	bne.n	80055d2 <quorem+0xe8>
 80055f2:	3c01      	subs	r4, #1
 80055f4:	e7ea      	b.n	80055cc <quorem+0xe2>
 80055f6:	2000      	movs	r0, #0
 80055f8:	e7ee      	b.n	80055d8 <quorem+0xee>
 80055fa:	0000      	movs	r0, r0
 80055fc:	0000      	movs	r0, r0
	...

08005600 <_dtoa_r>:
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	4614      	mov	r4, r2
 8005606:	461d      	mov	r5, r3
 8005608:	69c7      	ldr	r7, [r0, #28]
 800560a:	b097      	sub	sp, #92	@ 0x5c
 800560c:	4681      	mov	r9, r0
 800560e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005612:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005614:	b97f      	cbnz	r7, 8005636 <_dtoa_r+0x36>
 8005616:	2010      	movs	r0, #16
 8005618:	f000 fe0e 	bl	8006238 <malloc>
 800561c:	4602      	mov	r2, r0
 800561e:	f8c9 001c 	str.w	r0, [r9, #28]
 8005622:	b920      	cbnz	r0, 800562e <_dtoa_r+0x2e>
 8005624:	21ef      	movs	r1, #239	@ 0xef
 8005626:	4bac      	ldr	r3, [pc, #688]	@ (80058d8 <_dtoa_r+0x2d8>)
 8005628:	48ac      	ldr	r0, [pc, #688]	@ (80058dc <_dtoa_r+0x2dc>)
 800562a:	f001 fafb 	bl	8006c24 <__assert_func>
 800562e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005632:	6007      	str	r7, [r0, #0]
 8005634:	60c7      	str	r7, [r0, #12]
 8005636:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	b159      	cbz	r1, 8005656 <_dtoa_r+0x56>
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	2301      	movs	r3, #1
 8005642:	4093      	lsls	r3, r2
 8005644:	604a      	str	r2, [r1, #4]
 8005646:	608b      	str	r3, [r1, #8]
 8005648:	4648      	mov	r0, r9
 800564a:	f000 feeb 	bl	8006424 <_Bfree>
 800564e:	2200      	movs	r2, #0
 8005650:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	1e2b      	subs	r3, r5, #0
 8005658:	bfaf      	iteee	ge
 800565a:	2300      	movge	r3, #0
 800565c:	2201      	movlt	r2, #1
 800565e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005662:	9307      	strlt	r3, [sp, #28]
 8005664:	bfa8      	it	ge
 8005666:	6033      	strge	r3, [r6, #0]
 8005668:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800566c:	4b9c      	ldr	r3, [pc, #624]	@ (80058e0 <_dtoa_r+0x2e0>)
 800566e:	bfb8      	it	lt
 8005670:	6032      	strlt	r2, [r6, #0]
 8005672:	ea33 0308 	bics.w	r3, r3, r8
 8005676:	d112      	bne.n	800569e <_dtoa_r+0x9e>
 8005678:	f242 730f 	movw	r3, #9999	@ 0x270f
 800567c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005684:	4323      	orrs	r3, r4
 8005686:	f000 855e 	beq.w	8006146 <_dtoa_r+0xb46>
 800568a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800568c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80058e4 <_dtoa_r+0x2e4>
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 8560 	beq.w	8006156 <_dtoa_r+0xb56>
 8005696:	f10a 0303 	add.w	r3, sl, #3
 800569a:	f000 bd5a 	b.w	8006152 <_dtoa_r+0xb52>
 800569e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80056a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056aa:	2200      	movs	r2, #0
 80056ac:	2300      	movs	r3, #0
 80056ae:	f7fb f97b 	bl	80009a8 <__aeabi_dcmpeq>
 80056b2:	4607      	mov	r7, r0
 80056b4:	b158      	cbz	r0, 80056ce <_dtoa_r+0xce>
 80056b6:	2301      	movs	r3, #1
 80056b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056be:	b113      	cbz	r3, 80056c6 <_dtoa_r+0xc6>
 80056c0:	4b89      	ldr	r3, [pc, #548]	@ (80058e8 <_dtoa_r+0x2e8>)
 80056c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80058ec <_dtoa_r+0x2ec>
 80056ca:	f000 bd44 	b.w	8006156 <_dtoa_r+0xb56>
 80056ce:	ab14      	add	r3, sp, #80	@ 0x50
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	ab15      	add	r3, sp, #84	@ 0x54
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	4648      	mov	r0, r9
 80056d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80056dc:	f001 f984 	bl	80069e8 <__d2b>
 80056e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80056e4:	9003      	str	r0, [sp, #12]
 80056e6:	2e00      	cmp	r6, #0
 80056e8:	d078      	beq.n	80057dc <_dtoa_r+0x1dc>
 80056ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80056f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80056fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005700:	9712      	str	r7, [sp, #72]	@ 0x48
 8005702:	4619      	mov	r1, r3
 8005704:	2200      	movs	r2, #0
 8005706:	4b7a      	ldr	r3, [pc, #488]	@ (80058f0 <_dtoa_r+0x2f0>)
 8005708:	f7fa fd2e 	bl	8000168 <__aeabi_dsub>
 800570c:	a36c      	add	r3, pc, #432	@ (adr r3, 80058c0 <_dtoa_r+0x2c0>)
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	f7fa fee1 	bl	80004d8 <__aeabi_dmul>
 8005716:	a36c      	add	r3, pc, #432	@ (adr r3, 80058c8 <_dtoa_r+0x2c8>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fa fd26 	bl	800016c <__adddf3>
 8005720:	4604      	mov	r4, r0
 8005722:	4630      	mov	r0, r6
 8005724:	460d      	mov	r5, r1
 8005726:	f7fa fe6d 	bl	8000404 <__aeabi_i2d>
 800572a:	a369      	add	r3, pc, #420	@ (adr r3, 80058d0 <_dtoa_r+0x2d0>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f7fa fed2 	bl	80004d8 <__aeabi_dmul>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4620      	mov	r0, r4
 800573a:	4629      	mov	r1, r5
 800573c:	f7fa fd16 	bl	800016c <__adddf3>
 8005740:	4604      	mov	r4, r0
 8005742:	460d      	mov	r5, r1
 8005744:	f7fb f978 	bl	8000a38 <__aeabi_d2iz>
 8005748:	2200      	movs	r2, #0
 800574a:	4607      	mov	r7, r0
 800574c:	2300      	movs	r3, #0
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fb f933 	bl	80009bc <__aeabi_dcmplt>
 8005756:	b140      	cbz	r0, 800576a <_dtoa_r+0x16a>
 8005758:	4638      	mov	r0, r7
 800575a:	f7fa fe53 	bl	8000404 <__aeabi_i2d>
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	f7fb f921 	bl	80009a8 <__aeabi_dcmpeq>
 8005766:	b900      	cbnz	r0, 800576a <_dtoa_r+0x16a>
 8005768:	3f01      	subs	r7, #1
 800576a:	2f16      	cmp	r7, #22
 800576c:	d854      	bhi.n	8005818 <_dtoa_r+0x218>
 800576e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005772:	4b60      	ldr	r3, [pc, #384]	@ (80058f4 <_dtoa_r+0x2f4>)
 8005774:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f7fb f91e 	bl	80009bc <__aeabi_dcmplt>
 8005780:	2800      	cmp	r0, #0
 8005782:	d04b      	beq.n	800581c <_dtoa_r+0x21c>
 8005784:	2300      	movs	r3, #0
 8005786:	3f01      	subs	r7, #1
 8005788:	930f      	str	r3, [sp, #60]	@ 0x3c
 800578a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800578c:	1b9b      	subs	r3, r3, r6
 800578e:	1e5a      	subs	r2, r3, #1
 8005790:	bf49      	itett	mi
 8005792:	f1c3 0301 	rsbmi	r3, r3, #1
 8005796:	2300      	movpl	r3, #0
 8005798:	9304      	strmi	r3, [sp, #16]
 800579a:	2300      	movmi	r3, #0
 800579c:	9209      	str	r2, [sp, #36]	@ 0x24
 800579e:	bf54      	ite	pl
 80057a0:	9304      	strpl	r3, [sp, #16]
 80057a2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80057a4:	2f00      	cmp	r7, #0
 80057a6:	db3b      	blt.n	8005820 <_dtoa_r+0x220>
 80057a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057aa:	970e      	str	r7, [sp, #56]	@ 0x38
 80057ac:	443b      	add	r3, r7
 80057ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80057b0:	2300      	movs	r3, #0
 80057b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80057b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057b6:	2b09      	cmp	r3, #9
 80057b8:	d865      	bhi.n	8005886 <_dtoa_r+0x286>
 80057ba:	2b05      	cmp	r3, #5
 80057bc:	bfc4      	itt	gt
 80057be:	3b04      	subgt	r3, #4
 80057c0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80057c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057c4:	bfc8      	it	gt
 80057c6:	2400      	movgt	r4, #0
 80057c8:	f1a3 0302 	sub.w	r3, r3, #2
 80057cc:	bfd8      	it	le
 80057ce:	2401      	movle	r4, #1
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d864      	bhi.n	800589e <_dtoa_r+0x29e>
 80057d4:	e8df f003 	tbb	[pc, r3]
 80057d8:	2c385553 	.word	0x2c385553
 80057dc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80057e0:	441e      	add	r6, r3
 80057e2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	bfc1      	itttt	gt
 80057ea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80057ee:	fa08 f803 	lslgt.w	r8, r8, r3
 80057f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80057f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80057fa:	bfd6      	itet	le
 80057fc:	f1c3 0320 	rsble	r3, r3, #32
 8005800:	ea48 0003 	orrgt.w	r0, r8, r3
 8005804:	fa04 f003 	lslle.w	r0, r4, r3
 8005808:	f7fa fdec 	bl	80003e4 <__aeabi_ui2d>
 800580c:	2201      	movs	r2, #1
 800580e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005812:	3e01      	subs	r6, #1
 8005814:	9212      	str	r2, [sp, #72]	@ 0x48
 8005816:	e774      	b.n	8005702 <_dtoa_r+0x102>
 8005818:	2301      	movs	r3, #1
 800581a:	e7b5      	b.n	8005788 <_dtoa_r+0x188>
 800581c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800581e:	e7b4      	b.n	800578a <_dtoa_r+0x18a>
 8005820:	9b04      	ldr	r3, [sp, #16]
 8005822:	1bdb      	subs	r3, r3, r7
 8005824:	9304      	str	r3, [sp, #16]
 8005826:	427b      	negs	r3, r7
 8005828:	930a      	str	r3, [sp, #40]	@ 0x28
 800582a:	2300      	movs	r3, #0
 800582c:	930e      	str	r3, [sp, #56]	@ 0x38
 800582e:	e7c1      	b.n	80057b4 <_dtoa_r+0x1b4>
 8005830:	2301      	movs	r3, #1
 8005832:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005834:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005836:	eb07 0b03 	add.w	fp, r7, r3
 800583a:	f10b 0301 	add.w	r3, fp, #1
 800583e:	2b01      	cmp	r3, #1
 8005840:	9308      	str	r3, [sp, #32]
 8005842:	bfb8      	it	lt
 8005844:	2301      	movlt	r3, #1
 8005846:	e006      	b.n	8005856 <_dtoa_r+0x256>
 8005848:	2301      	movs	r3, #1
 800584a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800584c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800584e:	2b00      	cmp	r3, #0
 8005850:	dd28      	ble.n	80058a4 <_dtoa_r+0x2a4>
 8005852:	469b      	mov	fp, r3
 8005854:	9308      	str	r3, [sp, #32]
 8005856:	2100      	movs	r1, #0
 8005858:	2204      	movs	r2, #4
 800585a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800585e:	f102 0514 	add.w	r5, r2, #20
 8005862:	429d      	cmp	r5, r3
 8005864:	d926      	bls.n	80058b4 <_dtoa_r+0x2b4>
 8005866:	6041      	str	r1, [r0, #4]
 8005868:	4648      	mov	r0, r9
 800586a:	f000 fd9b 	bl	80063a4 <_Balloc>
 800586e:	4682      	mov	sl, r0
 8005870:	2800      	cmp	r0, #0
 8005872:	d143      	bne.n	80058fc <_dtoa_r+0x2fc>
 8005874:	4602      	mov	r2, r0
 8005876:	f240 11af 	movw	r1, #431	@ 0x1af
 800587a:	4b1f      	ldr	r3, [pc, #124]	@ (80058f8 <_dtoa_r+0x2f8>)
 800587c:	e6d4      	b.n	8005628 <_dtoa_r+0x28>
 800587e:	2300      	movs	r3, #0
 8005880:	e7e3      	b.n	800584a <_dtoa_r+0x24a>
 8005882:	2300      	movs	r3, #0
 8005884:	e7d5      	b.n	8005832 <_dtoa_r+0x232>
 8005886:	2401      	movs	r4, #1
 8005888:	2300      	movs	r3, #0
 800588a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800588c:	9320      	str	r3, [sp, #128]	@ 0x80
 800588e:	f04f 3bff 	mov.w	fp, #4294967295
 8005892:	2200      	movs	r2, #0
 8005894:	2312      	movs	r3, #18
 8005896:	f8cd b020 	str.w	fp, [sp, #32]
 800589a:	9221      	str	r2, [sp, #132]	@ 0x84
 800589c:	e7db      	b.n	8005856 <_dtoa_r+0x256>
 800589e:	2301      	movs	r3, #1
 80058a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058a2:	e7f4      	b.n	800588e <_dtoa_r+0x28e>
 80058a4:	f04f 0b01 	mov.w	fp, #1
 80058a8:	465b      	mov	r3, fp
 80058aa:	f8cd b020 	str.w	fp, [sp, #32]
 80058ae:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80058b2:	e7d0      	b.n	8005856 <_dtoa_r+0x256>
 80058b4:	3101      	adds	r1, #1
 80058b6:	0052      	lsls	r2, r2, #1
 80058b8:	e7d1      	b.n	800585e <_dtoa_r+0x25e>
 80058ba:	bf00      	nop
 80058bc:	f3af 8000 	nop.w
 80058c0:	636f4361 	.word	0x636f4361
 80058c4:	3fd287a7 	.word	0x3fd287a7
 80058c8:	8b60c8b3 	.word	0x8b60c8b3
 80058cc:	3fc68a28 	.word	0x3fc68a28
 80058d0:	509f79fb 	.word	0x509f79fb
 80058d4:	3fd34413 	.word	0x3fd34413
 80058d8:	080072ab 	.word	0x080072ab
 80058dc:	080072c2 	.word	0x080072c2
 80058e0:	7ff00000 	.word	0x7ff00000
 80058e4:	080072a7 	.word	0x080072a7
 80058e8:	0800727b 	.word	0x0800727b
 80058ec:	0800727a 	.word	0x0800727a
 80058f0:	3ff80000 	.word	0x3ff80000
 80058f4:	08007410 	.word	0x08007410
 80058f8:	0800731a 	.word	0x0800731a
 80058fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005900:	6018      	str	r0, [r3, #0]
 8005902:	9b08      	ldr	r3, [sp, #32]
 8005904:	2b0e      	cmp	r3, #14
 8005906:	f200 80a1 	bhi.w	8005a4c <_dtoa_r+0x44c>
 800590a:	2c00      	cmp	r4, #0
 800590c:	f000 809e 	beq.w	8005a4c <_dtoa_r+0x44c>
 8005910:	2f00      	cmp	r7, #0
 8005912:	dd33      	ble.n	800597c <_dtoa_r+0x37c>
 8005914:	4b9c      	ldr	r3, [pc, #624]	@ (8005b88 <_dtoa_r+0x588>)
 8005916:	f007 020f 	and.w	r2, r7, #15
 800591a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800591e:	05f8      	lsls	r0, r7, #23
 8005920:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005924:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005928:	ea4f 1427 	mov.w	r4, r7, asr #4
 800592c:	d516      	bpl.n	800595c <_dtoa_r+0x35c>
 800592e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005932:	4b96      	ldr	r3, [pc, #600]	@ (8005b8c <_dtoa_r+0x58c>)
 8005934:	2603      	movs	r6, #3
 8005936:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800593a:	f7fa fef7 	bl	800072c <__aeabi_ddiv>
 800593e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005942:	f004 040f 	and.w	r4, r4, #15
 8005946:	4d91      	ldr	r5, [pc, #580]	@ (8005b8c <_dtoa_r+0x58c>)
 8005948:	b954      	cbnz	r4, 8005960 <_dtoa_r+0x360>
 800594a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800594e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005952:	f7fa feeb 	bl	800072c <__aeabi_ddiv>
 8005956:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800595a:	e028      	b.n	80059ae <_dtoa_r+0x3ae>
 800595c:	2602      	movs	r6, #2
 800595e:	e7f2      	b.n	8005946 <_dtoa_r+0x346>
 8005960:	07e1      	lsls	r1, r4, #31
 8005962:	d508      	bpl.n	8005976 <_dtoa_r+0x376>
 8005964:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005968:	e9d5 2300 	ldrd	r2, r3, [r5]
 800596c:	f7fa fdb4 	bl	80004d8 <__aeabi_dmul>
 8005970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005974:	3601      	adds	r6, #1
 8005976:	1064      	asrs	r4, r4, #1
 8005978:	3508      	adds	r5, #8
 800597a:	e7e5      	b.n	8005948 <_dtoa_r+0x348>
 800597c:	f000 80af 	beq.w	8005ade <_dtoa_r+0x4de>
 8005980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005984:	427c      	negs	r4, r7
 8005986:	4b80      	ldr	r3, [pc, #512]	@ (8005b88 <_dtoa_r+0x588>)
 8005988:	f004 020f 	and.w	r2, r4, #15
 800598c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	f7fa fda0 	bl	80004d8 <__aeabi_dmul>
 8005998:	2602      	movs	r6, #2
 800599a:	2300      	movs	r3, #0
 800599c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059a0:	4d7a      	ldr	r5, [pc, #488]	@ (8005b8c <_dtoa_r+0x58c>)
 80059a2:	1124      	asrs	r4, r4, #4
 80059a4:	2c00      	cmp	r4, #0
 80059a6:	f040 808f 	bne.w	8005ac8 <_dtoa_r+0x4c8>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1d3      	bne.n	8005956 <_dtoa_r+0x356>
 80059ae:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80059b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8094 	beq.w	8005ae2 <_dtoa_r+0x4e2>
 80059ba:	2200      	movs	r2, #0
 80059bc:	4620      	mov	r0, r4
 80059be:	4629      	mov	r1, r5
 80059c0:	4b73      	ldr	r3, [pc, #460]	@ (8005b90 <_dtoa_r+0x590>)
 80059c2:	f7fa fffb 	bl	80009bc <__aeabi_dcmplt>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f000 808b 	beq.w	8005ae2 <_dtoa_r+0x4e2>
 80059cc:	9b08      	ldr	r3, [sp, #32]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8087 	beq.w	8005ae2 <_dtoa_r+0x4e2>
 80059d4:	f1bb 0f00 	cmp.w	fp, #0
 80059d8:	dd34      	ble.n	8005a44 <_dtoa_r+0x444>
 80059da:	4620      	mov	r0, r4
 80059dc:	2200      	movs	r2, #0
 80059de:	4629      	mov	r1, r5
 80059e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005b94 <_dtoa_r+0x594>)
 80059e2:	f7fa fd79 	bl	80004d8 <__aeabi_dmul>
 80059e6:	465c      	mov	r4, fp
 80059e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059ec:	f107 38ff 	add.w	r8, r7, #4294967295
 80059f0:	3601      	adds	r6, #1
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7fa fd06 	bl	8000404 <__aeabi_i2d>
 80059f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059fc:	f7fa fd6c 	bl	80004d8 <__aeabi_dmul>
 8005a00:	2200      	movs	r2, #0
 8005a02:	4b65      	ldr	r3, [pc, #404]	@ (8005b98 <_dtoa_r+0x598>)
 8005a04:	f7fa fbb2 	bl	800016c <__adddf3>
 8005a08:	4605      	mov	r5, r0
 8005a0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a0e:	2c00      	cmp	r4, #0
 8005a10:	d16a      	bne.n	8005ae8 <_dtoa_r+0x4e8>
 8005a12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a16:	2200      	movs	r2, #0
 8005a18:	4b60      	ldr	r3, [pc, #384]	@ (8005b9c <_dtoa_r+0x59c>)
 8005a1a:	f7fa fba5 	bl	8000168 <__aeabi_dsub>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a26:	462a      	mov	r2, r5
 8005a28:	4633      	mov	r3, r6
 8005a2a:	f7fa ffe5 	bl	80009f8 <__aeabi_dcmpgt>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f040 8298 	bne.w	8005f64 <_dtoa_r+0x964>
 8005a34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a38:	462a      	mov	r2, r5
 8005a3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a3e:	f7fa ffbd 	bl	80009bc <__aeabi_dcmplt>
 8005a42:	bb38      	cbnz	r0, 8005a94 <_dtoa_r+0x494>
 8005a44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a48:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f2c0 8157 	blt.w	8005d02 <_dtoa_r+0x702>
 8005a54:	2f0e      	cmp	r7, #14
 8005a56:	f300 8154 	bgt.w	8005d02 <_dtoa_r+0x702>
 8005a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b88 <_dtoa_r+0x588>)
 8005a5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f280 80e5 	bge.w	8005c3a <_dtoa_r+0x63a>
 8005a70:	9b08      	ldr	r3, [sp, #32]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f300 80e1 	bgt.w	8005c3a <_dtoa_r+0x63a>
 8005a78:	d10c      	bne.n	8005a94 <_dtoa_r+0x494>
 8005a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4b46      	ldr	r3, [pc, #280]	@ (8005b9c <_dtoa_r+0x59c>)
 8005a82:	f7fa fd29 	bl	80004d8 <__aeabi_dmul>
 8005a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a8a:	f7fa ffab 	bl	80009e4 <__aeabi_dcmpge>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f000 8266 	beq.w	8005f60 <_dtoa_r+0x960>
 8005a94:	2400      	movs	r4, #0
 8005a96:	4625      	mov	r5, r4
 8005a98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a9a:	4656      	mov	r6, sl
 8005a9c:	ea6f 0803 	mvn.w	r8, r3
 8005aa0:	2700      	movs	r7, #0
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4648      	mov	r0, r9
 8005aa6:	f000 fcbd 	bl	8006424 <_Bfree>
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	f000 80bd 	beq.w	8005c2a <_dtoa_r+0x62a>
 8005ab0:	b12f      	cbz	r7, 8005abe <_dtoa_r+0x4be>
 8005ab2:	42af      	cmp	r7, r5
 8005ab4:	d003      	beq.n	8005abe <_dtoa_r+0x4be>
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	4648      	mov	r0, r9
 8005aba:	f000 fcb3 	bl	8006424 <_Bfree>
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4648      	mov	r0, r9
 8005ac2:	f000 fcaf 	bl	8006424 <_Bfree>
 8005ac6:	e0b0      	b.n	8005c2a <_dtoa_r+0x62a>
 8005ac8:	07e2      	lsls	r2, r4, #31
 8005aca:	d505      	bpl.n	8005ad8 <_dtoa_r+0x4d8>
 8005acc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ad0:	f7fa fd02 	bl	80004d8 <__aeabi_dmul>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	3601      	adds	r6, #1
 8005ad8:	1064      	asrs	r4, r4, #1
 8005ada:	3508      	adds	r5, #8
 8005adc:	e762      	b.n	80059a4 <_dtoa_r+0x3a4>
 8005ade:	2602      	movs	r6, #2
 8005ae0:	e765      	b.n	80059ae <_dtoa_r+0x3ae>
 8005ae2:	46b8      	mov	r8, r7
 8005ae4:	9c08      	ldr	r4, [sp, #32]
 8005ae6:	e784      	b.n	80059f2 <_dtoa_r+0x3f2>
 8005ae8:	4b27      	ldr	r3, [pc, #156]	@ (8005b88 <_dtoa_r+0x588>)
 8005aea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005aec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005af0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005af4:	4454      	add	r4, sl
 8005af6:	2900      	cmp	r1, #0
 8005af8:	d054      	beq.n	8005ba4 <_dtoa_r+0x5a4>
 8005afa:	2000      	movs	r0, #0
 8005afc:	4928      	ldr	r1, [pc, #160]	@ (8005ba0 <_dtoa_r+0x5a0>)
 8005afe:	f7fa fe15 	bl	800072c <__aeabi_ddiv>
 8005b02:	4633      	mov	r3, r6
 8005b04:	462a      	mov	r2, r5
 8005b06:	f7fa fb2f 	bl	8000168 <__aeabi_dsub>
 8005b0a:	4656      	mov	r6, sl
 8005b0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b14:	f7fa ff90 	bl	8000a38 <__aeabi_d2iz>
 8005b18:	4605      	mov	r5, r0
 8005b1a:	f7fa fc73 	bl	8000404 <__aeabi_i2d>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b26:	f7fa fb1f 	bl	8000168 <__aeabi_dsub>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	3530      	adds	r5, #48	@ 0x30
 8005b30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b38:	f806 5b01 	strb.w	r5, [r6], #1
 8005b3c:	f7fa ff3e 	bl	80009bc <__aeabi_dcmplt>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d172      	bne.n	8005c2a <_dtoa_r+0x62a>
 8005b44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b48:	2000      	movs	r0, #0
 8005b4a:	4911      	ldr	r1, [pc, #68]	@ (8005b90 <_dtoa_r+0x590>)
 8005b4c:	f7fa fb0c 	bl	8000168 <__aeabi_dsub>
 8005b50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b54:	f7fa ff32 	bl	80009bc <__aeabi_dcmplt>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	f040 80b4 	bne.w	8005cc6 <_dtoa_r+0x6c6>
 8005b5e:	42a6      	cmp	r6, r4
 8005b60:	f43f af70 	beq.w	8005a44 <_dtoa_r+0x444>
 8005b64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b94 <_dtoa_r+0x594>)
 8005b6c:	f7fa fcb4 	bl	80004d8 <__aeabi_dmul>
 8005b70:	2200      	movs	r2, #0
 8005b72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b7a:	4b06      	ldr	r3, [pc, #24]	@ (8005b94 <_dtoa_r+0x594>)
 8005b7c:	f7fa fcac 	bl	80004d8 <__aeabi_dmul>
 8005b80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b84:	e7c4      	b.n	8005b10 <_dtoa_r+0x510>
 8005b86:	bf00      	nop
 8005b88:	08007410 	.word	0x08007410
 8005b8c:	080073e8 	.word	0x080073e8
 8005b90:	3ff00000 	.word	0x3ff00000
 8005b94:	40240000 	.word	0x40240000
 8005b98:	401c0000 	.word	0x401c0000
 8005b9c:	40140000 	.word	0x40140000
 8005ba0:	3fe00000 	.word	0x3fe00000
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7fa fc96 	bl	80004d8 <__aeabi_dmul>
 8005bac:	4656      	mov	r6, sl
 8005bae:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bb2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005bb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bb8:	f7fa ff3e 	bl	8000a38 <__aeabi_d2iz>
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	f7fa fc21 	bl	8000404 <__aeabi_i2d>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bca:	f7fa facd 	bl	8000168 <__aeabi_dsub>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	3530      	adds	r5, #48	@ 0x30
 8005bd4:	f806 5b01 	strb.w	r5, [r6], #1
 8005bd8:	42a6      	cmp	r6, r4
 8005bda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	d124      	bne.n	8005c2e <_dtoa_r+0x62e>
 8005be4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005be8:	4bae      	ldr	r3, [pc, #696]	@ (8005ea4 <_dtoa_r+0x8a4>)
 8005bea:	f7fa fabf 	bl	800016c <__adddf3>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf6:	f7fa feff 	bl	80009f8 <__aeabi_dcmpgt>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d163      	bne.n	8005cc6 <_dtoa_r+0x6c6>
 8005bfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c02:	2000      	movs	r0, #0
 8005c04:	49a7      	ldr	r1, [pc, #668]	@ (8005ea4 <_dtoa_r+0x8a4>)
 8005c06:	f7fa faaf 	bl	8000168 <__aeabi_dsub>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c12:	f7fa fed3 	bl	80009bc <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f43f af14 	beq.w	8005a44 <_dtoa_r+0x444>
 8005c1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c1e:	1e73      	subs	r3, r6, #1
 8005c20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c26:	2b30      	cmp	r3, #48	@ 0x30
 8005c28:	d0f8      	beq.n	8005c1c <_dtoa_r+0x61c>
 8005c2a:	4647      	mov	r7, r8
 8005c2c:	e03b      	b.n	8005ca6 <_dtoa_r+0x6a6>
 8005c2e:	4b9e      	ldr	r3, [pc, #632]	@ (8005ea8 <_dtoa_r+0x8a8>)
 8005c30:	f7fa fc52 	bl	80004d8 <__aeabi_dmul>
 8005c34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c38:	e7bc      	b.n	8005bb4 <_dtoa_r+0x5b4>
 8005c3a:	4656      	mov	r6, sl
 8005c3c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c44:	4620      	mov	r0, r4
 8005c46:	4629      	mov	r1, r5
 8005c48:	f7fa fd70 	bl	800072c <__aeabi_ddiv>
 8005c4c:	f7fa fef4 	bl	8000a38 <__aeabi_d2iz>
 8005c50:	4680      	mov	r8, r0
 8005c52:	f7fa fbd7 	bl	8000404 <__aeabi_i2d>
 8005c56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c5a:	f7fa fc3d 	bl	80004d8 <__aeabi_dmul>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4620      	mov	r0, r4
 8005c64:	4629      	mov	r1, r5
 8005c66:	f7fa fa7f 	bl	8000168 <__aeabi_dsub>
 8005c6a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c6e:	9d08      	ldr	r5, [sp, #32]
 8005c70:	f806 4b01 	strb.w	r4, [r6], #1
 8005c74:	eba6 040a 	sub.w	r4, r6, sl
 8005c78:	42a5      	cmp	r5, r4
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	d133      	bne.n	8005ce8 <_dtoa_r+0x6e8>
 8005c80:	f7fa fa74 	bl	800016c <__adddf3>
 8005c84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c88:	4604      	mov	r4, r0
 8005c8a:	460d      	mov	r5, r1
 8005c8c:	f7fa feb4 	bl	80009f8 <__aeabi_dcmpgt>
 8005c90:	b9c0      	cbnz	r0, 8005cc4 <_dtoa_r+0x6c4>
 8005c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c96:	4620      	mov	r0, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7fa fe85 	bl	80009a8 <__aeabi_dcmpeq>
 8005c9e:	b110      	cbz	r0, 8005ca6 <_dtoa_r+0x6a6>
 8005ca0:	f018 0f01 	tst.w	r8, #1
 8005ca4:	d10e      	bne.n	8005cc4 <_dtoa_r+0x6c4>
 8005ca6:	4648      	mov	r0, r9
 8005ca8:	9903      	ldr	r1, [sp, #12]
 8005caa:	f000 fbbb 	bl	8006424 <_Bfree>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	7033      	strb	r3, [r6, #0]
 8005cb2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005cb4:	3701      	adds	r7, #1
 8005cb6:	601f      	str	r7, [r3, #0]
 8005cb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 824b 	beq.w	8006156 <_dtoa_r+0xb56>
 8005cc0:	601e      	str	r6, [r3, #0]
 8005cc2:	e248      	b.n	8006156 <_dtoa_r+0xb56>
 8005cc4:	46b8      	mov	r8, r7
 8005cc6:	4633      	mov	r3, r6
 8005cc8:	461e      	mov	r6, r3
 8005cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cce:	2a39      	cmp	r2, #57	@ 0x39
 8005cd0:	d106      	bne.n	8005ce0 <_dtoa_r+0x6e0>
 8005cd2:	459a      	cmp	sl, r3
 8005cd4:	d1f8      	bne.n	8005cc8 <_dtoa_r+0x6c8>
 8005cd6:	2230      	movs	r2, #48	@ 0x30
 8005cd8:	f108 0801 	add.w	r8, r8, #1
 8005cdc:	f88a 2000 	strb.w	r2, [sl]
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	3201      	adds	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	e7a0      	b.n	8005c2a <_dtoa_r+0x62a>
 8005ce8:	2200      	movs	r2, #0
 8005cea:	4b6f      	ldr	r3, [pc, #444]	@ (8005ea8 <_dtoa_r+0x8a8>)
 8005cec:	f7fa fbf4 	bl	80004d8 <__aeabi_dmul>
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	f7fa fe56 	bl	80009a8 <__aeabi_dcmpeq>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d09f      	beq.n	8005c40 <_dtoa_r+0x640>
 8005d00:	e7d1      	b.n	8005ca6 <_dtoa_r+0x6a6>
 8005d02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	f000 80ea 	beq.w	8005ede <_dtoa_r+0x8de>
 8005d0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d0c:	2a01      	cmp	r2, #1
 8005d0e:	f300 80cd 	bgt.w	8005eac <_dtoa_r+0x8ac>
 8005d12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	f000 80c1 	beq.w	8005e9c <_dtoa_r+0x89c>
 8005d1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d20:	9e04      	ldr	r6, [sp, #16]
 8005d22:	9a04      	ldr	r2, [sp, #16]
 8005d24:	2101      	movs	r1, #1
 8005d26:	441a      	add	r2, r3
 8005d28:	9204      	str	r2, [sp, #16]
 8005d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d2c:	4648      	mov	r0, r9
 8005d2e:	441a      	add	r2, r3
 8005d30:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d32:	f000 fc2b 	bl	800658c <__i2b>
 8005d36:	4605      	mov	r5, r0
 8005d38:	b166      	cbz	r6, 8005d54 <_dtoa_r+0x754>
 8005d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dd09      	ble.n	8005d54 <_dtoa_r+0x754>
 8005d40:	42b3      	cmp	r3, r6
 8005d42:	bfa8      	it	ge
 8005d44:	4633      	movge	r3, r6
 8005d46:	9a04      	ldr	r2, [sp, #16]
 8005d48:	1af6      	subs	r6, r6, r3
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	9204      	str	r2, [sp, #16]
 8005d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d56:	b30b      	cbz	r3, 8005d9c <_dtoa_r+0x79c>
 8005d58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80c6 	beq.w	8005eec <_dtoa_r+0x8ec>
 8005d60:	2c00      	cmp	r4, #0
 8005d62:	f000 80c0 	beq.w	8005ee6 <_dtoa_r+0x8e6>
 8005d66:	4629      	mov	r1, r5
 8005d68:	4622      	mov	r2, r4
 8005d6a:	4648      	mov	r0, r9
 8005d6c:	f000 fcc6 	bl	80066fc <__pow5mult>
 8005d70:	9a03      	ldr	r2, [sp, #12]
 8005d72:	4601      	mov	r1, r0
 8005d74:	4605      	mov	r5, r0
 8005d76:	4648      	mov	r0, r9
 8005d78:	f000 fc1e 	bl	80065b8 <__multiply>
 8005d7c:	9903      	ldr	r1, [sp, #12]
 8005d7e:	4680      	mov	r8, r0
 8005d80:	4648      	mov	r0, r9
 8005d82:	f000 fb4f 	bl	8006424 <_Bfree>
 8005d86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d88:	1b1b      	subs	r3, r3, r4
 8005d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d8c:	f000 80b1 	beq.w	8005ef2 <_dtoa_r+0x8f2>
 8005d90:	4641      	mov	r1, r8
 8005d92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d94:	4648      	mov	r0, r9
 8005d96:	f000 fcb1 	bl	80066fc <__pow5mult>
 8005d9a:	9003      	str	r0, [sp, #12]
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4648      	mov	r0, r9
 8005da0:	f000 fbf4 	bl	800658c <__i2b>
 8005da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005da6:	4604      	mov	r4, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 81d8 	beq.w	800615e <_dtoa_r+0xb5e>
 8005dae:	461a      	mov	r2, r3
 8005db0:	4601      	mov	r1, r0
 8005db2:	4648      	mov	r0, r9
 8005db4:	f000 fca2 	bl	80066fc <__pow5mult>
 8005db8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dba:	4604      	mov	r4, r0
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	f300 809f 	bgt.w	8005f00 <_dtoa_r+0x900>
 8005dc2:	9b06      	ldr	r3, [sp, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f040 8097 	bne.w	8005ef8 <_dtoa_r+0x8f8>
 8005dca:	9b07      	ldr	r3, [sp, #28]
 8005dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f040 8093 	bne.w	8005efc <_dtoa_r+0x8fc>
 8005dd6:	9b07      	ldr	r3, [sp, #28]
 8005dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ddc:	0d1b      	lsrs	r3, r3, #20
 8005dde:	051b      	lsls	r3, r3, #20
 8005de0:	b133      	cbz	r3, 8005df0 <_dtoa_r+0x7f0>
 8005de2:	9b04      	ldr	r3, [sp, #16]
 8005de4:	3301      	adds	r3, #1
 8005de6:	9304      	str	r3, [sp, #16]
 8005de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dea:	3301      	adds	r3, #1
 8005dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dee:	2301      	movs	r3, #1
 8005df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 81b8 	beq.w	800616a <_dtoa_r+0xb6a>
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e00:	6918      	ldr	r0, [r3, #16]
 8005e02:	f000 fb77 	bl	80064f4 <__hi0bits>
 8005e06:	f1c0 0020 	rsb	r0, r0, #32
 8005e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0c:	4418      	add	r0, r3
 8005e0e:	f010 001f 	ands.w	r0, r0, #31
 8005e12:	f000 8082 	beq.w	8005f1a <_dtoa_r+0x91a>
 8005e16:	f1c0 0320 	rsb	r3, r0, #32
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	dd73      	ble.n	8005f06 <_dtoa_r+0x906>
 8005e1e:	9b04      	ldr	r3, [sp, #16]
 8005e20:	f1c0 001c 	rsb	r0, r0, #28
 8005e24:	4403      	add	r3, r0
 8005e26:	9304      	str	r3, [sp, #16]
 8005e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e2a:	4406      	add	r6, r0
 8005e2c:	4403      	add	r3, r0
 8005e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dd05      	ble.n	8005e42 <_dtoa_r+0x842>
 8005e36:	461a      	mov	r2, r3
 8005e38:	4648      	mov	r0, r9
 8005e3a:	9903      	ldr	r1, [sp, #12]
 8005e3c:	f000 fcb8 	bl	80067b0 <__lshift>
 8005e40:	9003      	str	r0, [sp, #12]
 8005e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	dd05      	ble.n	8005e54 <_dtoa_r+0x854>
 8005e48:	4621      	mov	r1, r4
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4648      	mov	r0, r9
 8005e4e:	f000 fcaf 	bl	80067b0 <__lshift>
 8005e52:	4604      	mov	r4, r0
 8005e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d061      	beq.n	8005f1e <_dtoa_r+0x91e>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	9803      	ldr	r0, [sp, #12]
 8005e5e:	f000 fd13 	bl	8006888 <__mcmp>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	da5b      	bge.n	8005f1e <_dtoa_r+0x91e>
 8005e66:	2300      	movs	r3, #0
 8005e68:	220a      	movs	r2, #10
 8005e6a:	4648      	mov	r0, r9
 8005e6c:	9903      	ldr	r1, [sp, #12]
 8005e6e:	f000 fafb 	bl	8006468 <__multadd>
 8005e72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e74:	f107 38ff 	add.w	r8, r7, #4294967295
 8005e78:	9003      	str	r0, [sp, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8177 	beq.w	800616e <_dtoa_r+0xb6e>
 8005e80:	4629      	mov	r1, r5
 8005e82:	2300      	movs	r3, #0
 8005e84:	220a      	movs	r2, #10
 8005e86:	4648      	mov	r0, r9
 8005e88:	f000 faee 	bl	8006468 <__multadd>
 8005e8c:	f1bb 0f00 	cmp.w	fp, #0
 8005e90:	4605      	mov	r5, r0
 8005e92:	dc6f      	bgt.n	8005f74 <_dtoa_r+0x974>
 8005e94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	dc49      	bgt.n	8005f2e <_dtoa_r+0x92e>
 8005e9a:	e06b      	b.n	8005f74 <_dtoa_r+0x974>
 8005e9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005ea2:	e73c      	b.n	8005d1e <_dtoa_r+0x71e>
 8005ea4:	3fe00000 	.word	0x3fe00000
 8005ea8:	40240000 	.word	0x40240000
 8005eac:	9b08      	ldr	r3, [sp, #32]
 8005eae:	1e5c      	subs	r4, r3, #1
 8005eb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	db09      	blt.n	8005eca <_dtoa_r+0x8ca>
 8005eb6:	1b1c      	subs	r4, r3, r4
 8005eb8:	9b08      	ldr	r3, [sp, #32]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f6bf af30 	bge.w	8005d20 <_dtoa_r+0x720>
 8005ec0:	9b04      	ldr	r3, [sp, #16]
 8005ec2:	9a08      	ldr	r2, [sp, #32]
 8005ec4:	1a9e      	subs	r6, r3, r2
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e72b      	b.n	8005d22 <_dtoa_r+0x722>
 8005eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ecc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ece:	1ae3      	subs	r3, r4, r3
 8005ed0:	441a      	add	r2, r3
 8005ed2:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ed4:	9e04      	ldr	r6, [sp, #16]
 8005ed6:	2400      	movs	r4, #0
 8005ed8:	9b08      	ldr	r3, [sp, #32]
 8005eda:	920e      	str	r2, [sp, #56]	@ 0x38
 8005edc:	e721      	b.n	8005d22 <_dtoa_r+0x722>
 8005ede:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ee0:	9e04      	ldr	r6, [sp, #16]
 8005ee2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005ee4:	e728      	b.n	8005d38 <_dtoa_r+0x738>
 8005ee6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005eea:	e751      	b.n	8005d90 <_dtoa_r+0x790>
 8005eec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005eee:	9903      	ldr	r1, [sp, #12]
 8005ef0:	e750      	b.n	8005d94 <_dtoa_r+0x794>
 8005ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ef6:	e751      	b.n	8005d9c <_dtoa_r+0x79c>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e779      	b.n	8005df0 <_dtoa_r+0x7f0>
 8005efc:	9b06      	ldr	r3, [sp, #24]
 8005efe:	e777      	b.n	8005df0 <_dtoa_r+0x7f0>
 8005f00:	2300      	movs	r3, #0
 8005f02:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f04:	e779      	b.n	8005dfa <_dtoa_r+0x7fa>
 8005f06:	d093      	beq.n	8005e30 <_dtoa_r+0x830>
 8005f08:	9a04      	ldr	r2, [sp, #16]
 8005f0a:	331c      	adds	r3, #28
 8005f0c:	441a      	add	r2, r3
 8005f0e:	9204      	str	r2, [sp, #16]
 8005f10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f12:	441e      	add	r6, r3
 8005f14:	441a      	add	r2, r3
 8005f16:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f18:	e78a      	b.n	8005e30 <_dtoa_r+0x830>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	e7f4      	b.n	8005f08 <_dtoa_r+0x908>
 8005f1e:	9b08      	ldr	r3, [sp, #32]
 8005f20:	46b8      	mov	r8, r7
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dc20      	bgt.n	8005f68 <_dtoa_r+0x968>
 8005f26:	469b      	mov	fp, r3
 8005f28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	dd1e      	ble.n	8005f6c <_dtoa_r+0x96c>
 8005f2e:	f1bb 0f00 	cmp.w	fp, #0
 8005f32:	f47f adb1 	bne.w	8005a98 <_dtoa_r+0x498>
 8005f36:	4621      	mov	r1, r4
 8005f38:	465b      	mov	r3, fp
 8005f3a:	2205      	movs	r2, #5
 8005f3c:	4648      	mov	r0, r9
 8005f3e:	f000 fa93 	bl	8006468 <__multadd>
 8005f42:	4601      	mov	r1, r0
 8005f44:	4604      	mov	r4, r0
 8005f46:	9803      	ldr	r0, [sp, #12]
 8005f48:	f000 fc9e 	bl	8006888 <__mcmp>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f77f ada3 	ble.w	8005a98 <_dtoa_r+0x498>
 8005f52:	4656      	mov	r6, sl
 8005f54:	2331      	movs	r3, #49	@ 0x31
 8005f56:	f108 0801 	add.w	r8, r8, #1
 8005f5a:	f806 3b01 	strb.w	r3, [r6], #1
 8005f5e:	e59f      	b.n	8005aa0 <_dtoa_r+0x4a0>
 8005f60:	46b8      	mov	r8, r7
 8005f62:	9c08      	ldr	r4, [sp, #32]
 8005f64:	4625      	mov	r5, r4
 8005f66:	e7f4      	b.n	8005f52 <_dtoa_r+0x952>
 8005f68:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005f6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8101 	beq.w	8006176 <_dtoa_r+0xb76>
 8005f74:	2e00      	cmp	r6, #0
 8005f76:	dd05      	ble.n	8005f84 <_dtoa_r+0x984>
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4632      	mov	r2, r6
 8005f7c:	4648      	mov	r0, r9
 8005f7e:	f000 fc17 	bl	80067b0 <__lshift>
 8005f82:	4605      	mov	r5, r0
 8005f84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d05c      	beq.n	8006044 <_dtoa_r+0xa44>
 8005f8a:	4648      	mov	r0, r9
 8005f8c:	6869      	ldr	r1, [r5, #4]
 8005f8e:	f000 fa09 	bl	80063a4 <_Balloc>
 8005f92:	4606      	mov	r6, r0
 8005f94:	b928      	cbnz	r0, 8005fa2 <_dtoa_r+0x9a2>
 8005f96:	4602      	mov	r2, r0
 8005f98:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f9c:	4b80      	ldr	r3, [pc, #512]	@ (80061a0 <_dtoa_r+0xba0>)
 8005f9e:	f7ff bb43 	b.w	8005628 <_dtoa_r+0x28>
 8005fa2:	692a      	ldr	r2, [r5, #16]
 8005fa4:	f105 010c 	add.w	r1, r5, #12
 8005fa8:	3202      	adds	r2, #2
 8005faa:	0092      	lsls	r2, r2, #2
 8005fac:	300c      	adds	r0, #12
 8005fae:	f000 fe2b 	bl	8006c08 <memcpy>
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4648      	mov	r0, r9
 8005fb8:	f000 fbfa 	bl	80067b0 <__lshift>
 8005fbc:	462f      	mov	r7, r5
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	f10a 0301 	add.w	r3, sl, #1
 8005fc4:	9304      	str	r3, [sp, #16]
 8005fc6:	eb0a 030b 	add.w	r3, sl, fp
 8005fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fcc:	9b06      	ldr	r3, [sp, #24]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fd4:	9b04      	ldr	r3, [sp, #16]
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	9803      	ldr	r0, [sp, #12]
 8005fda:	f103 3bff 	add.w	fp, r3, #4294967295
 8005fde:	f7ff fa84 	bl	80054ea <quorem>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4639      	mov	r1, r7
 8005fe6:	3330      	adds	r3, #48	@ 0x30
 8005fe8:	9006      	str	r0, [sp, #24]
 8005fea:	9803      	ldr	r0, [sp, #12]
 8005fec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fee:	f000 fc4b 	bl	8006888 <__mcmp>
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	9008      	str	r0, [sp, #32]
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	4648      	mov	r0, r9
 8005ffa:	f000 fc61 	bl	80068c0 <__mdiff>
 8005ffe:	68c2      	ldr	r2, [r0, #12]
 8006000:	4606      	mov	r6, r0
 8006002:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006004:	bb02      	cbnz	r2, 8006048 <_dtoa_r+0xa48>
 8006006:	4601      	mov	r1, r0
 8006008:	9803      	ldr	r0, [sp, #12]
 800600a:	f000 fc3d 	bl	8006888 <__mcmp>
 800600e:	4602      	mov	r2, r0
 8006010:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006012:	4631      	mov	r1, r6
 8006014:	4648      	mov	r0, r9
 8006016:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800601a:	f000 fa03 	bl	8006424 <_Bfree>
 800601e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006020:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006022:	9e04      	ldr	r6, [sp, #16]
 8006024:	ea42 0103 	orr.w	r1, r2, r3
 8006028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800602a:	4319      	orrs	r1, r3
 800602c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800602e:	d10d      	bne.n	800604c <_dtoa_r+0xa4c>
 8006030:	2b39      	cmp	r3, #57	@ 0x39
 8006032:	d027      	beq.n	8006084 <_dtoa_r+0xa84>
 8006034:	9a08      	ldr	r2, [sp, #32]
 8006036:	2a00      	cmp	r2, #0
 8006038:	dd01      	ble.n	800603e <_dtoa_r+0xa3e>
 800603a:	9b06      	ldr	r3, [sp, #24]
 800603c:	3331      	adds	r3, #49	@ 0x31
 800603e:	f88b 3000 	strb.w	r3, [fp]
 8006042:	e52e      	b.n	8005aa2 <_dtoa_r+0x4a2>
 8006044:	4628      	mov	r0, r5
 8006046:	e7b9      	b.n	8005fbc <_dtoa_r+0x9bc>
 8006048:	2201      	movs	r2, #1
 800604a:	e7e2      	b.n	8006012 <_dtoa_r+0xa12>
 800604c:	9908      	ldr	r1, [sp, #32]
 800604e:	2900      	cmp	r1, #0
 8006050:	db04      	blt.n	800605c <_dtoa_r+0xa5c>
 8006052:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006054:	4301      	orrs	r1, r0
 8006056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006058:	4301      	orrs	r1, r0
 800605a:	d120      	bne.n	800609e <_dtoa_r+0xa9e>
 800605c:	2a00      	cmp	r2, #0
 800605e:	ddee      	ble.n	800603e <_dtoa_r+0xa3e>
 8006060:	2201      	movs	r2, #1
 8006062:	9903      	ldr	r1, [sp, #12]
 8006064:	4648      	mov	r0, r9
 8006066:	9304      	str	r3, [sp, #16]
 8006068:	f000 fba2 	bl	80067b0 <__lshift>
 800606c:	4621      	mov	r1, r4
 800606e:	9003      	str	r0, [sp, #12]
 8006070:	f000 fc0a 	bl	8006888 <__mcmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	9b04      	ldr	r3, [sp, #16]
 8006078:	dc02      	bgt.n	8006080 <_dtoa_r+0xa80>
 800607a:	d1e0      	bne.n	800603e <_dtoa_r+0xa3e>
 800607c:	07da      	lsls	r2, r3, #31
 800607e:	d5de      	bpl.n	800603e <_dtoa_r+0xa3e>
 8006080:	2b39      	cmp	r3, #57	@ 0x39
 8006082:	d1da      	bne.n	800603a <_dtoa_r+0xa3a>
 8006084:	2339      	movs	r3, #57	@ 0x39
 8006086:	f88b 3000 	strb.w	r3, [fp]
 800608a:	4633      	mov	r3, r6
 800608c:	461e      	mov	r6, r3
 800608e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006092:	3b01      	subs	r3, #1
 8006094:	2a39      	cmp	r2, #57	@ 0x39
 8006096:	d04e      	beq.n	8006136 <_dtoa_r+0xb36>
 8006098:	3201      	adds	r2, #1
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	e501      	b.n	8005aa2 <_dtoa_r+0x4a2>
 800609e:	2a00      	cmp	r2, #0
 80060a0:	dd03      	ble.n	80060aa <_dtoa_r+0xaaa>
 80060a2:	2b39      	cmp	r3, #57	@ 0x39
 80060a4:	d0ee      	beq.n	8006084 <_dtoa_r+0xa84>
 80060a6:	3301      	adds	r3, #1
 80060a8:	e7c9      	b.n	800603e <_dtoa_r+0xa3e>
 80060aa:	9a04      	ldr	r2, [sp, #16]
 80060ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060b2:	428a      	cmp	r2, r1
 80060b4:	d028      	beq.n	8006108 <_dtoa_r+0xb08>
 80060b6:	2300      	movs	r3, #0
 80060b8:	220a      	movs	r2, #10
 80060ba:	9903      	ldr	r1, [sp, #12]
 80060bc:	4648      	mov	r0, r9
 80060be:	f000 f9d3 	bl	8006468 <__multadd>
 80060c2:	42af      	cmp	r7, r5
 80060c4:	9003      	str	r0, [sp, #12]
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	f04f 020a 	mov.w	r2, #10
 80060ce:	4639      	mov	r1, r7
 80060d0:	4648      	mov	r0, r9
 80060d2:	d107      	bne.n	80060e4 <_dtoa_r+0xae4>
 80060d4:	f000 f9c8 	bl	8006468 <__multadd>
 80060d8:	4607      	mov	r7, r0
 80060da:	4605      	mov	r5, r0
 80060dc:	9b04      	ldr	r3, [sp, #16]
 80060de:	3301      	adds	r3, #1
 80060e0:	9304      	str	r3, [sp, #16]
 80060e2:	e777      	b.n	8005fd4 <_dtoa_r+0x9d4>
 80060e4:	f000 f9c0 	bl	8006468 <__multadd>
 80060e8:	4629      	mov	r1, r5
 80060ea:	4607      	mov	r7, r0
 80060ec:	2300      	movs	r3, #0
 80060ee:	220a      	movs	r2, #10
 80060f0:	4648      	mov	r0, r9
 80060f2:	f000 f9b9 	bl	8006468 <__multadd>
 80060f6:	4605      	mov	r5, r0
 80060f8:	e7f0      	b.n	80060dc <_dtoa_r+0xadc>
 80060fa:	f1bb 0f00 	cmp.w	fp, #0
 80060fe:	bfcc      	ite	gt
 8006100:	465e      	movgt	r6, fp
 8006102:	2601      	movle	r6, #1
 8006104:	2700      	movs	r7, #0
 8006106:	4456      	add	r6, sl
 8006108:	2201      	movs	r2, #1
 800610a:	9903      	ldr	r1, [sp, #12]
 800610c:	4648      	mov	r0, r9
 800610e:	9304      	str	r3, [sp, #16]
 8006110:	f000 fb4e 	bl	80067b0 <__lshift>
 8006114:	4621      	mov	r1, r4
 8006116:	9003      	str	r0, [sp, #12]
 8006118:	f000 fbb6 	bl	8006888 <__mcmp>
 800611c:	2800      	cmp	r0, #0
 800611e:	dcb4      	bgt.n	800608a <_dtoa_r+0xa8a>
 8006120:	d102      	bne.n	8006128 <_dtoa_r+0xb28>
 8006122:	9b04      	ldr	r3, [sp, #16]
 8006124:	07db      	lsls	r3, r3, #31
 8006126:	d4b0      	bmi.n	800608a <_dtoa_r+0xa8a>
 8006128:	4633      	mov	r3, r6
 800612a:	461e      	mov	r6, r3
 800612c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006130:	2a30      	cmp	r2, #48	@ 0x30
 8006132:	d0fa      	beq.n	800612a <_dtoa_r+0xb2a>
 8006134:	e4b5      	b.n	8005aa2 <_dtoa_r+0x4a2>
 8006136:	459a      	cmp	sl, r3
 8006138:	d1a8      	bne.n	800608c <_dtoa_r+0xa8c>
 800613a:	2331      	movs	r3, #49	@ 0x31
 800613c:	f108 0801 	add.w	r8, r8, #1
 8006140:	f88a 3000 	strb.w	r3, [sl]
 8006144:	e4ad      	b.n	8005aa2 <_dtoa_r+0x4a2>
 8006146:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006148:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80061a4 <_dtoa_r+0xba4>
 800614c:	b11b      	cbz	r3, 8006156 <_dtoa_r+0xb56>
 800614e:	f10a 0308 	add.w	r3, sl, #8
 8006152:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	4650      	mov	r0, sl
 8006158:	b017      	add	sp, #92	@ 0x5c
 800615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006160:	2b01      	cmp	r3, #1
 8006162:	f77f ae2e 	ble.w	8005dc2 <_dtoa_r+0x7c2>
 8006166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006168:	930a      	str	r3, [sp, #40]	@ 0x28
 800616a:	2001      	movs	r0, #1
 800616c:	e64d      	b.n	8005e0a <_dtoa_r+0x80a>
 800616e:	f1bb 0f00 	cmp.w	fp, #0
 8006172:	f77f aed9 	ble.w	8005f28 <_dtoa_r+0x928>
 8006176:	4656      	mov	r6, sl
 8006178:	4621      	mov	r1, r4
 800617a:	9803      	ldr	r0, [sp, #12]
 800617c:	f7ff f9b5 	bl	80054ea <quorem>
 8006180:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006184:	f806 3b01 	strb.w	r3, [r6], #1
 8006188:	eba6 020a 	sub.w	r2, r6, sl
 800618c:	4593      	cmp	fp, r2
 800618e:	ddb4      	ble.n	80060fa <_dtoa_r+0xafa>
 8006190:	2300      	movs	r3, #0
 8006192:	220a      	movs	r2, #10
 8006194:	4648      	mov	r0, r9
 8006196:	9903      	ldr	r1, [sp, #12]
 8006198:	f000 f966 	bl	8006468 <__multadd>
 800619c:	9003      	str	r0, [sp, #12]
 800619e:	e7eb      	b.n	8006178 <_dtoa_r+0xb78>
 80061a0:	0800731a 	.word	0x0800731a
 80061a4:	0800729e 	.word	0x0800729e

080061a8 <_free_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4605      	mov	r5, r0
 80061ac:	2900      	cmp	r1, #0
 80061ae:	d040      	beq.n	8006232 <_free_r+0x8a>
 80061b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b4:	1f0c      	subs	r4, r1, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bfb8      	it	lt
 80061ba:	18e4      	addlt	r4, r4, r3
 80061bc:	f000 f8e6 	bl	800638c <__malloc_lock>
 80061c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006234 <_free_r+0x8c>)
 80061c2:	6813      	ldr	r3, [r2, #0]
 80061c4:	b933      	cbnz	r3, 80061d4 <_free_r+0x2c>
 80061c6:	6063      	str	r3, [r4, #4]
 80061c8:	6014      	str	r4, [r2, #0]
 80061ca:	4628      	mov	r0, r5
 80061cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061d0:	f000 b8e2 	b.w	8006398 <__malloc_unlock>
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	d908      	bls.n	80061ea <_free_r+0x42>
 80061d8:	6820      	ldr	r0, [r4, #0]
 80061da:	1821      	adds	r1, r4, r0
 80061dc:	428b      	cmp	r3, r1
 80061de:	bf01      	itttt	eq
 80061e0:	6819      	ldreq	r1, [r3, #0]
 80061e2:	685b      	ldreq	r3, [r3, #4]
 80061e4:	1809      	addeq	r1, r1, r0
 80061e6:	6021      	streq	r1, [r4, #0]
 80061e8:	e7ed      	b.n	80061c6 <_free_r+0x1e>
 80061ea:	461a      	mov	r2, r3
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	b10b      	cbz	r3, 80061f4 <_free_r+0x4c>
 80061f0:	42a3      	cmp	r3, r4
 80061f2:	d9fa      	bls.n	80061ea <_free_r+0x42>
 80061f4:	6811      	ldr	r1, [r2, #0]
 80061f6:	1850      	adds	r0, r2, r1
 80061f8:	42a0      	cmp	r0, r4
 80061fa:	d10b      	bne.n	8006214 <_free_r+0x6c>
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	4401      	add	r1, r0
 8006200:	1850      	adds	r0, r2, r1
 8006202:	4283      	cmp	r3, r0
 8006204:	6011      	str	r1, [r2, #0]
 8006206:	d1e0      	bne.n	80061ca <_free_r+0x22>
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4408      	add	r0, r1
 800620e:	6010      	str	r0, [r2, #0]
 8006210:	6053      	str	r3, [r2, #4]
 8006212:	e7da      	b.n	80061ca <_free_r+0x22>
 8006214:	d902      	bls.n	800621c <_free_r+0x74>
 8006216:	230c      	movs	r3, #12
 8006218:	602b      	str	r3, [r5, #0]
 800621a:	e7d6      	b.n	80061ca <_free_r+0x22>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	1821      	adds	r1, r4, r0
 8006220:	428b      	cmp	r3, r1
 8006222:	bf01      	itttt	eq
 8006224:	6819      	ldreq	r1, [r3, #0]
 8006226:	685b      	ldreq	r3, [r3, #4]
 8006228:	1809      	addeq	r1, r1, r0
 800622a:	6021      	streq	r1, [r4, #0]
 800622c:	6063      	str	r3, [r4, #4]
 800622e:	6054      	str	r4, [r2, #4]
 8006230:	e7cb      	b.n	80061ca <_free_r+0x22>
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	200004fc 	.word	0x200004fc

08006238 <malloc>:
 8006238:	4b02      	ldr	r3, [pc, #8]	@ (8006244 <malloc+0xc>)
 800623a:	4601      	mov	r1, r0
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	f000 b825 	b.w	800628c <_malloc_r>
 8006242:	bf00      	nop
 8006244:	20000030 	.word	0x20000030

08006248 <sbrk_aligned>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	4e0f      	ldr	r6, [pc, #60]	@ (8006288 <sbrk_aligned+0x40>)
 800624c:	460c      	mov	r4, r1
 800624e:	6831      	ldr	r1, [r6, #0]
 8006250:	4605      	mov	r5, r0
 8006252:	b911      	cbnz	r1, 800625a <sbrk_aligned+0x12>
 8006254:	f000 fcc8 	bl	8006be8 <_sbrk_r>
 8006258:	6030      	str	r0, [r6, #0]
 800625a:	4621      	mov	r1, r4
 800625c:	4628      	mov	r0, r5
 800625e:	f000 fcc3 	bl	8006be8 <_sbrk_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d103      	bne.n	800626e <sbrk_aligned+0x26>
 8006266:	f04f 34ff 	mov.w	r4, #4294967295
 800626a:	4620      	mov	r0, r4
 800626c:	bd70      	pop	{r4, r5, r6, pc}
 800626e:	1cc4      	adds	r4, r0, #3
 8006270:	f024 0403 	bic.w	r4, r4, #3
 8006274:	42a0      	cmp	r0, r4
 8006276:	d0f8      	beq.n	800626a <sbrk_aligned+0x22>
 8006278:	1a21      	subs	r1, r4, r0
 800627a:	4628      	mov	r0, r5
 800627c:	f000 fcb4 	bl	8006be8 <_sbrk_r>
 8006280:	3001      	adds	r0, #1
 8006282:	d1f2      	bne.n	800626a <sbrk_aligned+0x22>
 8006284:	e7ef      	b.n	8006266 <sbrk_aligned+0x1e>
 8006286:	bf00      	nop
 8006288:	200004f8 	.word	0x200004f8

0800628c <_malloc_r>:
 800628c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006290:	1ccd      	adds	r5, r1, #3
 8006292:	f025 0503 	bic.w	r5, r5, #3
 8006296:	3508      	adds	r5, #8
 8006298:	2d0c      	cmp	r5, #12
 800629a:	bf38      	it	cc
 800629c:	250c      	movcc	r5, #12
 800629e:	2d00      	cmp	r5, #0
 80062a0:	4606      	mov	r6, r0
 80062a2:	db01      	blt.n	80062a8 <_malloc_r+0x1c>
 80062a4:	42a9      	cmp	r1, r5
 80062a6:	d904      	bls.n	80062b2 <_malloc_r+0x26>
 80062a8:	230c      	movs	r3, #12
 80062aa:	6033      	str	r3, [r6, #0]
 80062ac:	2000      	movs	r0, #0
 80062ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006388 <_malloc_r+0xfc>
 80062b6:	f000 f869 	bl	800638c <__malloc_lock>
 80062ba:	f8d8 3000 	ldr.w	r3, [r8]
 80062be:	461c      	mov	r4, r3
 80062c0:	bb44      	cbnz	r4, 8006314 <_malloc_r+0x88>
 80062c2:	4629      	mov	r1, r5
 80062c4:	4630      	mov	r0, r6
 80062c6:	f7ff ffbf 	bl	8006248 <sbrk_aligned>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	4604      	mov	r4, r0
 80062ce:	d158      	bne.n	8006382 <_malloc_r+0xf6>
 80062d0:	f8d8 4000 	ldr.w	r4, [r8]
 80062d4:	4627      	mov	r7, r4
 80062d6:	2f00      	cmp	r7, #0
 80062d8:	d143      	bne.n	8006362 <_malloc_r+0xd6>
 80062da:	2c00      	cmp	r4, #0
 80062dc:	d04b      	beq.n	8006376 <_malloc_r+0xea>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	4639      	mov	r1, r7
 80062e2:	4630      	mov	r0, r6
 80062e4:	eb04 0903 	add.w	r9, r4, r3
 80062e8:	f000 fc7e 	bl	8006be8 <_sbrk_r>
 80062ec:	4581      	cmp	r9, r0
 80062ee:	d142      	bne.n	8006376 <_malloc_r+0xea>
 80062f0:	6821      	ldr	r1, [r4, #0]
 80062f2:	4630      	mov	r0, r6
 80062f4:	1a6d      	subs	r5, r5, r1
 80062f6:	4629      	mov	r1, r5
 80062f8:	f7ff ffa6 	bl	8006248 <sbrk_aligned>
 80062fc:	3001      	adds	r0, #1
 80062fe:	d03a      	beq.n	8006376 <_malloc_r+0xea>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	442b      	add	r3, r5
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	f8d8 3000 	ldr.w	r3, [r8]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	bb62      	cbnz	r2, 8006368 <_malloc_r+0xdc>
 800630e:	f8c8 7000 	str.w	r7, [r8]
 8006312:	e00f      	b.n	8006334 <_malloc_r+0xa8>
 8006314:	6822      	ldr	r2, [r4, #0]
 8006316:	1b52      	subs	r2, r2, r5
 8006318:	d420      	bmi.n	800635c <_malloc_r+0xd0>
 800631a:	2a0b      	cmp	r2, #11
 800631c:	d917      	bls.n	800634e <_malloc_r+0xc2>
 800631e:	1961      	adds	r1, r4, r5
 8006320:	42a3      	cmp	r3, r4
 8006322:	6025      	str	r5, [r4, #0]
 8006324:	bf18      	it	ne
 8006326:	6059      	strne	r1, [r3, #4]
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	bf08      	it	eq
 800632c:	f8c8 1000 	streq.w	r1, [r8]
 8006330:	5162      	str	r2, [r4, r5]
 8006332:	604b      	str	r3, [r1, #4]
 8006334:	4630      	mov	r0, r6
 8006336:	f000 f82f 	bl	8006398 <__malloc_unlock>
 800633a:	f104 000b 	add.w	r0, r4, #11
 800633e:	1d23      	adds	r3, r4, #4
 8006340:	f020 0007 	bic.w	r0, r0, #7
 8006344:	1ac2      	subs	r2, r0, r3
 8006346:	bf1c      	itt	ne
 8006348:	1a1b      	subne	r3, r3, r0
 800634a:	50a3      	strne	r3, [r4, r2]
 800634c:	e7af      	b.n	80062ae <_malloc_r+0x22>
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	42a3      	cmp	r3, r4
 8006352:	bf0c      	ite	eq
 8006354:	f8c8 2000 	streq.w	r2, [r8]
 8006358:	605a      	strne	r2, [r3, #4]
 800635a:	e7eb      	b.n	8006334 <_malloc_r+0xa8>
 800635c:	4623      	mov	r3, r4
 800635e:	6864      	ldr	r4, [r4, #4]
 8006360:	e7ae      	b.n	80062c0 <_malloc_r+0x34>
 8006362:	463c      	mov	r4, r7
 8006364:	687f      	ldr	r7, [r7, #4]
 8006366:	e7b6      	b.n	80062d6 <_malloc_r+0x4a>
 8006368:	461a      	mov	r2, r3
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	42a3      	cmp	r3, r4
 800636e:	d1fb      	bne.n	8006368 <_malloc_r+0xdc>
 8006370:	2300      	movs	r3, #0
 8006372:	6053      	str	r3, [r2, #4]
 8006374:	e7de      	b.n	8006334 <_malloc_r+0xa8>
 8006376:	230c      	movs	r3, #12
 8006378:	4630      	mov	r0, r6
 800637a:	6033      	str	r3, [r6, #0]
 800637c:	f000 f80c 	bl	8006398 <__malloc_unlock>
 8006380:	e794      	b.n	80062ac <_malloc_r+0x20>
 8006382:	6005      	str	r5, [r0, #0]
 8006384:	e7d6      	b.n	8006334 <_malloc_r+0xa8>
 8006386:	bf00      	nop
 8006388:	200004fc 	.word	0x200004fc

0800638c <__malloc_lock>:
 800638c:	4801      	ldr	r0, [pc, #4]	@ (8006394 <__malloc_lock+0x8>)
 800638e:	f7ff b89c 	b.w	80054ca <__retarget_lock_acquire_recursive>
 8006392:	bf00      	nop
 8006394:	200004f4 	.word	0x200004f4

08006398 <__malloc_unlock>:
 8006398:	4801      	ldr	r0, [pc, #4]	@ (80063a0 <__malloc_unlock+0x8>)
 800639a:	f7ff b897 	b.w	80054cc <__retarget_lock_release_recursive>
 800639e:	bf00      	nop
 80063a0:	200004f4 	.word	0x200004f4

080063a4 <_Balloc>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	69c6      	ldr	r6, [r0, #28]
 80063a8:	4604      	mov	r4, r0
 80063aa:	460d      	mov	r5, r1
 80063ac:	b976      	cbnz	r6, 80063cc <_Balloc+0x28>
 80063ae:	2010      	movs	r0, #16
 80063b0:	f7ff ff42 	bl	8006238 <malloc>
 80063b4:	4602      	mov	r2, r0
 80063b6:	61e0      	str	r0, [r4, #28]
 80063b8:	b920      	cbnz	r0, 80063c4 <_Balloc+0x20>
 80063ba:	216b      	movs	r1, #107	@ 0x6b
 80063bc:	4b17      	ldr	r3, [pc, #92]	@ (800641c <_Balloc+0x78>)
 80063be:	4818      	ldr	r0, [pc, #96]	@ (8006420 <_Balloc+0x7c>)
 80063c0:	f000 fc30 	bl	8006c24 <__assert_func>
 80063c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063c8:	6006      	str	r6, [r0, #0]
 80063ca:	60c6      	str	r6, [r0, #12]
 80063cc:	69e6      	ldr	r6, [r4, #28]
 80063ce:	68f3      	ldr	r3, [r6, #12]
 80063d0:	b183      	cbz	r3, 80063f4 <_Balloc+0x50>
 80063d2:	69e3      	ldr	r3, [r4, #28]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063da:	b9b8      	cbnz	r0, 800640c <_Balloc+0x68>
 80063dc:	2101      	movs	r1, #1
 80063de:	fa01 f605 	lsl.w	r6, r1, r5
 80063e2:	1d72      	adds	r2, r6, #5
 80063e4:	4620      	mov	r0, r4
 80063e6:	0092      	lsls	r2, r2, #2
 80063e8:	f000 fc3a 	bl	8006c60 <_calloc_r>
 80063ec:	b160      	cbz	r0, 8006408 <_Balloc+0x64>
 80063ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063f2:	e00e      	b.n	8006412 <_Balloc+0x6e>
 80063f4:	2221      	movs	r2, #33	@ 0x21
 80063f6:	2104      	movs	r1, #4
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 fc31 	bl	8006c60 <_calloc_r>
 80063fe:	69e3      	ldr	r3, [r4, #28]
 8006400:	60f0      	str	r0, [r6, #12]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e4      	bne.n	80063d2 <_Balloc+0x2e>
 8006408:	2000      	movs	r0, #0
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	6802      	ldr	r2, [r0, #0]
 800640e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006412:	2300      	movs	r3, #0
 8006414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006418:	e7f7      	b.n	800640a <_Balloc+0x66>
 800641a:	bf00      	nop
 800641c:	080072ab 	.word	0x080072ab
 8006420:	0800732b 	.word	0x0800732b

08006424 <_Bfree>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	69c6      	ldr	r6, [r0, #28]
 8006428:	4605      	mov	r5, r0
 800642a:	460c      	mov	r4, r1
 800642c:	b976      	cbnz	r6, 800644c <_Bfree+0x28>
 800642e:	2010      	movs	r0, #16
 8006430:	f7ff ff02 	bl	8006238 <malloc>
 8006434:	4602      	mov	r2, r0
 8006436:	61e8      	str	r0, [r5, #28]
 8006438:	b920      	cbnz	r0, 8006444 <_Bfree+0x20>
 800643a:	218f      	movs	r1, #143	@ 0x8f
 800643c:	4b08      	ldr	r3, [pc, #32]	@ (8006460 <_Bfree+0x3c>)
 800643e:	4809      	ldr	r0, [pc, #36]	@ (8006464 <_Bfree+0x40>)
 8006440:	f000 fbf0 	bl	8006c24 <__assert_func>
 8006444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006448:	6006      	str	r6, [r0, #0]
 800644a:	60c6      	str	r6, [r0, #12]
 800644c:	b13c      	cbz	r4, 800645e <_Bfree+0x3a>
 800644e:	69eb      	ldr	r3, [r5, #28]
 8006450:	6862      	ldr	r2, [r4, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006458:	6021      	str	r1, [r4, #0]
 800645a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	080072ab 	.word	0x080072ab
 8006464:	0800732b 	.word	0x0800732b

08006468 <__multadd>:
 8006468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	4607      	mov	r7, r0
 800646e:	460c      	mov	r4, r1
 8006470:	461e      	mov	r6, r3
 8006472:	2000      	movs	r0, #0
 8006474:	690d      	ldr	r5, [r1, #16]
 8006476:	f101 0c14 	add.w	ip, r1, #20
 800647a:	f8dc 3000 	ldr.w	r3, [ip]
 800647e:	3001      	adds	r0, #1
 8006480:	b299      	uxth	r1, r3
 8006482:	fb02 6101 	mla	r1, r2, r1, r6
 8006486:	0c1e      	lsrs	r6, r3, #16
 8006488:	0c0b      	lsrs	r3, r1, #16
 800648a:	fb02 3306 	mla	r3, r2, r6, r3
 800648e:	b289      	uxth	r1, r1
 8006490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006494:	4285      	cmp	r5, r0
 8006496:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800649a:	f84c 1b04 	str.w	r1, [ip], #4
 800649e:	dcec      	bgt.n	800647a <__multadd+0x12>
 80064a0:	b30e      	cbz	r6, 80064e6 <__multadd+0x7e>
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	42ab      	cmp	r3, r5
 80064a6:	dc19      	bgt.n	80064dc <__multadd+0x74>
 80064a8:	6861      	ldr	r1, [r4, #4]
 80064aa:	4638      	mov	r0, r7
 80064ac:	3101      	adds	r1, #1
 80064ae:	f7ff ff79 	bl	80063a4 <_Balloc>
 80064b2:	4680      	mov	r8, r0
 80064b4:	b928      	cbnz	r0, 80064c2 <__multadd+0x5a>
 80064b6:	4602      	mov	r2, r0
 80064b8:	21ba      	movs	r1, #186	@ 0xba
 80064ba:	4b0c      	ldr	r3, [pc, #48]	@ (80064ec <__multadd+0x84>)
 80064bc:	480c      	ldr	r0, [pc, #48]	@ (80064f0 <__multadd+0x88>)
 80064be:	f000 fbb1 	bl	8006c24 <__assert_func>
 80064c2:	6922      	ldr	r2, [r4, #16]
 80064c4:	f104 010c 	add.w	r1, r4, #12
 80064c8:	3202      	adds	r2, #2
 80064ca:	0092      	lsls	r2, r2, #2
 80064cc:	300c      	adds	r0, #12
 80064ce:	f000 fb9b 	bl	8006c08 <memcpy>
 80064d2:	4621      	mov	r1, r4
 80064d4:	4638      	mov	r0, r7
 80064d6:	f7ff ffa5 	bl	8006424 <_Bfree>
 80064da:	4644      	mov	r4, r8
 80064dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064e0:	3501      	adds	r5, #1
 80064e2:	615e      	str	r6, [r3, #20]
 80064e4:	6125      	str	r5, [r4, #16]
 80064e6:	4620      	mov	r0, r4
 80064e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064ec:	0800731a 	.word	0x0800731a
 80064f0:	0800732b 	.word	0x0800732b

080064f4 <__hi0bits>:
 80064f4:	4603      	mov	r3, r0
 80064f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80064fa:	bf3a      	itte	cc
 80064fc:	0403      	lslcc	r3, r0, #16
 80064fe:	2010      	movcc	r0, #16
 8006500:	2000      	movcs	r0, #0
 8006502:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006506:	bf3c      	itt	cc
 8006508:	021b      	lslcc	r3, r3, #8
 800650a:	3008      	addcc	r0, #8
 800650c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006510:	bf3c      	itt	cc
 8006512:	011b      	lslcc	r3, r3, #4
 8006514:	3004      	addcc	r0, #4
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651a:	bf3c      	itt	cc
 800651c:	009b      	lslcc	r3, r3, #2
 800651e:	3002      	addcc	r0, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	db05      	blt.n	8006530 <__hi0bits+0x3c>
 8006524:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006528:	f100 0001 	add.w	r0, r0, #1
 800652c:	bf08      	it	eq
 800652e:	2020      	moveq	r0, #32
 8006530:	4770      	bx	lr

08006532 <__lo0bits>:
 8006532:	6803      	ldr	r3, [r0, #0]
 8006534:	4602      	mov	r2, r0
 8006536:	f013 0007 	ands.w	r0, r3, #7
 800653a:	d00b      	beq.n	8006554 <__lo0bits+0x22>
 800653c:	07d9      	lsls	r1, r3, #31
 800653e:	d421      	bmi.n	8006584 <__lo0bits+0x52>
 8006540:	0798      	lsls	r0, r3, #30
 8006542:	bf49      	itett	mi
 8006544:	085b      	lsrmi	r3, r3, #1
 8006546:	089b      	lsrpl	r3, r3, #2
 8006548:	2001      	movmi	r0, #1
 800654a:	6013      	strmi	r3, [r2, #0]
 800654c:	bf5c      	itt	pl
 800654e:	2002      	movpl	r0, #2
 8006550:	6013      	strpl	r3, [r2, #0]
 8006552:	4770      	bx	lr
 8006554:	b299      	uxth	r1, r3
 8006556:	b909      	cbnz	r1, 800655c <__lo0bits+0x2a>
 8006558:	2010      	movs	r0, #16
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	b2d9      	uxtb	r1, r3
 800655e:	b909      	cbnz	r1, 8006564 <__lo0bits+0x32>
 8006560:	3008      	adds	r0, #8
 8006562:	0a1b      	lsrs	r3, r3, #8
 8006564:	0719      	lsls	r1, r3, #28
 8006566:	bf04      	itt	eq
 8006568:	091b      	lsreq	r3, r3, #4
 800656a:	3004      	addeq	r0, #4
 800656c:	0799      	lsls	r1, r3, #30
 800656e:	bf04      	itt	eq
 8006570:	089b      	lsreq	r3, r3, #2
 8006572:	3002      	addeq	r0, #2
 8006574:	07d9      	lsls	r1, r3, #31
 8006576:	d403      	bmi.n	8006580 <__lo0bits+0x4e>
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	f100 0001 	add.w	r0, r0, #1
 800657e:	d003      	beq.n	8006588 <__lo0bits+0x56>
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	4770      	bx	lr
 8006584:	2000      	movs	r0, #0
 8006586:	4770      	bx	lr
 8006588:	2020      	movs	r0, #32
 800658a:	4770      	bx	lr

0800658c <__i2b>:
 800658c:	b510      	push	{r4, lr}
 800658e:	460c      	mov	r4, r1
 8006590:	2101      	movs	r1, #1
 8006592:	f7ff ff07 	bl	80063a4 <_Balloc>
 8006596:	4602      	mov	r2, r0
 8006598:	b928      	cbnz	r0, 80065a6 <__i2b+0x1a>
 800659a:	f240 1145 	movw	r1, #325	@ 0x145
 800659e:	4b04      	ldr	r3, [pc, #16]	@ (80065b0 <__i2b+0x24>)
 80065a0:	4804      	ldr	r0, [pc, #16]	@ (80065b4 <__i2b+0x28>)
 80065a2:	f000 fb3f 	bl	8006c24 <__assert_func>
 80065a6:	2301      	movs	r3, #1
 80065a8:	6144      	str	r4, [r0, #20]
 80065aa:	6103      	str	r3, [r0, #16]
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	bf00      	nop
 80065b0:	0800731a 	.word	0x0800731a
 80065b4:	0800732b 	.word	0x0800732b

080065b8 <__multiply>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	4617      	mov	r7, r2
 80065be:	690a      	ldr	r2, [r1, #16]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4689      	mov	r9, r1
 80065c4:	429a      	cmp	r2, r3
 80065c6:	bfa2      	ittt	ge
 80065c8:	463b      	movge	r3, r7
 80065ca:	460f      	movge	r7, r1
 80065cc:	4699      	movge	r9, r3
 80065ce:	693d      	ldr	r5, [r7, #16]
 80065d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	eb05 060a 	add.w	r6, r5, sl
 80065dc:	42b3      	cmp	r3, r6
 80065de:	b085      	sub	sp, #20
 80065e0:	bfb8      	it	lt
 80065e2:	3101      	addlt	r1, #1
 80065e4:	f7ff fede 	bl	80063a4 <_Balloc>
 80065e8:	b930      	cbnz	r0, 80065f8 <__multiply+0x40>
 80065ea:	4602      	mov	r2, r0
 80065ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80065f0:	4b40      	ldr	r3, [pc, #256]	@ (80066f4 <__multiply+0x13c>)
 80065f2:	4841      	ldr	r0, [pc, #260]	@ (80066f8 <__multiply+0x140>)
 80065f4:	f000 fb16 	bl	8006c24 <__assert_func>
 80065f8:	f100 0414 	add.w	r4, r0, #20
 80065fc:	4623      	mov	r3, r4
 80065fe:	2200      	movs	r2, #0
 8006600:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006604:	4573      	cmp	r3, lr
 8006606:	d320      	bcc.n	800664a <__multiply+0x92>
 8006608:	f107 0814 	add.w	r8, r7, #20
 800660c:	f109 0114 	add.w	r1, r9, #20
 8006610:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006614:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006618:	9302      	str	r3, [sp, #8]
 800661a:	1beb      	subs	r3, r5, r7
 800661c:	3b15      	subs	r3, #21
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	3304      	adds	r3, #4
 8006624:	3715      	adds	r7, #21
 8006626:	42bd      	cmp	r5, r7
 8006628:	bf38      	it	cc
 800662a:	2304      	movcc	r3, #4
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	9b02      	ldr	r3, [sp, #8]
 8006630:	9103      	str	r1, [sp, #12]
 8006632:	428b      	cmp	r3, r1
 8006634:	d80c      	bhi.n	8006650 <__multiply+0x98>
 8006636:	2e00      	cmp	r6, #0
 8006638:	dd03      	ble.n	8006642 <__multiply+0x8a>
 800663a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800663e:	2b00      	cmp	r3, #0
 8006640:	d055      	beq.n	80066ee <__multiply+0x136>
 8006642:	6106      	str	r6, [r0, #16]
 8006644:	b005      	add	sp, #20
 8006646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664a:	f843 2b04 	str.w	r2, [r3], #4
 800664e:	e7d9      	b.n	8006604 <__multiply+0x4c>
 8006650:	f8b1 a000 	ldrh.w	sl, [r1]
 8006654:	f1ba 0f00 	cmp.w	sl, #0
 8006658:	d01f      	beq.n	800669a <__multiply+0xe2>
 800665a:	46c4      	mov	ip, r8
 800665c:	46a1      	mov	r9, r4
 800665e:	2700      	movs	r7, #0
 8006660:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006664:	f8d9 3000 	ldr.w	r3, [r9]
 8006668:	fa1f fb82 	uxth.w	fp, r2
 800666c:	b29b      	uxth	r3, r3
 800666e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006672:	443b      	add	r3, r7
 8006674:	f8d9 7000 	ldr.w	r7, [r9]
 8006678:	0c12      	lsrs	r2, r2, #16
 800667a:	0c3f      	lsrs	r7, r7, #16
 800667c:	fb0a 7202 	mla	r2, sl, r2, r7
 8006680:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006684:	b29b      	uxth	r3, r3
 8006686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800668a:	4565      	cmp	r5, ip
 800668c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006690:	f849 3b04 	str.w	r3, [r9], #4
 8006694:	d8e4      	bhi.n	8006660 <__multiply+0xa8>
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	50e7      	str	r7, [r4, r3]
 800669a:	9b03      	ldr	r3, [sp, #12]
 800669c:	3104      	adds	r1, #4
 800669e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80066a2:	f1b9 0f00 	cmp.w	r9, #0
 80066a6:	d020      	beq.n	80066ea <__multiply+0x132>
 80066a8:	4647      	mov	r7, r8
 80066aa:	46a4      	mov	ip, r4
 80066ac:	f04f 0a00 	mov.w	sl, #0
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	f8b7 b000 	ldrh.w	fp, [r7]
 80066b6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	fb09 220b 	mla	r2, r9, fp, r2
 80066c0:	4452      	add	r2, sl
 80066c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066c6:	f84c 3b04 	str.w	r3, [ip], #4
 80066ca:	f857 3b04 	ldr.w	r3, [r7], #4
 80066ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066d2:	f8bc 3000 	ldrh.w	r3, [ip]
 80066d6:	42bd      	cmp	r5, r7
 80066d8:	fb09 330a 	mla	r3, r9, sl, r3
 80066dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80066e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066e4:	d8e5      	bhi.n	80066b2 <__multiply+0xfa>
 80066e6:	9a01      	ldr	r2, [sp, #4]
 80066e8:	50a3      	str	r3, [r4, r2]
 80066ea:	3404      	adds	r4, #4
 80066ec:	e79f      	b.n	800662e <__multiply+0x76>
 80066ee:	3e01      	subs	r6, #1
 80066f0:	e7a1      	b.n	8006636 <__multiply+0x7e>
 80066f2:	bf00      	nop
 80066f4:	0800731a 	.word	0x0800731a
 80066f8:	0800732b 	.word	0x0800732b

080066fc <__pow5mult>:
 80066fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006700:	4615      	mov	r5, r2
 8006702:	f012 0203 	ands.w	r2, r2, #3
 8006706:	4607      	mov	r7, r0
 8006708:	460e      	mov	r6, r1
 800670a:	d007      	beq.n	800671c <__pow5mult+0x20>
 800670c:	4c25      	ldr	r4, [pc, #148]	@ (80067a4 <__pow5mult+0xa8>)
 800670e:	3a01      	subs	r2, #1
 8006710:	2300      	movs	r3, #0
 8006712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006716:	f7ff fea7 	bl	8006468 <__multadd>
 800671a:	4606      	mov	r6, r0
 800671c:	10ad      	asrs	r5, r5, #2
 800671e:	d03d      	beq.n	800679c <__pow5mult+0xa0>
 8006720:	69fc      	ldr	r4, [r7, #28]
 8006722:	b97c      	cbnz	r4, 8006744 <__pow5mult+0x48>
 8006724:	2010      	movs	r0, #16
 8006726:	f7ff fd87 	bl	8006238 <malloc>
 800672a:	4602      	mov	r2, r0
 800672c:	61f8      	str	r0, [r7, #28]
 800672e:	b928      	cbnz	r0, 800673c <__pow5mult+0x40>
 8006730:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006734:	4b1c      	ldr	r3, [pc, #112]	@ (80067a8 <__pow5mult+0xac>)
 8006736:	481d      	ldr	r0, [pc, #116]	@ (80067ac <__pow5mult+0xb0>)
 8006738:	f000 fa74 	bl	8006c24 <__assert_func>
 800673c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006740:	6004      	str	r4, [r0, #0]
 8006742:	60c4      	str	r4, [r0, #12]
 8006744:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800674c:	b94c      	cbnz	r4, 8006762 <__pow5mult+0x66>
 800674e:	f240 2171 	movw	r1, #625	@ 0x271
 8006752:	4638      	mov	r0, r7
 8006754:	f7ff ff1a 	bl	800658c <__i2b>
 8006758:	2300      	movs	r3, #0
 800675a:	4604      	mov	r4, r0
 800675c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006760:	6003      	str	r3, [r0, #0]
 8006762:	f04f 0900 	mov.w	r9, #0
 8006766:	07eb      	lsls	r3, r5, #31
 8006768:	d50a      	bpl.n	8006780 <__pow5mult+0x84>
 800676a:	4631      	mov	r1, r6
 800676c:	4622      	mov	r2, r4
 800676e:	4638      	mov	r0, r7
 8006770:	f7ff ff22 	bl	80065b8 <__multiply>
 8006774:	4680      	mov	r8, r0
 8006776:	4631      	mov	r1, r6
 8006778:	4638      	mov	r0, r7
 800677a:	f7ff fe53 	bl	8006424 <_Bfree>
 800677e:	4646      	mov	r6, r8
 8006780:	106d      	asrs	r5, r5, #1
 8006782:	d00b      	beq.n	800679c <__pow5mult+0xa0>
 8006784:	6820      	ldr	r0, [r4, #0]
 8006786:	b938      	cbnz	r0, 8006798 <__pow5mult+0x9c>
 8006788:	4622      	mov	r2, r4
 800678a:	4621      	mov	r1, r4
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff ff13 	bl	80065b8 <__multiply>
 8006792:	6020      	str	r0, [r4, #0]
 8006794:	f8c0 9000 	str.w	r9, [r0]
 8006798:	4604      	mov	r4, r0
 800679a:	e7e4      	b.n	8006766 <__pow5mult+0x6a>
 800679c:	4630      	mov	r0, r6
 800679e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a2:	bf00      	nop
 80067a4:	080073dc 	.word	0x080073dc
 80067a8:	080072ab 	.word	0x080072ab
 80067ac:	0800732b 	.word	0x0800732b

080067b0 <__lshift>:
 80067b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b4:	460c      	mov	r4, r1
 80067b6:	4607      	mov	r7, r0
 80067b8:	4691      	mov	r9, r2
 80067ba:	6923      	ldr	r3, [r4, #16]
 80067bc:	6849      	ldr	r1, [r1, #4]
 80067be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067c2:	68a3      	ldr	r3, [r4, #8]
 80067c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067c8:	f108 0601 	add.w	r6, r8, #1
 80067cc:	42b3      	cmp	r3, r6
 80067ce:	db0b      	blt.n	80067e8 <__lshift+0x38>
 80067d0:	4638      	mov	r0, r7
 80067d2:	f7ff fde7 	bl	80063a4 <_Balloc>
 80067d6:	4605      	mov	r5, r0
 80067d8:	b948      	cbnz	r0, 80067ee <__lshift+0x3e>
 80067da:	4602      	mov	r2, r0
 80067dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067e0:	4b27      	ldr	r3, [pc, #156]	@ (8006880 <__lshift+0xd0>)
 80067e2:	4828      	ldr	r0, [pc, #160]	@ (8006884 <__lshift+0xd4>)
 80067e4:	f000 fa1e 	bl	8006c24 <__assert_func>
 80067e8:	3101      	adds	r1, #1
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	e7ee      	b.n	80067cc <__lshift+0x1c>
 80067ee:	2300      	movs	r3, #0
 80067f0:	f100 0114 	add.w	r1, r0, #20
 80067f4:	f100 0210 	add.w	r2, r0, #16
 80067f8:	4618      	mov	r0, r3
 80067fa:	4553      	cmp	r3, sl
 80067fc:	db33      	blt.n	8006866 <__lshift+0xb6>
 80067fe:	6920      	ldr	r0, [r4, #16]
 8006800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006804:	f104 0314 	add.w	r3, r4, #20
 8006808:	f019 091f 	ands.w	r9, r9, #31
 800680c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006810:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006814:	d02b      	beq.n	800686e <__lshift+0xbe>
 8006816:	468a      	mov	sl, r1
 8006818:	2200      	movs	r2, #0
 800681a:	f1c9 0e20 	rsb	lr, r9, #32
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	fa00 f009 	lsl.w	r0, r0, r9
 8006824:	4310      	orrs	r0, r2
 8006826:	f84a 0b04 	str.w	r0, [sl], #4
 800682a:	f853 2b04 	ldr.w	r2, [r3], #4
 800682e:	459c      	cmp	ip, r3
 8006830:	fa22 f20e 	lsr.w	r2, r2, lr
 8006834:	d8f3      	bhi.n	800681e <__lshift+0x6e>
 8006836:	ebac 0304 	sub.w	r3, ip, r4
 800683a:	3b15      	subs	r3, #21
 800683c:	f023 0303 	bic.w	r3, r3, #3
 8006840:	3304      	adds	r3, #4
 8006842:	f104 0015 	add.w	r0, r4, #21
 8006846:	4560      	cmp	r0, ip
 8006848:	bf88      	it	hi
 800684a:	2304      	movhi	r3, #4
 800684c:	50ca      	str	r2, [r1, r3]
 800684e:	b10a      	cbz	r2, 8006854 <__lshift+0xa4>
 8006850:	f108 0602 	add.w	r6, r8, #2
 8006854:	3e01      	subs	r6, #1
 8006856:	4638      	mov	r0, r7
 8006858:	4621      	mov	r1, r4
 800685a:	612e      	str	r6, [r5, #16]
 800685c:	f7ff fde2 	bl	8006424 <_Bfree>
 8006860:	4628      	mov	r0, r5
 8006862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006866:	f842 0f04 	str.w	r0, [r2, #4]!
 800686a:	3301      	adds	r3, #1
 800686c:	e7c5      	b.n	80067fa <__lshift+0x4a>
 800686e:	3904      	subs	r1, #4
 8006870:	f853 2b04 	ldr.w	r2, [r3], #4
 8006874:	459c      	cmp	ip, r3
 8006876:	f841 2f04 	str.w	r2, [r1, #4]!
 800687a:	d8f9      	bhi.n	8006870 <__lshift+0xc0>
 800687c:	e7ea      	b.n	8006854 <__lshift+0xa4>
 800687e:	bf00      	nop
 8006880:	0800731a 	.word	0x0800731a
 8006884:	0800732b 	.word	0x0800732b

08006888 <__mcmp>:
 8006888:	4603      	mov	r3, r0
 800688a:	690a      	ldr	r2, [r1, #16]
 800688c:	6900      	ldr	r0, [r0, #16]
 800688e:	b530      	push	{r4, r5, lr}
 8006890:	1a80      	subs	r0, r0, r2
 8006892:	d10e      	bne.n	80068b2 <__mcmp+0x2a>
 8006894:	3314      	adds	r3, #20
 8006896:	3114      	adds	r1, #20
 8006898:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800689c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068a8:	4295      	cmp	r5, r2
 80068aa:	d003      	beq.n	80068b4 <__mcmp+0x2c>
 80068ac:	d205      	bcs.n	80068ba <__mcmp+0x32>
 80068ae:	f04f 30ff 	mov.w	r0, #4294967295
 80068b2:	bd30      	pop	{r4, r5, pc}
 80068b4:	42a3      	cmp	r3, r4
 80068b6:	d3f3      	bcc.n	80068a0 <__mcmp+0x18>
 80068b8:	e7fb      	b.n	80068b2 <__mcmp+0x2a>
 80068ba:	2001      	movs	r0, #1
 80068bc:	e7f9      	b.n	80068b2 <__mcmp+0x2a>
	...

080068c0 <__mdiff>:
 80068c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	4689      	mov	r9, r1
 80068c6:	4606      	mov	r6, r0
 80068c8:	4611      	mov	r1, r2
 80068ca:	4648      	mov	r0, r9
 80068cc:	4614      	mov	r4, r2
 80068ce:	f7ff ffdb 	bl	8006888 <__mcmp>
 80068d2:	1e05      	subs	r5, r0, #0
 80068d4:	d112      	bne.n	80068fc <__mdiff+0x3c>
 80068d6:	4629      	mov	r1, r5
 80068d8:	4630      	mov	r0, r6
 80068da:	f7ff fd63 	bl	80063a4 <_Balloc>
 80068de:	4602      	mov	r2, r0
 80068e0:	b928      	cbnz	r0, 80068ee <__mdiff+0x2e>
 80068e2:	f240 2137 	movw	r1, #567	@ 0x237
 80068e6:	4b3e      	ldr	r3, [pc, #248]	@ (80069e0 <__mdiff+0x120>)
 80068e8:	483e      	ldr	r0, [pc, #248]	@ (80069e4 <__mdiff+0x124>)
 80068ea:	f000 f99b 	bl	8006c24 <__assert_func>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068f4:	4610      	mov	r0, r2
 80068f6:	b003      	add	sp, #12
 80068f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fc:	bfbc      	itt	lt
 80068fe:	464b      	movlt	r3, r9
 8006900:	46a1      	movlt	r9, r4
 8006902:	4630      	mov	r0, r6
 8006904:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006908:	bfba      	itte	lt
 800690a:	461c      	movlt	r4, r3
 800690c:	2501      	movlt	r5, #1
 800690e:	2500      	movge	r5, #0
 8006910:	f7ff fd48 	bl	80063a4 <_Balloc>
 8006914:	4602      	mov	r2, r0
 8006916:	b918      	cbnz	r0, 8006920 <__mdiff+0x60>
 8006918:	f240 2145 	movw	r1, #581	@ 0x245
 800691c:	4b30      	ldr	r3, [pc, #192]	@ (80069e0 <__mdiff+0x120>)
 800691e:	e7e3      	b.n	80068e8 <__mdiff+0x28>
 8006920:	f100 0b14 	add.w	fp, r0, #20
 8006924:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006928:	f109 0310 	add.w	r3, r9, #16
 800692c:	60c5      	str	r5, [r0, #12]
 800692e:	f04f 0c00 	mov.w	ip, #0
 8006932:	f109 0514 	add.w	r5, r9, #20
 8006936:	46d9      	mov	r9, fp
 8006938:	6926      	ldr	r6, [r4, #16]
 800693a:	f104 0e14 	add.w	lr, r4, #20
 800693e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006942:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006946:	9301      	str	r3, [sp, #4]
 8006948:	9b01      	ldr	r3, [sp, #4]
 800694a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800694e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006952:	b281      	uxth	r1, r0
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	fa1f f38a 	uxth.w	r3, sl
 800695a:	1a5b      	subs	r3, r3, r1
 800695c:	0c00      	lsrs	r0, r0, #16
 800695e:	4463      	add	r3, ip
 8006960:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006964:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800696e:	4576      	cmp	r6, lr
 8006970:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006974:	f849 3b04 	str.w	r3, [r9], #4
 8006978:	d8e6      	bhi.n	8006948 <__mdiff+0x88>
 800697a:	1b33      	subs	r3, r6, r4
 800697c:	3b15      	subs	r3, #21
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	3415      	adds	r4, #21
 8006984:	3304      	adds	r3, #4
 8006986:	42a6      	cmp	r6, r4
 8006988:	bf38      	it	cc
 800698a:	2304      	movcc	r3, #4
 800698c:	441d      	add	r5, r3
 800698e:	445b      	add	r3, fp
 8006990:	461e      	mov	r6, r3
 8006992:	462c      	mov	r4, r5
 8006994:	4544      	cmp	r4, r8
 8006996:	d30e      	bcc.n	80069b6 <__mdiff+0xf6>
 8006998:	f108 0103 	add.w	r1, r8, #3
 800699c:	1b49      	subs	r1, r1, r5
 800699e:	f021 0103 	bic.w	r1, r1, #3
 80069a2:	3d03      	subs	r5, #3
 80069a4:	45a8      	cmp	r8, r5
 80069a6:	bf38      	it	cc
 80069a8:	2100      	movcc	r1, #0
 80069aa:	440b      	add	r3, r1
 80069ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069b0:	b199      	cbz	r1, 80069da <__mdiff+0x11a>
 80069b2:	6117      	str	r7, [r2, #16]
 80069b4:	e79e      	b.n	80068f4 <__mdiff+0x34>
 80069b6:	46e6      	mov	lr, ip
 80069b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80069bc:	fa1f fc81 	uxth.w	ip, r1
 80069c0:	44f4      	add	ip, lr
 80069c2:	0c08      	lsrs	r0, r1, #16
 80069c4:	4471      	add	r1, lr
 80069c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069ca:	b289      	uxth	r1, r1
 80069cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069d4:	f846 1b04 	str.w	r1, [r6], #4
 80069d8:	e7dc      	b.n	8006994 <__mdiff+0xd4>
 80069da:	3f01      	subs	r7, #1
 80069dc:	e7e6      	b.n	80069ac <__mdiff+0xec>
 80069de:	bf00      	nop
 80069e0:	0800731a 	.word	0x0800731a
 80069e4:	0800732b 	.word	0x0800732b

080069e8 <__d2b>:
 80069e8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80069ec:	2101      	movs	r1, #1
 80069ee:	4690      	mov	r8, r2
 80069f0:	4699      	mov	r9, r3
 80069f2:	9e08      	ldr	r6, [sp, #32]
 80069f4:	f7ff fcd6 	bl	80063a4 <_Balloc>
 80069f8:	4604      	mov	r4, r0
 80069fa:	b930      	cbnz	r0, 8006a0a <__d2b+0x22>
 80069fc:	4602      	mov	r2, r0
 80069fe:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a02:	4b23      	ldr	r3, [pc, #140]	@ (8006a90 <__d2b+0xa8>)
 8006a04:	4823      	ldr	r0, [pc, #140]	@ (8006a94 <__d2b+0xac>)
 8006a06:	f000 f90d 	bl	8006c24 <__assert_func>
 8006a0a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a12:	b10d      	cbz	r5, 8006a18 <__d2b+0x30>
 8006a14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	f1b8 0300 	subs.w	r3, r8, #0
 8006a1e:	d024      	beq.n	8006a6a <__d2b+0x82>
 8006a20:	4668      	mov	r0, sp
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	f7ff fd85 	bl	8006532 <__lo0bits>
 8006a28:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a2c:	b1d8      	cbz	r0, 8006a66 <__d2b+0x7e>
 8006a2e:	f1c0 0320 	rsb	r3, r0, #32
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	430b      	orrs	r3, r1
 8006a38:	40c2      	lsrs	r2, r0
 8006a3a:	6163      	str	r3, [r4, #20]
 8006a3c:	9201      	str	r2, [sp, #4]
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bf0c      	ite	eq
 8006a44:	2201      	moveq	r2, #1
 8006a46:	2202      	movne	r2, #2
 8006a48:	61a3      	str	r3, [r4, #24]
 8006a4a:	6122      	str	r2, [r4, #16]
 8006a4c:	b1ad      	cbz	r5, 8006a7a <__d2b+0x92>
 8006a4e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a52:	4405      	add	r5, r0
 8006a54:	6035      	str	r5, [r6, #0]
 8006a56:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a5c:	6018      	str	r0, [r3, #0]
 8006a5e:	4620      	mov	r0, r4
 8006a60:	b002      	add	sp, #8
 8006a62:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006a66:	6161      	str	r1, [r4, #20]
 8006a68:	e7e9      	b.n	8006a3e <__d2b+0x56>
 8006a6a:	a801      	add	r0, sp, #4
 8006a6c:	f7ff fd61 	bl	8006532 <__lo0bits>
 8006a70:	9b01      	ldr	r3, [sp, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	6163      	str	r3, [r4, #20]
 8006a76:	3020      	adds	r0, #32
 8006a78:	e7e7      	b.n	8006a4a <__d2b+0x62>
 8006a7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a82:	6030      	str	r0, [r6, #0]
 8006a84:	6918      	ldr	r0, [r3, #16]
 8006a86:	f7ff fd35 	bl	80064f4 <__hi0bits>
 8006a8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a8e:	e7e4      	b.n	8006a5a <__d2b+0x72>
 8006a90:	0800731a 	.word	0x0800731a
 8006a94:	0800732b 	.word	0x0800732b

08006a98 <__sflush_r>:
 8006a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	0716      	lsls	r6, r2, #28
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	d454      	bmi.n	8006b50 <__sflush_r+0xb8>
 8006aa6:	684b      	ldr	r3, [r1, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	dc02      	bgt.n	8006ab2 <__sflush_r+0x1a>
 8006aac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dd48      	ble.n	8006b44 <__sflush_r+0xac>
 8006ab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ab4:	2e00      	cmp	r6, #0
 8006ab6:	d045      	beq.n	8006b44 <__sflush_r+0xac>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006abe:	682f      	ldr	r7, [r5, #0]
 8006ac0:	6a21      	ldr	r1, [r4, #32]
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	d030      	beq.n	8006b28 <__sflush_r+0x90>
 8006ac6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	0759      	lsls	r1, r3, #29
 8006acc:	d505      	bpl.n	8006ada <__sflush_r+0x42>
 8006ace:	6863      	ldr	r3, [r4, #4]
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ad4:	b10b      	cbz	r3, 8006ada <__sflush_r+0x42>
 8006ad6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ad8:	1ad2      	subs	r2, r2, r3
 8006ada:	2300      	movs	r3, #0
 8006adc:	4628      	mov	r0, r5
 8006ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ae0:	6a21      	ldr	r1, [r4, #32]
 8006ae2:	47b0      	blx	r6
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	d106      	bne.n	8006af8 <__sflush_r+0x60>
 8006aea:	6829      	ldr	r1, [r5, #0]
 8006aec:	291d      	cmp	r1, #29
 8006aee:	d82b      	bhi.n	8006b48 <__sflush_r+0xb0>
 8006af0:	4a28      	ldr	r2, [pc, #160]	@ (8006b94 <__sflush_r+0xfc>)
 8006af2:	40ca      	lsrs	r2, r1
 8006af4:	07d6      	lsls	r6, r2, #31
 8006af6:	d527      	bpl.n	8006b48 <__sflush_r+0xb0>
 8006af8:	2200      	movs	r2, #0
 8006afa:	6062      	str	r2, [r4, #4]
 8006afc:	6922      	ldr	r2, [r4, #16]
 8006afe:	04d9      	lsls	r1, r3, #19
 8006b00:	6022      	str	r2, [r4, #0]
 8006b02:	d504      	bpl.n	8006b0e <__sflush_r+0x76>
 8006b04:	1c42      	adds	r2, r0, #1
 8006b06:	d101      	bne.n	8006b0c <__sflush_r+0x74>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	b903      	cbnz	r3, 8006b0e <__sflush_r+0x76>
 8006b0c:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b10:	602f      	str	r7, [r5, #0]
 8006b12:	b1b9      	cbz	r1, 8006b44 <__sflush_r+0xac>
 8006b14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b18:	4299      	cmp	r1, r3
 8006b1a:	d002      	beq.n	8006b22 <__sflush_r+0x8a>
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f7ff fb43 	bl	80061a8 <_free_r>
 8006b22:	2300      	movs	r3, #0
 8006b24:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b26:	e00d      	b.n	8006b44 <__sflush_r+0xac>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	47b0      	blx	r6
 8006b2e:	4602      	mov	r2, r0
 8006b30:	1c50      	adds	r0, r2, #1
 8006b32:	d1c9      	bne.n	8006ac8 <__sflush_r+0x30>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0c6      	beq.n	8006ac8 <__sflush_r+0x30>
 8006b3a:	2b1d      	cmp	r3, #29
 8006b3c:	d001      	beq.n	8006b42 <__sflush_r+0xaa>
 8006b3e:	2b16      	cmp	r3, #22
 8006b40:	d11d      	bne.n	8006b7e <__sflush_r+0xe6>
 8006b42:	602f      	str	r7, [r5, #0]
 8006b44:	2000      	movs	r0, #0
 8006b46:	e021      	b.n	8006b8c <__sflush_r+0xf4>
 8006b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4c:	b21b      	sxth	r3, r3
 8006b4e:	e01a      	b.n	8006b86 <__sflush_r+0xee>
 8006b50:	690f      	ldr	r7, [r1, #16]
 8006b52:	2f00      	cmp	r7, #0
 8006b54:	d0f6      	beq.n	8006b44 <__sflush_r+0xac>
 8006b56:	0793      	lsls	r3, r2, #30
 8006b58:	bf18      	it	ne
 8006b5a:	2300      	movne	r3, #0
 8006b5c:	680e      	ldr	r6, [r1, #0]
 8006b5e:	bf08      	it	eq
 8006b60:	694b      	ldreq	r3, [r1, #20]
 8006b62:	1bf6      	subs	r6, r6, r7
 8006b64:	600f      	str	r7, [r1, #0]
 8006b66:	608b      	str	r3, [r1, #8]
 8006b68:	2e00      	cmp	r6, #0
 8006b6a:	ddeb      	ble.n	8006b44 <__sflush_r+0xac>
 8006b6c:	4633      	mov	r3, r6
 8006b6e:	463a      	mov	r2, r7
 8006b70:	4628      	mov	r0, r5
 8006b72:	6a21      	ldr	r1, [r4, #32]
 8006b74:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006b78:	47e0      	blx	ip
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	dc07      	bgt.n	8006b8e <__sflush_r+0xf6>
 8006b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b86:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8a:	81a3      	strh	r3, [r4, #12]
 8006b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b8e:	4407      	add	r7, r0
 8006b90:	1a36      	subs	r6, r6, r0
 8006b92:	e7e9      	b.n	8006b68 <__sflush_r+0xd0>
 8006b94:	20400001 	.word	0x20400001

08006b98 <_fflush_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	690b      	ldr	r3, [r1, #16]
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	b913      	cbnz	r3, 8006ba8 <_fflush_r+0x10>
 8006ba2:	2500      	movs	r5, #0
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	b118      	cbz	r0, 8006bb2 <_fflush_r+0x1a>
 8006baa:	6a03      	ldr	r3, [r0, #32]
 8006bac:	b90b      	cbnz	r3, 8006bb2 <_fflush_r+0x1a>
 8006bae:	f7fe fb95 	bl	80052dc <__sinit>
 8006bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0f3      	beq.n	8006ba2 <_fflush_r+0xa>
 8006bba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006bbc:	07d0      	lsls	r0, r2, #31
 8006bbe:	d404      	bmi.n	8006bca <_fflush_r+0x32>
 8006bc0:	0599      	lsls	r1, r3, #22
 8006bc2:	d402      	bmi.n	8006bca <_fflush_r+0x32>
 8006bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bc6:	f7fe fc80 	bl	80054ca <__retarget_lock_acquire_recursive>
 8006bca:	4628      	mov	r0, r5
 8006bcc:	4621      	mov	r1, r4
 8006bce:	f7ff ff63 	bl	8006a98 <__sflush_r>
 8006bd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	07da      	lsls	r2, r3, #31
 8006bd8:	d4e4      	bmi.n	8006ba4 <_fflush_r+0xc>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	059b      	lsls	r3, r3, #22
 8006bde:	d4e1      	bmi.n	8006ba4 <_fflush_r+0xc>
 8006be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006be2:	f7fe fc73 	bl	80054cc <__retarget_lock_release_recursive>
 8006be6:	e7dd      	b.n	8006ba4 <_fflush_r+0xc>

08006be8 <_sbrk_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	2300      	movs	r3, #0
 8006bec:	4d05      	ldr	r5, [pc, #20]	@ (8006c04 <_sbrk_r+0x1c>)
 8006bee:	4604      	mov	r4, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	f7fa fede 	bl	80019b4 <_sbrk>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_sbrk_r+0x1a>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_sbrk_r+0x1a>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	200004f0 	.word	0x200004f0

08006c08 <memcpy>:
 8006c08:	440a      	add	r2, r1
 8006c0a:	4291      	cmp	r1, r2
 8006c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c10:	d100      	bne.n	8006c14 <memcpy+0xc>
 8006c12:	4770      	bx	lr
 8006c14:	b510      	push	{r4, lr}
 8006c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1a:	4291      	cmp	r1, r2
 8006c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c20:	d1f9      	bne.n	8006c16 <memcpy+0xe>
 8006c22:	bd10      	pop	{r4, pc}

08006c24 <__assert_func>:
 8006c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c26:	4614      	mov	r4, r2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4b09      	ldr	r3, [pc, #36]	@ (8006c50 <__assert_func+0x2c>)
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68d8      	ldr	r0, [r3, #12]
 8006c32:	b14c      	cbz	r4, 8006c48 <__assert_func+0x24>
 8006c34:	4b07      	ldr	r3, [pc, #28]	@ (8006c54 <__assert_func+0x30>)
 8006c36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c3a:	9100      	str	r1, [sp, #0]
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	4906      	ldr	r1, [pc, #24]	@ (8006c58 <__assert_func+0x34>)
 8006c40:	f000 f842 	bl	8006cc8 <fiprintf>
 8006c44:	f000 f852 	bl	8006cec <abort>
 8006c48:	4b04      	ldr	r3, [pc, #16]	@ (8006c5c <__assert_func+0x38>)
 8006c4a:	461c      	mov	r4, r3
 8006c4c:	e7f3      	b.n	8006c36 <__assert_func+0x12>
 8006c4e:	bf00      	nop
 8006c50:	20000030 	.word	0x20000030
 8006c54:	0800738e 	.word	0x0800738e
 8006c58:	0800739b 	.word	0x0800739b
 8006c5c:	080073c9 	.word	0x080073c9

08006c60 <_calloc_r>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	fba1 5402 	umull	r5, r4, r1, r2
 8006c66:	b934      	cbnz	r4, 8006c76 <_calloc_r+0x16>
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f7ff fb0f 	bl	800628c <_malloc_r>
 8006c6e:	4606      	mov	r6, r0
 8006c70:	b928      	cbnz	r0, 8006c7e <_calloc_r+0x1e>
 8006c72:	4630      	mov	r0, r6
 8006c74:	bd70      	pop	{r4, r5, r6, pc}
 8006c76:	220c      	movs	r2, #12
 8006c78:	2600      	movs	r6, #0
 8006c7a:	6002      	str	r2, [r0, #0]
 8006c7c:	e7f9      	b.n	8006c72 <_calloc_r+0x12>
 8006c7e:	462a      	mov	r2, r5
 8006c80:	4621      	mov	r1, r4
 8006c82:	f7fe fba4 	bl	80053ce <memset>
 8006c86:	e7f4      	b.n	8006c72 <_calloc_r+0x12>

08006c88 <__ascii_mbtowc>:
 8006c88:	b082      	sub	sp, #8
 8006c8a:	b901      	cbnz	r1, 8006c8e <__ascii_mbtowc+0x6>
 8006c8c:	a901      	add	r1, sp, #4
 8006c8e:	b142      	cbz	r2, 8006ca2 <__ascii_mbtowc+0x1a>
 8006c90:	b14b      	cbz	r3, 8006ca6 <__ascii_mbtowc+0x1e>
 8006c92:	7813      	ldrb	r3, [r2, #0]
 8006c94:	600b      	str	r3, [r1, #0]
 8006c96:	7812      	ldrb	r2, [r2, #0]
 8006c98:	1e10      	subs	r0, r2, #0
 8006c9a:	bf18      	it	ne
 8006c9c:	2001      	movne	r0, #1
 8006c9e:	b002      	add	sp, #8
 8006ca0:	4770      	bx	lr
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	e7fb      	b.n	8006c9e <__ascii_mbtowc+0x16>
 8006ca6:	f06f 0001 	mvn.w	r0, #1
 8006caa:	e7f8      	b.n	8006c9e <__ascii_mbtowc+0x16>

08006cac <__ascii_wctomb>:
 8006cac:	4603      	mov	r3, r0
 8006cae:	4608      	mov	r0, r1
 8006cb0:	b141      	cbz	r1, 8006cc4 <__ascii_wctomb+0x18>
 8006cb2:	2aff      	cmp	r2, #255	@ 0xff
 8006cb4:	d904      	bls.n	8006cc0 <__ascii_wctomb+0x14>
 8006cb6:	228a      	movs	r2, #138	@ 0x8a
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	4770      	bx	lr
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	700a      	strb	r2, [r1, #0]
 8006cc4:	4770      	bx	lr
	...

08006cc8 <fiprintf>:
 8006cc8:	b40e      	push	{r1, r2, r3}
 8006cca:	b503      	push	{r0, r1, lr}
 8006ccc:	4601      	mov	r1, r0
 8006cce:	ab03      	add	r3, sp, #12
 8006cd0:	4805      	ldr	r0, [pc, #20]	@ (8006ce8 <fiprintf+0x20>)
 8006cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd6:	6800      	ldr	r0, [r0, #0]
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	f000 f835 	bl	8006d48 <_vfiprintf_r>
 8006cde:	b002      	add	sp, #8
 8006ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ce4:	b003      	add	sp, #12
 8006ce6:	4770      	bx	lr
 8006ce8:	20000030 	.word	0x20000030

08006cec <abort>:
 8006cec:	2006      	movs	r0, #6
 8006cee:	b508      	push	{r3, lr}
 8006cf0:	f000 f9fe 	bl	80070f0 <raise>
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	f7fa fde8 	bl	80018ca <_exit>

08006cfa <__sfputc_r>:
 8006cfa:	6893      	ldr	r3, [r2, #8]
 8006cfc:	b410      	push	{r4}
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	6093      	str	r3, [r2, #8]
 8006d04:	da07      	bge.n	8006d16 <__sfputc_r+0x1c>
 8006d06:	6994      	ldr	r4, [r2, #24]
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	db01      	blt.n	8006d10 <__sfputc_r+0x16>
 8006d0c:	290a      	cmp	r1, #10
 8006d0e:	d102      	bne.n	8006d16 <__sfputc_r+0x1c>
 8006d10:	bc10      	pop	{r4}
 8006d12:	f000 b931 	b.w	8006f78 <__swbuf_r>
 8006d16:	6813      	ldr	r3, [r2, #0]
 8006d18:	1c58      	adds	r0, r3, #1
 8006d1a:	6010      	str	r0, [r2, #0]
 8006d1c:	7019      	strb	r1, [r3, #0]
 8006d1e:	4608      	mov	r0, r1
 8006d20:	bc10      	pop	{r4}
 8006d22:	4770      	bx	lr

08006d24 <__sfputs_r>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	4606      	mov	r6, r0
 8006d28:	460f      	mov	r7, r1
 8006d2a:	4614      	mov	r4, r2
 8006d2c:	18d5      	adds	r5, r2, r3
 8006d2e:	42ac      	cmp	r4, r5
 8006d30:	d101      	bne.n	8006d36 <__sfputs_r+0x12>
 8006d32:	2000      	movs	r0, #0
 8006d34:	e007      	b.n	8006d46 <__sfputs_r+0x22>
 8006d36:	463a      	mov	r2, r7
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3e:	f7ff ffdc 	bl	8006cfa <__sfputc_r>
 8006d42:	1c43      	adds	r3, r0, #1
 8006d44:	d1f3      	bne.n	8006d2e <__sfputs_r+0xa>
 8006d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d48 <_vfiprintf_r>:
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	460d      	mov	r5, r1
 8006d4e:	4614      	mov	r4, r2
 8006d50:	4698      	mov	r8, r3
 8006d52:	4606      	mov	r6, r0
 8006d54:	b09d      	sub	sp, #116	@ 0x74
 8006d56:	b118      	cbz	r0, 8006d60 <_vfiprintf_r+0x18>
 8006d58:	6a03      	ldr	r3, [r0, #32]
 8006d5a:	b90b      	cbnz	r3, 8006d60 <_vfiprintf_r+0x18>
 8006d5c:	f7fe fabe 	bl	80052dc <__sinit>
 8006d60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d62:	07d9      	lsls	r1, r3, #31
 8006d64:	d405      	bmi.n	8006d72 <_vfiprintf_r+0x2a>
 8006d66:	89ab      	ldrh	r3, [r5, #12]
 8006d68:	059a      	lsls	r2, r3, #22
 8006d6a:	d402      	bmi.n	8006d72 <_vfiprintf_r+0x2a>
 8006d6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d6e:	f7fe fbac 	bl	80054ca <__retarget_lock_acquire_recursive>
 8006d72:	89ab      	ldrh	r3, [r5, #12]
 8006d74:	071b      	lsls	r3, r3, #28
 8006d76:	d501      	bpl.n	8006d7c <_vfiprintf_r+0x34>
 8006d78:	692b      	ldr	r3, [r5, #16]
 8006d7a:	b99b      	cbnz	r3, 8006da4 <_vfiprintf_r+0x5c>
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f000 f938 	bl	8006ff4 <__swsetup_r>
 8006d84:	b170      	cbz	r0, 8006da4 <_vfiprintf_r+0x5c>
 8006d86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d88:	07dc      	lsls	r4, r3, #31
 8006d8a:	d504      	bpl.n	8006d96 <_vfiprintf_r+0x4e>
 8006d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d90:	b01d      	add	sp, #116	@ 0x74
 8006d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d96:	89ab      	ldrh	r3, [r5, #12]
 8006d98:	0598      	lsls	r0, r3, #22
 8006d9a:	d4f7      	bmi.n	8006d8c <_vfiprintf_r+0x44>
 8006d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d9e:	f7fe fb95 	bl	80054cc <__retarget_lock_release_recursive>
 8006da2:	e7f3      	b.n	8006d8c <_vfiprintf_r+0x44>
 8006da4:	2300      	movs	r3, #0
 8006da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006da8:	2320      	movs	r3, #32
 8006daa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006dae:	2330      	movs	r3, #48	@ 0x30
 8006db0:	f04f 0901 	mov.w	r9, #1
 8006db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006f64 <_vfiprintf_r+0x21c>
 8006dbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dc0:	4623      	mov	r3, r4
 8006dc2:	469a      	mov	sl, r3
 8006dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc8:	b10a      	cbz	r2, 8006dce <_vfiprintf_r+0x86>
 8006dca:	2a25      	cmp	r2, #37	@ 0x25
 8006dcc:	d1f9      	bne.n	8006dc2 <_vfiprintf_r+0x7a>
 8006dce:	ebba 0b04 	subs.w	fp, sl, r4
 8006dd2:	d00b      	beq.n	8006dec <_vfiprintf_r+0xa4>
 8006dd4:	465b      	mov	r3, fp
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7ff ffa2 	bl	8006d24 <__sfputs_r>
 8006de0:	3001      	adds	r0, #1
 8006de2:	f000 80a7 	beq.w	8006f34 <_vfiprintf_r+0x1ec>
 8006de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006de8:	445a      	add	r2, fp
 8006dea:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dec:	f89a 3000 	ldrb.w	r3, [sl]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 809f 	beq.w	8006f34 <_vfiprintf_r+0x1ec>
 8006df6:	2300      	movs	r3, #0
 8006df8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e00:	f10a 0a01 	add.w	sl, sl, #1
 8006e04:	9304      	str	r3, [sp, #16]
 8006e06:	9307      	str	r3, [sp, #28]
 8006e08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e0e:	4654      	mov	r4, sl
 8006e10:	2205      	movs	r2, #5
 8006e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e16:	4853      	ldr	r0, [pc, #332]	@ (8006f64 <_vfiprintf_r+0x21c>)
 8006e18:	f7fe fb59 	bl	80054ce <memchr>
 8006e1c:	9a04      	ldr	r2, [sp, #16]
 8006e1e:	b9d8      	cbnz	r0, 8006e58 <_vfiprintf_r+0x110>
 8006e20:	06d1      	lsls	r1, r2, #27
 8006e22:	bf44      	itt	mi
 8006e24:	2320      	movmi	r3, #32
 8006e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e2a:	0713      	lsls	r3, r2, #28
 8006e2c:	bf44      	itt	mi
 8006e2e:	232b      	movmi	r3, #43	@ 0x2b
 8006e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e34:	f89a 3000 	ldrb.w	r3, [sl]
 8006e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e3a:	d015      	beq.n	8006e68 <_vfiprintf_r+0x120>
 8006e3c:	4654      	mov	r4, sl
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f04f 0c0a 	mov.w	ip, #10
 8006e44:	9a07      	ldr	r2, [sp, #28]
 8006e46:	4621      	mov	r1, r4
 8006e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e4c:	3b30      	subs	r3, #48	@ 0x30
 8006e4e:	2b09      	cmp	r3, #9
 8006e50:	d94b      	bls.n	8006eea <_vfiprintf_r+0x1a2>
 8006e52:	b1b0      	cbz	r0, 8006e82 <_vfiprintf_r+0x13a>
 8006e54:	9207      	str	r2, [sp, #28]
 8006e56:	e014      	b.n	8006e82 <_vfiprintf_r+0x13a>
 8006e58:	eba0 0308 	sub.w	r3, r0, r8
 8006e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e60:	4313      	orrs	r3, r2
 8006e62:	46a2      	mov	sl, r4
 8006e64:	9304      	str	r3, [sp, #16]
 8006e66:	e7d2      	b.n	8006e0e <_vfiprintf_r+0xc6>
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	1d19      	adds	r1, r3, #4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	9103      	str	r1, [sp, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	bfbb      	ittet	lt
 8006e74:	425b      	neglt	r3, r3
 8006e76:	f042 0202 	orrlt.w	r2, r2, #2
 8006e7a:	9307      	strge	r3, [sp, #28]
 8006e7c:	9307      	strlt	r3, [sp, #28]
 8006e7e:	bfb8      	it	lt
 8006e80:	9204      	strlt	r2, [sp, #16]
 8006e82:	7823      	ldrb	r3, [r4, #0]
 8006e84:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e86:	d10a      	bne.n	8006e9e <_vfiprintf_r+0x156>
 8006e88:	7863      	ldrb	r3, [r4, #1]
 8006e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e8c:	d132      	bne.n	8006ef4 <_vfiprintf_r+0x1ac>
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	3402      	adds	r4, #2
 8006e92:	1d1a      	adds	r2, r3, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	9203      	str	r2, [sp, #12]
 8006e98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e9c:	9305      	str	r3, [sp, #20]
 8006e9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006f68 <_vfiprintf_r+0x220>
 8006ea2:	2203      	movs	r2, #3
 8006ea4:	4650      	mov	r0, sl
 8006ea6:	7821      	ldrb	r1, [r4, #0]
 8006ea8:	f7fe fb11 	bl	80054ce <memchr>
 8006eac:	b138      	cbz	r0, 8006ebe <_vfiprintf_r+0x176>
 8006eae:	2240      	movs	r2, #64	@ 0x40
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	eba0 000a 	sub.w	r0, r0, sl
 8006eb6:	4082      	lsls	r2, r0
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	3401      	adds	r4, #1
 8006ebc:	9304      	str	r3, [sp, #16]
 8006ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec2:	2206      	movs	r2, #6
 8006ec4:	4829      	ldr	r0, [pc, #164]	@ (8006f6c <_vfiprintf_r+0x224>)
 8006ec6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006eca:	f7fe fb00 	bl	80054ce <memchr>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d03f      	beq.n	8006f52 <_vfiprintf_r+0x20a>
 8006ed2:	4b27      	ldr	r3, [pc, #156]	@ (8006f70 <_vfiprintf_r+0x228>)
 8006ed4:	bb1b      	cbnz	r3, 8006f1e <_vfiprintf_r+0x1d6>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	3307      	adds	r3, #7
 8006eda:	f023 0307 	bic.w	r3, r3, #7
 8006ede:	3308      	adds	r3, #8
 8006ee0:	9303      	str	r3, [sp, #12]
 8006ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee4:	443b      	add	r3, r7
 8006ee6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ee8:	e76a      	b.n	8006dc0 <_vfiprintf_r+0x78>
 8006eea:	460c      	mov	r4, r1
 8006eec:	2001      	movs	r0, #1
 8006eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef2:	e7a8      	b.n	8006e46 <_vfiprintf_r+0xfe>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f04f 0c0a 	mov.w	ip, #10
 8006efa:	4619      	mov	r1, r3
 8006efc:	3401      	adds	r4, #1
 8006efe:	9305      	str	r3, [sp, #20]
 8006f00:	4620      	mov	r0, r4
 8006f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f06:	3a30      	subs	r2, #48	@ 0x30
 8006f08:	2a09      	cmp	r2, #9
 8006f0a:	d903      	bls.n	8006f14 <_vfiprintf_r+0x1cc>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0c6      	beq.n	8006e9e <_vfiprintf_r+0x156>
 8006f10:	9105      	str	r1, [sp, #20]
 8006f12:	e7c4      	b.n	8006e9e <_vfiprintf_r+0x156>
 8006f14:	4604      	mov	r4, r0
 8006f16:	2301      	movs	r3, #1
 8006f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f1c:	e7f0      	b.n	8006f00 <_vfiprintf_r+0x1b8>
 8006f1e:	ab03      	add	r3, sp, #12
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	462a      	mov	r2, r5
 8006f24:	4630      	mov	r0, r6
 8006f26:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <_vfiprintf_r+0x22c>)
 8006f28:	a904      	add	r1, sp, #16
 8006f2a:	f7fd fd8f 	bl	8004a4c <_printf_float>
 8006f2e:	4607      	mov	r7, r0
 8006f30:	1c78      	adds	r0, r7, #1
 8006f32:	d1d6      	bne.n	8006ee2 <_vfiprintf_r+0x19a>
 8006f34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f36:	07d9      	lsls	r1, r3, #31
 8006f38:	d405      	bmi.n	8006f46 <_vfiprintf_r+0x1fe>
 8006f3a:	89ab      	ldrh	r3, [r5, #12]
 8006f3c:	059a      	lsls	r2, r3, #22
 8006f3e:	d402      	bmi.n	8006f46 <_vfiprintf_r+0x1fe>
 8006f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f42:	f7fe fac3 	bl	80054cc <__retarget_lock_release_recursive>
 8006f46:	89ab      	ldrh	r3, [r5, #12]
 8006f48:	065b      	lsls	r3, r3, #25
 8006f4a:	f53f af1f 	bmi.w	8006d8c <_vfiprintf_r+0x44>
 8006f4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f50:	e71e      	b.n	8006d90 <_vfiprintf_r+0x48>
 8006f52:	ab03      	add	r3, sp, #12
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	462a      	mov	r2, r5
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <_vfiprintf_r+0x22c>)
 8006f5c:	a904      	add	r1, sp, #16
 8006f5e:	f7fe f813 	bl	8004f88 <_printf_i>
 8006f62:	e7e4      	b.n	8006f2e <_vfiprintf_r+0x1e6>
 8006f64:	080073ca 	.word	0x080073ca
 8006f68:	080073d0 	.word	0x080073d0
 8006f6c:	080073d4 	.word	0x080073d4
 8006f70:	08004a4d 	.word	0x08004a4d
 8006f74:	08006d25 	.word	0x08006d25

08006f78 <__swbuf_r>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	460e      	mov	r6, r1
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	4605      	mov	r5, r0
 8006f80:	b118      	cbz	r0, 8006f8a <__swbuf_r+0x12>
 8006f82:	6a03      	ldr	r3, [r0, #32]
 8006f84:	b90b      	cbnz	r3, 8006f8a <__swbuf_r+0x12>
 8006f86:	f7fe f9a9 	bl	80052dc <__sinit>
 8006f8a:	69a3      	ldr	r3, [r4, #24]
 8006f8c:	60a3      	str	r3, [r4, #8]
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	071a      	lsls	r2, r3, #28
 8006f92:	d501      	bpl.n	8006f98 <__swbuf_r+0x20>
 8006f94:	6923      	ldr	r3, [r4, #16]
 8006f96:	b943      	cbnz	r3, 8006faa <__swbuf_r+0x32>
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 f82a 	bl	8006ff4 <__swsetup_r>
 8006fa0:	b118      	cbz	r0, 8006faa <__swbuf_r+0x32>
 8006fa2:	f04f 37ff 	mov.w	r7, #4294967295
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	6922      	ldr	r2, [r4, #16]
 8006fae:	b2f6      	uxtb	r6, r6
 8006fb0:	1a98      	subs	r0, r3, r2
 8006fb2:	6963      	ldr	r3, [r4, #20]
 8006fb4:	4637      	mov	r7, r6
 8006fb6:	4283      	cmp	r3, r0
 8006fb8:	dc05      	bgt.n	8006fc6 <__swbuf_r+0x4e>
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f7ff fdeb 	bl	8006b98 <_fflush_r>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d1ed      	bne.n	8006fa2 <__swbuf_r+0x2a>
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	60a3      	str	r3, [r4, #8]
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	6022      	str	r2, [r4, #0]
 8006fd2:	701e      	strb	r6, [r3, #0]
 8006fd4:	6962      	ldr	r2, [r4, #20]
 8006fd6:	1c43      	adds	r3, r0, #1
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d004      	beq.n	8006fe6 <__swbuf_r+0x6e>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	07db      	lsls	r3, r3, #31
 8006fe0:	d5e1      	bpl.n	8006fa6 <__swbuf_r+0x2e>
 8006fe2:	2e0a      	cmp	r6, #10
 8006fe4:	d1df      	bne.n	8006fa6 <__swbuf_r+0x2e>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f7ff fdd5 	bl	8006b98 <_fflush_r>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d0d9      	beq.n	8006fa6 <__swbuf_r+0x2e>
 8006ff2:	e7d6      	b.n	8006fa2 <__swbuf_r+0x2a>

08006ff4 <__swsetup_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4b29      	ldr	r3, [pc, #164]	@ (800709c <__swsetup_r+0xa8>)
 8006ff8:	4605      	mov	r5, r0
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	b118      	cbz	r0, 8007008 <__swsetup_r+0x14>
 8007000:	6a03      	ldr	r3, [r0, #32]
 8007002:	b90b      	cbnz	r3, 8007008 <__swsetup_r+0x14>
 8007004:	f7fe f96a 	bl	80052dc <__sinit>
 8007008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800700c:	0719      	lsls	r1, r3, #28
 800700e:	d422      	bmi.n	8007056 <__swsetup_r+0x62>
 8007010:	06da      	lsls	r2, r3, #27
 8007012:	d407      	bmi.n	8007024 <__swsetup_r+0x30>
 8007014:	2209      	movs	r2, #9
 8007016:	602a      	str	r2, [r5, #0]
 8007018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701c:	f04f 30ff 	mov.w	r0, #4294967295
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	e033      	b.n	800708c <__swsetup_r+0x98>
 8007024:	0758      	lsls	r0, r3, #29
 8007026:	d512      	bpl.n	800704e <__swsetup_r+0x5a>
 8007028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800702a:	b141      	cbz	r1, 800703e <__swsetup_r+0x4a>
 800702c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007030:	4299      	cmp	r1, r3
 8007032:	d002      	beq.n	800703a <__swsetup_r+0x46>
 8007034:	4628      	mov	r0, r5
 8007036:	f7ff f8b7 	bl	80061a8 <_free_r>
 800703a:	2300      	movs	r3, #0
 800703c:	6363      	str	r3, [r4, #52]	@ 0x34
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007044:	81a3      	strh	r3, [r4, #12]
 8007046:	2300      	movs	r3, #0
 8007048:	6063      	str	r3, [r4, #4]
 800704a:	6923      	ldr	r3, [r4, #16]
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	f043 0308 	orr.w	r3, r3, #8
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	6923      	ldr	r3, [r4, #16]
 8007058:	b94b      	cbnz	r3, 800706e <__swsetup_r+0x7a>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007064:	d003      	beq.n	800706e <__swsetup_r+0x7a>
 8007066:	4621      	mov	r1, r4
 8007068:	4628      	mov	r0, r5
 800706a:	f000 f882 	bl	8007172 <__smakebuf_r>
 800706e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007072:	f013 0201 	ands.w	r2, r3, #1
 8007076:	d00a      	beq.n	800708e <__swsetup_r+0x9a>
 8007078:	2200      	movs	r2, #0
 800707a:	60a2      	str	r2, [r4, #8]
 800707c:	6962      	ldr	r2, [r4, #20]
 800707e:	4252      	negs	r2, r2
 8007080:	61a2      	str	r2, [r4, #24]
 8007082:	6922      	ldr	r2, [r4, #16]
 8007084:	b942      	cbnz	r2, 8007098 <__swsetup_r+0xa4>
 8007086:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800708a:	d1c5      	bne.n	8007018 <__swsetup_r+0x24>
 800708c:	bd38      	pop	{r3, r4, r5, pc}
 800708e:	0799      	lsls	r1, r3, #30
 8007090:	bf58      	it	pl
 8007092:	6962      	ldrpl	r2, [r4, #20]
 8007094:	60a2      	str	r2, [r4, #8]
 8007096:	e7f4      	b.n	8007082 <__swsetup_r+0x8e>
 8007098:	2000      	movs	r0, #0
 800709a:	e7f7      	b.n	800708c <__swsetup_r+0x98>
 800709c:	20000030 	.word	0x20000030

080070a0 <_raise_r>:
 80070a0:	291f      	cmp	r1, #31
 80070a2:	b538      	push	{r3, r4, r5, lr}
 80070a4:	4605      	mov	r5, r0
 80070a6:	460c      	mov	r4, r1
 80070a8:	d904      	bls.n	80070b4 <_raise_r+0x14>
 80070aa:	2316      	movs	r3, #22
 80070ac:	6003      	str	r3, [r0, #0]
 80070ae:	f04f 30ff 	mov.w	r0, #4294967295
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80070b6:	b112      	cbz	r2, 80070be <_raise_r+0x1e>
 80070b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070bc:	b94b      	cbnz	r3, 80070d2 <_raise_r+0x32>
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 f830 	bl	8007124 <_getpid_r>
 80070c4:	4622      	mov	r2, r4
 80070c6:	4601      	mov	r1, r0
 80070c8:	4628      	mov	r0, r5
 80070ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ce:	f000 b817 	b.w	8007100 <_kill_r>
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d00a      	beq.n	80070ec <_raise_r+0x4c>
 80070d6:	1c59      	adds	r1, r3, #1
 80070d8:	d103      	bne.n	80070e2 <_raise_r+0x42>
 80070da:	2316      	movs	r3, #22
 80070dc:	6003      	str	r3, [r0, #0]
 80070de:	2001      	movs	r0, #1
 80070e0:	e7e7      	b.n	80070b2 <_raise_r+0x12>
 80070e2:	2100      	movs	r1, #0
 80070e4:	4620      	mov	r0, r4
 80070e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80070ea:	4798      	blx	r3
 80070ec:	2000      	movs	r0, #0
 80070ee:	e7e0      	b.n	80070b2 <_raise_r+0x12>

080070f0 <raise>:
 80070f0:	4b02      	ldr	r3, [pc, #8]	@ (80070fc <raise+0xc>)
 80070f2:	4601      	mov	r1, r0
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	f7ff bfd3 	b.w	80070a0 <_raise_r>
 80070fa:	bf00      	nop
 80070fc:	20000030 	.word	0x20000030

08007100 <_kill_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	2300      	movs	r3, #0
 8007104:	4d06      	ldr	r5, [pc, #24]	@ (8007120 <_kill_r+0x20>)
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	4611      	mov	r1, r2
 800710c:	602b      	str	r3, [r5, #0]
 800710e:	f7fa fbcc 	bl	80018aa <_kill>
 8007112:	1c43      	adds	r3, r0, #1
 8007114:	d102      	bne.n	800711c <_kill_r+0x1c>
 8007116:	682b      	ldr	r3, [r5, #0]
 8007118:	b103      	cbz	r3, 800711c <_kill_r+0x1c>
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	bd38      	pop	{r3, r4, r5, pc}
 800711e:	bf00      	nop
 8007120:	200004f0 	.word	0x200004f0

08007124 <_getpid_r>:
 8007124:	f7fa bbba 	b.w	800189c <_getpid>

08007128 <__swhatbuf_r>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	460c      	mov	r4, r1
 800712c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007130:	4615      	mov	r5, r2
 8007132:	2900      	cmp	r1, #0
 8007134:	461e      	mov	r6, r3
 8007136:	b096      	sub	sp, #88	@ 0x58
 8007138:	da0c      	bge.n	8007154 <__swhatbuf_r+0x2c>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	2100      	movs	r1, #0
 800713e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007142:	bf14      	ite	ne
 8007144:	2340      	movne	r3, #64	@ 0x40
 8007146:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800714a:	2000      	movs	r0, #0
 800714c:	6031      	str	r1, [r6, #0]
 800714e:	602b      	str	r3, [r5, #0]
 8007150:	b016      	add	sp, #88	@ 0x58
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	466a      	mov	r2, sp
 8007156:	f000 f849 	bl	80071ec <_fstat_r>
 800715a:	2800      	cmp	r0, #0
 800715c:	dbed      	blt.n	800713a <__swhatbuf_r+0x12>
 800715e:	9901      	ldr	r1, [sp, #4]
 8007160:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007164:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007168:	4259      	negs	r1, r3
 800716a:	4159      	adcs	r1, r3
 800716c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007170:	e7eb      	b.n	800714a <__swhatbuf_r+0x22>

08007172 <__smakebuf_r>:
 8007172:	898b      	ldrh	r3, [r1, #12]
 8007174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007176:	079d      	lsls	r5, r3, #30
 8007178:	4606      	mov	r6, r0
 800717a:	460c      	mov	r4, r1
 800717c:	d507      	bpl.n	800718e <__smakebuf_r+0x1c>
 800717e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007182:	6023      	str	r3, [r4, #0]
 8007184:	6123      	str	r3, [r4, #16]
 8007186:	2301      	movs	r3, #1
 8007188:	6163      	str	r3, [r4, #20]
 800718a:	b003      	add	sp, #12
 800718c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800718e:	466a      	mov	r2, sp
 8007190:	ab01      	add	r3, sp, #4
 8007192:	f7ff ffc9 	bl	8007128 <__swhatbuf_r>
 8007196:	9f00      	ldr	r7, [sp, #0]
 8007198:	4605      	mov	r5, r0
 800719a:	4639      	mov	r1, r7
 800719c:	4630      	mov	r0, r6
 800719e:	f7ff f875 	bl	800628c <_malloc_r>
 80071a2:	b948      	cbnz	r0, 80071b8 <__smakebuf_r+0x46>
 80071a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a8:	059a      	lsls	r2, r3, #22
 80071aa:	d4ee      	bmi.n	800718a <__smakebuf_r+0x18>
 80071ac:	f023 0303 	bic.w	r3, r3, #3
 80071b0:	f043 0302 	orr.w	r3, r3, #2
 80071b4:	81a3      	strh	r3, [r4, #12]
 80071b6:	e7e2      	b.n	800717e <__smakebuf_r+0xc>
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c2:	81a3      	strh	r3, [r4, #12]
 80071c4:	9b01      	ldr	r3, [sp, #4]
 80071c6:	6020      	str	r0, [r4, #0]
 80071c8:	b15b      	cbz	r3, 80071e2 <__smakebuf_r+0x70>
 80071ca:	4630      	mov	r0, r6
 80071cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d0:	f000 f81e 	bl	8007210 <_isatty_r>
 80071d4:	b128      	cbz	r0, 80071e2 <__smakebuf_r+0x70>
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	f043 0301 	orr.w	r3, r3, #1
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	431d      	orrs	r5, r3
 80071e6:	81a5      	strh	r5, [r4, #12]
 80071e8:	e7cf      	b.n	800718a <__smakebuf_r+0x18>
	...

080071ec <_fstat_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	2300      	movs	r3, #0
 80071f0:	4d06      	ldr	r5, [pc, #24]	@ (800720c <_fstat_r+0x20>)
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	f7fa fbb5 	bl	8001968 <_fstat>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d102      	bne.n	8007208 <_fstat_r+0x1c>
 8007202:	682b      	ldr	r3, [r5, #0]
 8007204:	b103      	cbz	r3, 8007208 <_fstat_r+0x1c>
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	bd38      	pop	{r3, r4, r5, pc}
 800720a:	bf00      	nop
 800720c:	200004f0 	.word	0x200004f0

08007210 <_isatty_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	2300      	movs	r3, #0
 8007214:	4d05      	ldr	r5, [pc, #20]	@ (800722c <_isatty_r+0x1c>)
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	f7fa fbb3 	bl	8001986 <_isatty>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d102      	bne.n	800722a <_isatty_r+0x1a>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	b103      	cbz	r3, 800722a <_isatty_r+0x1a>
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	200004f0 	.word	0x200004f0

08007230 <_init>:
 8007230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007232:	bf00      	nop
 8007234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007236:	bc08      	pop	{r3}
 8007238:	469e      	mov	lr, r3
 800723a:	4770      	bx	lr

0800723c <_fini>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	bf00      	nop
 8007240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007242:	bc08      	pop	{r3}
 8007244:	469e      	mov	lr, r3
 8007246:	4770      	bx	lr
