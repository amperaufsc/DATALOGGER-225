
SPI SD CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d24  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08005e38  08005e38  00006e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d0  080061d0  000081ec  2**0
                  CONTENTS
  4 .ARM          00000008  080061d0  080061d0  000071d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d8  080061d8  000081ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d8  080061d8  000071d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061dc  080061dc  000071dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  080061e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001ec  080063cc  000081ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080063cc  00008418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f0c  00000000  00000000  00008215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f48  00000000  00000000  00012121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00014070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000790  00000000  00000000  00014a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a5d  00000000  00000000  00015200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c84c  00000000  00000000  0002dc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086457  00000000  00000000  0003a4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0900  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e0  00000000  00000000  000c0944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c4024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e1c 	.word	0x08005e1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08005e1c 	.word	0x08005e1c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <SELECT>:
#define SD_CS_GPIO_Port GPIOC
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2110      	movs	r1, #16
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <SELECT+0x14>)
 8000a92:	f001 fb13 	bl	80020bc <HAL_GPIO_WritePin>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40011000 	.word	0x40011000

08000aa0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <DESELECT+0x14>)
 8000aaa:	f001 fb07 	bl	80020bc <HAL_GPIO_WritePin>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40011000 	.word	0x40011000

08000ab8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000ac2:	bf00      	nop
 8000ac4:	4808      	ldr	r0, [pc, #32]	@ (8000ae8 <SPI_TxByte+0x30>)
 8000ac6:	f002 fab4 	bl	8003032 <HAL_SPI_GetState>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d1f9      	bne.n	8000ac4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000ad0:	1df9      	adds	r1, r7, #7
 8000ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4803      	ldr	r0, [pc, #12]	@ (8000ae8 <SPI_TxByte+0x30>)
 8000ada:	f001 ffbd 	bl	8002a58 <HAL_SPI_Transmit>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000020c 	.word	0x2000020c

08000aec <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000af2:	23ff      	movs	r3, #255	@ 0xff
 8000af4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000afa:	bf00      	nop
 8000afc:	4809      	ldr	r0, [pc, #36]	@ (8000b24 <SPI_RxByte+0x38>)
 8000afe:	f002 fa98 	bl	8003032 <HAL_SPI_GetState>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d1f9      	bne.n	8000afc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000b08:	1dba      	adds	r2, r7, #6
 8000b0a:	1df9      	adds	r1, r7, #7
 8000b0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <SPI_RxByte+0x38>)
 8000b16:	f002 f8e3 	bl	8002ce0 <HAL_SPI_TransmitReceive>

  return data;
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000020c 	.word	0x2000020c

08000b28 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000b30:	f7ff ffdc 	bl	8000aec <SPI_RxByte>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	701a      	strb	r2, [r3, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <SD_ReadyWait+0x34>)
 8000b4c:	2232      	movs	r2, #50	@ 0x32
 8000b4e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000b50:	f7ff ffcc 	bl	8000aec <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000b54:	f7ff ffca 	bl	8000aec <SPI_RxByte>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	2bff      	cmp	r3, #255	@ 0xff
 8000b60:	d004      	beq.n	8000b6c <SD_ReadyWait+0x28>
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <SD_ReadyWait+0x34>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1f3      	bne.n	8000b54 <SD_ReadyWait+0x10>

  return res;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200002ae 	.word	0x200002ae

08000b7c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000b82:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000b86:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000b88:	f7ff ff8a 	bl	8000aa0 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	e005      	b.n	8000b9e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000b92:	20ff      	movs	r0, #255	@ 0xff
 8000b94:	f7ff ff90 	bl	8000ab8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	2b09      	cmp	r3, #9
 8000ba2:	ddf6      	ble.n	8000b92 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000ba4:	f7ff ff70 	bl	8000a88 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000ba8:	2340      	movs	r3, #64	@ 0x40
 8000baa:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000bbc:	2395      	movs	r3, #149	@ 0x95
 8000bbe:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e009      	b.n	8000bda <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000bc6:	1d3a      	adds	r2, r7, #4
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff72 	bl	8000ab8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b05      	cmp	r3, #5
 8000bde:	ddf2      	ble.n	8000bc6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000be0:	e002      	b.n	8000be8 <SD_PowerOn+0x6c>
  {
    Count--;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000be8:	f7ff ff80 	bl	8000aec <SPI_RxByte>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d002      	beq.n	8000bf8 <SD_PowerOn+0x7c>
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f4      	bne.n	8000be2 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000bf8:	f7ff ff52 	bl	8000aa0 <DESELECT>
  SPI_TxByte(0XFF);
 8000bfc:	20ff      	movs	r0, #255	@ 0xff
 8000bfe:	f7ff ff5b 	bl	8000ab8 <SPI_TxByte>

  PowerFlag = 1;
 8000c02:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <SD_PowerOn+0x94>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000209 	.word	0x20000209

08000c14 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <SD_PowerOff+0x14>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000209 	.word	0x20000209

08000c2c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000c30:	4b02      	ldr	r3, [pc, #8]	@ (8000c3c <SD_CheckPower+0x10>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000209 	.word	0x20000209

08000c40 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <SD_RxDataBlock+0x68>)
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000c50:	f7ff ff4c 	bl	8000aec <SPI_RxByte>
 8000c54:	4603      	mov	r3, r0
 8000c56:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2bff      	cmp	r3, #255	@ 0xff
 8000c5c:	d104      	bne.n	8000c68 <SD_RxDataBlock+0x28>
 8000c5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <SD_RxDataBlock+0x68>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f3      	bne.n	8000c50 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c6c:	d001      	beq.n	8000c72 <SD_RxDataBlock+0x32>
    return FALSE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e016      	b.n	8000ca0 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff55 	bl	8000b28 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff4f 	bl	8000b28 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	3b02      	subs	r3, #2
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1ed      	bne.n	8000c72 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000c96:	f7ff ff29 	bl	8000aec <SPI_RxByte>
  SPI_RxByte();
 8000c9a:	f7ff ff27 	bl	8000aec <SPI_RxByte>

  return TRUE;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200002ad 	.word	0x200002ad

08000cac <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000cbc:	f7ff ff42 	bl	8000b44 <SD_ReadyWait>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2bff      	cmp	r3, #255	@ 0xff
 8000cc4:	d001      	beq.n	8000cca <SD_TxDataBlock+0x1e>
    return FALSE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e040      	b.n	8000d4c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fef3 	bl	8000ab8 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000cd2:	78fb      	ldrb	r3, [r7, #3]
 8000cd4:	2bfd      	cmp	r3, #253	@ 0xfd
 8000cd6:	d031      	beq.n	8000d3c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fee7 	bl	8000ab8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fee0 	bl	8000ab8 <SPI_TxByte>
    } while (--wc);
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	73bb      	strb	r3, [r7, #14]
 8000cfe:	7bbb      	ldrb	r3, [r7, #14]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1eb      	bne.n	8000cdc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000d04:	f7ff fef2 	bl	8000aec <SPI_RxByte>
    SPI_RxByte();
 8000d08:	f7ff fef0 	bl	8000aec <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000d0c:	e00b      	b.n	8000d26 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000d0e:	f7ff feed 	bl	8000aec <SPI_RxByte>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	f003 031f 	and.w	r3, r3, #31
 8000d1c:	2b05      	cmp	r3, #5
 8000d1e:	d006      	beq.n	8000d2e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	3301      	adds	r3, #1
 8000d24:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000d26:	7b7b      	ldrb	r3, [r7, #13]
 8000d28:	2b40      	cmp	r3, #64	@ 0x40
 8000d2a:	d9f0      	bls.n	8000d0e <SD_TxDataBlock+0x62>
 8000d2c:	e000      	b.n	8000d30 <SD_TxDataBlock+0x84>
        break;
 8000d2e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000d30:	bf00      	nop
 8000d32:	f7ff fedb 	bl	8000aec <SPI_RxByte>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0fa      	beq.n	8000d32 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	f003 031f 	and.w	r3, r3, #31
 8000d42:	2b05      	cmp	r3, #5
 8000d44:	d101      	bne.n	8000d4a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000d60:	f7ff fef0 	bl	8000b44 <SD_ReadyWait>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2bff      	cmp	r3, #255	@ 0xff
 8000d68:	d001      	beq.n	8000d6e <SD_SendCmd+0x1a>
    return 0xFF;
 8000d6a:	23ff      	movs	r3, #255	@ 0xff
 8000d6c:	e040      	b.n	8000df0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fea1 	bl	8000ab8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	0e1b      	lsrs	r3, r3, #24
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe9b 	bl	8000ab8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	0c1b      	lsrs	r3, r3, #16
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fe95 	bl	8000ab8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe8f 	bl	8000ab8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fe8a 	bl	8000ab8 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b40      	cmp	r3, #64	@ 0x40
 8000dac:	d101      	bne.n	8000db2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000dae:	2395      	movs	r3, #149	@ 0x95
 8000db0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b48      	cmp	r3, #72	@ 0x48
 8000db6:	d101      	bne.n	8000dbc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000db8:	2387      	movs	r3, #135	@ 0x87
 8000dba:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fe7a 	bl	8000ab8 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b4c      	cmp	r3, #76	@ 0x4c
 8000dc8:	d101      	bne.n	8000dce <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000dca:	f7ff fe8f 	bl	8000aec <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000dce:	230a      	movs	r3, #10
 8000dd0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000dd2:	f7ff fe8b 	bl	8000aec <SPI_RxByte>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000dda:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	da05      	bge.n	8000dee <SD_SendCmd+0x9a>
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	73bb      	strb	r3, [r7, #14]
 8000de8:	7bbb      	ldrb	r3, [r7, #14]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f1      	bne.n	8000dd2 <SD_SendCmd+0x7e>

  return res;
 8000dee:	7b7b      	ldrb	r3, [r7, #13]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e0d5      	b.n	8000fb8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8000fc0 <SD_disk_initialize+0x1c8>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <SD_disk_initialize+0x2a>
    return Stat;
 8000e1a:	4b69      	ldr	r3, [pc, #420]	@ (8000fc0 <SD_disk_initialize+0x1c8>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	e0ca      	b.n	8000fb8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000e22:	f7ff feab 	bl	8000b7c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000e26:	f7ff fe2f 	bl	8000a88 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2040      	movs	r0, #64	@ 0x40
 8000e32:	f7ff ff8f 	bl	8000d54 <SD_SendCmd>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	f040 80a5 	bne.w	8000f88 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000e3e:	4b61      	ldr	r3, [pc, #388]	@ (8000fc4 <SD_disk_initialize+0x1cc>)
 8000e40:	2264      	movs	r2, #100	@ 0x64
 8000e42:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000e44:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000e48:	2048      	movs	r0, #72	@ 0x48
 8000e4a:	f7ff ff83 	bl	8000d54 <SD_SendCmd>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d158      	bne.n	8000f06 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e00c      	b.n	8000e74 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000e5a:	7bfc      	ldrb	r4, [r7, #15]
 8000e5c:	f7ff fe46 	bl	8000aec <SPI_RxByte>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	f104 0310 	add.w	r3, r4, #16
 8000e68:	443b      	add	r3, r7
 8000e6a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	3301      	adds	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d9ef      	bls.n	8000e5a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000e7a:	7abb      	ldrb	r3, [r7, #10]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	f040 8083 	bne.w	8000f88 <SD_disk_initialize+0x190>
 8000e82:	7afb      	ldrb	r3, [r7, #11]
 8000e84:	2baa      	cmp	r3, #170	@ 0xaa
 8000e86:	d17f      	bne.n	8000f88 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2077      	movs	r0, #119	@ 0x77
 8000e8c:	f7ff ff62 	bl	8000d54 <SD_SendCmd>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d807      	bhi.n	8000ea6 <SD_disk_initialize+0xae>
 8000e96:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000e9a:	2069      	movs	r0, #105	@ 0x69
 8000e9c:	f7ff ff5a 	bl	8000d54 <SD_SendCmd>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000ea6:	4b47      	ldr	r3, [pc, #284]	@ (8000fc4 <SD_disk_initialize+0x1cc>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1eb      	bne.n	8000e88 <SD_disk_initialize+0x90>
 8000eb0:	e000      	b.n	8000eb4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000eb2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000eb4:	4b43      	ldr	r3, [pc, #268]	@ (8000fc4 <SD_disk_initialize+0x1cc>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d064      	beq.n	8000f88 <SD_disk_initialize+0x190>
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	207a      	movs	r0, #122	@ 0x7a
 8000ec2:	f7ff ff47 	bl	8000d54 <SD_SendCmd>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d15d      	bne.n	8000f88 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e00c      	b.n	8000eec <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000ed2:	7bfc      	ldrb	r4, [r7, #15]
 8000ed4:	f7ff fe0a 	bl	8000aec <SPI_RxByte>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	f104 0310 	add.w	r3, r4, #16
 8000ee0:	443b      	add	r3, r7
 8000ee2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d9ef      	bls.n	8000ed2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000ef2:	7a3b      	ldrb	r3, [r7, #8]
 8000ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SD_disk_initialize+0x108>
 8000efc:	2306      	movs	r3, #6
 8000efe:	e000      	b.n	8000f02 <SD_disk_initialize+0x10a>
 8000f00:	2302      	movs	r3, #2
 8000f02:	73bb      	strb	r3, [r7, #14]
 8000f04:	e040      	b.n	8000f88 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000f06:	2100      	movs	r1, #0
 8000f08:	2077      	movs	r0, #119	@ 0x77
 8000f0a:	f7ff ff23 	bl	8000d54 <SD_SendCmd>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d808      	bhi.n	8000f26 <SD_disk_initialize+0x12e>
 8000f14:	2100      	movs	r1, #0
 8000f16:	2069      	movs	r0, #105	@ 0x69
 8000f18:	f7ff ff1c 	bl	8000d54 <SD_SendCmd>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d801      	bhi.n	8000f26 <SD_disk_initialize+0x12e>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e000      	b.n	8000f28 <SD_disk_initialize+0x130>
 8000f26:	2301      	movs	r3, #1
 8000f28:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d10e      	bne.n	8000f4e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000f30:	2100      	movs	r1, #0
 8000f32:	2077      	movs	r0, #119	@ 0x77
 8000f34:	f7ff ff0e 	bl	8000d54 <SD_SendCmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d80e      	bhi.n	8000f5c <SD_disk_initialize+0x164>
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2069      	movs	r0, #105	@ 0x69
 8000f42:	f7ff ff07 	bl	8000d54 <SD_SendCmd>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d107      	bne.n	8000f5c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000f4c:	e00d      	b.n	8000f6a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2041      	movs	r0, #65	@ 0x41
 8000f52:	f7ff feff 	bl	8000d54 <SD_SendCmd>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <SD_disk_initialize+0x1cc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1e1      	bne.n	8000f2a <SD_disk_initialize+0x132>
 8000f66:	e000      	b.n	8000f6a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000f68:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000f6a:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <SD_disk_initialize+0x1cc>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d007      	beq.n	8000f84 <SD_disk_initialize+0x18c>
 8000f74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f78:	2050      	movs	r0, #80	@ 0x50
 8000f7a:	f7ff feeb 	bl	8000d54 <SD_SendCmd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000f88:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <SD_disk_initialize+0x1d0>)
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000f8e:	f7ff fd87 	bl	8000aa0 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000f92:	f7ff fdab 	bl	8000aec <SPI_RxByte>

  if (type)
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d008      	beq.n	8000fae <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <SD_disk_initialize+0x1c8>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f023 0301 	bic.w	r3, r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <SD_disk_initialize+0x1c8>)
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e001      	b.n	8000fb2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000fae:	f7ff fe31 	bl	8000c14 <SD_PowerOff>
  }

  return Stat;
 8000fb2:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <SD_disk_initialize+0x1c8>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	200002ad 	.word	0x200002ad
 8000fc8:	20000208 	.word	0x20000208

08000fcc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e002      	b.n	8000fe6 <SD_disk_status+0x1a>

  return Stat;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <SD_disk_status+0x24>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <SD_disk_read+0x1c>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <SD_disk_read+0x20>
    return RES_PARERR;
 8001010:	2304      	movs	r3, #4
 8001012:	e051      	b.n	80010b8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <SD_disk_read+0xcc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001022:	2303      	movs	r3, #3
 8001024:	e048      	b.n	80010b8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001026:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <SD_disk_read+0xd0>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	607b      	str	r3, [r7, #4]

  SELECT();
 8001038:	f7ff fd26 	bl	8000a88 <SELECT>

  if (count == 1)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d111      	bne.n	8001066 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	2051      	movs	r0, #81	@ 0x51
 8001046:	f7ff fe85 	bl	8000d54 <SD_SendCmd>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d129      	bne.n	80010a4 <SD_disk_read+0xb0>
 8001050:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f7ff fdf3 	bl	8000c40 <SD_RxDataBlock>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d021      	beq.n	80010a4 <SD_disk_read+0xb0>
      count = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	e01e      	b.n	80010a4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	2052      	movs	r0, #82	@ 0x52
 800106a:	f7ff fe73 	bl	8000d54 <SD_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d117      	bne.n	80010a4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001074:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001078:	68b8      	ldr	r0, [r7, #8]
 800107a:	f7ff fde1 	bl	8000c40 <SD_RxDataBlock>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00a      	beq.n	800109a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800108a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1ed      	bne.n	8001074 <SD_disk_read+0x80>
 8001098:	e000      	b.n	800109c <SD_disk_read+0xa8>
          break;
 800109a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800109c:	2100      	movs	r1, #0
 800109e:	204c      	movs	r0, #76	@ 0x4c
 80010a0:	f7ff fe58 	bl	8000d54 <SD_SendCmd>
    }
  }

  DESELECT();
 80010a4:	f7ff fcfc 	bl	8000aa0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80010a8:	f7ff fd20 	bl	8000aec <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf14      	ite	ne
 80010b2:	2301      	movne	r3, #1
 80010b4:	2300      	moveq	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000208 	.word	0x20000208

080010c8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <SD_disk_write+0x1c>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <SD_disk_write+0x20>
    return RES_PARERR;
 80010e4:	2304      	movs	r3, #4
 80010e6:	e06b      	b.n	80011c0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80010e8:	4b37      	ldr	r3, [pc, #220]	@ (80011c8 <SD_disk_write+0x100>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SD_disk_write+0x32>
    return RES_NOTRDY;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e062      	b.n	80011c0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80010fa:	4b33      	ldr	r3, [pc, #204]	@ (80011c8 <SD_disk_write+0x100>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001108:	2302      	movs	r3, #2
 800110a:	e059      	b.n	80011c0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800110c:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <SD_disk_write+0x104>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	607b      	str	r3, [r7, #4]

  SELECT();
 800111e:	f7ff fcb3 	bl	8000a88 <SELECT>

  if (count == 1)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d110      	bne.n	800114a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	2058      	movs	r0, #88	@ 0x58
 800112c:	f7ff fe12 	bl	8000d54 <SD_SendCmd>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d13a      	bne.n	80011ac <SD_disk_write+0xe4>
 8001136:	21fe      	movs	r1, #254	@ 0xfe
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f7ff fdb7 	bl	8000cac <SD_TxDataBlock>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d033      	beq.n	80011ac <SD_disk_write+0xe4>
      count = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	e030      	b.n	80011ac <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800114a:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <SD_disk_write+0x104>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001156:	2100      	movs	r1, #0
 8001158:	2077      	movs	r0, #119	@ 0x77
 800115a:	f7ff fdfb 	bl	8000d54 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800115e:	6839      	ldr	r1, [r7, #0]
 8001160:	2057      	movs	r0, #87	@ 0x57
 8001162:	f7ff fdf7 	bl	8000d54 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	2059      	movs	r0, #89	@ 0x59
 800116a:	f7ff fdf3 	bl	8000d54 <SD_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d11b      	bne.n	80011ac <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001174:	21fc      	movs	r1, #252	@ 0xfc
 8001176:	68b8      	ldr	r0, [r7, #8]
 8001178:	f7ff fd98 	bl	8000cac <SD_TxDataBlock>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00a      	beq.n	8001198 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001188:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1ee      	bne.n	8001174 <SD_disk_write+0xac>
 8001196:	e000      	b.n	800119a <SD_disk_write+0xd2>
          break;
 8001198:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800119a:	21fd      	movs	r1, #253	@ 0xfd
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fd85 	bl	8000cac <SD_TxDataBlock>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <SD_disk_write+0xe4>
      {
        count = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80011ac:	f7ff fc78 	bl	8000aa0 <DESELECT>
  SPI_RxByte();
 80011b0:	f7ff fc9c 	bl	8000aec <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000208 	.word	0x20000208

080011d0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b08b      	sub	sp, #44	@ 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	603a      	str	r2, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	460b      	mov	r3, r1
 80011de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80011ea:	2304      	movs	r3, #4
 80011ec:	e119      	b.n	8001422 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d129      	bne.n	800124e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d017      	beq.n	8001232 <SD_disk_ioctl+0x62>
 8001202:	2b02      	cmp	r3, #2
 8001204:	dc1f      	bgt.n	8001246 <SD_disk_ioctl+0x76>
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <SD_disk_ioctl+0x40>
 800120a:	2b01      	cmp	r3, #1
 800120c:	d00b      	beq.n	8001226 <SD_disk_ioctl+0x56>
 800120e:	e01a      	b.n	8001246 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001210:	f7ff fd0c 	bl	8000c2c <SD_CheckPower>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800121a:	f7ff fcfb 	bl	8000c14 <SD_PowerOff>
      res = RES_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001224:	e0fb      	b.n	800141e <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001226:	f7ff fca9 	bl	8000b7c <SD_PowerOn>
      res = RES_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001230:	e0f5      	b.n	800141e <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	1c5c      	adds	r4, r3, #1
 8001236:	f7ff fcf9 	bl	8000c2c <SD_CheckPower>
 800123a:	4603      	mov	r3, r0
 800123c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001244:	e0eb      	b.n	800141e <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001246:	2304      	movs	r3, #4
 8001248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800124c:	e0e7      	b.n	800141e <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800124e:	4b77      	ldr	r3, [pc, #476]	@ (800142c <SD_disk_ioctl+0x25c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800125c:	2303      	movs	r3, #3
 800125e:	e0e0      	b.n	8001422 <SD_disk_ioctl+0x252>

    SELECT();
 8001260:	f7ff fc12 	bl	8000a88 <SELECT>

    switch (ctrl)
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	2b0d      	cmp	r3, #13
 8001268:	f200 80ca 	bhi.w	8001400 <SD_disk_ioctl+0x230>
 800126c:	a201      	add	r2, pc, #4	@ (adr r2, 8001274 <SD_disk_ioctl+0xa4>)
 800126e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001272:	bf00      	nop
 8001274:	0800136b 	.word	0x0800136b
 8001278:	080012ad 	.word	0x080012ad
 800127c:	0800135b 	.word	0x0800135b
 8001280:	08001401 	.word	0x08001401
 8001284:	08001401 	.word	0x08001401
 8001288:	08001401 	.word	0x08001401
 800128c:	08001401 	.word	0x08001401
 8001290:	08001401 	.word	0x08001401
 8001294:	08001401 	.word	0x08001401
 8001298:	08001401 	.word	0x08001401
 800129c:	08001401 	.word	0x08001401
 80012a0:	0800137d 	.word	0x0800137d
 80012a4:	080013a1 	.word	0x080013a1
 80012a8:	080013c5 	.word	0x080013c5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80012ac:	2100      	movs	r1, #0
 80012ae:	2049      	movs	r0, #73	@ 0x49
 80012b0:	f7ff fd50 	bl	8000d54 <SD_SendCmd>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 80a6 	bne.w	8001408 <SD_disk_ioctl+0x238>
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2110      	movs	r1, #16
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fcbc 	bl	8000c40 <SD_RxDataBlock>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 809c 	beq.w	8001408 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 80012d0:	7b3b      	ldrb	r3, [r7, #12]
 80012d2:	099b      	lsrs	r3, r3, #6
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d10d      	bne.n	80012f6 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80012da:	7d7b      	ldrb	r3, [r7, #21]
 80012dc:	461a      	mov	r2, r3
 80012de:	7d3b      	ldrb	r3, [r7, #20]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	3301      	adds	r3, #1
 80012ea:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80012ec:	8bfb      	ldrh	r3, [r7, #30]
 80012ee:	029a      	lsls	r2, r3, #10
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e02d      	b.n	8001352 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80012f6:	7c7b      	ldrb	r3, [r7, #17]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	7dbb      	ldrb	r3, [r7, #22]
 8001300:	09db      	lsrs	r3, r3, #7
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4413      	add	r3, r2
 8001306:	b2da      	uxtb	r2, r3
 8001308:	7d7b      	ldrb	r3, [r7, #21]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f003 0306 	and.w	r3, r3, #6
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4413      	add	r3, r2
 8001316:	b2db      	uxtb	r3, r3
 8001318:	3302      	adds	r3, #2
 800131a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800131e:	7d3b      	ldrb	r3, [r7, #20]
 8001320:	099b      	lsrs	r3, r3, #6
 8001322:	b2db      	uxtb	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	7cfb      	ldrb	r3, [r7, #19]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b29a      	uxth	r2, r3
 8001330:	7cbb      	ldrb	r3, [r7, #18]
 8001332:	029b      	lsls	r3, r3, #10
 8001334:	b29b      	uxth	r3, r3
 8001336:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800133a:	b29b      	uxth	r3, r3
 800133c:	4413      	add	r3, r2
 800133e:	b29b      	uxth	r3, r3
 8001340:	3301      	adds	r3, #1
 8001342:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001344:	8bfa      	ldrh	r2, [r7, #30]
 8001346:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800134a:	3b09      	subs	r3, #9
 800134c:	409a      	lsls	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001358:	e056      	b.n	8001408 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001360:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001368:	e055      	b.n	8001416 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800136a:	f7ff fbeb 	bl	8000b44 <SD_ReadyWait>
 800136e:	4603      	mov	r3, r0
 8001370:	2bff      	cmp	r3, #255	@ 0xff
 8001372:	d14b      	bne.n	800140c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800137a:	e047      	b.n	800140c <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800137c:	2100      	movs	r1, #0
 800137e:	2049      	movs	r0, #73	@ 0x49
 8001380:	f7ff fce8 	bl	8000d54 <SD_SendCmd>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d142      	bne.n	8001410 <SD_disk_ioctl+0x240>
 800138a:	2110      	movs	r1, #16
 800138c:	6a38      	ldr	r0, [r7, #32]
 800138e:	f7ff fc57 	bl	8000c40 <SD_RxDataBlock>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d03b      	beq.n	8001410 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800139e:	e037      	b.n	8001410 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80013a0:	2100      	movs	r1, #0
 80013a2:	204a      	movs	r0, #74	@ 0x4a
 80013a4:	f7ff fcd6 	bl	8000d54 <SD_SendCmd>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d132      	bne.n	8001414 <SD_disk_ioctl+0x244>
 80013ae:	2110      	movs	r1, #16
 80013b0:	6a38      	ldr	r0, [r7, #32]
 80013b2:	f7ff fc45 	bl	8000c40 <SD_RxDataBlock>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d02b      	beq.n	8001414 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80013c2:	e027      	b.n	8001414 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80013c4:	2100      	movs	r1, #0
 80013c6:	207a      	movs	r0, #122	@ 0x7a
 80013c8:	f7ff fcc4 	bl	8000d54 <SD_SendCmd>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80013d8:	e00b      	b.n	80013f2 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80013da:	6a3c      	ldr	r4, [r7, #32]
 80013dc:	1c63      	adds	r3, r4, #1
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	f7ff fb84 	bl	8000aec <SPI_RxByte>
 80013e4:	4603      	mov	r3, r0
 80013e6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80013e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013ec:	3301      	adds	r3, #1
 80013ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80013f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d9ef      	bls.n	80013da <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8001400:	2304      	movs	r3, #4
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001406:	e006      	b.n	8001416 <SD_disk_ioctl+0x246>
      break;
 8001408:	bf00      	nop
 800140a:	e004      	b.n	8001416 <SD_disk_ioctl+0x246>
      break;
 800140c:	bf00      	nop
 800140e:	e002      	b.n	8001416 <SD_disk_ioctl+0x246>
      break;
 8001410:	bf00      	nop
 8001412:	e000      	b.n	8001416 <SD_disk_ioctl+0x246>
      break;
 8001414:	bf00      	nop
    }

    DESELECT();
 8001416:	f7ff fb43 	bl	8000aa0 <DESELECT>
    SPI_RxByte();
 800141a:	f7ff fb67 	bl	8000aec <SPI_RxByte>
  }

  return res;
 800141e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001422:	4618      	mov	r0, r3
 8001424:	372c      	adds	r7, #44	@ 0x2c
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001434:	f000 fb4e 	bl	8001ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001438:	f000 f80a 	bl	8001450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143c:	f000 f8ae 	bl	800159c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001440:	f000 f882 	bl	8001548 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001444:	f000 f84a 	bl	80014dc <MX_SPI1_Init>
  MX_FATFS_Init();
 8001448:	f001 ff98 	bl	800337c <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <main+0x1c>

08001450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b090      	sub	sp, #64	@ 0x40
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	2228      	movs	r2, #40	@ 0x28
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fdb3 	bl	8003fca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001476:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800147a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001484:	2302      	movs	r3, #2
 8001486:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001488:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800148c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800148e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fe49 	bl	8002130 <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014a4:	f000 f8fe 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ac:	2302      	movs	r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 f8b6 	bl	8002634 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014ce:	f000 f8e9 	bl	80016a4 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3740      	adds	r7, #64	@ 0x40
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e0:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_SPI1_Init+0x64>)
 80014e2:	4a18      	ldr	r2, [pc, #96]	@ (8001544 <MX_SPI1_Init+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <MX_SPI1_Init+0x64>)
 80014e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_SPI1_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_SPI1_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_SPI1_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_SPI1_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_SPI1_Init+0x64>)
 8001508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_SPI1_Init+0x64>)
 8001510:	2210      	movs	r2, #16
 8001512:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <MX_SPI1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_SPI1_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <MX_SPI1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_SPI1_Init+0x64>)
 8001528:	220a      	movs	r2, #10
 800152a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <MX_SPI1_Init+0x64>)
 800152e:	f001 fa0f 	bl	8002950 <HAL_SPI_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001538:	f000 f8b4 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000020c 	.word	0x2000020c
 8001544:	40013000 	.word	0x40013000

08001548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MX_USART2_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <MX_USART2_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <MX_USART2_UART_Init+0x4c>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <MX_USART2_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <MX_USART2_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <MX_USART2_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	@ (8001594 <MX_USART2_UART_Init+0x4c>)
 8001580:	f001 fe1d 	bl	80031be <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800158a:	f000 f88b 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000264 	.word	0x20000264
 8001598:	40004400 	.word	0x40004400

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	4b38      	ldr	r3, [pc, #224]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a37      	ldr	r2, [pc, #220]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b35      	ldr	r3, [pc, #212]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c8:	4b32      	ldr	r3, [pc, #200]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a31      	ldr	r2, [pc, #196]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a25      	ldr	r2, [pc, #148]	@ (8001694 <MX_GPIO_Init+0xf8>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <MX_GPIO_Init+0xf8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2110      	movs	r1, #16
 8001614:	4820      	ldr	r0, [pc, #128]	@ (8001698 <MX_GPIO_Init+0xfc>)
 8001616:	f000 fd51 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001620:	481e      	ldr	r0, [pc, #120]	@ (800169c <MX_GPIO_Init+0x100>)
 8001622:	f000 fd4b 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162c:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <MX_GPIO_Init+0x104>)
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4817      	ldr	r0, [pc, #92]	@ (8001698 <MX_GPIO_Init+0xfc>)
 800163c:	f000 fbba 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 8001640:	2310      	movs	r3, #16
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2302      	movs	r3, #2
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	4810      	ldr	r0, [pc, #64]	@ (8001698 <MX_GPIO_Init+0xfc>)
 8001658:	f000 fbac 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800165c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2302      	movs	r3, #2
 800166c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	4809      	ldr	r0, [pc, #36]	@ (800169c <MX_GPIO_Init+0x100>)
 8001676:	f000 fb9d 	bl	8001db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2028      	movs	r0, #40	@ 0x28
 8001680:	f000 fb61 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001684:	2028      	movs	r0, #40	@ 0x28
 8001686:	f000 fb7a 	bl	8001d7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800168a:	bf00      	nop
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40011000 	.word	0x40011000
 800169c:	40010800 	.word	0x40010800
 80016a0:	10110000 	.word	0x10110000

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <Error_Handler+0x8>

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4a14      	ldr	r2, [pc, #80]	@ (800170c <HAL_MspInit+0x5c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6193      	str	r3, [r2, #24]
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_MspInit+0x5c>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <HAL_MspInit+0x5c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <HAL_MspInit+0x5c>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_MspInit+0x60>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <HAL_MspInit+0x60>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000

08001714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <HAL_SPI_MspInit+0x88>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d12f      	bne.n	8001794 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <HAL_SPI_MspInit+0x8c>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <HAL_SPI_MspInit+0x8c>)
 800173a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <HAL_SPI_MspInit+0x8c>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <HAL_SPI_MspInit+0x8c>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a13      	ldr	r2, [pc, #76]	@ (80017a0 <HAL_SPI_MspInit+0x8c>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_SPI_MspInit+0x8c>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001764:	23a0      	movs	r3, #160	@ 0xa0
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	480b      	ldr	r0, [pc, #44]	@ (80017a4 <HAL_SPI_MspInit+0x90>)
 8001778:	f000 fb1c 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177c:	2340      	movs	r3, #64	@ 0x40
 800177e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <HAL_SPI_MspInit+0x90>)
 8001790:	f000 fb10 	bl	8001db4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40013000 	.word	0x40013000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010800 	.word	0x40010800

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a15      	ldr	r2, [pc, #84]	@ (8001818 <HAL_UART_MspInit+0x70>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d123      	bne.n	8001810 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c8:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	4a13      	ldr	r2, [pc, #76]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d2:	61d3      	str	r3, [r2, #28]
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017f8:	230c      	movs	r3, #12
 80017fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2302      	movs	r3, #2
 8001802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4619      	mov	r1, r3
 800180a:	4805      	ldr	r0, [pc, #20]	@ (8001820 <HAL_UART_MspInit+0x78>)
 800180c:	f000 fad2 	bl	8001db4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40004400 	.word	0x40004400
 800181c:	40021000 	.word	0x40021000
 8001820:	40010800 	.word	0x40010800

08001824 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <SDTimer_Handler+0x3c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <SDTimer_Handler+0x1c>
		Timer1--;
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <SDTimer_Handler+0x3c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3b01      	subs	r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <SDTimer_Handler+0x3c>)
 800183e:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <SDTimer_Handler+0x40>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <SDTimer_Handler+0x34>
		Timer2--;
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <SDTimer_Handler+0x40>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <SDTimer_Handler+0x40>)
 8001856:	701a      	strb	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	200002ad 	.word	0x200002ad
 8001864:	200002ae 	.word	0x200002ae

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <NMI_Handler+0x4>

08001870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <MemManage_Handler+0x4>

08001880 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <UsageFault_Handler+0x4>

08001890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <SysTick_Handler+0x30>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <SysTick_Handler+0x30>)
 80018c4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 80018c6:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <SysTick_Handler+0x30>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b09      	cmp	r3, #9
 80018ce:	d904      	bls.n	80018da <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <SysTick_Handler+0x30>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80018d6:	f7ff ffa5 	bl	8001824 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018da:	f000 f941 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200002ac 	.word	0x200002ac

080018e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018f0:	f000 fbfc 	bl	80020ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return 1;
 80018fc:	2301      	movs	r3, #1
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <_kill>:

int _kill(int pid, int sig)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001910:	f002 fbae 	bl	8004070 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	2216      	movs	r2, #22
 8001918:	601a      	str	r2, [r3, #0]
  return -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_exit>:

void _exit (int status)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800192e:	f04f 31ff 	mov.w	r1, #4294967295
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ffe7 	bl	8001906 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <_exit+0x12>

0800193c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e00a      	b.n	8001964 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800194e:	f3af 8000 	nop.w
 8001952:	4601      	mov	r1, r0
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	60ba      	str	r2, [r7, #8]
 800195a:	b2ca      	uxtb	r2, r1
 800195c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbf0      	blt.n	800194e <_read+0x12>
  }

  return len;
 800196c:	687b      	ldr	r3, [r7, #4]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e009      	b.n	800199c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	60ba      	str	r2, [r7, #8]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dbf1      	blt.n	8001988 <_write+0x12>
  }
  return len;
 80019a4:	687b      	ldr	r3, [r7, #4]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_close>:

int _close(int file)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d4:	605a      	str	r2, [r3, #4]
  return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <_isatty>:

int _isatty(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
	...

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f002 fb16 	bl	8004070 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20005000 	.word	0x20005000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	200002b0 	.word	0x200002b0
 8001a78:	20000418 	.word	0x20000418

08001a7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a88:	f7ff fff8 	bl	8001a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a8c:	480b      	ldr	r0, [pc, #44]	@ (8001abc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a8e:	490c      	ldr	r1, [pc, #48]	@ (8001ac0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a90:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aa4:	4c09      	ldr	r4, [pc, #36]	@ (8001acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f002 fae3 	bl	800407c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab6:	f7ff fcbb 	bl	8001430 <main>
  bx lr
 8001aba:	4770      	bx	lr
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ac4:	080061e0 	.word	0x080061e0
  ldr r2, =_sbss
 8001ac8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001acc:	20000418 	.word	0x20000418

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>
	...

08001ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <HAL_Init+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	@ (8001afc <HAL_Init+0x28>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f923 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fdde 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f93b 	bl	8001d9a <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f903 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	@ (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000004 	.word	0x20000004
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	20000008 	.word	0x20000008

08001b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_IncTick+0x1c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_IncTick+0x20>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a03      	ldr	r2, [pc, #12]	@ (8001b80 <HAL_IncTick+0x20>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	200002b4 	.word	0x200002b4

08001b84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b02      	ldr	r3, [pc, #8]	@ (8001b94 <HAL_GetTick+0x10>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	200002b4 	.word	0x200002b4

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4906      	ldr	r1, [pc, #24]	@ (8001c30 <__NVIC_EnableIRQ+0x34>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	@ (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	@ (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	@ 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	@ 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff90 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff2d 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff42 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff90 	bl	8001c88 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5f 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff35 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b08b      	sub	sp, #44	@ 0x2c
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	e169      	b.n	800209c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 8158 	bne.w	8002096 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a9a      	ldr	r2, [pc, #616]	@ (8002054 <HAL_GPIO_Init+0x2a0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d05e      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001df0:	4a98      	ldr	r2, [pc, #608]	@ (8002054 <HAL_GPIO_Init+0x2a0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d875      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001df6:	4a98      	ldr	r2, [pc, #608]	@ (8002058 <HAL_GPIO_Init+0x2a4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d058      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001dfc:	4a96      	ldr	r2, [pc, #600]	@ (8002058 <HAL_GPIO_Init+0x2a4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d86f      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e02:	4a96      	ldr	r2, [pc, #600]	@ (800205c <HAL_GPIO_Init+0x2a8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d052      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e08:	4a94      	ldr	r2, [pc, #592]	@ (800205c <HAL_GPIO_Init+0x2a8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d869      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e0e:	4a94      	ldr	r2, [pc, #592]	@ (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d04c      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e14:	4a92      	ldr	r2, [pc, #584]	@ (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d863      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e1a:	4a92      	ldr	r2, [pc, #584]	@ (8002064 <HAL_GPIO_Init+0x2b0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d046      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e20:	4a90      	ldr	r2, [pc, #576]	@ (8002064 <HAL_GPIO_Init+0x2b0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d85d      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d82a      	bhi.n	8001e80 <HAL_GPIO_Init+0xcc>
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d859      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e34 <HAL_GPIO_Init+0x80>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001eaf 	.word	0x08001eaf
 8001e38:	08001e89 	.word	0x08001e89
 8001e3c:	08001e9b 	.word	0x08001e9b
 8001e40:	08001edd 	.word	0x08001edd
 8001e44:	08001ee3 	.word	0x08001ee3
 8001e48:	08001ee3 	.word	0x08001ee3
 8001e4c:	08001ee3 	.word	0x08001ee3
 8001e50:	08001ee3 	.word	0x08001ee3
 8001e54:	08001ee3 	.word	0x08001ee3
 8001e58:	08001ee3 	.word	0x08001ee3
 8001e5c:	08001ee3 	.word	0x08001ee3
 8001e60:	08001ee3 	.word	0x08001ee3
 8001e64:	08001ee3 	.word	0x08001ee3
 8001e68:	08001ee3 	.word	0x08001ee3
 8001e6c:	08001ee3 	.word	0x08001ee3
 8001e70:	08001ee3 	.word	0x08001ee3
 8001e74:	08001ee3 	.word	0x08001ee3
 8001e78:	08001e91 	.word	0x08001e91
 8001e7c:	08001ea5 	.word	0x08001ea5
 8001e80:	4a79      	ldr	r2, [pc, #484]	@ (8002068 <HAL_GPIO_Init+0x2b4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e86:	e02c      	b.n	8001ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e029      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	3304      	adds	r3, #4
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e024      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e01f      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e01a      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e013      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	611a      	str	r2, [r3, #16]
          break;
 8001ece:	e009      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	615a      	str	r2, [r3, #20]
          break;
 8001eda:	e003      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          break;
 8001ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2bff      	cmp	r3, #255	@ 0xff
 8001ee8:	d801      	bhi.n	8001eee <HAL_GPIO_Init+0x13a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_Init+0x13e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2bff      	cmp	r3, #255	@ 0xff
 8001ef8:	d802      	bhi.n	8001f00 <HAL_GPIO_Init+0x14c>
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x152>
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	3b08      	subs	r3, #8
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	210f      	movs	r1, #15
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80b1 	beq.w	8002096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f34:	4b4d      	ldr	r3, [pc, #308]	@ (800206c <HAL_GPIO_Init+0x2b8>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	@ (800206c <HAL_GPIO_Init+0x2b8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b4a      	ldr	r3, [pc, #296]	@ (800206c <HAL_GPIO_Init+0x2b8>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f4c:	4a48      	ldr	r2, [pc, #288]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a40      	ldr	r2, [pc, #256]	@ (8002074 <HAL_GPIO_Init+0x2c0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_GPIO_Init+0x1ec>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002078 <HAL_GPIO_Init+0x2c4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00d      	beq.n	8001f9c <HAL_GPIO_Init+0x1e8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3e      	ldr	r2, [pc, #248]	@ (800207c <HAL_GPIO_Init+0x2c8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0x1e4>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3d      	ldr	r2, [pc, #244]	@ (8002080 <HAL_GPIO_Init+0x2cc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_GPIO_Init+0x1e0>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e006      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e004      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e002      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	f002 0203 	and.w	r2, r2, #3
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	4093      	lsls	r3, r2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fb2:	492f      	ldr	r1, [pc, #188]	@ (8002070 <HAL_GPIO_Init+0x2bc>)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	492c      	ldr	r1, [pc, #176]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fda:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4928      	ldr	r1, [pc, #160]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff4:	4b23      	ldr	r3, [pc, #140]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	4922      	ldr	r1, [pc, #136]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002002:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	491e      	ldr	r1, [pc, #120]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 800200c:	4013      	ands	r3, r2
 800200e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800201c:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4918      	ldr	r1, [pc, #96]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800202a:	4b16      	ldr	r3, [pc, #88]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4914      	ldr	r1, [pc, #80]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d021      	beq.n	8002088 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002044:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	490e      	ldr	r1, [pc, #56]	@ (8002084 <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e021      	b.n	8002096 <HAL_GPIO_Init+0x2e2>
 8002052:	bf00      	nop
 8002054:	10320000 	.word	0x10320000
 8002058:	10310000 	.word	0x10310000
 800205c:	10220000 	.word	0x10220000
 8002060:	10210000 	.word	0x10210000
 8002064:	10120000 	.word	0x10120000
 8002068:	10110000 	.word	0x10110000
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000
 8002074:	40010800 	.word	0x40010800
 8002078:	40010c00 	.word	0x40010c00
 800207c:	40011000 	.word	0x40011000
 8002080:	40011400 	.word	0x40011400
 8002084:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	43db      	mvns	r3, r3
 8002090:	4909      	ldr	r1, [pc, #36]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 8002092:	4013      	ands	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	3301      	adds	r3, #1
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f47f ae8e 	bne.w	8001dc8 <HAL_GPIO_Init+0x14>
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	372c      	adds	r7, #44	@ 0x2c
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d8:	e003      	b.n	80020e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	041a      	lsls	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f806 	bl	800211c <HAL_GPIO_EXTI_Callback>
  }
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e272      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8087 	beq.w	800225e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002150:	4b92      	ldr	r3, [pc, #584]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b04      	cmp	r3, #4
 800215a:	d00c      	beq.n	8002176 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800215c:	4b8f      	ldr	r3, [pc, #572]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	d112      	bne.n	800218e <HAL_RCC_OscConfig+0x5e>
 8002168:	4b8c      	ldr	r3, [pc, #560]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002174:	d10b      	bne.n	800218e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002176:	4b89      	ldr	r3, [pc, #548]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d06c      	beq.n	800225c <HAL_RCC_OscConfig+0x12c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d168      	bne.n	800225c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e24c      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x76>
 8002198:	4b80      	ldr	r3, [pc, #512]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a7f      	ldr	r2, [pc, #508]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e02e      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x98>
 80021ae:	4b7b      	ldr	r3, [pc, #492]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7a      	ldr	r2, [pc, #488]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b78      	ldr	r3, [pc, #480]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a77      	ldr	r2, [pc, #476]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0xbc>
 80021d2:	4b72      	ldr	r3, [pc, #456]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a71      	ldr	r2, [pc, #452]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b6f      	ldr	r3, [pc, #444]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6e      	ldr	r2, [pc, #440]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021ec:	4b6b      	ldr	r3, [pc, #428]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6a      	ldr	r2, [pc, #424]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b68      	ldr	r3, [pc, #416]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a67      	ldr	r2, [pc, #412]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002202:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fcba 	bl	8001b84 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7ff fcb6 	bl	8001b84 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	@ 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e200      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b5d      	ldr	r3, [pc, #372]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0xe4>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fca6 	bl	8001b84 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fca2 	bl	8001b84 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	@ 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1ec      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	4b53      	ldr	r3, [pc, #332]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x10c>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226a:	4b4c      	ldr	r3, [pc, #304]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002276:	4b49      	ldr	r3, [pc, #292]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b08      	cmp	r3, #8
 8002280:	d11c      	bne.n	80022bc <HAL_RCC_OscConfig+0x18c>
 8002282:	4b46      	ldr	r3, [pc, #280]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d116      	bne.n	80022bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	4b43      	ldr	r3, [pc, #268]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_RCC_OscConfig+0x176>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1c0      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	4b3d      	ldr	r3, [pc, #244]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4939      	ldr	r1, [pc, #228]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	e03a      	b.n	8002332 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c4:	4b36      	ldr	r3, [pc, #216]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7ff fc5b 	bl	8001b84 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d2:	f7ff fc57 	bl	8001b84 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1a1      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e4:	4b2d      	ldr	r3, [pc, #180]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4927      	ldr	r1, [pc, #156]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002306:	4b26      	ldr	r3, [pc, #152]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff fc3a 	bl	8001b84 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002314:	f7ff fc36 	bl	8001b84 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e180      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d03a      	beq.n	80023b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d019      	beq.n	800237a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002346:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <HAL_RCC_OscConfig+0x274>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7ff fc1a 	bl	8001b84 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002354:	f7ff fc16 	bl	8001b84 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e160      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002372:	2001      	movs	r0, #1
 8002374:	f000 face 	bl	8002914 <RCC_Delay>
 8002378:	e01c      	b.n	80023b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_RCC_OscConfig+0x274>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7ff fc00 	bl	8001b84 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002386:	e00f      	b.n	80023a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7ff fbfc 	bl	8001b84 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d908      	bls.n	80023a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e146      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	42420000 	.word	0x42420000
 80023a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	4b92      	ldr	r3, [pc, #584]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e9      	bne.n	8002388 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80a6 	beq.w	800250e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	4b8b      	ldr	r3, [pc, #556]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b88      	ldr	r3, [pc, #544]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4a87      	ldr	r2, [pc, #540]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	61d3      	str	r3, [r2, #28]
 80023de:	4b85      	ldr	r3, [pc, #532]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b82      	ldr	r3, [pc, #520]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d118      	bne.n	800242c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b7f      	ldr	r3, [pc, #508]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7e      	ldr	r2, [pc, #504]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7ff fbbd 	bl	8001b84 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240e:	f7ff fbb9 	bl	8001b84 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b64      	cmp	r3, #100	@ 0x64
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e103      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	4b75      	ldr	r3, [pc, #468]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x312>
 8002434:	4b6f      	ldr	r3, [pc, #444]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a6e      	ldr	r2, [pc, #440]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e02d      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x334>
 800244a:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a69      	ldr	r2, [pc, #420]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6213      	str	r3, [r2, #32]
 8002456:	4b67      	ldr	r3, [pc, #412]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a66      	ldr	r2, [pc, #408]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	e01c      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x356>
 800246c:	4b61      	ldr	r3, [pc, #388]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4a60      	ldr	r2, [pc, #384]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	6213      	str	r3, [r2, #32]
 8002478:	4b5e      	ldr	r3, [pc, #376]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4a5d      	ldr	r2, [pc, #372]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6213      	str	r3, [r2, #32]
 8002484:	e00b      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002486:	4b5b      	ldr	r3, [pc, #364]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a5a      	ldr	r2, [pc, #360]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6213      	str	r3, [r2, #32]
 8002492:	4b58      	ldr	r3, [pc, #352]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a57      	ldr	r2, [pc, #348]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d015      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7ff fb6d 	bl	8001b84 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7ff fb69 	bl	8001b84 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0b1      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	4b4b      	ldr	r3, [pc, #300]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ee      	beq.n	80024ae <HAL_RCC_OscConfig+0x37e>
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7ff fb57 	bl	8001b84 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7ff fb53 	bl	8001b84 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e09b      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	4b40      	ldr	r3, [pc, #256]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ee      	bne.n	80024da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b3c      	ldr	r3, [pc, #240]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	4a3b      	ldr	r2, [pc, #236]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800250c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8087 	beq.w	8002626 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002518:	4b36      	ldr	r3, [pc, #216]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d061      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d146      	bne.n	80025ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b33      	ldr	r3, [pc, #204]	@ (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7ff fb27 	bl	8001b84 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7ff fb23 	bl	8001b84 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e06d      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254c:	4b29      	ldr	r3, [pc, #164]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002560:	d108      	bne.n	8002574 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002562:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	4921      	ldr	r1, [pc, #132]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a19      	ldr	r1, [r3, #32]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	430b      	orrs	r3, r1
 8002586:	491b      	ldr	r1, [pc, #108]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff faf7 	bl	8001b84 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7ff faf3 	bl	8001b84 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e03d      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ac:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x46a>
 80025b8:	e035      	b.n	8002626 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff fae0 	bl	8001b84 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7ff fadc 	bl	8001b84 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e026      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x498>
 80025e6:	e01e      	b.n	8002626 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e019      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_OscConfig+0x500>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0d0      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b6a      	ldr	r3, [pc, #424]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d910      	bls.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b67      	ldr	r3, [pc, #412]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0207 	bic.w	r2, r3, #7
 800265e:	4965      	ldr	r1, [pc, #404]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b63      	ldr	r3, [pc, #396]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b8      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002690:	4b59      	ldr	r3, [pc, #356]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a58      	ldr	r2, [pc, #352]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800269a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a8:	4b53      	ldr	r3, [pc, #332]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b50      	ldr	r3, [pc, #320]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	494d      	ldr	r1, [pc, #308]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d040      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b47      	ldr	r3, [pc, #284]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b41      	ldr	r3, [pc, #260]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e073      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3d      	ldr	r3, [pc, #244]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b39      	ldr	r3, [pc, #228]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4936      	ldr	r1, [pc, #216]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7ff fa2e 	bl	8001b84 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7ff fa2a 	bl	8001b84 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e053      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d210      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4922      	ldr	r1, [pc, #136]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e032      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4916      	ldr	r1, [pc, #88]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ae:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	490e      	ldr	r1, [pc, #56]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c2:	f000 f821 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	490a      	ldr	r1, [pc, #40]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a09      	ldr	r2, [pc, #36]	@ (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff f98c 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08005e38 	.word	0x08005e38
 8002800:	20000004 	.word	0x20000004
 8002804:	20000008 	.word	0x20000008

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002822:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d002      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x30>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d003      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x36>
 8002836:	e027      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800283a:	613b      	str	r3, [r7, #16]
      break;
 800283c:	e027      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0c9b      	lsrs	r3, r3, #18
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d010      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0c5b      	lsrs	r3, r3, #17
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	4a11      	ldr	r2, [pc, #68]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800286a:	fb03 f202 	mul.w	r2, r3, r2
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e004      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0c      	ldr	r2, [pc, #48]	@ (80028ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	613b      	str	r3, [r7, #16]
      break;
 8002886:	e002      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800288a:	613b      	str	r3, [r7, #16]
      break;
 800288c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288e:	693b      	ldr	r3, [r7, #16]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	007a1200 	.word	0x007a1200
 80028a4:	08005e50 	.word	0x08005e50
 80028a8:	08005e60 	.word	0x08005e60
 80028ac:	003d0900 	.word	0x003d0900

080028b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b4:	4b02      	ldr	r3, [pc, #8]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c8:	f7ff fff2 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	@ (80028e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	08005e48 	.word	0x08005e48

080028ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028f0:	f7ff ffde 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0adb      	lsrs	r3, r3, #11
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	@ (8002910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	08005e48 	.word	0x08005e48

08002914 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800291c:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <RCC_Delay+0x34>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <RCC_Delay+0x38>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0a5b      	lsrs	r3, r3, #9
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002930:	bf00      	nop
  }
  while (Delay --);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	60fa      	str	r2, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f9      	bne.n	8002930 <RCC_Delay+0x1c>
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	20000004 	.word	0x20000004
 800294c:	10624dd3 	.word	0x10624dd3

08002950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e076      	b.n	8002a50 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002972:	d009      	beq.n	8002988 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
 800297a:	e005      	b.n	8002988 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe feb6 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0c:	ea42 0103 	orr.w	r1, r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	0c1a      	lsrs	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f002 0204 	and.w	r2, r2, #4
 8002a2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a68:	f7ff f88c 	bl	8001b84 <HAL_GetTick>
 8002a6c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d001      	beq.n	8002a82 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e12a      	b.n	8002cd8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_SPI_Transmit+0x36>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e122      	b.n	8002cd8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_SPI_Transmit+0x48>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e11b      	b.n	8002cd8 <HAL_SPI_Transmit+0x280>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aee:	d10f      	bne.n	8002b10 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002afe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1a:	2b40      	cmp	r3, #64	@ 0x40
 8002b1c:	d007      	beq.n	8002b2e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b36:	d152      	bne.n	8002bde <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_SPI_Transmit+0xee>
 8002b40:	8b7b      	ldrh	r3, [r7, #26]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d145      	bne.n	8002bd2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	881a      	ldrh	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	1c9a      	adds	r2, r3, #2
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b6a:	e032      	b.n	8002bd2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d112      	bne.n	8002ba0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	1c9a      	adds	r2, r3, #2
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b9e:	e018      	b.n	8002bd2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ba0:	f7fe fff0 	bl	8001b84 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d803      	bhi.n	8002bb8 <HAL_SPI_Transmit+0x160>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d102      	bne.n	8002bbe <HAL_SPI_Transmit+0x166>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e082      	b.n	8002cd8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1c7      	bne.n	8002b6c <HAL_SPI_Transmit+0x114>
 8002bdc:	e053      	b.n	8002c86 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_SPI_Transmit+0x194>
 8002be6:	8b7b      	ldrh	r3, [r7, #26]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d147      	bne.n	8002c7c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	330c      	adds	r3, #12
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c12:	e033      	b.n	8002c7c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d113      	bne.n	8002c4a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	7812      	ldrb	r2, [r2, #0]
 8002c2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c48:	e018      	b.n	8002c7c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c4a:	f7fe ff9b 	bl	8001b84 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d803      	bhi.n	8002c62 <HAL_SPI_Transmit+0x20a>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d102      	bne.n	8002c68 <HAL_SPI_Transmit+0x210>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e02d      	b.n	8002cd8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1c6      	bne.n	8002c14 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	6839      	ldr	r1, [r7, #0]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fa66 	bl	800315c <SPI_EndRxTxTransaction>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	@ 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cf2:	f7fe ff47 	bl	8001b84 <HAL_GetTick>
 8002cf6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cfe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d00c      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x4a>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d16:	d106      	bne.n	8002d26 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <HAL_SPI_TransmitReceive+0x46>
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d001      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
 8002d28:	e17f      	b.n	800302a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x5c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x5c>
 8002d36:	887b      	ldrh	r3, [r7, #2]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e174      	b.n	800302a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_SPI_TransmitReceive+0x6e>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e16d      	b.n	800302a <HAL_SPI_TransmitReceive+0x34a>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d003      	beq.n	8002d6a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2205      	movs	r2, #5
 8002d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	887a      	ldrh	r2, [r7, #2]
 8002d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	887a      	ldrh	r2, [r7, #2]
 8002d92:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002daa:	2b40      	cmp	r3, #64	@ 0x40
 8002dac:	d007      	beq.n	8002dbe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dc6:	d17e      	bne.n	8002ec6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0xf6>
 8002dd0:	8afb      	ldrh	r3, [r7, #22]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d16c      	bne.n	8002eb0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	881a      	ldrh	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	1c9a      	adds	r2, r3, #2
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dfa:	e059      	b.n	8002eb0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d11b      	bne.n	8002e42 <HAL_SPI_TransmitReceive+0x162>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d016      	beq.n	8002e42 <HAL_SPI_TransmitReceive+0x162>
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d113      	bne.n	8002e42 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	881a      	ldrh	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	1c9a      	adds	r2, r3, #2
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d119      	bne.n	8002e84 <HAL_SPI_TransmitReceive+0x1a4>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d014      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e64:	b292      	uxth	r2, r2
 8002e66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	1c9a      	adds	r2, r3, #2
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e80:	2301      	movs	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e84:	f7fe fe7e 	bl	8001b84 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d80d      	bhi.n	8002eb0 <HAL_SPI_TransmitReceive+0x1d0>
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9a:	d009      	beq.n	8002eb0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0bc      	b.n	800302a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1a0      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x11c>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d19b      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x11c>
 8002ec4:	e082      	b.n	8002fcc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x1f4>
 8002ece:	8afb      	ldrh	r3, [r7, #22]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d171      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002efa:	e05d      	b.n	8002fb8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d11c      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x264>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d017      	beq.n	8002f44 <HAL_SPI_TransmitReceive+0x264>
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d114      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d119      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x2a6>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d014      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f82:	2301      	movs	r3, #1
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f86:	f7fe fdfd 	bl	8001b84 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d803      	bhi.n	8002f9e <HAL_SPI_TransmitReceive+0x2be>
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d102      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x2c4>
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e038      	b.n	800302a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d19c      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x21c>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d197      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f8c3 	bl	800315c <SPI_EndRxTxTransaction>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e01d      	b.n	800302a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003028:	2300      	movs	r3, #0
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3728      	adds	r7, #40	@ 0x28
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003040:	b2db      	uxtb	r3, r3
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800305c:	f7fe fd92 	bl	8001b84 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	4413      	add	r3, r2
 800306a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800306c:	f7fe fd8a 	bl	8001b84 <HAL_GetTick>
 8003070:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003072:	4b39      	ldr	r3, [pc, #228]	@ (8003158 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	015b      	lsls	r3, r3, #5
 8003078:	0d1b      	lsrs	r3, r3, #20
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003082:	e054      	b.n	800312e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d050      	beq.n	800312e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800308c:	f7fe fd7a 	bl	8001b84 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	429a      	cmp	r2, r3
 800309a:	d902      	bls.n	80030a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d13d      	bne.n	800311e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030ba:	d111      	bne.n	80030e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c4:	d004      	beq.n	80030d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ce:	d107      	bne.n	80030e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e8:	d10f      	bne.n	800310a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003108:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e017      	b.n	800314e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3b01      	subs	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	429a      	cmp	r2, r3
 800314a:	d19b      	bne.n	8003084 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000004 	.word	0x20000004

0800315c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2201      	movs	r2, #1
 8003170:	2102      	movs	r1, #2
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff ff6a 	bl	800304c <SPI_WaitFlagStateUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e013      	b.n	80031b6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2200      	movs	r2, #0
 8003196:	2180      	movs	r1, #128	@ 0x80
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff ff57 	bl	800304c <SPI_WaitFlagStateUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e000      	b.n	80031b6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e042      	b.n	8003256 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fe fadf 	bl	80017a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2224      	movs	r2, #36	@ 0x24
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003200:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f82c 	bl	8003260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003216:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003226:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003236:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800329a:	f023 030c 	bic.w	r3, r3, #12
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	430b      	orrs	r3, r1
 80032a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003374 <UART_SetConfig+0x114>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d103      	bne.n	80032d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032c8:	f7ff fb10 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	e002      	b.n	80032d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032d0:	f7ff faf8 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 80032d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	009a      	lsls	r2, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	4a22      	ldr	r2, [pc, #136]	@ (8003378 <UART_SetConfig+0x118>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	0119      	lsls	r1, r3, #4
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	009a      	lsls	r2, r3, #2
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fbb2 f2f3 	udiv	r2, r2, r3
 800330c:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <UART_SetConfig+0x118>)
 800330e:	fba3 0302 	umull	r0, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2064      	movs	r0, #100	@ 0x64
 8003316:	fb00 f303 	mul.w	r3, r0, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	3332      	adds	r3, #50	@ 0x32
 8003320:	4a15      	ldr	r2, [pc, #84]	@ (8003378 <UART_SetConfig+0x118>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800332c:	4419      	add	r1, r3
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	009a      	lsls	r2, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	fbb2 f2f3 	udiv	r2, r2, r3
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <UART_SetConfig+0x118>)
 8003346:	fba3 0302 	umull	r0, r3, r3, r2
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2064      	movs	r0, #100	@ 0x64
 800334e:	fb00 f303 	mul.w	r3, r0, r3
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	3332      	adds	r3, #50	@ 0x32
 8003358:	4a07      	ldr	r2, [pc, #28]	@ (8003378 <UART_SetConfig+0x118>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	440a      	add	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40013800 	.word	0x40013800
 8003378:	51eb851f 	.word	0x51eb851f

0800337c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003380:	4904      	ldr	r1, [pc, #16]	@ (8003394 <MX_FATFS_Init+0x18>)
 8003382:	4805      	ldr	r0, [pc, #20]	@ (8003398 <MX_FATFS_Init+0x1c>)
 8003384:	f000 f8b0 	bl	80034e8 <FATFS_LinkDriver>
 8003388:	4603      	mov	r3, r0
 800338a:	461a      	mov	r2, r3
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <MX_FATFS_Init+0x20>)
 800338e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200002bc 	.word	0x200002bc
 8003398:	20000010 	.word	0x20000010
 800339c:	200002b8 	.word	0x200002b8

080033a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd fd23 	bl	8000df8 <SD_disk_initialize>
 80033b2:	4603      	mov	r3, r0
 80033b4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd fdfe 	bl	8000fcc <SD_disk_status>
 80033d0:	4603      	mov	r3, r0
 80033d2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4603      	mov	r3, r0
 80033ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff , sector, count);
 80033ec:	7bf8      	ldrb	r0, [r7, #15]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	f7fd fdfe 	bl	8000ff4 <SD_disk_read>
 80033f8:	4603      	mov	r3, r0
 80033fa:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003414:	7bf8      	ldrb	r0, [r7, #15]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	f7fd fe54 	bl	80010c8 <SD_disk_write>
 8003420:	4603      	mov	r3, r0
 8003422:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	603a      	str	r2, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
 8003438:	460b      	mov	r3, r1
 800343a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	79b9      	ldrb	r1, [r7, #6]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fec4 	bl	80011d0 <SD_disk_ioctl>
 8003448:	4603      	mov	r3, r0
 800344a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800346a:	4b1e      	ldr	r3, [pc, #120]	@ (80034e4 <FATFS_LinkDriverEx+0x90>)
 800346c:	7a5b      	ldrb	r3, [r3, #9]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d831      	bhi.n	80034d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <FATFS_LinkDriverEx+0x90>)
 8003476:	7a5b      	ldrb	r3, [r3, #9]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <FATFS_LinkDriverEx+0x90>)
 800347e:	2100      	movs	r1, #0
 8003480:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8003482:	4b18      	ldr	r3, [pc, #96]	@ (80034e4 <FATFS_LinkDriverEx+0x90>)
 8003484:	7a5b      	ldrb	r3, [r3, #9]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <FATFS_LinkDriverEx+0x90>)
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8003492:	4b14      	ldr	r3, [pc, #80]	@ (80034e4 <FATFS_LinkDriverEx+0x90>)
 8003494:	7a5b      	ldrb	r3, [r3, #9]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <FATFS_LinkDriverEx+0x90>)
 800349c:	4413      	add	r3, r2
 800349e:	79fa      	ldrb	r2, [r7, #7]
 80034a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80034a2:	4b10      	ldr	r3, [pc, #64]	@ (80034e4 <FATFS_LinkDriverEx+0x90>)
 80034a4:	7a5b      	ldrb	r3, [r3, #9]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	b2d1      	uxtb	r1, r2
 80034ac:	4a0d      	ldr	r2, [pc, #52]	@ (80034e4 <FATFS_LinkDriverEx+0x90>)
 80034ae:	7251      	strb	r1, [r2, #9]
 80034b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80034b2:	7dbb      	ldrb	r3, [r7, #22]
 80034b4:	3330      	adds	r3, #48	@ 0x30
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	3301      	adds	r3, #1
 80034c0:	223a      	movs	r2, #58	@ 0x3a
 80034c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	3302      	adds	r3, #2
 80034c8:	222f      	movs	r2, #47	@ 0x2f
 80034ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3303      	adds	r3, #3
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	200002c0 	.word	0x200002c0

080034e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	6839      	ldr	r1, [r7, #0]
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffac 	bl	8003454 <FATFS_LinkDriverEx>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <__cvt>:
 8003506:	2b00      	cmp	r3, #0
 8003508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800350c:	461d      	mov	r5, r3
 800350e:	bfbb      	ittet	lt
 8003510:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003514:	461d      	movlt	r5, r3
 8003516:	2300      	movge	r3, #0
 8003518:	232d      	movlt	r3, #45	@ 0x2d
 800351a:	b088      	sub	sp, #32
 800351c:	4614      	mov	r4, r2
 800351e:	bfb8      	it	lt
 8003520:	4614      	movlt	r4, r2
 8003522:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003524:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003526:	7013      	strb	r3, [r2, #0]
 8003528:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800352a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800352e:	f023 0820 	bic.w	r8, r3, #32
 8003532:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003536:	d005      	beq.n	8003544 <__cvt+0x3e>
 8003538:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800353c:	d100      	bne.n	8003540 <__cvt+0x3a>
 800353e:	3601      	adds	r6, #1
 8003540:	2302      	movs	r3, #2
 8003542:	e000      	b.n	8003546 <__cvt+0x40>
 8003544:	2303      	movs	r3, #3
 8003546:	aa07      	add	r2, sp, #28
 8003548:	9204      	str	r2, [sp, #16]
 800354a:	aa06      	add	r2, sp, #24
 800354c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003550:	e9cd 3600 	strd	r3, r6, [sp]
 8003554:	4622      	mov	r2, r4
 8003556:	462b      	mov	r3, r5
 8003558:	f000 fe4e 	bl	80041f8 <_dtoa_r>
 800355c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003560:	4607      	mov	r7, r0
 8003562:	d119      	bne.n	8003598 <__cvt+0x92>
 8003564:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003566:	07db      	lsls	r3, r3, #31
 8003568:	d50e      	bpl.n	8003588 <__cvt+0x82>
 800356a:	eb00 0906 	add.w	r9, r0, r6
 800356e:	2200      	movs	r2, #0
 8003570:	2300      	movs	r3, #0
 8003572:	4620      	mov	r0, r4
 8003574:	4629      	mov	r1, r5
 8003576:	f7fd fa17 	bl	80009a8 <__aeabi_dcmpeq>
 800357a:	b108      	cbz	r0, 8003580 <__cvt+0x7a>
 800357c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003580:	2230      	movs	r2, #48	@ 0x30
 8003582:	9b07      	ldr	r3, [sp, #28]
 8003584:	454b      	cmp	r3, r9
 8003586:	d31e      	bcc.n	80035c6 <__cvt+0xc0>
 8003588:	4638      	mov	r0, r7
 800358a:	9b07      	ldr	r3, [sp, #28]
 800358c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800358e:	1bdb      	subs	r3, r3, r7
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	b008      	add	sp, #32
 8003594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003598:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800359c:	eb00 0906 	add.w	r9, r0, r6
 80035a0:	d1e5      	bne.n	800356e <__cvt+0x68>
 80035a2:	7803      	ldrb	r3, [r0, #0]
 80035a4:	2b30      	cmp	r3, #48	@ 0x30
 80035a6:	d10a      	bne.n	80035be <__cvt+0xb8>
 80035a8:	2200      	movs	r2, #0
 80035aa:	2300      	movs	r3, #0
 80035ac:	4620      	mov	r0, r4
 80035ae:	4629      	mov	r1, r5
 80035b0:	f7fd f9fa 	bl	80009a8 <__aeabi_dcmpeq>
 80035b4:	b918      	cbnz	r0, 80035be <__cvt+0xb8>
 80035b6:	f1c6 0601 	rsb	r6, r6, #1
 80035ba:	f8ca 6000 	str.w	r6, [sl]
 80035be:	f8da 3000 	ldr.w	r3, [sl]
 80035c2:	4499      	add	r9, r3
 80035c4:	e7d3      	b.n	800356e <__cvt+0x68>
 80035c6:	1c59      	adds	r1, r3, #1
 80035c8:	9107      	str	r1, [sp, #28]
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e7d9      	b.n	8003582 <__cvt+0x7c>

080035ce <__exponent>:
 80035ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035d0:	2900      	cmp	r1, #0
 80035d2:	bfb6      	itet	lt
 80035d4:	232d      	movlt	r3, #45	@ 0x2d
 80035d6:	232b      	movge	r3, #43	@ 0x2b
 80035d8:	4249      	neglt	r1, r1
 80035da:	2909      	cmp	r1, #9
 80035dc:	7002      	strb	r2, [r0, #0]
 80035de:	7043      	strb	r3, [r0, #1]
 80035e0:	dd29      	ble.n	8003636 <__exponent+0x68>
 80035e2:	f10d 0307 	add.w	r3, sp, #7
 80035e6:	461d      	mov	r5, r3
 80035e8:	270a      	movs	r7, #10
 80035ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80035ee:	461a      	mov	r2, r3
 80035f0:	fb07 1416 	mls	r4, r7, r6, r1
 80035f4:	3430      	adds	r4, #48	@ 0x30
 80035f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80035fa:	460c      	mov	r4, r1
 80035fc:	2c63      	cmp	r4, #99	@ 0x63
 80035fe:	4631      	mov	r1, r6
 8003600:	f103 33ff 	add.w	r3, r3, #4294967295
 8003604:	dcf1      	bgt.n	80035ea <__exponent+0x1c>
 8003606:	3130      	adds	r1, #48	@ 0x30
 8003608:	1e94      	subs	r4, r2, #2
 800360a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800360e:	4623      	mov	r3, r4
 8003610:	1c41      	adds	r1, r0, #1
 8003612:	42ab      	cmp	r3, r5
 8003614:	d30a      	bcc.n	800362c <__exponent+0x5e>
 8003616:	f10d 0309 	add.w	r3, sp, #9
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	42ac      	cmp	r4, r5
 800361e:	bf88      	it	hi
 8003620:	2300      	movhi	r3, #0
 8003622:	3302      	adds	r3, #2
 8003624:	4403      	add	r3, r0
 8003626:	1a18      	subs	r0, r3, r0
 8003628:	b003      	add	sp, #12
 800362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800362c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003630:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003634:	e7ed      	b.n	8003612 <__exponent+0x44>
 8003636:	2330      	movs	r3, #48	@ 0x30
 8003638:	3130      	adds	r1, #48	@ 0x30
 800363a:	7083      	strb	r3, [r0, #2]
 800363c:	70c1      	strb	r1, [r0, #3]
 800363e:	1d03      	adds	r3, r0, #4
 8003640:	e7f1      	b.n	8003626 <__exponent+0x58>
	...

08003644 <_printf_float>:
 8003644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003648:	b091      	sub	sp, #68	@ 0x44
 800364a:	460c      	mov	r4, r1
 800364c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003650:	4616      	mov	r6, r2
 8003652:	461f      	mov	r7, r3
 8003654:	4605      	mov	r5, r0
 8003656:	f000 fcc1 	bl	8003fdc <_localeconv_r>
 800365a:	6803      	ldr	r3, [r0, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	9308      	str	r3, [sp, #32]
 8003660:	f7fc fd76 	bl	8000150 <strlen>
 8003664:	2300      	movs	r3, #0
 8003666:	930e      	str	r3, [sp, #56]	@ 0x38
 8003668:	f8d8 3000 	ldr.w	r3, [r8]
 800366c:	9009      	str	r0, [sp, #36]	@ 0x24
 800366e:	3307      	adds	r3, #7
 8003670:	f023 0307 	bic.w	r3, r3, #7
 8003674:	f103 0208 	add.w	r2, r3, #8
 8003678:	f894 a018 	ldrb.w	sl, [r4, #24]
 800367c:	f8d4 b000 	ldr.w	fp, [r4]
 8003680:	f8c8 2000 	str.w	r2, [r8]
 8003684:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003688:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800368c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800368e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003692:	f04f 32ff 	mov.w	r2, #4294967295
 8003696:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800369a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800369e:	4b9c      	ldr	r3, [pc, #624]	@ (8003910 <_printf_float+0x2cc>)
 80036a0:	f7fd f9b4 	bl	8000a0c <__aeabi_dcmpun>
 80036a4:	bb70      	cbnz	r0, 8003704 <_printf_float+0xc0>
 80036a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	4b98      	ldr	r3, [pc, #608]	@ (8003910 <_printf_float+0x2cc>)
 80036b0:	f7fd f98e 	bl	80009d0 <__aeabi_dcmple>
 80036b4:	bb30      	cbnz	r0, 8003704 <_printf_float+0xc0>
 80036b6:	2200      	movs	r2, #0
 80036b8:	2300      	movs	r3, #0
 80036ba:	4640      	mov	r0, r8
 80036bc:	4649      	mov	r1, r9
 80036be:	f7fd f97d 	bl	80009bc <__aeabi_dcmplt>
 80036c2:	b110      	cbz	r0, 80036ca <_printf_float+0x86>
 80036c4:	232d      	movs	r3, #45	@ 0x2d
 80036c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036ca:	4a92      	ldr	r2, [pc, #584]	@ (8003914 <_printf_float+0x2d0>)
 80036cc:	4b92      	ldr	r3, [pc, #584]	@ (8003918 <_printf_float+0x2d4>)
 80036ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80036d2:	bf94      	ite	ls
 80036d4:	4690      	movls	r8, r2
 80036d6:	4698      	movhi	r8, r3
 80036d8:	2303      	movs	r3, #3
 80036da:	f04f 0900 	mov.w	r9, #0
 80036de:	6123      	str	r3, [r4, #16]
 80036e0:	f02b 0304 	bic.w	r3, fp, #4
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	4633      	mov	r3, r6
 80036e8:	4621      	mov	r1, r4
 80036ea:	4628      	mov	r0, r5
 80036ec:	9700      	str	r7, [sp, #0]
 80036ee:	aa0f      	add	r2, sp, #60	@ 0x3c
 80036f0:	f000 f9d4 	bl	8003a9c <_printf_common>
 80036f4:	3001      	adds	r0, #1
 80036f6:	f040 8090 	bne.w	800381a <_printf_float+0x1d6>
 80036fa:	f04f 30ff 	mov.w	r0, #4294967295
 80036fe:	b011      	add	sp, #68	@ 0x44
 8003700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003704:	4642      	mov	r2, r8
 8003706:	464b      	mov	r3, r9
 8003708:	4640      	mov	r0, r8
 800370a:	4649      	mov	r1, r9
 800370c:	f7fd f97e 	bl	8000a0c <__aeabi_dcmpun>
 8003710:	b148      	cbz	r0, 8003726 <_printf_float+0xe2>
 8003712:	464b      	mov	r3, r9
 8003714:	2b00      	cmp	r3, #0
 8003716:	bfb8      	it	lt
 8003718:	232d      	movlt	r3, #45	@ 0x2d
 800371a:	4a80      	ldr	r2, [pc, #512]	@ (800391c <_printf_float+0x2d8>)
 800371c:	bfb8      	it	lt
 800371e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003722:	4b7f      	ldr	r3, [pc, #508]	@ (8003920 <_printf_float+0x2dc>)
 8003724:	e7d3      	b.n	80036ce <_printf_float+0x8a>
 8003726:	6863      	ldr	r3, [r4, #4]
 8003728:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	d13f      	bne.n	80037b0 <_printf_float+0x16c>
 8003730:	2306      	movs	r3, #6
 8003732:	6063      	str	r3, [r4, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800373a:	6023      	str	r3, [r4, #0]
 800373c:	9206      	str	r2, [sp, #24]
 800373e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003740:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003744:	aa0d      	add	r2, sp, #52	@ 0x34
 8003746:	9203      	str	r2, [sp, #12]
 8003748:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800374c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003750:	6863      	ldr	r3, [r4, #4]
 8003752:	4642      	mov	r2, r8
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4628      	mov	r0, r5
 8003758:	464b      	mov	r3, r9
 800375a:	910a      	str	r1, [sp, #40]	@ 0x28
 800375c:	f7ff fed3 	bl	8003506 <__cvt>
 8003760:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003762:	4680      	mov	r8, r0
 8003764:	2947      	cmp	r1, #71	@ 0x47
 8003766:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003768:	d128      	bne.n	80037bc <_printf_float+0x178>
 800376a:	1cc8      	adds	r0, r1, #3
 800376c:	db02      	blt.n	8003774 <_printf_float+0x130>
 800376e:	6863      	ldr	r3, [r4, #4]
 8003770:	4299      	cmp	r1, r3
 8003772:	dd40      	ble.n	80037f6 <_printf_float+0x1b2>
 8003774:	f1aa 0a02 	sub.w	sl, sl, #2
 8003778:	fa5f fa8a 	uxtb.w	sl, sl
 800377c:	4652      	mov	r2, sl
 800377e:	3901      	subs	r1, #1
 8003780:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003784:	910d      	str	r1, [sp, #52]	@ 0x34
 8003786:	f7ff ff22 	bl	80035ce <__exponent>
 800378a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800378c:	4681      	mov	r9, r0
 800378e:	1813      	adds	r3, r2, r0
 8003790:	2a01      	cmp	r2, #1
 8003792:	6123      	str	r3, [r4, #16]
 8003794:	dc02      	bgt.n	800379c <_printf_float+0x158>
 8003796:	6822      	ldr	r2, [r4, #0]
 8003798:	07d2      	lsls	r2, r2, #31
 800379a:	d501      	bpl.n	80037a0 <_printf_float+0x15c>
 800379c:	3301      	adds	r3, #1
 800379e:	6123      	str	r3, [r4, #16]
 80037a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d09e      	beq.n	80036e6 <_printf_float+0xa2>
 80037a8:	232d      	movs	r3, #45	@ 0x2d
 80037aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037ae:	e79a      	b.n	80036e6 <_printf_float+0xa2>
 80037b0:	2947      	cmp	r1, #71	@ 0x47
 80037b2:	d1bf      	bne.n	8003734 <_printf_float+0xf0>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1bd      	bne.n	8003734 <_printf_float+0xf0>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e7ba      	b.n	8003732 <_printf_float+0xee>
 80037bc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80037c0:	d9dc      	bls.n	800377c <_printf_float+0x138>
 80037c2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80037c6:	d118      	bne.n	80037fa <_printf_float+0x1b6>
 80037c8:	2900      	cmp	r1, #0
 80037ca:	6863      	ldr	r3, [r4, #4]
 80037cc:	dd0b      	ble.n	80037e6 <_printf_float+0x1a2>
 80037ce:	6121      	str	r1, [r4, #16]
 80037d0:	b913      	cbnz	r3, 80037d8 <_printf_float+0x194>
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	07d0      	lsls	r0, r2, #31
 80037d6:	d502      	bpl.n	80037de <_printf_float+0x19a>
 80037d8:	3301      	adds	r3, #1
 80037da:	440b      	add	r3, r1
 80037dc:	6123      	str	r3, [r4, #16]
 80037de:	f04f 0900 	mov.w	r9, #0
 80037e2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80037e4:	e7dc      	b.n	80037a0 <_printf_float+0x15c>
 80037e6:	b913      	cbnz	r3, 80037ee <_printf_float+0x1aa>
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	07d2      	lsls	r2, r2, #31
 80037ec:	d501      	bpl.n	80037f2 <_printf_float+0x1ae>
 80037ee:	3302      	adds	r3, #2
 80037f0:	e7f4      	b.n	80037dc <_printf_float+0x198>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e7f2      	b.n	80037dc <_printf_float+0x198>
 80037f6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80037fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80037fc:	4299      	cmp	r1, r3
 80037fe:	db05      	blt.n	800380c <_printf_float+0x1c8>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	6121      	str	r1, [r4, #16]
 8003804:	07d8      	lsls	r0, r3, #31
 8003806:	d5ea      	bpl.n	80037de <_printf_float+0x19a>
 8003808:	1c4b      	adds	r3, r1, #1
 800380a:	e7e7      	b.n	80037dc <_printf_float+0x198>
 800380c:	2900      	cmp	r1, #0
 800380e:	bfcc      	ite	gt
 8003810:	2201      	movgt	r2, #1
 8003812:	f1c1 0202 	rsble	r2, r1, #2
 8003816:	4413      	add	r3, r2
 8003818:	e7e0      	b.n	80037dc <_printf_float+0x198>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	055a      	lsls	r2, r3, #21
 800381e:	d407      	bmi.n	8003830 <_printf_float+0x1ec>
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	4642      	mov	r2, r8
 8003824:	4631      	mov	r1, r6
 8003826:	4628      	mov	r0, r5
 8003828:	47b8      	blx	r7
 800382a:	3001      	adds	r0, #1
 800382c:	d12b      	bne.n	8003886 <_printf_float+0x242>
 800382e:	e764      	b.n	80036fa <_printf_float+0xb6>
 8003830:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003834:	f240 80dc 	bls.w	80039f0 <_printf_float+0x3ac>
 8003838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800383c:	2200      	movs	r2, #0
 800383e:	2300      	movs	r3, #0
 8003840:	f7fd f8b2 	bl	80009a8 <__aeabi_dcmpeq>
 8003844:	2800      	cmp	r0, #0
 8003846:	d033      	beq.n	80038b0 <_printf_float+0x26c>
 8003848:	2301      	movs	r3, #1
 800384a:	4631      	mov	r1, r6
 800384c:	4628      	mov	r0, r5
 800384e:	4a35      	ldr	r2, [pc, #212]	@ (8003924 <_printf_float+0x2e0>)
 8003850:	47b8      	blx	r7
 8003852:	3001      	adds	r0, #1
 8003854:	f43f af51 	beq.w	80036fa <_printf_float+0xb6>
 8003858:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800385c:	4543      	cmp	r3, r8
 800385e:	db02      	blt.n	8003866 <_printf_float+0x222>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	07d8      	lsls	r0, r3, #31
 8003864:	d50f      	bpl.n	8003886 <_printf_float+0x242>
 8003866:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800386a:	4631      	mov	r1, r6
 800386c:	4628      	mov	r0, r5
 800386e:	47b8      	blx	r7
 8003870:	3001      	adds	r0, #1
 8003872:	f43f af42 	beq.w	80036fa <_printf_float+0xb6>
 8003876:	f04f 0900 	mov.w	r9, #0
 800387a:	f108 38ff 	add.w	r8, r8, #4294967295
 800387e:	f104 0a1a 	add.w	sl, r4, #26
 8003882:	45c8      	cmp	r8, r9
 8003884:	dc09      	bgt.n	800389a <_printf_float+0x256>
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	079b      	lsls	r3, r3, #30
 800388a:	f100 8102 	bmi.w	8003a92 <_printf_float+0x44e>
 800388e:	68e0      	ldr	r0, [r4, #12]
 8003890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003892:	4298      	cmp	r0, r3
 8003894:	bfb8      	it	lt
 8003896:	4618      	movlt	r0, r3
 8003898:	e731      	b.n	80036fe <_printf_float+0xba>
 800389a:	2301      	movs	r3, #1
 800389c:	4652      	mov	r2, sl
 800389e:	4631      	mov	r1, r6
 80038a0:	4628      	mov	r0, r5
 80038a2:	47b8      	blx	r7
 80038a4:	3001      	adds	r0, #1
 80038a6:	f43f af28 	beq.w	80036fa <_printf_float+0xb6>
 80038aa:	f109 0901 	add.w	r9, r9, #1
 80038ae:	e7e8      	b.n	8003882 <_printf_float+0x23e>
 80038b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	dc38      	bgt.n	8003928 <_printf_float+0x2e4>
 80038b6:	2301      	movs	r3, #1
 80038b8:	4631      	mov	r1, r6
 80038ba:	4628      	mov	r0, r5
 80038bc:	4a19      	ldr	r2, [pc, #100]	@ (8003924 <_printf_float+0x2e0>)
 80038be:	47b8      	blx	r7
 80038c0:	3001      	adds	r0, #1
 80038c2:	f43f af1a 	beq.w	80036fa <_printf_float+0xb6>
 80038c6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80038ca:	ea59 0303 	orrs.w	r3, r9, r3
 80038ce:	d102      	bne.n	80038d6 <_printf_float+0x292>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	07d9      	lsls	r1, r3, #31
 80038d4:	d5d7      	bpl.n	8003886 <_printf_float+0x242>
 80038d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80038da:	4631      	mov	r1, r6
 80038dc:	4628      	mov	r0, r5
 80038de:	47b8      	blx	r7
 80038e0:	3001      	adds	r0, #1
 80038e2:	f43f af0a 	beq.w	80036fa <_printf_float+0xb6>
 80038e6:	f04f 0a00 	mov.w	sl, #0
 80038ea:	f104 0b1a 	add.w	fp, r4, #26
 80038ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038f0:	425b      	negs	r3, r3
 80038f2:	4553      	cmp	r3, sl
 80038f4:	dc01      	bgt.n	80038fa <_printf_float+0x2b6>
 80038f6:	464b      	mov	r3, r9
 80038f8:	e793      	b.n	8003822 <_printf_float+0x1de>
 80038fa:	2301      	movs	r3, #1
 80038fc:	465a      	mov	r2, fp
 80038fe:	4631      	mov	r1, r6
 8003900:	4628      	mov	r0, r5
 8003902:	47b8      	blx	r7
 8003904:	3001      	adds	r0, #1
 8003906:	f43f aef8 	beq.w	80036fa <_printf_float+0xb6>
 800390a:	f10a 0a01 	add.w	sl, sl, #1
 800390e:	e7ee      	b.n	80038ee <_printf_float+0x2aa>
 8003910:	7fefffff 	.word	0x7fefffff
 8003914:	08005e62 	.word	0x08005e62
 8003918:	08005e66 	.word	0x08005e66
 800391c:	08005e6a 	.word	0x08005e6a
 8003920:	08005e6e 	.word	0x08005e6e
 8003924:	08005e72 	.word	0x08005e72
 8003928:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800392a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800392e:	4553      	cmp	r3, sl
 8003930:	bfa8      	it	ge
 8003932:	4653      	movge	r3, sl
 8003934:	2b00      	cmp	r3, #0
 8003936:	4699      	mov	r9, r3
 8003938:	dc36      	bgt.n	80039a8 <_printf_float+0x364>
 800393a:	f04f 0b00 	mov.w	fp, #0
 800393e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003942:	f104 021a 	add.w	r2, r4, #26
 8003946:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003948:	930a      	str	r3, [sp, #40]	@ 0x28
 800394a:	eba3 0309 	sub.w	r3, r3, r9
 800394e:	455b      	cmp	r3, fp
 8003950:	dc31      	bgt.n	80039b6 <_printf_float+0x372>
 8003952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003954:	459a      	cmp	sl, r3
 8003956:	dc3a      	bgt.n	80039ce <_printf_float+0x38a>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	07da      	lsls	r2, r3, #31
 800395c:	d437      	bmi.n	80039ce <_printf_float+0x38a>
 800395e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003960:	ebaa 0903 	sub.w	r9, sl, r3
 8003964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003966:	ebaa 0303 	sub.w	r3, sl, r3
 800396a:	4599      	cmp	r9, r3
 800396c:	bfa8      	it	ge
 800396e:	4699      	movge	r9, r3
 8003970:	f1b9 0f00 	cmp.w	r9, #0
 8003974:	dc33      	bgt.n	80039de <_printf_float+0x39a>
 8003976:	f04f 0800 	mov.w	r8, #0
 800397a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800397e:	f104 0b1a 	add.w	fp, r4, #26
 8003982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003984:	ebaa 0303 	sub.w	r3, sl, r3
 8003988:	eba3 0309 	sub.w	r3, r3, r9
 800398c:	4543      	cmp	r3, r8
 800398e:	f77f af7a 	ble.w	8003886 <_printf_float+0x242>
 8003992:	2301      	movs	r3, #1
 8003994:	465a      	mov	r2, fp
 8003996:	4631      	mov	r1, r6
 8003998:	4628      	mov	r0, r5
 800399a:	47b8      	blx	r7
 800399c:	3001      	adds	r0, #1
 800399e:	f43f aeac 	beq.w	80036fa <_printf_float+0xb6>
 80039a2:	f108 0801 	add.w	r8, r8, #1
 80039a6:	e7ec      	b.n	8003982 <_printf_float+0x33e>
 80039a8:	4642      	mov	r2, r8
 80039aa:	4631      	mov	r1, r6
 80039ac:	4628      	mov	r0, r5
 80039ae:	47b8      	blx	r7
 80039b0:	3001      	adds	r0, #1
 80039b2:	d1c2      	bne.n	800393a <_printf_float+0x2f6>
 80039b4:	e6a1      	b.n	80036fa <_printf_float+0xb6>
 80039b6:	2301      	movs	r3, #1
 80039b8:	4631      	mov	r1, r6
 80039ba:	4628      	mov	r0, r5
 80039bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80039be:	47b8      	blx	r7
 80039c0:	3001      	adds	r0, #1
 80039c2:	f43f ae9a 	beq.w	80036fa <_printf_float+0xb6>
 80039c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80039c8:	f10b 0b01 	add.w	fp, fp, #1
 80039cc:	e7bb      	b.n	8003946 <_printf_float+0x302>
 80039ce:	4631      	mov	r1, r6
 80039d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039d4:	4628      	mov	r0, r5
 80039d6:	47b8      	blx	r7
 80039d8:	3001      	adds	r0, #1
 80039da:	d1c0      	bne.n	800395e <_printf_float+0x31a>
 80039dc:	e68d      	b.n	80036fa <_printf_float+0xb6>
 80039de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80039e0:	464b      	mov	r3, r9
 80039e2:	4631      	mov	r1, r6
 80039e4:	4628      	mov	r0, r5
 80039e6:	4442      	add	r2, r8
 80039e8:	47b8      	blx	r7
 80039ea:	3001      	adds	r0, #1
 80039ec:	d1c3      	bne.n	8003976 <_printf_float+0x332>
 80039ee:	e684      	b.n	80036fa <_printf_float+0xb6>
 80039f0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80039f4:	f1ba 0f01 	cmp.w	sl, #1
 80039f8:	dc01      	bgt.n	80039fe <_printf_float+0x3ba>
 80039fa:	07db      	lsls	r3, r3, #31
 80039fc:	d536      	bpl.n	8003a6c <_printf_float+0x428>
 80039fe:	2301      	movs	r3, #1
 8003a00:	4642      	mov	r2, r8
 8003a02:	4631      	mov	r1, r6
 8003a04:	4628      	mov	r0, r5
 8003a06:	47b8      	blx	r7
 8003a08:	3001      	adds	r0, #1
 8003a0a:	f43f ae76 	beq.w	80036fa <_printf_float+0xb6>
 8003a0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a12:	4631      	mov	r1, r6
 8003a14:	4628      	mov	r0, r5
 8003a16:	47b8      	blx	r7
 8003a18:	3001      	adds	r0, #1
 8003a1a:	f43f ae6e 	beq.w	80036fa <_printf_float+0xb6>
 8003a1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a22:	2200      	movs	r2, #0
 8003a24:	2300      	movs	r3, #0
 8003a26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a2a:	f7fc ffbd 	bl	80009a8 <__aeabi_dcmpeq>
 8003a2e:	b9c0      	cbnz	r0, 8003a62 <_printf_float+0x41e>
 8003a30:	4653      	mov	r3, sl
 8003a32:	f108 0201 	add.w	r2, r8, #1
 8003a36:	4631      	mov	r1, r6
 8003a38:	4628      	mov	r0, r5
 8003a3a:	47b8      	blx	r7
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d10c      	bne.n	8003a5a <_printf_float+0x416>
 8003a40:	e65b      	b.n	80036fa <_printf_float+0xb6>
 8003a42:	2301      	movs	r3, #1
 8003a44:	465a      	mov	r2, fp
 8003a46:	4631      	mov	r1, r6
 8003a48:	4628      	mov	r0, r5
 8003a4a:	47b8      	blx	r7
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	f43f ae54 	beq.w	80036fa <_printf_float+0xb6>
 8003a52:	f108 0801 	add.w	r8, r8, #1
 8003a56:	45d0      	cmp	r8, sl
 8003a58:	dbf3      	blt.n	8003a42 <_printf_float+0x3fe>
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003a60:	e6e0      	b.n	8003824 <_printf_float+0x1e0>
 8003a62:	f04f 0800 	mov.w	r8, #0
 8003a66:	f104 0b1a 	add.w	fp, r4, #26
 8003a6a:	e7f4      	b.n	8003a56 <_printf_float+0x412>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	4642      	mov	r2, r8
 8003a70:	e7e1      	b.n	8003a36 <_printf_float+0x3f2>
 8003a72:	2301      	movs	r3, #1
 8003a74:	464a      	mov	r2, r9
 8003a76:	4631      	mov	r1, r6
 8003a78:	4628      	mov	r0, r5
 8003a7a:	47b8      	blx	r7
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	f43f ae3c 	beq.w	80036fa <_printf_float+0xb6>
 8003a82:	f108 0801 	add.w	r8, r8, #1
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003a8a:	1a5b      	subs	r3, r3, r1
 8003a8c:	4543      	cmp	r3, r8
 8003a8e:	dcf0      	bgt.n	8003a72 <_printf_float+0x42e>
 8003a90:	e6fd      	b.n	800388e <_printf_float+0x24a>
 8003a92:	f04f 0800 	mov.w	r8, #0
 8003a96:	f104 0919 	add.w	r9, r4, #25
 8003a9a:	e7f4      	b.n	8003a86 <_printf_float+0x442>

08003a9c <_printf_common>:
 8003a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa0:	4616      	mov	r6, r2
 8003aa2:	4698      	mov	r8, r3
 8003aa4:	688a      	ldr	r2, [r1, #8]
 8003aa6:	690b      	ldr	r3, [r1, #16]
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	bfb8      	it	lt
 8003aae:	4613      	movlt	r3, r2
 8003ab0:	6033      	str	r3, [r6, #0]
 8003ab2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003abc:	b10a      	cbz	r2, 8003ac2 <_printf_common+0x26>
 8003abe:	3301      	adds	r3, #1
 8003ac0:	6033      	str	r3, [r6, #0]
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	0699      	lsls	r1, r3, #26
 8003ac6:	bf42      	ittt	mi
 8003ac8:	6833      	ldrmi	r3, [r6, #0]
 8003aca:	3302      	addmi	r3, #2
 8003acc:	6033      	strmi	r3, [r6, #0]
 8003ace:	6825      	ldr	r5, [r4, #0]
 8003ad0:	f015 0506 	ands.w	r5, r5, #6
 8003ad4:	d106      	bne.n	8003ae4 <_printf_common+0x48>
 8003ad6:	f104 0a19 	add.w	sl, r4, #25
 8003ada:	68e3      	ldr	r3, [r4, #12]
 8003adc:	6832      	ldr	r2, [r6, #0]
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	42ab      	cmp	r3, r5
 8003ae2:	dc2b      	bgt.n	8003b3c <_printf_common+0xa0>
 8003ae4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ae8:	6822      	ldr	r2, [r4, #0]
 8003aea:	3b00      	subs	r3, #0
 8003aec:	bf18      	it	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	0692      	lsls	r2, r2, #26
 8003af2:	d430      	bmi.n	8003b56 <_printf_common+0xba>
 8003af4:	4641      	mov	r1, r8
 8003af6:	4638      	mov	r0, r7
 8003af8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003afc:	47c8      	blx	r9
 8003afe:	3001      	adds	r0, #1
 8003b00:	d023      	beq.n	8003b4a <_printf_common+0xae>
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	6922      	ldr	r2, [r4, #16]
 8003b06:	f003 0306 	and.w	r3, r3, #6
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	bf14      	ite	ne
 8003b0e:	2500      	movne	r5, #0
 8003b10:	6833      	ldreq	r3, [r6, #0]
 8003b12:	f04f 0600 	mov.w	r6, #0
 8003b16:	bf08      	it	eq
 8003b18:	68e5      	ldreq	r5, [r4, #12]
 8003b1a:	f104 041a 	add.w	r4, r4, #26
 8003b1e:	bf08      	it	eq
 8003b20:	1aed      	subeq	r5, r5, r3
 8003b22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b26:	bf08      	it	eq
 8003b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	bfc4      	itt	gt
 8003b30:	1a9b      	subgt	r3, r3, r2
 8003b32:	18ed      	addgt	r5, r5, r3
 8003b34:	42b5      	cmp	r5, r6
 8003b36:	d11a      	bne.n	8003b6e <_printf_common+0xd2>
 8003b38:	2000      	movs	r0, #0
 8003b3a:	e008      	b.n	8003b4e <_printf_common+0xb2>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	4652      	mov	r2, sl
 8003b40:	4641      	mov	r1, r8
 8003b42:	4638      	mov	r0, r7
 8003b44:	47c8      	blx	r9
 8003b46:	3001      	adds	r0, #1
 8003b48:	d103      	bne.n	8003b52 <_printf_common+0xb6>
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b52:	3501      	adds	r5, #1
 8003b54:	e7c1      	b.n	8003ada <_printf_common+0x3e>
 8003b56:	2030      	movs	r0, #48	@ 0x30
 8003b58:	18e1      	adds	r1, r4, r3
 8003b5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b64:	4422      	add	r2, r4
 8003b66:	3302      	adds	r3, #2
 8003b68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b6c:	e7c2      	b.n	8003af4 <_printf_common+0x58>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4622      	mov	r2, r4
 8003b72:	4641      	mov	r1, r8
 8003b74:	4638      	mov	r0, r7
 8003b76:	47c8      	blx	r9
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d0e6      	beq.n	8003b4a <_printf_common+0xae>
 8003b7c:	3601      	adds	r6, #1
 8003b7e:	e7d9      	b.n	8003b34 <_printf_common+0x98>

08003b80 <_printf_i>:
 8003b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b84:	7e0f      	ldrb	r7, [r1, #24]
 8003b86:	4691      	mov	r9, r2
 8003b88:	2f78      	cmp	r7, #120	@ 0x78
 8003b8a:	4680      	mov	r8, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	469a      	mov	sl, r3
 8003b90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b96:	d807      	bhi.n	8003ba8 <_printf_i+0x28>
 8003b98:	2f62      	cmp	r7, #98	@ 0x62
 8003b9a:	d80a      	bhi.n	8003bb2 <_printf_i+0x32>
 8003b9c:	2f00      	cmp	r7, #0
 8003b9e:	f000 80d3 	beq.w	8003d48 <_printf_i+0x1c8>
 8003ba2:	2f58      	cmp	r7, #88	@ 0x58
 8003ba4:	f000 80ba 	beq.w	8003d1c <_printf_i+0x19c>
 8003ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bb0:	e03a      	b.n	8003c28 <_printf_i+0xa8>
 8003bb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bb6:	2b15      	cmp	r3, #21
 8003bb8:	d8f6      	bhi.n	8003ba8 <_printf_i+0x28>
 8003bba:	a101      	add	r1, pc, #4	@ (adr r1, 8003bc0 <_printf_i+0x40>)
 8003bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bc0:	08003c19 	.word	0x08003c19
 8003bc4:	08003c2d 	.word	0x08003c2d
 8003bc8:	08003ba9 	.word	0x08003ba9
 8003bcc:	08003ba9 	.word	0x08003ba9
 8003bd0:	08003ba9 	.word	0x08003ba9
 8003bd4:	08003ba9 	.word	0x08003ba9
 8003bd8:	08003c2d 	.word	0x08003c2d
 8003bdc:	08003ba9 	.word	0x08003ba9
 8003be0:	08003ba9 	.word	0x08003ba9
 8003be4:	08003ba9 	.word	0x08003ba9
 8003be8:	08003ba9 	.word	0x08003ba9
 8003bec:	08003d2f 	.word	0x08003d2f
 8003bf0:	08003c57 	.word	0x08003c57
 8003bf4:	08003ce9 	.word	0x08003ce9
 8003bf8:	08003ba9 	.word	0x08003ba9
 8003bfc:	08003ba9 	.word	0x08003ba9
 8003c00:	08003d51 	.word	0x08003d51
 8003c04:	08003ba9 	.word	0x08003ba9
 8003c08:	08003c57 	.word	0x08003c57
 8003c0c:	08003ba9 	.word	0x08003ba9
 8003c10:	08003ba9 	.word	0x08003ba9
 8003c14:	08003cf1 	.word	0x08003cf1
 8003c18:	6833      	ldr	r3, [r6, #0]
 8003c1a:	1d1a      	adds	r2, r3, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6032      	str	r2, [r6, #0]
 8003c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e09e      	b.n	8003d6a <_printf_i+0x1ea>
 8003c2c:	6833      	ldr	r3, [r6, #0]
 8003c2e:	6820      	ldr	r0, [r4, #0]
 8003c30:	1d19      	adds	r1, r3, #4
 8003c32:	6031      	str	r1, [r6, #0]
 8003c34:	0606      	lsls	r6, r0, #24
 8003c36:	d501      	bpl.n	8003c3c <_printf_i+0xbc>
 8003c38:	681d      	ldr	r5, [r3, #0]
 8003c3a:	e003      	b.n	8003c44 <_printf_i+0xc4>
 8003c3c:	0645      	lsls	r5, r0, #25
 8003c3e:	d5fb      	bpl.n	8003c38 <_printf_i+0xb8>
 8003c40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c44:	2d00      	cmp	r5, #0
 8003c46:	da03      	bge.n	8003c50 <_printf_i+0xd0>
 8003c48:	232d      	movs	r3, #45	@ 0x2d
 8003c4a:	426d      	negs	r5, r5
 8003c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c50:	230a      	movs	r3, #10
 8003c52:	4859      	ldr	r0, [pc, #356]	@ (8003db8 <_printf_i+0x238>)
 8003c54:	e011      	b.n	8003c7a <_printf_i+0xfa>
 8003c56:	6821      	ldr	r1, [r4, #0]
 8003c58:	6833      	ldr	r3, [r6, #0]
 8003c5a:	0608      	lsls	r0, r1, #24
 8003c5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c60:	d402      	bmi.n	8003c68 <_printf_i+0xe8>
 8003c62:	0649      	lsls	r1, r1, #25
 8003c64:	bf48      	it	mi
 8003c66:	b2ad      	uxthmi	r5, r5
 8003c68:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	bf14      	ite	ne
 8003c6e:	230a      	movne	r3, #10
 8003c70:	2308      	moveq	r3, #8
 8003c72:	4851      	ldr	r0, [pc, #324]	@ (8003db8 <_printf_i+0x238>)
 8003c74:	2100      	movs	r1, #0
 8003c76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c7a:	6866      	ldr	r6, [r4, #4]
 8003c7c:	2e00      	cmp	r6, #0
 8003c7e:	bfa8      	it	ge
 8003c80:	6821      	ldrge	r1, [r4, #0]
 8003c82:	60a6      	str	r6, [r4, #8]
 8003c84:	bfa4      	itt	ge
 8003c86:	f021 0104 	bicge.w	r1, r1, #4
 8003c8a:	6021      	strge	r1, [r4, #0]
 8003c8c:	b90d      	cbnz	r5, 8003c92 <_printf_i+0x112>
 8003c8e:	2e00      	cmp	r6, #0
 8003c90:	d04b      	beq.n	8003d2a <_printf_i+0x1aa>
 8003c92:	4616      	mov	r6, r2
 8003c94:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c98:	fb03 5711 	mls	r7, r3, r1, r5
 8003c9c:	5dc7      	ldrb	r7, [r0, r7]
 8003c9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ca2:	462f      	mov	r7, r5
 8003ca4:	42bb      	cmp	r3, r7
 8003ca6:	460d      	mov	r5, r1
 8003ca8:	d9f4      	bls.n	8003c94 <_printf_i+0x114>
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d10b      	bne.n	8003cc6 <_printf_i+0x146>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	07df      	lsls	r7, r3, #31
 8003cb2:	d508      	bpl.n	8003cc6 <_printf_i+0x146>
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	6861      	ldr	r1, [r4, #4]
 8003cb8:	4299      	cmp	r1, r3
 8003cba:	bfde      	ittt	le
 8003cbc:	2330      	movle	r3, #48	@ 0x30
 8003cbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cc6:	1b92      	subs	r2, r2, r6
 8003cc8:	6122      	str	r2, [r4, #16]
 8003cca:	464b      	mov	r3, r9
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4640      	mov	r0, r8
 8003cd0:	f8cd a000 	str.w	sl, [sp]
 8003cd4:	aa03      	add	r2, sp, #12
 8003cd6:	f7ff fee1 	bl	8003a9c <_printf_common>
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d14a      	bne.n	8003d74 <_printf_i+0x1f4>
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce2:	b004      	add	sp, #16
 8003ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	f043 0320 	orr.w	r3, r3, #32
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	2778      	movs	r7, #120	@ 0x78
 8003cf2:	4832      	ldr	r0, [pc, #200]	@ (8003dbc <_printf_i+0x23c>)
 8003cf4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	6831      	ldr	r1, [r6, #0]
 8003cfc:	061f      	lsls	r7, r3, #24
 8003cfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d02:	d402      	bmi.n	8003d0a <_printf_i+0x18a>
 8003d04:	065f      	lsls	r7, r3, #25
 8003d06:	bf48      	it	mi
 8003d08:	b2ad      	uxthmi	r5, r5
 8003d0a:	6031      	str	r1, [r6, #0]
 8003d0c:	07d9      	lsls	r1, r3, #31
 8003d0e:	bf44      	itt	mi
 8003d10:	f043 0320 	orrmi.w	r3, r3, #32
 8003d14:	6023      	strmi	r3, [r4, #0]
 8003d16:	b11d      	cbz	r5, 8003d20 <_printf_i+0x1a0>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	e7ab      	b.n	8003c74 <_printf_i+0xf4>
 8003d1c:	4826      	ldr	r0, [pc, #152]	@ (8003db8 <_printf_i+0x238>)
 8003d1e:	e7e9      	b.n	8003cf4 <_printf_i+0x174>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	f023 0320 	bic.w	r3, r3, #32
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	e7f6      	b.n	8003d18 <_printf_i+0x198>
 8003d2a:	4616      	mov	r6, r2
 8003d2c:	e7bd      	b.n	8003caa <_printf_i+0x12a>
 8003d2e:	6833      	ldr	r3, [r6, #0]
 8003d30:	6825      	ldr	r5, [r4, #0]
 8003d32:	1d18      	adds	r0, r3, #4
 8003d34:	6961      	ldr	r1, [r4, #20]
 8003d36:	6030      	str	r0, [r6, #0]
 8003d38:	062e      	lsls	r6, r5, #24
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	d501      	bpl.n	8003d42 <_printf_i+0x1c2>
 8003d3e:	6019      	str	r1, [r3, #0]
 8003d40:	e002      	b.n	8003d48 <_printf_i+0x1c8>
 8003d42:	0668      	lsls	r0, r5, #25
 8003d44:	d5fb      	bpl.n	8003d3e <_printf_i+0x1be>
 8003d46:	8019      	strh	r1, [r3, #0]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4616      	mov	r6, r2
 8003d4c:	6123      	str	r3, [r4, #16]
 8003d4e:	e7bc      	b.n	8003cca <_printf_i+0x14a>
 8003d50:	6833      	ldr	r3, [r6, #0]
 8003d52:	2100      	movs	r1, #0
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	6032      	str	r2, [r6, #0]
 8003d58:	681e      	ldr	r6, [r3, #0]
 8003d5a:	6862      	ldr	r2, [r4, #4]
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f000 f9b4 	bl	80040ca <memchr>
 8003d62:	b108      	cbz	r0, 8003d68 <_printf_i+0x1e8>
 8003d64:	1b80      	subs	r0, r0, r6
 8003d66:	6060      	str	r0, [r4, #4]
 8003d68:	6863      	ldr	r3, [r4, #4]
 8003d6a:	6123      	str	r3, [r4, #16]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d72:	e7aa      	b.n	8003cca <_printf_i+0x14a>
 8003d74:	4632      	mov	r2, r6
 8003d76:	4649      	mov	r1, r9
 8003d78:	4640      	mov	r0, r8
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	47d0      	blx	sl
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0ad      	beq.n	8003cde <_printf_i+0x15e>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	079b      	lsls	r3, r3, #30
 8003d86:	d413      	bmi.n	8003db0 <_printf_i+0x230>
 8003d88:	68e0      	ldr	r0, [r4, #12]
 8003d8a:	9b03      	ldr	r3, [sp, #12]
 8003d8c:	4298      	cmp	r0, r3
 8003d8e:	bfb8      	it	lt
 8003d90:	4618      	movlt	r0, r3
 8003d92:	e7a6      	b.n	8003ce2 <_printf_i+0x162>
 8003d94:	2301      	movs	r3, #1
 8003d96:	4632      	mov	r2, r6
 8003d98:	4649      	mov	r1, r9
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	47d0      	blx	sl
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d09d      	beq.n	8003cde <_printf_i+0x15e>
 8003da2:	3501      	adds	r5, #1
 8003da4:	68e3      	ldr	r3, [r4, #12]
 8003da6:	9903      	ldr	r1, [sp, #12]
 8003da8:	1a5b      	subs	r3, r3, r1
 8003daa:	42ab      	cmp	r3, r5
 8003dac:	dcf2      	bgt.n	8003d94 <_printf_i+0x214>
 8003dae:	e7eb      	b.n	8003d88 <_printf_i+0x208>
 8003db0:	2500      	movs	r5, #0
 8003db2:	f104 0619 	add.w	r6, r4, #25
 8003db6:	e7f5      	b.n	8003da4 <_printf_i+0x224>
 8003db8:	08005e74 	.word	0x08005e74
 8003dbc:	08005e85 	.word	0x08005e85

08003dc0 <std>:
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8003dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dce:	6083      	str	r3, [r0, #8]
 8003dd0:	8181      	strh	r1, [r0, #12]
 8003dd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003dd4:	81c2      	strh	r2, [r0, #14]
 8003dd6:	6183      	str	r3, [r0, #24]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	2208      	movs	r2, #8
 8003ddc:	305c      	adds	r0, #92	@ 0x5c
 8003dde:	f000 f8f4 	bl	8003fca <memset>
 8003de2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e18 <std+0x58>)
 8003de4:	6224      	str	r4, [r4, #32]
 8003de6:	6263      	str	r3, [r4, #36]	@ 0x24
 8003de8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <std+0x5c>)
 8003dea:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003dec:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <std+0x60>)
 8003dee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003df0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <std+0x64>)
 8003df2:	6323      	str	r3, [r4, #48]	@ 0x30
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <std+0x68>)
 8003df6:	429c      	cmp	r4, r3
 8003df8:	d006      	beq.n	8003e08 <std+0x48>
 8003dfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003dfe:	4294      	cmp	r4, r2
 8003e00:	d002      	beq.n	8003e08 <std+0x48>
 8003e02:	33d0      	adds	r3, #208	@ 0xd0
 8003e04:	429c      	cmp	r4, r3
 8003e06:	d105      	bne.n	8003e14 <std+0x54>
 8003e08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e10:	f000 b958 	b.w	80040c4 <__retarget_lock_init_recursive>
 8003e14:	bd10      	pop	{r4, pc}
 8003e16:	bf00      	nop
 8003e18:	08003f45 	.word	0x08003f45
 8003e1c:	08003f67 	.word	0x08003f67
 8003e20:	08003f9f 	.word	0x08003f9f
 8003e24:	08003fc3 	.word	0x08003fc3
 8003e28:	200002cc 	.word	0x200002cc

08003e2c <stdio_exit_handler>:
 8003e2c:	4a02      	ldr	r2, [pc, #8]	@ (8003e38 <stdio_exit_handler+0xc>)
 8003e2e:	4903      	ldr	r1, [pc, #12]	@ (8003e3c <stdio_exit_handler+0x10>)
 8003e30:	4803      	ldr	r0, [pc, #12]	@ (8003e40 <stdio_exit_handler+0x14>)
 8003e32:	f000 b869 	b.w	8003f08 <_fwalk_sglue>
 8003e36:	bf00      	nop
 8003e38:	20000024 	.word	0x20000024
 8003e3c:	08005785 	.word	0x08005785
 8003e40:	20000034 	.word	0x20000034

08003e44 <cleanup_stdio>:
 8003e44:	6841      	ldr	r1, [r0, #4]
 8003e46:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <cleanup_stdio+0x34>)
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	d001      	beq.n	8003e54 <cleanup_stdio+0x10>
 8003e50:	f001 fc98 	bl	8005784 <_fflush_r>
 8003e54:	68a1      	ldr	r1, [r4, #8]
 8003e56:	4b09      	ldr	r3, [pc, #36]	@ (8003e7c <cleanup_stdio+0x38>)
 8003e58:	4299      	cmp	r1, r3
 8003e5a:	d002      	beq.n	8003e62 <cleanup_stdio+0x1e>
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f001 fc91 	bl	8005784 <_fflush_r>
 8003e62:	68e1      	ldr	r1, [r4, #12]
 8003e64:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <cleanup_stdio+0x3c>)
 8003e66:	4299      	cmp	r1, r3
 8003e68:	d004      	beq.n	8003e74 <cleanup_stdio+0x30>
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e70:	f001 bc88 	b.w	8005784 <_fflush_r>
 8003e74:	bd10      	pop	{r4, pc}
 8003e76:	bf00      	nop
 8003e78:	200002cc 	.word	0x200002cc
 8003e7c:	20000334 	.word	0x20000334
 8003e80:	2000039c 	.word	0x2000039c

08003e84 <global_stdio_init.part.0>:
 8003e84:	b510      	push	{r4, lr}
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <global_stdio_init.part.0+0x30>)
 8003e88:	4c0b      	ldr	r4, [pc, #44]	@ (8003eb8 <global_stdio_init.part.0+0x34>)
 8003e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003ebc <global_stdio_init.part.0+0x38>)
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	2104      	movs	r1, #4
 8003e92:	2200      	movs	r2, #0
 8003e94:	f7ff ff94 	bl	8003dc0 <std>
 8003e98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	2109      	movs	r1, #9
 8003ea0:	f7ff ff8e 	bl	8003dc0 <std>
 8003ea4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eae:	2112      	movs	r1, #18
 8003eb0:	f7ff bf86 	b.w	8003dc0 <std>
 8003eb4:	20000404 	.word	0x20000404
 8003eb8:	200002cc 	.word	0x200002cc
 8003ebc:	08003e2d 	.word	0x08003e2d

08003ec0 <__sfp_lock_acquire>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	@ (8003ec8 <__sfp_lock_acquire+0x8>)
 8003ec2:	f000 b900 	b.w	80040c6 <__retarget_lock_acquire_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	2000040d 	.word	0x2000040d

08003ecc <__sfp_lock_release>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	@ (8003ed4 <__sfp_lock_release+0x8>)
 8003ece:	f000 b8fb 	b.w	80040c8 <__retarget_lock_release_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	2000040d 	.word	0x2000040d

08003ed8 <__sinit>:
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	4604      	mov	r4, r0
 8003edc:	f7ff fff0 	bl	8003ec0 <__sfp_lock_acquire>
 8003ee0:	6a23      	ldr	r3, [r4, #32]
 8003ee2:	b11b      	cbz	r3, 8003eec <__sinit+0x14>
 8003ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ee8:	f7ff bff0 	b.w	8003ecc <__sfp_lock_release>
 8003eec:	4b04      	ldr	r3, [pc, #16]	@ (8003f00 <__sinit+0x28>)
 8003eee:	6223      	str	r3, [r4, #32]
 8003ef0:	4b04      	ldr	r3, [pc, #16]	@ (8003f04 <__sinit+0x2c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f5      	bne.n	8003ee4 <__sinit+0xc>
 8003ef8:	f7ff ffc4 	bl	8003e84 <global_stdio_init.part.0>
 8003efc:	e7f2      	b.n	8003ee4 <__sinit+0xc>
 8003efe:	bf00      	nop
 8003f00:	08003e45 	.word	0x08003e45
 8003f04:	20000404 	.word	0x20000404

08003f08 <_fwalk_sglue>:
 8003f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	4688      	mov	r8, r1
 8003f10:	4614      	mov	r4, r2
 8003f12:	2600      	movs	r6, #0
 8003f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f18:	f1b9 0901 	subs.w	r9, r9, #1
 8003f1c:	d505      	bpl.n	8003f2a <_fwalk_sglue+0x22>
 8003f1e:	6824      	ldr	r4, [r4, #0]
 8003f20:	2c00      	cmp	r4, #0
 8003f22:	d1f7      	bne.n	8003f14 <_fwalk_sglue+0xc>
 8003f24:	4630      	mov	r0, r6
 8003f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f2a:	89ab      	ldrh	r3, [r5, #12]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d907      	bls.n	8003f40 <_fwalk_sglue+0x38>
 8003f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f34:	3301      	adds	r3, #1
 8003f36:	d003      	beq.n	8003f40 <_fwalk_sglue+0x38>
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	47c0      	blx	r8
 8003f3e:	4306      	orrs	r6, r0
 8003f40:	3568      	adds	r5, #104	@ 0x68
 8003f42:	e7e9      	b.n	8003f18 <_fwalk_sglue+0x10>

08003f44 <__sread>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	460c      	mov	r4, r1
 8003f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4c:	f000 f86c 	bl	8004028 <_read_r>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	bfab      	itete	ge
 8003f54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f56:	89a3      	ldrhlt	r3, [r4, #12]
 8003f58:	181b      	addge	r3, r3, r0
 8003f5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f5e:	bfac      	ite	ge
 8003f60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f62:	81a3      	strhlt	r3, [r4, #12]
 8003f64:	bd10      	pop	{r4, pc}

08003f66 <__swrite>:
 8003f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6a:	461f      	mov	r7, r3
 8003f6c:	898b      	ldrh	r3, [r1, #12]
 8003f6e:	4605      	mov	r5, r0
 8003f70:	05db      	lsls	r3, r3, #23
 8003f72:	460c      	mov	r4, r1
 8003f74:	4616      	mov	r6, r2
 8003f76:	d505      	bpl.n	8003f84 <__swrite+0x1e>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f80:	f000 f840 	bl	8004004 <_lseek_r>
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	4632      	mov	r2, r6
 8003f88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f8c:	81a3      	strh	r3, [r4, #12]
 8003f8e:	4628      	mov	r0, r5
 8003f90:	463b      	mov	r3, r7
 8003f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9a:	f000 b857 	b.w	800404c <_write_r>

08003f9e <__sseek>:
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa6:	f000 f82d 	bl	8004004 <_lseek_r>
 8003faa:	1c43      	adds	r3, r0, #1
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	bf15      	itete	ne
 8003fb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003fb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003fba:	81a3      	strheq	r3, [r4, #12]
 8003fbc:	bf18      	it	ne
 8003fbe:	81a3      	strhne	r3, [r4, #12]
 8003fc0:	bd10      	pop	{r4, pc}

08003fc2 <__sclose>:
 8003fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc6:	f000 b80d 	b.w	8003fe4 <_close_r>

08003fca <memset>:
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4402      	add	r2, r0
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d100      	bne.n	8003fd4 <memset+0xa>
 8003fd2:	4770      	bx	lr
 8003fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd8:	e7f9      	b.n	8003fce <memset+0x4>
	...

08003fdc <_localeconv_r>:
 8003fdc:	4800      	ldr	r0, [pc, #0]	@ (8003fe0 <_localeconv_r+0x4>)
 8003fde:	4770      	bx	lr
 8003fe0:	20000170 	.word	0x20000170

08003fe4 <_close_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	4d05      	ldr	r5, [pc, #20]	@ (8004000 <_close_r+0x1c>)
 8003fea:	4604      	mov	r4, r0
 8003fec:	4608      	mov	r0, r1
 8003fee:	602b      	str	r3, [r5, #0]
 8003ff0:	f7fd fcdd 	bl	80019ae <_close>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_close_r+0x1a>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_close_r+0x1a>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	20000408 	.word	0x20000408

08004004 <_lseek_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4604      	mov	r4, r0
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	2200      	movs	r2, #0
 800400e:	4d05      	ldr	r5, [pc, #20]	@ (8004024 <_lseek_r+0x20>)
 8004010:	602a      	str	r2, [r5, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	f7fd fcef 	bl	80019f6 <_lseek>
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	d102      	bne.n	8004022 <_lseek_r+0x1e>
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	b103      	cbz	r3, 8004022 <_lseek_r+0x1e>
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	20000408 	.word	0x20000408

08004028 <_read_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4604      	mov	r4, r0
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	2200      	movs	r2, #0
 8004032:	4d05      	ldr	r5, [pc, #20]	@ (8004048 <_read_r+0x20>)
 8004034:	602a      	str	r2, [r5, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	f7fd fc80 	bl	800193c <_read>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d102      	bne.n	8004046 <_read_r+0x1e>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	b103      	cbz	r3, 8004046 <_read_r+0x1e>
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	bd38      	pop	{r3, r4, r5, pc}
 8004048:	20000408 	.word	0x20000408

0800404c <_write_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4604      	mov	r4, r0
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	2200      	movs	r2, #0
 8004056:	4d05      	ldr	r5, [pc, #20]	@ (800406c <_write_r+0x20>)
 8004058:	602a      	str	r2, [r5, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	f7fd fc8b 	bl	8001976 <_write>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	d102      	bne.n	800406a <_write_r+0x1e>
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	b103      	cbz	r3, 800406a <_write_r+0x1e>
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	20000408 	.word	0x20000408

08004070 <__errno>:
 8004070:	4b01      	ldr	r3, [pc, #4]	@ (8004078 <__errno+0x8>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000030 	.word	0x20000030

0800407c <__libc_init_array>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	2600      	movs	r6, #0
 8004080:	4d0c      	ldr	r5, [pc, #48]	@ (80040b4 <__libc_init_array+0x38>)
 8004082:	4c0d      	ldr	r4, [pc, #52]	@ (80040b8 <__libc_init_array+0x3c>)
 8004084:	1b64      	subs	r4, r4, r5
 8004086:	10a4      	asrs	r4, r4, #2
 8004088:	42a6      	cmp	r6, r4
 800408a:	d109      	bne.n	80040a0 <__libc_init_array+0x24>
 800408c:	f001 fec6 	bl	8005e1c <_init>
 8004090:	2600      	movs	r6, #0
 8004092:	4d0a      	ldr	r5, [pc, #40]	@ (80040bc <__libc_init_array+0x40>)
 8004094:	4c0a      	ldr	r4, [pc, #40]	@ (80040c0 <__libc_init_array+0x44>)
 8004096:	1b64      	subs	r4, r4, r5
 8004098:	10a4      	asrs	r4, r4, #2
 800409a:	42a6      	cmp	r6, r4
 800409c:	d105      	bne.n	80040aa <__libc_init_array+0x2e>
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a4:	4798      	blx	r3
 80040a6:	3601      	adds	r6, #1
 80040a8:	e7ee      	b.n	8004088 <__libc_init_array+0xc>
 80040aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ae:	4798      	blx	r3
 80040b0:	3601      	adds	r6, #1
 80040b2:	e7f2      	b.n	800409a <__libc_init_array+0x1e>
 80040b4:	080061d8 	.word	0x080061d8
 80040b8:	080061d8 	.word	0x080061d8
 80040bc:	080061d8 	.word	0x080061d8
 80040c0:	080061dc 	.word	0x080061dc

080040c4 <__retarget_lock_init_recursive>:
 80040c4:	4770      	bx	lr

080040c6 <__retarget_lock_acquire_recursive>:
 80040c6:	4770      	bx	lr

080040c8 <__retarget_lock_release_recursive>:
 80040c8:	4770      	bx	lr

080040ca <memchr>:
 80040ca:	4603      	mov	r3, r0
 80040cc:	b510      	push	{r4, lr}
 80040ce:	b2c9      	uxtb	r1, r1
 80040d0:	4402      	add	r2, r0
 80040d2:	4293      	cmp	r3, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	d101      	bne.n	80040dc <memchr+0x12>
 80040d8:	2000      	movs	r0, #0
 80040da:	e003      	b.n	80040e4 <memchr+0x1a>
 80040dc:	7804      	ldrb	r4, [r0, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	428c      	cmp	r4, r1
 80040e2:	d1f6      	bne.n	80040d2 <memchr+0x8>
 80040e4:	bd10      	pop	{r4, pc}

080040e6 <quorem>:
 80040e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ea:	6903      	ldr	r3, [r0, #16]
 80040ec:	690c      	ldr	r4, [r1, #16]
 80040ee:	4607      	mov	r7, r0
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	db7e      	blt.n	80041f2 <quorem+0x10c>
 80040f4:	3c01      	subs	r4, #1
 80040f6:	00a3      	lsls	r3, r4, #2
 80040f8:	f100 0514 	add.w	r5, r0, #20
 80040fc:	f101 0814 	add.w	r8, r1, #20
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800410c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004110:	3301      	adds	r3, #1
 8004112:	429a      	cmp	r2, r3
 8004114:	fbb2 f6f3 	udiv	r6, r2, r3
 8004118:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800411c:	d32e      	bcc.n	800417c <quorem+0x96>
 800411e:	f04f 0a00 	mov.w	sl, #0
 8004122:	46c4      	mov	ip, r8
 8004124:	46ae      	mov	lr, r5
 8004126:	46d3      	mov	fp, sl
 8004128:	f85c 3b04 	ldr.w	r3, [ip], #4
 800412c:	b298      	uxth	r0, r3
 800412e:	fb06 a000 	mla	r0, r6, r0, sl
 8004132:	0c1b      	lsrs	r3, r3, #16
 8004134:	0c02      	lsrs	r2, r0, #16
 8004136:	fb06 2303 	mla	r3, r6, r3, r2
 800413a:	f8de 2000 	ldr.w	r2, [lr]
 800413e:	b280      	uxth	r0, r0
 8004140:	b292      	uxth	r2, r2
 8004142:	1a12      	subs	r2, r2, r0
 8004144:	445a      	add	r2, fp
 8004146:	f8de 0000 	ldr.w	r0, [lr]
 800414a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800414e:	b29b      	uxth	r3, r3
 8004150:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004154:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004158:	b292      	uxth	r2, r2
 800415a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800415e:	45e1      	cmp	r9, ip
 8004160:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004164:	f84e 2b04 	str.w	r2, [lr], #4
 8004168:	d2de      	bcs.n	8004128 <quorem+0x42>
 800416a:	9b00      	ldr	r3, [sp, #0]
 800416c:	58eb      	ldr	r3, [r5, r3]
 800416e:	b92b      	cbnz	r3, 800417c <quorem+0x96>
 8004170:	9b01      	ldr	r3, [sp, #4]
 8004172:	3b04      	subs	r3, #4
 8004174:	429d      	cmp	r5, r3
 8004176:	461a      	mov	r2, r3
 8004178:	d32f      	bcc.n	80041da <quorem+0xf4>
 800417a:	613c      	str	r4, [r7, #16]
 800417c:	4638      	mov	r0, r7
 800417e:	f001 f979 	bl	8005474 <__mcmp>
 8004182:	2800      	cmp	r0, #0
 8004184:	db25      	blt.n	80041d2 <quorem+0xec>
 8004186:	4629      	mov	r1, r5
 8004188:	2000      	movs	r0, #0
 800418a:	f858 2b04 	ldr.w	r2, [r8], #4
 800418e:	f8d1 c000 	ldr.w	ip, [r1]
 8004192:	fa1f fe82 	uxth.w	lr, r2
 8004196:	fa1f f38c 	uxth.w	r3, ip
 800419a:	eba3 030e 	sub.w	r3, r3, lr
 800419e:	4403      	add	r3, r0
 80041a0:	0c12      	lsrs	r2, r2, #16
 80041a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80041a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041b0:	45c1      	cmp	r9, r8
 80041b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80041b6:	f841 3b04 	str.w	r3, [r1], #4
 80041ba:	d2e6      	bcs.n	800418a <quorem+0xa4>
 80041bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041c4:	b922      	cbnz	r2, 80041d0 <quorem+0xea>
 80041c6:	3b04      	subs	r3, #4
 80041c8:	429d      	cmp	r5, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	d30b      	bcc.n	80041e6 <quorem+0x100>
 80041ce:	613c      	str	r4, [r7, #16]
 80041d0:	3601      	adds	r6, #1
 80041d2:	4630      	mov	r0, r6
 80041d4:	b003      	add	sp, #12
 80041d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	3b04      	subs	r3, #4
 80041de:	2a00      	cmp	r2, #0
 80041e0:	d1cb      	bne.n	800417a <quorem+0x94>
 80041e2:	3c01      	subs	r4, #1
 80041e4:	e7c6      	b.n	8004174 <quorem+0x8e>
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	3b04      	subs	r3, #4
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	d1ef      	bne.n	80041ce <quorem+0xe8>
 80041ee:	3c01      	subs	r4, #1
 80041f0:	e7ea      	b.n	80041c8 <quorem+0xe2>
 80041f2:	2000      	movs	r0, #0
 80041f4:	e7ee      	b.n	80041d4 <quorem+0xee>
	...

080041f8 <_dtoa_r>:
 80041f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	4614      	mov	r4, r2
 80041fe:	461d      	mov	r5, r3
 8004200:	69c7      	ldr	r7, [r0, #28]
 8004202:	b097      	sub	sp, #92	@ 0x5c
 8004204:	4683      	mov	fp, r0
 8004206:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800420a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800420c:	b97f      	cbnz	r7, 800422e <_dtoa_r+0x36>
 800420e:	2010      	movs	r0, #16
 8004210:	f000 fe02 	bl	8004e18 <malloc>
 8004214:	4602      	mov	r2, r0
 8004216:	f8cb 001c 	str.w	r0, [fp, #28]
 800421a:	b920      	cbnz	r0, 8004226 <_dtoa_r+0x2e>
 800421c:	21ef      	movs	r1, #239	@ 0xef
 800421e:	4ba8      	ldr	r3, [pc, #672]	@ (80044c0 <_dtoa_r+0x2c8>)
 8004220:	48a8      	ldr	r0, [pc, #672]	@ (80044c4 <_dtoa_r+0x2cc>)
 8004222:	f001 faf5 	bl	8005810 <__assert_func>
 8004226:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800422a:	6007      	str	r7, [r0, #0]
 800422c:	60c7      	str	r7, [r0, #12]
 800422e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	b159      	cbz	r1, 800424e <_dtoa_r+0x56>
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	2301      	movs	r3, #1
 800423a:	4093      	lsls	r3, r2
 800423c:	604a      	str	r2, [r1, #4]
 800423e:	608b      	str	r3, [r1, #8]
 8004240:	4658      	mov	r0, fp
 8004242:	f000 fedf 	bl	8005004 <_Bfree>
 8004246:	2200      	movs	r2, #0
 8004248:	f8db 301c 	ldr.w	r3, [fp, #28]
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	1e2b      	subs	r3, r5, #0
 8004250:	bfaf      	iteee	ge
 8004252:	2300      	movge	r3, #0
 8004254:	2201      	movlt	r2, #1
 8004256:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800425a:	9303      	strlt	r3, [sp, #12]
 800425c:	bfa8      	it	ge
 800425e:	6033      	strge	r3, [r6, #0]
 8004260:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004264:	4b98      	ldr	r3, [pc, #608]	@ (80044c8 <_dtoa_r+0x2d0>)
 8004266:	bfb8      	it	lt
 8004268:	6032      	strlt	r2, [r6, #0]
 800426a:	ea33 0308 	bics.w	r3, r3, r8
 800426e:	d112      	bne.n	8004296 <_dtoa_r+0x9e>
 8004270:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004274:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800427c:	4323      	orrs	r3, r4
 800427e:	f000 8550 	beq.w	8004d22 <_dtoa_r+0xb2a>
 8004282:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004284:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80044cc <_dtoa_r+0x2d4>
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8552 	beq.w	8004d32 <_dtoa_r+0xb3a>
 800428e:	f10a 0303 	add.w	r3, sl, #3
 8004292:	f000 bd4c 	b.w	8004d2e <_dtoa_r+0xb36>
 8004296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800429a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800429e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042a2:	2200      	movs	r2, #0
 80042a4:	2300      	movs	r3, #0
 80042a6:	f7fc fb7f 	bl	80009a8 <__aeabi_dcmpeq>
 80042aa:	4607      	mov	r7, r0
 80042ac:	b158      	cbz	r0, 80042c6 <_dtoa_r+0xce>
 80042ae:	2301      	movs	r3, #1
 80042b0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80042b6:	b113      	cbz	r3, 80042be <_dtoa_r+0xc6>
 80042b8:	4b85      	ldr	r3, [pc, #532]	@ (80044d0 <_dtoa_r+0x2d8>)
 80042ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80044d4 <_dtoa_r+0x2dc>
 80042c2:	f000 bd36 	b.w	8004d32 <_dtoa_r+0xb3a>
 80042c6:	ab14      	add	r3, sp, #80	@ 0x50
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	ab15      	add	r3, sp, #84	@ 0x54
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	4658      	mov	r0, fp
 80042d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80042d4:	f001 f97e 	bl	80055d4 <__d2b>
 80042d8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80042dc:	4681      	mov	r9, r0
 80042de:	2e00      	cmp	r6, #0
 80042e0:	d077      	beq.n	80043d2 <_dtoa_r+0x1da>
 80042e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042e8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80042ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042f0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80042f4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80042f8:	9712      	str	r7, [sp, #72]	@ 0x48
 80042fa:	4619      	mov	r1, r3
 80042fc:	2200      	movs	r2, #0
 80042fe:	4b76      	ldr	r3, [pc, #472]	@ (80044d8 <_dtoa_r+0x2e0>)
 8004300:	f7fb ff32 	bl	8000168 <__aeabi_dsub>
 8004304:	a368      	add	r3, pc, #416	@ (adr r3, 80044a8 <_dtoa_r+0x2b0>)
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f7fc f8e5 	bl	80004d8 <__aeabi_dmul>
 800430e:	a368      	add	r3, pc, #416	@ (adr r3, 80044b0 <_dtoa_r+0x2b8>)
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f7fb ff2a 	bl	800016c <__adddf3>
 8004318:	4604      	mov	r4, r0
 800431a:	4630      	mov	r0, r6
 800431c:	460d      	mov	r5, r1
 800431e:	f7fc f871 	bl	8000404 <__aeabi_i2d>
 8004322:	a365      	add	r3, pc, #404	@ (adr r3, 80044b8 <_dtoa_r+0x2c0>)
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f7fc f8d6 	bl	80004d8 <__aeabi_dmul>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4620      	mov	r0, r4
 8004332:	4629      	mov	r1, r5
 8004334:	f7fb ff1a 	bl	800016c <__adddf3>
 8004338:	4604      	mov	r4, r0
 800433a:	460d      	mov	r5, r1
 800433c:	f7fc fb7c 	bl	8000a38 <__aeabi_d2iz>
 8004340:	2200      	movs	r2, #0
 8004342:	4607      	mov	r7, r0
 8004344:	2300      	movs	r3, #0
 8004346:	4620      	mov	r0, r4
 8004348:	4629      	mov	r1, r5
 800434a:	f7fc fb37 	bl	80009bc <__aeabi_dcmplt>
 800434e:	b140      	cbz	r0, 8004362 <_dtoa_r+0x16a>
 8004350:	4638      	mov	r0, r7
 8004352:	f7fc f857 	bl	8000404 <__aeabi_i2d>
 8004356:	4622      	mov	r2, r4
 8004358:	462b      	mov	r3, r5
 800435a:	f7fc fb25 	bl	80009a8 <__aeabi_dcmpeq>
 800435e:	b900      	cbnz	r0, 8004362 <_dtoa_r+0x16a>
 8004360:	3f01      	subs	r7, #1
 8004362:	2f16      	cmp	r7, #22
 8004364:	d853      	bhi.n	800440e <_dtoa_r+0x216>
 8004366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800436a:	4b5c      	ldr	r3, [pc, #368]	@ (80044dc <_dtoa_r+0x2e4>)
 800436c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f7fc fb22 	bl	80009bc <__aeabi_dcmplt>
 8004378:	2800      	cmp	r0, #0
 800437a:	d04a      	beq.n	8004412 <_dtoa_r+0x21a>
 800437c:	2300      	movs	r3, #0
 800437e:	3f01      	subs	r7, #1
 8004380:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004382:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004384:	1b9b      	subs	r3, r3, r6
 8004386:	1e5a      	subs	r2, r3, #1
 8004388:	bf46      	itte	mi
 800438a:	f1c3 0801 	rsbmi	r8, r3, #1
 800438e:	2300      	movmi	r3, #0
 8004390:	f04f 0800 	movpl.w	r8, #0
 8004394:	9209      	str	r2, [sp, #36]	@ 0x24
 8004396:	bf48      	it	mi
 8004398:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800439a:	2f00      	cmp	r7, #0
 800439c:	db3b      	blt.n	8004416 <_dtoa_r+0x21e>
 800439e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043a0:	970e      	str	r7, [sp, #56]	@ 0x38
 80043a2:	443b      	add	r3, r7
 80043a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80043a6:	2300      	movs	r3, #0
 80043a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80043aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043ac:	2b09      	cmp	r3, #9
 80043ae:	d866      	bhi.n	800447e <_dtoa_r+0x286>
 80043b0:	2b05      	cmp	r3, #5
 80043b2:	bfc4      	itt	gt
 80043b4:	3b04      	subgt	r3, #4
 80043b6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80043b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043ba:	bfc8      	it	gt
 80043bc:	2400      	movgt	r4, #0
 80043be:	f1a3 0302 	sub.w	r3, r3, #2
 80043c2:	bfd8      	it	le
 80043c4:	2401      	movle	r4, #1
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d864      	bhi.n	8004494 <_dtoa_r+0x29c>
 80043ca:	e8df f003 	tbb	[pc, r3]
 80043ce:	382b      	.short	0x382b
 80043d0:	5636      	.short	0x5636
 80043d2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80043d6:	441e      	add	r6, r3
 80043d8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80043dc:	2b20      	cmp	r3, #32
 80043de:	bfc1      	itttt	gt
 80043e0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80043e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80043e8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80043ec:	fa24 f303 	lsrgt.w	r3, r4, r3
 80043f0:	bfd6      	itet	le
 80043f2:	f1c3 0320 	rsble	r3, r3, #32
 80043f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80043fa:	fa04 f003 	lslle.w	r0, r4, r3
 80043fe:	f7fb fff1 	bl	80003e4 <__aeabi_ui2d>
 8004402:	2201      	movs	r2, #1
 8004404:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004408:	3e01      	subs	r6, #1
 800440a:	9212      	str	r2, [sp, #72]	@ 0x48
 800440c:	e775      	b.n	80042fa <_dtoa_r+0x102>
 800440e:	2301      	movs	r3, #1
 8004410:	e7b6      	b.n	8004380 <_dtoa_r+0x188>
 8004412:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004414:	e7b5      	b.n	8004382 <_dtoa_r+0x18a>
 8004416:	427b      	negs	r3, r7
 8004418:	930a      	str	r3, [sp, #40]	@ 0x28
 800441a:	2300      	movs	r3, #0
 800441c:	eba8 0807 	sub.w	r8, r8, r7
 8004420:	930e      	str	r3, [sp, #56]	@ 0x38
 8004422:	e7c2      	b.n	80043aa <_dtoa_r+0x1b2>
 8004424:	2300      	movs	r3, #0
 8004426:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004428:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800442a:	2b00      	cmp	r3, #0
 800442c:	dc35      	bgt.n	800449a <_dtoa_r+0x2a2>
 800442e:	2301      	movs	r3, #1
 8004430:	461a      	mov	r2, r3
 8004432:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004436:	9221      	str	r2, [sp, #132]	@ 0x84
 8004438:	e00b      	b.n	8004452 <_dtoa_r+0x25a>
 800443a:	2301      	movs	r3, #1
 800443c:	e7f3      	b.n	8004426 <_dtoa_r+0x22e>
 800443e:	2300      	movs	r3, #0
 8004440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004442:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	9308      	str	r3, [sp, #32]
 8004448:	3301      	adds	r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	9307      	str	r3, [sp, #28]
 800444e:	bfb8      	it	lt
 8004450:	2301      	movlt	r3, #1
 8004452:	2100      	movs	r1, #0
 8004454:	2204      	movs	r2, #4
 8004456:	f8db 001c 	ldr.w	r0, [fp, #28]
 800445a:	f102 0514 	add.w	r5, r2, #20
 800445e:	429d      	cmp	r5, r3
 8004460:	d91f      	bls.n	80044a2 <_dtoa_r+0x2aa>
 8004462:	6041      	str	r1, [r0, #4]
 8004464:	4658      	mov	r0, fp
 8004466:	f000 fd8d 	bl	8004f84 <_Balloc>
 800446a:	4682      	mov	sl, r0
 800446c:	2800      	cmp	r0, #0
 800446e:	d139      	bne.n	80044e4 <_dtoa_r+0x2ec>
 8004470:	4602      	mov	r2, r0
 8004472:	f240 11af 	movw	r1, #431	@ 0x1af
 8004476:	4b1a      	ldr	r3, [pc, #104]	@ (80044e0 <_dtoa_r+0x2e8>)
 8004478:	e6d2      	b.n	8004220 <_dtoa_r+0x28>
 800447a:	2301      	movs	r3, #1
 800447c:	e7e0      	b.n	8004440 <_dtoa_r+0x248>
 800447e:	2401      	movs	r4, #1
 8004480:	2300      	movs	r3, #0
 8004482:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004484:	9320      	str	r3, [sp, #128]	@ 0x80
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	2200      	movs	r2, #0
 800448c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004490:	2312      	movs	r3, #18
 8004492:	e7d0      	b.n	8004436 <_dtoa_r+0x23e>
 8004494:	2301      	movs	r3, #1
 8004496:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004498:	e7f5      	b.n	8004486 <_dtoa_r+0x28e>
 800449a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800449c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80044a0:	e7d7      	b.n	8004452 <_dtoa_r+0x25a>
 80044a2:	3101      	adds	r1, #1
 80044a4:	0052      	lsls	r2, r2, #1
 80044a6:	e7d8      	b.n	800445a <_dtoa_r+0x262>
 80044a8:	636f4361 	.word	0x636f4361
 80044ac:	3fd287a7 	.word	0x3fd287a7
 80044b0:	8b60c8b3 	.word	0x8b60c8b3
 80044b4:	3fc68a28 	.word	0x3fc68a28
 80044b8:	509f79fb 	.word	0x509f79fb
 80044bc:	3fd34413 	.word	0x3fd34413
 80044c0:	08005ea3 	.word	0x08005ea3
 80044c4:	08005eba 	.word	0x08005eba
 80044c8:	7ff00000 	.word	0x7ff00000
 80044cc:	08005e9f 	.word	0x08005e9f
 80044d0:	08005e73 	.word	0x08005e73
 80044d4:	08005e72 	.word	0x08005e72
 80044d8:	3ff80000 	.word	0x3ff80000
 80044dc:	08005fb0 	.word	0x08005fb0
 80044e0:	08005f12 	.word	0x08005f12
 80044e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044e8:	6018      	str	r0, [r3, #0]
 80044ea:	9b07      	ldr	r3, [sp, #28]
 80044ec:	2b0e      	cmp	r3, #14
 80044ee:	f200 80a4 	bhi.w	800463a <_dtoa_r+0x442>
 80044f2:	2c00      	cmp	r4, #0
 80044f4:	f000 80a1 	beq.w	800463a <_dtoa_r+0x442>
 80044f8:	2f00      	cmp	r7, #0
 80044fa:	dd33      	ble.n	8004564 <_dtoa_r+0x36c>
 80044fc:	4b86      	ldr	r3, [pc, #536]	@ (8004718 <_dtoa_r+0x520>)
 80044fe:	f007 020f 	and.w	r2, r7, #15
 8004502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004506:	05f8      	lsls	r0, r7, #23
 8004508:	e9d3 3400 	ldrd	r3, r4, [r3]
 800450c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004510:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004514:	d516      	bpl.n	8004544 <_dtoa_r+0x34c>
 8004516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800451a:	4b80      	ldr	r3, [pc, #512]	@ (800471c <_dtoa_r+0x524>)
 800451c:	2603      	movs	r6, #3
 800451e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004522:	f7fc f903 	bl	800072c <__aeabi_ddiv>
 8004526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800452a:	f004 040f 	and.w	r4, r4, #15
 800452e:	4d7b      	ldr	r5, [pc, #492]	@ (800471c <_dtoa_r+0x524>)
 8004530:	b954      	cbnz	r4, 8004548 <_dtoa_r+0x350>
 8004532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800453a:	f7fc f8f7 	bl	800072c <__aeabi_ddiv>
 800453e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004542:	e028      	b.n	8004596 <_dtoa_r+0x39e>
 8004544:	2602      	movs	r6, #2
 8004546:	e7f2      	b.n	800452e <_dtoa_r+0x336>
 8004548:	07e1      	lsls	r1, r4, #31
 800454a:	d508      	bpl.n	800455e <_dtoa_r+0x366>
 800454c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004550:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004554:	f7fb ffc0 	bl	80004d8 <__aeabi_dmul>
 8004558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800455c:	3601      	adds	r6, #1
 800455e:	1064      	asrs	r4, r4, #1
 8004560:	3508      	adds	r5, #8
 8004562:	e7e5      	b.n	8004530 <_dtoa_r+0x338>
 8004564:	f000 80d2 	beq.w	800470c <_dtoa_r+0x514>
 8004568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800456c:	427c      	negs	r4, r7
 800456e:	4b6a      	ldr	r3, [pc, #424]	@ (8004718 <_dtoa_r+0x520>)
 8004570:	f004 020f 	and.w	r2, r4, #15
 8004574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f7fb ffac 	bl	80004d8 <__aeabi_dmul>
 8004580:	2602      	movs	r6, #2
 8004582:	2300      	movs	r3, #0
 8004584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004588:	4d64      	ldr	r5, [pc, #400]	@ (800471c <_dtoa_r+0x524>)
 800458a:	1124      	asrs	r4, r4, #4
 800458c:	2c00      	cmp	r4, #0
 800458e:	f040 80b2 	bne.w	80046f6 <_dtoa_r+0x4fe>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1d3      	bne.n	800453e <_dtoa_r+0x346>
 8004596:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800459a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80b7 	beq.w	8004710 <_dtoa_r+0x518>
 80045a2:	2200      	movs	r2, #0
 80045a4:	4620      	mov	r0, r4
 80045a6:	4629      	mov	r1, r5
 80045a8:	4b5d      	ldr	r3, [pc, #372]	@ (8004720 <_dtoa_r+0x528>)
 80045aa:	f7fc fa07 	bl	80009bc <__aeabi_dcmplt>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	f000 80ae 	beq.w	8004710 <_dtoa_r+0x518>
 80045b4:	9b07      	ldr	r3, [sp, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80aa 	beq.w	8004710 <_dtoa_r+0x518>
 80045bc:	9b08      	ldr	r3, [sp, #32]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	dd37      	ble.n	8004632 <_dtoa_r+0x43a>
 80045c2:	1e7b      	subs	r3, r7, #1
 80045c4:	4620      	mov	r0, r4
 80045c6:	9304      	str	r3, [sp, #16]
 80045c8:	2200      	movs	r2, #0
 80045ca:	4629      	mov	r1, r5
 80045cc:	4b55      	ldr	r3, [pc, #340]	@ (8004724 <_dtoa_r+0x52c>)
 80045ce:	f7fb ff83 	bl	80004d8 <__aeabi_dmul>
 80045d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045d6:	9c08      	ldr	r4, [sp, #32]
 80045d8:	3601      	adds	r6, #1
 80045da:	4630      	mov	r0, r6
 80045dc:	f7fb ff12 	bl	8000404 <__aeabi_i2d>
 80045e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045e4:	f7fb ff78 	bl	80004d8 <__aeabi_dmul>
 80045e8:	2200      	movs	r2, #0
 80045ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004728 <_dtoa_r+0x530>)
 80045ec:	f7fb fdbe 	bl	800016c <__adddf3>
 80045f0:	4605      	mov	r5, r0
 80045f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80045f6:	2c00      	cmp	r4, #0
 80045f8:	f040 809a 	bne.w	8004730 <_dtoa_r+0x538>
 80045fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004600:	2200      	movs	r2, #0
 8004602:	4b4a      	ldr	r3, [pc, #296]	@ (800472c <_dtoa_r+0x534>)
 8004604:	f7fb fdb0 	bl	8000168 <__aeabi_dsub>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004610:	462a      	mov	r2, r5
 8004612:	4633      	mov	r3, r6
 8004614:	f7fc f9f0 	bl	80009f8 <__aeabi_dcmpgt>
 8004618:	2800      	cmp	r0, #0
 800461a:	f040 828e 	bne.w	8004b3a <_dtoa_r+0x942>
 800461e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004622:	462a      	mov	r2, r5
 8004624:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004628:	f7fc f9c8 	bl	80009bc <__aeabi_dcmplt>
 800462c:	2800      	cmp	r0, #0
 800462e:	f040 8127 	bne.w	8004880 <_dtoa_r+0x688>
 8004632:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004636:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800463a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800463c:	2b00      	cmp	r3, #0
 800463e:	f2c0 8163 	blt.w	8004908 <_dtoa_r+0x710>
 8004642:	2f0e      	cmp	r7, #14
 8004644:	f300 8160 	bgt.w	8004908 <_dtoa_r+0x710>
 8004648:	4b33      	ldr	r3, [pc, #204]	@ (8004718 <_dtoa_r+0x520>)
 800464a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800464e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004652:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004656:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004658:	2b00      	cmp	r3, #0
 800465a:	da03      	bge.n	8004664 <_dtoa_r+0x46c>
 800465c:	9b07      	ldr	r3, [sp, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f340 8100 	ble.w	8004864 <_dtoa_r+0x66c>
 8004664:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004668:	4656      	mov	r6, sl
 800466a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800466e:	4620      	mov	r0, r4
 8004670:	4629      	mov	r1, r5
 8004672:	f7fc f85b 	bl	800072c <__aeabi_ddiv>
 8004676:	f7fc f9df 	bl	8000a38 <__aeabi_d2iz>
 800467a:	4680      	mov	r8, r0
 800467c:	f7fb fec2 	bl	8000404 <__aeabi_i2d>
 8004680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004684:	f7fb ff28 	bl	80004d8 <__aeabi_dmul>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4620      	mov	r0, r4
 800468e:	4629      	mov	r1, r5
 8004690:	f7fb fd6a 	bl	8000168 <__aeabi_dsub>
 8004694:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004698:	9d07      	ldr	r5, [sp, #28]
 800469a:	f806 4b01 	strb.w	r4, [r6], #1
 800469e:	eba6 040a 	sub.w	r4, r6, sl
 80046a2:	42a5      	cmp	r5, r4
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	f040 8116 	bne.w	80048d8 <_dtoa_r+0x6e0>
 80046ac:	f7fb fd5e 	bl	800016c <__adddf3>
 80046b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b4:	4604      	mov	r4, r0
 80046b6:	460d      	mov	r5, r1
 80046b8:	f7fc f99e 	bl	80009f8 <__aeabi_dcmpgt>
 80046bc:	2800      	cmp	r0, #0
 80046be:	f040 80f8 	bne.w	80048b2 <_dtoa_r+0x6ba>
 80046c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046c6:	4620      	mov	r0, r4
 80046c8:	4629      	mov	r1, r5
 80046ca:	f7fc f96d 	bl	80009a8 <__aeabi_dcmpeq>
 80046ce:	b118      	cbz	r0, 80046d8 <_dtoa_r+0x4e0>
 80046d0:	f018 0f01 	tst.w	r8, #1
 80046d4:	f040 80ed 	bne.w	80048b2 <_dtoa_r+0x6ba>
 80046d8:	4649      	mov	r1, r9
 80046da:	4658      	mov	r0, fp
 80046dc:	f000 fc92 	bl	8005004 <_Bfree>
 80046e0:	2300      	movs	r3, #0
 80046e2:	7033      	strb	r3, [r6, #0]
 80046e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80046e6:	3701      	adds	r7, #1
 80046e8:	601f      	str	r7, [r3, #0]
 80046ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8320 	beq.w	8004d32 <_dtoa_r+0xb3a>
 80046f2:	601e      	str	r6, [r3, #0]
 80046f4:	e31d      	b.n	8004d32 <_dtoa_r+0xb3a>
 80046f6:	07e2      	lsls	r2, r4, #31
 80046f8:	d505      	bpl.n	8004706 <_dtoa_r+0x50e>
 80046fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046fe:	f7fb feeb 	bl	80004d8 <__aeabi_dmul>
 8004702:	2301      	movs	r3, #1
 8004704:	3601      	adds	r6, #1
 8004706:	1064      	asrs	r4, r4, #1
 8004708:	3508      	adds	r5, #8
 800470a:	e73f      	b.n	800458c <_dtoa_r+0x394>
 800470c:	2602      	movs	r6, #2
 800470e:	e742      	b.n	8004596 <_dtoa_r+0x39e>
 8004710:	9c07      	ldr	r4, [sp, #28]
 8004712:	9704      	str	r7, [sp, #16]
 8004714:	e761      	b.n	80045da <_dtoa_r+0x3e2>
 8004716:	bf00      	nop
 8004718:	08005fb0 	.word	0x08005fb0
 800471c:	08005f88 	.word	0x08005f88
 8004720:	3ff00000 	.word	0x3ff00000
 8004724:	40240000 	.word	0x40240000
 8004728:	401c0000 	.word	0x401c0000
 800472c:	40140000 	.word	0x40140000
 8004730:	4b70      	ldr	r3, [pc, #448]	@ (80048f4 <_dtoa_r+0x6fc>)
 8004732:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004734:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004738:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800473c:	4454      	add	r4, sl
 800473e:	2900      	cmp	r1, #0
 8004740:	d045      	beq.n	80047ce <_dtoa_r+0x5d6>
 8004742:	2000      	movs	r0, #0
 8004744:	496c      	ldr	r1, [pc, #432]	@ (80048f8 <_dtoa_r+0x700>)
 8004746:	f7fb fff1 	bl	800072c <__aeabi_ddiv>
 800474a:	4633      	mov	r3, r6
 800474c:	462a      	mov	r2, r5
 800474e:	f7fb fd0b 	bl	8000168 <__aeabi_dsub>
 8004752:	4656      	mov	r6, sl
 8004754:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800475c:	f7fc f96c 	bl	8000a38 <__aeabi_d2iz>
 8004760:	4605      	mov	r5, r0
 8004762:	f7fb fe4f 	bl	8000404 <__aeabi_i2d>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800476e:	f7fb fcfb 	bl	8000168 <__aeabi_dsub>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	3530      	adds	r5, #48	@ 0x30
 8004778:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800477c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004780:	f806 5b01 	strb.w	r5, [r6], #1
 8004784:	f7fc f91a 	bl	80009bc <__aeabi_dcmplt>
 8004788:	2800      	cmp	r0, #0
 800478a:	d163      	bne.n	8004854 <_dtoa_r+0x65c>
 800478c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004790:	2000      	movs	r0, #0
 8004792:	495a      	ldr	r1, [pc, #360]	@ (80048fc <_dtoa_r+0x704>)
 8004794:	f7fb fce8 	bl	8000168 <__aeabi_dsub>
 8004798:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800479c:	f7fc f90e 	bl	80009bc <__aeabi_dcmplt>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	f040 8087 	bne.w	80048b4 <_dtoa_r+0x6bc>
 80047a6:	42a6      	cmp	r6, r4
 80047a8:	f43f af43 	beq.w	8004632 <_dtoa_r+0x43a>
 80047ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80047b0:	2200      	movs	r2, #0
 80047b2:	4b53      	ldr	r3, [pc, #332]	@ (8004900 <_dtoa_r+0x708>)
 80047b4:	f7fb fe90 	bl	80004d8 <__aeabi_dmul>
 80047b8:	2200      	movs	r2, #0
 80047ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004900 <_dtoa_r+0x708>)
 80047c4:	f7fb fe88 	bl	80004d8 <__aeabi_dmul>
 80047c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047cc:	e7c4      	b.n	8004758 <_dtoa_r+0x560>
 80047ce:	4631      	mov	r1, r6
 80047d0:	4628      	mov	r0, r5
 80047d2:	f7fb fe81 	bl	80004d8 <__aeabi_dmul>
 80047d6:	4656      	mov	r6, sl
 80047d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047dc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80047de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047e2:	f7fc f929 	bl	8000a38 <__aeabi_d2iz>
 80047e6:	4605      	mov	r5, r0
 80047e8:	f7fb fe0c 	bl	8000404 <__aeabi_i2d>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047f4:	f7fb fcb8 	bl	8000168 <__aeabi_dsub>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	3530      	adds	r5, #48	@ 0x30
 80047fe:	f806 5b01 	strb.w	r5, [r6], #1
 8004802:	42a6      	cmp	r6, r4
 8004804:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	d124      	bne.n	8004858 <_dtoa_r+0x660>
 800480e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004812:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <_dtoa_r+0x700>)
 8004814:	f7fb fcaa 	bl	800016c <__adddf3>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004820:	f7fc f8ea 	bl	80009f8 <__aeabi_dcmpgt>
 8004824:	2800      	cmp	r0, #0
 8004826:	d145      	bne.n	80048b4 <_dtoa_r+0x6bc>
 8004828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800482c:	2000      	movs	r0, #0
 800482e:	4932      	ldr	r1, [pc, #200]	@ (80048f8 <_dtoa_r+0x700>)
 8004830:	f7fb fc9a 	bl	8000168 <__aeabi_dsub>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800483c:	f7fc f8be 	bl	80009bc <__aeabi_dcmplt>
 8004840:	2800      	cmp	r0, #0
 8004842:	f43f aef6 	beq.w	8004632 <_dtoa_r+0x43a>
 8004846:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004848:	1e73      	subs	r3, r6, #1
 800484a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800484c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004850:	2b30      	cmp	r3, #48	@ 0x30
 8004852:	d0f8      	beq.n	8004846 <_dtoa_r+0x64e>
 8004854:	9f04      	ldr	r7, [sp, #16]
 8004856:	e73f      	b.n	80046d8 <_dtoa_r+0x4e0>
 8004858:	4b29      	ldr	r3, [pc, #164]	@ (8004900 <_dtoa_r+0x708>)
 800485a:	f7fb fe3d 	bl	80004d8 <__aeabi_dmul>
 800485e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004862:	e7bc      	b.n	80047de <_dtoa_r+0x5e6>
 8004864:	d10c      	bne.n	8004880 <_dtoa_r+0x688>
 8004866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800486a:	2200      	movs	r2, #0
 800486c:	4b25      	ldr	r3, [pc, #148]	@ (8004904 <_dtoa_r+0x70c>)
 800486e:	f7fb fe33 	bl	80004d8 <__aeabi_dmul>
 8004872:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004876:	f7fc f8b5 	bl	80009e4 <__aeabi_dcmpge>
 800487a:	2800      	cmp	r0, #0
 800487c:	f000 815b 	beq.w	8004b36 <_dtoa_r+0x93e>
 8004880:	2400      	movs	r4, #0
 8004882:	4625      	mov	r5, r4
 8004884:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004886:	4656      	mov	r6, sl
 8004888:	43db      	mvns	r3, r3
 800488a:	9304      	str	r3, [sp, #16]
 800488c:	2700      	movs	r7, #0
 800488e:	4621      	mov	r1, r4
 8004890:	4658      	mov	r0, fp
 8004892:	f000 fbb7 	bl	8005004 <_Bfree>
 8004896:	2d00      	cmp	r5, #0
 8004898:	d0dc      	beq.n	8004854 <_dtoa_r+0x65c>
 800489a:	b12f      	cbz	r7, 80048a8 <_dtoa_r+0x6b0>
 800489c:	42af      	cmp	r7, r5
 800489e:	d003      	beq.n	80048a8 <_dtoa_r+0x6b0>
 80048a0:	4639      	mov	r1, r7
 80048a2:	4658      	mov	r0, fp
 80048a4:	f000 fbae 	bl	8005004 <_Bfree>
 80048a8:	4629      	mov	r1, r5
 80048aa:	4658      	mov	r0, fp
 80048ac:	f000 fbaa 	bl	8005004 <_Bfree>
 80048b0:	e7d0      	b.n	8004854 <_dtoa_r+0x65c>
 80048b2:	9704      	str	r7, [sp, #16]
 80048b4:	4633      	mov	r3, r6
 80048b6:	461e      	mov	r6, r3
 80048b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048bc:	2a39      	cmp	r2, #57	@ 0x39
 80048be:	d107      	bne.n	80048d0 <_dtoa_r+0x6d8>
 80048c0:	459a      	cmp	sl, r3
 80048c2:	d1f8      	bne.n	80048b6 <_dtoa_r+0x6be>
 80048c4:	9a04      	ldr	r2, [sp, #16]
 80048c6:	3201      	adds	r2, #1
 80048c8:	9204      	str	r2, [sp, #16]
 80048ca:	2230      	movs	r2, #48	@ 0x30
 80048cc:	f88a 2000 	strb.w	r2, [sl]
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	3201      	adds	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e7bd      	b.n	8004854 <_dtoa_r+0x65c>
 80048d8:	2200      	movs	r2, #0
 80048da:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <_dtoa_r+0x708>)
 80048dc:	f7fb fdfc 	bl	80004d8 <__aeabi_dmul>
 80048e0:	2200      	movs	r2, #0
 80048e2:	2300      	movs	r3, #0
 80048e4:	4604      	mov	r4, r0
 80048e6:	460d      	mov	r5, r1
 80048e8:	f7fc f85e 	bl	80009a8 <__aeabi_dcmpeq>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	f43f aebc 	beq.w	800466a <_dtoa_r+0x472>
 80048f2:	e6f1      	b.n	80046d8 <_dtoa_r+0x4e0>
 80048f4:	08005fb0 	.word	0x08005fb0
 80048f8:	3fe00000 	.word	0x3fe00000
 80048fc:	3ff00000 	.word	0x3ff00000
 8004900:	40240000 	.word	0x40240000
 8004904:	40140000 	.word	0x40140000
 8004908:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800490a:	2a00      	cmp	r2, #0
 800490c:	f000 80db 	beq.w	8004ac6 <_dtoa_r+0x8ce>
 8004910:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004912:	2a01      	cmp	r2, #1
 8004914:	f300 80bf 	bgt.w	8004a96 <_dtoa_r+0x89e>
 8004918:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800491a:	2a00      	cmp	r2, #0
 800491c:	f000 80b7 	beq.w	8004a8e <_dtoa_r+0x896>
 8004920:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004924:	4646      	mov	r6, r8
 8004926:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800492a:	2101      	movs	r1, #1
 800492c:	441a      	add	r2, r3
 800492e:	4658      	mov	r0, fp
 8004930:	4498      	add	r8, r3
 8004932:	9209      	str	r2, [sp, #36]	@ 0x24
 8004934:	f000 fc1a 	bl	800516c <__i2b>
 8004938:	4605      	mov	r5, r0
 800493a:	b15e      	cbz	r6, 8004954 <_dtoa_r+0x75c>
 800493c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	dd08      	ble.n	8004954 <_dtoa_r+0x75c>
 8004942:	42b3      	cmp	r3, r6
 8004944:	bfa8      	it	ge
 8004946:	4633      	movge	r3, r6
 8004948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800494a:	eba8 0803 	sub.w	r8, r8, r3
 800494e:	1af6      	subs	r6, r6, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	9309      	str	r3, [sp, #36]	@ 0x24
 8004954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004956:	b1f3      	cbz	r3, 8004996 <_dtoa_r+0x79e>
 8004958:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80b7 	beq.w	8004ace <_dtoa_r+0x8d6>
 8004960:	b18c      	cbz	r4, 8004986 <_dtoa_r+0x78e>
 8004962:	4629      	mov	r1, r5
 8004964:	4622      	mov	r2, r4
 8004966:	4658      	mov	r0, fp
 8004968:	f000 fcbe 	bl	80052e8 <__pow5mult>
 800496c:	464a      	mov	r2, r9
 800496e:	4601      	mov	r1, r0
 8004970:	4605      	mov	r5, r0
 8004972:	4658      	mov	r0, fp
 8004974:	f000 fc10 	bl	8005198 <__multiply>
 8004978:	4649      	mov	r1, r9
 800497a:	9004      	str	r0, [sp, #16]
 800497c:	4658      	mov	r0, fp
 800497e:	f000 fb41 	bl	8005004 <_Bfree>
 8004982:	9b04      	ldr	r3, [sp, #16]
 8004984:	4699      	mov	r9, r3
 8004986:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004988:	1b1a      	subs	r2, r3, r4
 800498a:	d004      	beq.n	8004996 <_dtoa_r+0x79e>
 800498c:	4649      	mov	r1, r9
 800498e:	4658      	mov	r0, fp
 8004990:	f000 fcaa 	bl	80052e8 <__pow5mult>
 8004994:	4681      	mov	r9, r0
 8004996:	2101      	movs	r1, #1
 8004998:	4658      	mov	r0, fp
 800499a:	f000 fbe7 	bl	800516c <__i2b>
 800499e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049a0:	4604      	mov	r4, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 81c9 	beq.w	8004d3a <_dtoa_r+0xb42>
 80049a8:	461a      	mov	r2, r3
 80049aa:	4601      	mov	r1, r0
 80049ac:	4658      	mov	r0, fp
 80049ae:	f000 fc9b 	bl	80052e8 <__pow5mult>
 80049b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049b4:	4604      	mov	r4, r0
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	f300 808f 	bgt.w	8004ada <_dtoa_r+0x8e2>
 80049bc:	9b02      	ldr	r3, [sp, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f040 8087 	bne.w	8004ad2 <_dtoa_r+0x8da>
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 8083 	bne.w	8004ad6 <_dtoa_r+0x8de>
 80049d0:	9b03      	ldr	r3, [sp, #12]
 80049d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049d6:	0d1b      	lsrs	r3, r3, #20
 80049d8:	051b      	lsls	r3, r3, #20
 80049da:	b12b      	cbz	r3, 80049e8 <_dtoa_r+0x7f0>
 80049dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049de:	f108 0801 	add.w	r8, r8, #1
 80049e2:	3301      	adds	r3, #1
 80049e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049e6:	2301      	movs	r3, #1
 80049e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80049ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 81aa 	beq.w	8004d46 <_dtoa_r+0xb4e>
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80049f8:	6918      	ldr	r0, [r3, #16]
 80049fa:	f000 fb6b 	bl	80050d4 <__hi0bits>
 80049fe:	f1c0 0020 	rsb	r0, r0, #32
 8004a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a04:	4418      	add	r0, r3
 8004a06:	f010 001f 	ands.w	r0, r0, #31
 8004a0a:	d071      	beq.n	8004af0 <_dtoa_r+0x8f8>
 8004a0c:	f1c0 0320 	rsb	r3, r0, #32
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	dd65      	ble.n	8004ae0 <_dtoa_r+0x8e8>
 8004a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a16:	f1c0 001c 	rsb	r0, r0, #28
 8004a1a:	4403      	add	r3, r0
 8004a1c:	4480      	add	r8, r0
 8004a1e:	4406      	add	r6, r0
 8004a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a22:	f1b8 0f00 	cmp.w	r8, #0
 8004a26:	dd05      	ble.n	8004a34 <_dtoa_r+0x83c>
 8004a28:	4649      	mov	r1, r9
 8004a2a:	4642      	mov	r2, r8
 8004a2c:	4658      	mov	r0, fp
 8004a2e:	f000 fcb5 	bl	800539c <__lshift>
 8004a32:	4681      	mov	r9, r0
 8004a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	dd05      	ble.n	8004a46 <_dtoa_r+0x84e>
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4658      	mov	r0, fp
 8004a40:	f000 fcac 	bl	800539c <__lshift>
 8004a44:	4604      	mov	r4, r0
 8004a46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d053      	beq.n	8004af4 <_dtoa_r+0x8fc>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4648      	mov	r0, r9
 8004a50:	f000 fd10 	bl	8005474 <__mcmp>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	da4d      	bge.n	8004af4 <_dtoa_r+0x8fc>
 8004a58:	1e7b      	subs	r3, r7, #1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	9304      	str	r3, [sp, #16]
 8004a5e:	220a      	movs	r2, #10
 8004a60:	2300      	movs	r3, #0
 8004a62:	4658      	mov	r0, fp
 8004a64:	f000 faf0 	bl	8005048 <__multadd>
 8004a68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a6a:	4681      	mov	r9, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 816c 	beq.w	8004d4a <_dtoa_r+0xb52>
 8004a72:	2300      	movs	r3, #0
 8004a74:	4629      	mov	r1, r5
 8004a76:	220a      	movs	r2, #10
 8004a78:	4658      	mov	r0, fp
 8004a7a:	f000 fae5 	bl	8005048 <__multadd>
 8004a7e:	9b08      	ldr	r3, [sp, #32]
 8004a80:	4605      	mov	r5, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	dc61      	bgt.n	8004b4a <_dtoa_r+0x952>
 8004a86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	dc3b      	bgt.n	8004b04 <_dtoa_r+0x90c>
 8004a8c:	e05d      	b.n	8004b4a <_dtoa_r+0x952>
 8004a8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a90:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004a94:	e746      	b.n	8004924 <_dtoa_r+0x72c>
 8004a96:	9b07      	ldr	r3, [sp, #28]
 8004a98:	1e5c      	subs	r4, r3, #1
 8004a9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a9c:	42a3      	cmp	r3, r4
 8004a9e:	bfbf      	itttt	lt
 8004aa0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004aa2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004aa4:	1ae3      	sublt	r3, r4, r3
 8004aa6:	18d2      	addlt	r2, r2, r3
 8004aa8:	bfa8      	it	ge
 8004aaa:	1b1c      	subge	r4, r3, r4
 8004aac:	9b07      	ldr	r3, [sp, #28]
 8004aae:	bfbe      	ittt	lt
 8004ab0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004ab2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004ab4:	2400      	movlt	r4, #0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bfb5      	itete	lt
 8004aba:	eba8 0603 	sublt.w	r6, r8, r3
 8004abe:	4646      	movge	r6, r8
 8004ac0:	2300      	movlt	r3, #0
 8004ac2:	9b07      	ldrge	r3, [sp, #28]
 8004ac4:	e730      	b.n	8004928 <_dtoa_r+0x730>
 8004ac6:	4646      	mov	r6, r8
 8004ac8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004aca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004acc:	e735      	b.n	800493a <_dtoa_r+0x742>
 8004ace:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ad0:	e75c      	b.n	800498c <_dtoa_r+0x794>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e788      	b.n	80049e8 <_dtoa_r+0x7f0>
 8004ad6:	9b02      	ldr	r3, [sp, #8]
 8004ad8:	e786      	b.n	80049e8 <_dtoa_r+0x7f0>
 8004ada:	2300      	movs	r3, #0
 8004adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ade:	e788      	b.n	80049f2 <_dtoa_r+0x7fa>
 8004ae0:	d09f      	beq.n	8004a22 <_dtoa_r+0x82a>
 8004ae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ae4:	331c      	adds	r3, #28
 8004ae6:	441a      	add	r2, r3
 8004ae8:	4498      	add	r8, r3
 8004aea:	441e      	add	r6, r3
 8004aec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aee:	e798      	b.n	8004a22 <_dtoa_r+0x82a>
 8004af0:	4603      	mov	r3, r0
 8004af2:	e7f6      	b.n	8004ae2 <_dtoa_r+0x8ea>
 8004af4:	9b07      	ldr	r3, [sp, #28]
 8004af6:	9704      	str	r7, [sp, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	dc20      	bgt.n	8004b3e <_dtoa_r+0x946>
 8004afc:	9308      	str	r3, [sp, #32]
 8004afe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	dd1e      	ble.n	8004b42 <_dtoa_r+0x94a>
 8004b04:	9b08      	ldr	r3, [sp, #32]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f47f aebc 	bne.w	8004884 <_dtoa_r+0x68c>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	2205      	movs	r2, #5
 8004b10:	4658      	mov	r0, fp
 8004b12:	f000 fa99 	bl	8005048 <__multadd>
 8004b16:	4601      	mov	r1, r0
 8004b18:	4604      	mov	r4, r0
 8004b1a:	4648      	mov	r0, r9
 8004b1c:	f000 fcaa 	bl	8005474 <__mcmp>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	f77f aeaf 	ble.w	8004884 <_dtoa_r+0x68c>
 8004b26:	2331      	movs	r3, #49	@ 0x31
 8004b28:	4656      	mov	r6, sl
 8004b2a:	f806 3b01 	strb.w	r3, [r6], #1
 8004b2e:	9b04      	ldr	r3, [sp, #16]
 8004b30:	3301      	adds	r3, #1
 8004b32:	9304      	str	r3, [sp, #16]
 8004b34:	e6aa      	b.n	800488c <_dtoa_r+0x694>
 8004b36:	9c07      	ldr	r4, [sp, #28]
 8004b38:	9704      	str	r7, [sp, #16]
 8004b3a:	4625      	mov	r5, r4
 8004b3c:	e7f3      	b.n	8004b26 <_dtoa_r+0x92e>
 8004b3e:	9b07      	ldr	r3, [sp, #28]
 8004b40:	9308      	str	r3, [sp, #32]
 8004b42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8104 	beq.w	8004d52 <_dtoa_r+0xb5a>
 8004b4a:	2e00      	cmp	r6, #0
 8004b4c:	dd05      	ble.n	8004b5a <_dtoa_r+0x962>
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4632      	mov	r2, r6
 8004b52:	4658      	mov	r0, fp
 8004b54:	f000 fc22 	bl	800539c <__lshift>
 8004b58:	4605      	mov	r5, r0
 8004b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d05a      	beq.n	8004c16 <_dtoa_r+0xa1e>
 8004b60:	4658      	mov	r0, fp
 8004b62:	6869      	ldr	r1, [r5, #4]
 8004b64:	f000 fa0e 	bl	8004f84 <_Balloc>
 8004b68:	4606      	mov	r6, r0
 8004b6a:	b928      	cbnz	r0, 8004b78 <_dtoa_r+0x980>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004b72:	4b83      	ldr	r3, [pc, #524]	@ (8004d80 <_dtoa_r+0xb88>)
 8004b74:	f7ff bb54 	b.w	8004220 <_dtoa_r+0x28>
 8004b78:	692a      	ldr	r2, [r5, #16]
 8004b7a:	f105 010c 	add.w	r1, r5, #12
 8004b7e:	3202      	adds	r2, #2
 8004b80:	0092      	lsls	r2, r2, #2
 8004b82:	300c      	adds	r0, #12
 8004b84:	f000 fe36 	bl	80057f4 <memcpy>
 8004b88:	2201      	movs	r2, #1
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4658      	mov	r0, fp
 8004b8e:	f000 fc05 	bl	800539c <__lshift>
 8004b92:	462f      	mov	r7, r5
 8004b94:	4605      	mov	r5, r0
 8004b96:	f10a 0301 	add.w	r3, sl, #1
 8004b9a:	9307      	str	r3, [sp, #28]
 8004b9c:	9b08      	ldr	r3, [sp, #32]
 8004b9e:	4453      	add	r3, sl
 8004ba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ba2:	9b02      	ldr	r3, [sp, #8]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004baa:	9b07      	ldr	r3, [sp, #28]
 8004bac:	4621      	mov	r1, r4
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	4648      	mov	r0, r9
 8004bb2:	9302      	str	r3, [sp, #8]
 8004bb4:	f7ff fa97 	bl	80040e6 <quorem>
 8004bb8:	4639      	mov	r1, r7
 8004bba:	9008      	str	r0, [sp, #32]
 8004bbc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004bc0:	4648      	mov	r0, r9
 8004bc2:	f000 fc57 	bl	8005474 <__mcmp>
 8004bc6:	462a      	mov	r2, r5
 8004bc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4658      	mov	r0, fp
 8004bce:	f000 fc6d 	bl	80054ac <__mdiff>
 8004bd2:	68c2      	ldr	r2, [r0, #12]
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	bb02      	cbnz	r2, 8004c1a <_dtoa_r+0xa22>
 8004bd8:	4601      	mov	r1, r0
 8004bda:	4648      	mov	r0, r9
 8004bdc:	f000 fc4a 	bl	8005474 <__mcmp>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4631      	mov	r1, r6
 8004be4:	4658      	mov	r0, fp
 8004be6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004be8:	f000 fa0c 	bl	8005004 <_Bfree>
 8004bec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004bee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004bf0:	9e07      	ldr	r6, [sp, #28]
 8004bf2:	ea43 0102 	orr.w	r1, r3, r2
 8004bf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bf8:	4319      	orrs	r1, r3
 8004bfa:	d110      	bne.n	8004c1e <_dtoa_r+0xa26>
 8004bfc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c00:	d029      	beq.n	8004c56 <_dtoa_r+0xa5e>
 8004c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	dd02      	ble.n	8004c0e <_dtoa_r+0xa16>
 8004c08:	9b08      	ldr	r3, [sp, #32]
 8004c0a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004c0e:	9b02      	ldr	r3, [sp, #8]
 8004c10:	f883 8000 	strb.w	r8, [r3]
 8004c14:	e63b      	b.n	800488e <_dtoa_r+0x696>
 8004c16:	4628      	mov	r0, r5
 8004c18:	e7bb      	b.n	8004b92 <_dtoa_r+0x99a>
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	e7e1      	b.n	8004be2 <_dtoa_r+0x9ea>
 8004c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	db04      	blt.n	8004c2e <_dtoa_r+0xa36>
 8004c24:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004c26:	430b      	orrs	r3, r1
 8004c28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	d120      	bne.n	8004c70 <_dtoa_r+0xa78>
 8004c2e:	2a00      	cmp	r2, #0
 8004c30:	dded      	ble.n	8004c0e <_dtoa_r+0xa16>
 8004c32:	4649      	mov	r1, r9
 8004c34:	2201      	movs	r2, #1
 8004c36:	4658      	mov	r0, fp
 8004c38:	f000 fbb0 	bl	800539c <__lshift>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4681      	mov	r9, r0
 8004c40:	f000 fc18 	bl	8005474 <__mcmp>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	dc03      	bgt.n	8004c50 <_dtoa_r+0xa58>
 8004c48:	d1e1      	bne.n	8004c0e <_dtoa_r+0xa16>
 8004c4a:	f018 0f01 	tst.w	r8, #1
 8004c4e:	d0de      	beq.n	8004c0e <_dtoa_r+0xa16>
 8004c50:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c54:	d1d8      	bne.n	8004c08 <_dtoa_r+0xa10>
 8004c56:	2339      	movs	r3, #57	@ 0x39
 8004c58:	9a02      	ldr	r2, [sp, #8]
 8004c5a:	7013      	strb	r3, [r2, #0]
 8004c5c:	4633      	mov	r3, r6
 8004c5e:	461e      	mov	r6, r3
 8004c60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	2a39      	cmp	r2, #57	@ 0x39
 8004c68:	d052      	beq.n	8004d10 <_dtoa_r+0xb18>
 8004c6a:	3201      	adds	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	e60e      	b.n	800488e <_dtoa_r+0x696>
 8004c70:	2a00      	cmp	r2, #0
 8004c72:	dd07      	ble.n	8004c84 <_dtoa_r+0xa8c>
 8004c74:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c78:	d0ed      	beq.n	8004c56 <_dtoa_r+0xa5e>
 8004c7a:	9a02      	ldr	r2, [sp, #8]
 8004c7c:	f108 0301 	add.w	r3, r8, #1
 8004c80:	7013      	strb	r3, [r2, #0]
 8004c82:	e604      	b.n	800488e <_dtoa_r+0x696>
 8004c84:	9b07      	ldr	r3, [sp, #28]
 8004c86:	9a07      	ldr	r2, [sp, #28]
 8004c88:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d028      	beq.n	8004ce4 <_dtoa_r+0xaec>
 8004c92:	4649      	mov	r1, r9
 8004c94:	2300      	movs	r3, #0
 8004c96:	220a      	movs	r2, #10
 8004c98:	4658      	mov	r0, fp
 8004c9a:	f000 f9d5 	bl	8005048 <__multadd>
 8004c9e:	42af      	cmp	r7, r5
 8004ca0:	4681      	mov	r9, r0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	f04f 020a 	mov.w	r2, #10
 8004caa:	4639      	mov	r1, r7
 8004cac:	4658      	mov	r0, fp
 8004cae:	d107      	bne.n	8004cc0 <_dtoa_r+0xac8>
 8004cb0:	f000 f9ca 	bl	8005048 <__multadd>
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	9b07      	ldr	r3, [sp, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	9307      	str	r3, [sp, #28]
 8004cbe:	e774      	b.n	8004baa <_dtoa_r+0x9b2>
 8004cc0:	f000 f9c2 	bl	8005048 <__multadd>
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4607      	mov	r7, r0
 8004cc8:	2300      	movs	r3, #0
 8004cca:	220a      	movs	r2, #10
 8004ccc:	4658      	mov	r0, fp
 8004cce:	f000 f9bb 	bl	8005048 <__multadd>
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	e7f0      	b.n	8004cb8 <_dtoa_r+0xac0>
 8004cd6:	9b08      	ldr	r3, [sp, #32]
 8004cd8:	2700      	movs	r7, #0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bfcc      	ite	gt
 8004cde:	461e      	movgt	r6, r3
 8004ce0:	2601      	movle	r6, #1
 8004ce2:	4456      	add	r6, sl
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	4658      	mov	r0, fp
 8004cea:	f000 fb57 	bl	800539c <__lshift>
 8004cee:	4621      	mov	r1, r4
 8004cf0:	4681      	mov	r9, r0
 8004cf2:	f000 fbbf 	bl	8005474 <__mcmp>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	dcb0      	bgt.n	8004c5c <_dtoa_r+0xa64>
 8004cfa:	d102      	bne.n	8004d02 <_dtoa_r+0xb0a>
 8004cfc:	f018 0f01 	tst.w	r8, #1
 8004d00:	d1ac      	bne.n	8004c5c <_dtoa_r+0xa64>
 8004d02:	4633      	mov	r3, r6
 8004d04:	461e      	mov	r6, r3
 8004d06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d0a:	2a30      	cmp	r2, #48	@ 0x30
 8004d0c:	d0fa      	beq.n	8004d04 <_dtoa_r+0xb0c>
 8004d0e:	e5be      	b.n	800488e <_dtoa_r+0x696>
 8004d10:	459a      	cmp	sl, r3
 8004d12:	d1a4      	bne.n	8004c5e <_dtoa_r+0xa66>
 8004d14:	9b04      	ldr	r3, [sp, #16]
 8004d16:	3301      	adds	r3, #1
 8004d18:	9304      	str	r3, [sp, #16]
 8004d1a:	2331      	movs	r3, #49	@ 0x31
 8004d1c:	f88a 3000 	strb.w	r3, [sl]
 8004d20:	e5b5      	b.n	800488e <_dtoa_r+0x696>
 8004d22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d24:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004d84 <_dtoa_r+0xb8c>
 8004d28:	b11b      	cbz	r3, 8004d32 <_dtoa_r+0xb3a>
 8004d2a:	f10a 0308 	add.w	r3, sl, #8
 8004d2e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4650      	mov	r0, sl
 8004d34:	b017      	add	sp, #92	@ 0x5c
 8004d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	f77f ae3d 	ble.w	80049bc <_dtoa_r+0x7c4>
 8004d42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d44:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d46:	2001      	movs	r0, #1
 8004d48:	e65b      	b.n	8004a02 <_dtoa_r+0x80a>
 8004d4a:	9b08      	ldr	r3, [sp, #32]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f77f aed6 	ble.w	8004afe <_dtoa_r+0x906>
 8004d52:	4656      	mov	r6, sl
 8004d54:	4621      	mov	r1, r4
 8004d56:	4648      	mov	r0, r9
 8004d58:	f7ff f9c5 	bl	80040e6 <quorem>
 8004d5c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004d60:	9b08      	ldr	r3, [sp, #32]
 8004d62:	f806 8b01 	strb.w	r8, [r6], #1
 8004d66:	eba6 020a 	sub.w	r2, r6, sl
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	ddb3      	ble.n	8004cd6 <_dtoa_r+0xade>
 8004d6e:	4649      	mov	r1, r9
 8004d70:	2300      	movs	r3, #0
 8004d72:	220a      	movs	r2, #10
 8004d74:	4658      	mov	r0, fp
 8004d76:	f000 f967 	bl	8005048 <__multadd>
 8004d7a:	4681      	mov	r9, r0
 8004d7c:	e7ea      	b.n	8004d54 <_dtoa_r+0xb5c>
 8004d7e:	bf00      	nop
 8004d80:	08005f12 	.word	0x08005f12
 8004d84:	08005e96 	.word	0x08005e96

08004d88 <_free_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	d040      	beq.n	8004e12 <_free_r+0x8a>
 8004d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d94:	1f0c      	subs	r4, r1, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bfb8      	it	lt
 8004d9a:	18e4      	addlt	r4, r4, r3
 8004d9c:	f000 f8e6 	bl	8004f6c <__malloc_lock>
 8004da0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e14 <_free_r+0x8c>)
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	b933      	cbnz	r3, 8004db4 <_free_r+0x2c>
 8004da6:	6063      	str	r3, [r4, #4]
 8004da8:	6014      	str	r4, [r2, #0]
 8004daa:	4628      	mov	r0, r5
 8004dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db0:	f000 b8e2 	b.w	8004f78 <__malloc_unlock>
 8004db4:	42a3      	cmp	r3, r4
 8004db6:	d908      	bls.n	8004dca <_free_r+0x42>
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	1821      	adds	r1, r4, r0
 8004dbc:	428b      	cmp	r3, r1
 8004dbe:	bf01      	itttt	eq
 8004dc0:	6819      	ldreq	r1, [r3, #0]
 8004dc2:	685b      	ldreq	r3, [r3, #4]
 8004dc4:	1809      	addeq	r1, r1, r0
 8004dc6:	6021      	streq	r1, [r4, #0]
 8004dc8:	e7ed      	b.n	8004da6 <_free_r+0x1e>
 8004dca:	461a      	mov	r2, r3
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b10b      	cbz	r3, 8004dd4 <_free_r+0x4c>
 8004dd0:	42a3      	cmp	r3, r4
 8004dd2:	d9fa      	bls.n	8004dca <_free_r+0x42>
 8004dd4:	6811      	ldr	r1, [r2, #0]
 8004dd6:	1850      	adds	r0, r2, r1
 8004dd8:	42a0      	cmp	r0, r4
 8004dda:	d10b      	bne.n	8004df4 <_free_r+0x6c>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	4401      	add	r1, r0
 8004de0:	1850      	adds	r0, r2, r1
 8004de2:	4283      	cmp	r3, r0
 8004de4:	6011      	str	r1, [r2, #0]
 8004de6:	d1e0      	bne.n	8004daa <_free_r+0x22>
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4408      	add	r0, r1
 8004dee:	6010      	str	r0, [r2, #0]
 8004df0:	6053      	str	r3, [r2, #4]
 8004df2:	e7da      	b.n	8004daa <_free_r+0x22>
 8004df4:	d902      	bls.n	8004dfc <_free_r+0x74>
 8004df6:	230c      	movs	r3, #12
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	e7d6      	b.n	8004daa <_free_r+0x22>
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	1821      	adds	r1, r4, r0
 8004e00:	428b      	cmp	r3, r1
 8004e02:	bf01      	itttt	eq
 8004e04:	6819      	ldreq	r1, [r3, #0]
 8004e06:	685b      	ldreq	r3, [r3, #4]
 8004e08:	1809      	addeq	r1, r1, r0
 8004e0a:	6021      	streq	r1, [r4, #0]
 8004e0c:	6063      	str	r3, [r4, #4]
 8004e0e:	6054      	str	r4, [r2, #4]
 8004e10:	e7cb      	b.n	8004daa <_free_r+0x22>
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	20000414 	.word	0x20000414

08004e18 <malloc>:
 8004e18:	4b02      	ldr	r3, [pc, #8]	@ (8004e24 <malloc+0xc>)
 8004e1a:	4601      	mov	r1, r0
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	f000 b825 	b.w	8004e6c <_malloc_r>
 8004e22:	bf00      	nop
 8004e24:	20000030 	.word	0x20000030

08004e28 <sbrk_aligned>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8004e68 <sbrk_aligned+0x40>)
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	6831      	ldr	r1, [r6, #0]
 8004e30:	4605      	mov	r5, r0
 8004e32:	b911      	cbnz	r1, 8004e3a <sbrk_aligned+0x12>
 8004e34:	f000 fcce 	bl	80057d4 <_sbrk_r>
 8004e38:	6030      	str	r0, [r6, #0]
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f000 fcc9 	bl	80057d4 <_sbrk_r>
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	d103      	bne.n	8004e4e <sbrk_aligned+0x26>
 8004e46:	f04f 34ff 	mov.w	r4, #4294967295
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	bd70      	pop	{r4, r5, r6, pc}
 8004e4e:	1cc4      	adds	r4, r0, #3
 8004e50:	f024 0403 	bic.w	r4, r4, #3
 8004e54:	42a0      	cmp	r0, r4
 8004e56:	d0f8      	beq.n	8004e4a <sbrk_aligned+0x22>
 8004e58:	1a21      	subs	r1, r4, r0
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f000 fcba 	bl	80057d4 <_sbrk_r>
 8004e60:	3001      	adds	r0, #1
 8004e62:	d1f2      	bne.n	8004e4a <sbrk_aligned+0x22>
 8004e64:	e7ef      	b.n	8004e46 <sbrk_aligned+0x1e>
 8004e66:	bf00      	nop
 8004e68:	20000410 	.word	0x20000410

08004e6c <_malloc_r>:
 8004e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e70:	1ccd      	adds	r5, r1, #3
 8004e72:	f025 0503 	bic.w	r5, r5, #3
 8004e76:	3508      	adds	r5, #8
 8004e78:	2d0c      	cmp	r5, #12
 8004e7a:	bf38      	it	cc
 8004e7c:	250c      	movcc	r5, #12
 8004e7e:	2d00      	cmp	r5, #0
 8004e80:	4606      	mov	r6, r0
 8004e82:	db01      	blt.n	8004e88 <_malloc_r+0x1c>
 8004e84:	42a9      	cmp	r1, r5
 8004e86:	d904      	bls.n	8004e92 <_malloc_r+0x26>
 8004e88:	230c      	movs	r3, #12
 8004e8a:	6033      	str	r3, [r6, #0]
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f68 <_malloc_r+0xfc>
 8004e96:	f000 f869 	bl	8004f6c <__malloc_lock>
 8004e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9e:	461c      	mov	r4, r3
 8004ea0:	bb44      	cbnz	r4, 8004ef4 <_malloc_r+0x88>
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f7ff ffbf 	bl	8004e28 <sbrk_aligned>
 8004eaa:	1c43      	adds	r3, r0, #1
 8004eac:	4604      	mov	r4, r0
 8004eae:	d158      	bne.n	8004f62 <_malloc_r+0xf6>
 8004eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8004eb4:	4627      	mov	r7, r4
 8004eb6:	2f00      	cmp	r7, #0
 8004eb8:	d143      	bne.n	8004f42 <_malloc_r+0xd6>
 8004eba:	2c00      	cmp	r4, #0
 8004ebc:	d04b      	beq.n	8004f56 <_malloc_r+0xea>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	eb04 0903 	add.w	r9, r4, r3
 8004ec8:	f000 fc84 	bl	80057d4 <_sbrk_r>
 8004ecc:	4581      	cmp	r9, r0
 8004ece:	d142      	bne.n	8004f56 <_malloc_r+0xea>
 8004ed0:	6821      	ldr	r1, [r4, #0]
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	1a6d      	subs	r5, r5, r1
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7ff ffa6 	bl	8004e28 <sbrk_aligned>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d03a      	beq.n	8004f56 <_malloc_r+0xea>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	442b      	add	r3, r5
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	bb62      	cbnz	r2, 8004f48 <_malloc_r+0xdc>
 8004eee:	f8c8 7000 	str.w	r7, [r8]
 8004ef2:	e00f      	b.n	8004f14 <_malloc_r+0xa8>
 8004ef4:	6822      	ldr	r2, [r4, #0]
 8004ef6:	1b52      	subs	r2, r2, r5
 8004ef8:	d420      	bmi.n	8004f3c <_malloc_r+0xd0>
 8004efa:	2a0b      	cmp	r2, #11
 8004efc:	d917      	bls.n	8004f2e <_malloc_r+0xc2>
 8004efe:	1961      	adds	r1, r4, r5
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	6025      	str	r5, [r4, #0]
 8004f04:	bf18      	it	ne
 8004f06:	6059      	strne	r1, [r3, #4]
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	bf08      	it	eq
 8004f0c:	f8c8 1000 	streq.w	r1, [r8]
 8004f10:	5162      	str	r2, [r4, r5]
 8004f12:	604b      	str	r3, [r1, #4]
 8004f14:	4630      	mov	r0, r6
 8004f16:	f000 f82f 	bl	8004f78 <__malloc_unlock>
 8004f1a:	f104 000b 	add.w	r0, r4, #11
 8004f1e:	1d23      	adds	r3, r4, #4
 8004f20:	f020 0007 	bic.w	r0, r0, #7
 8004f24:	1ac2      	subs	r2, r0, r3
 8004f26:	bf1c      	itt	ne
 8004f28:	1a1b      	subne	r3, r3, r0
 8004f2a:	50a3      	strne	r3, [r4, r2]
 8004f2c:	e7af      	b.n	8004e8e <_malloc_r+0x22>
 8004f2e:	6862      	ldr	r2, [r4, #4]
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	bf0c      	ite	eq
 8004f34:	f8c8 2000 	streq.w	r2, [r8]
 8004f38:	605a      	strne	r2, [r3, #4]
 8004f3a:	e7eb      	b.n	8004f14 <_malloc_r+0xa8>
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	6864      	ldr	r4, [r4, #4]
 8004f40:	e7ae      	b.n	8004ea0 <_malloc_r+0x34>
 8004f42:	463c      	mov	r4, r7
 8004f44:	687f      	ldr	r7, [r7, #4]
 8004f46:	e7b6      	b.n	8004eb6 <_malloc_r+0x4a>
 8004f48:	461a      	mov	r2, r3
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	d1fb      	bne.n	8004f48 <_malloc_r+0xdc>
 8004f50:	2300      	movs	r3, #0
 8004f52:	6053      	str	r3, [r2, #4]
 8004f54:	e7de      	b.n	8004f14 <_malloc_r+0xa8>
 8004f56:	230c      	movs	r3, #12
 8004f58:	4630      	mov	r0, r6
 8004f5a:	6033      	str	r3, [r6, #0]
 8004f5c:	f000 f80c 	bl	8004f78 <__malloc_unlock>
 8004f60:	e794      	b.n	8004e8c <_malloc_r+0x20>
 8004f62:	6005      	str	r5, [r0, #0]
 8004f64:	e7d6      	b.n	8004f14 <_malloc_r+0xa8>
 8004f66:	bf00      	nop
 8004f68:	20000414 	.word	0x20000414

08004f6c <__malloc_lock>:
 8004f6c:	4801      	ldr	r0, [pc, #4]	@ (8004f74 <__malloc_lock+0x8>)
 8004f6e:	f7ff b8aa 	b.w	80040c6 <__retarget_lock_acquire_recursive>
 8004f72:	bf00      	nop
 8004f74:	2000040c 	.word	0x2000040c

08004f78 <__malloc_unlock>:
 8004f78:	4801      	ldr	r0, [pc, #4]	@ (8004f80 <__malloc_unlock+0x8>)
 8004f7a:	f7ff b8a5 	b.w	80040c8 <__retarget_lock_release_recursive>
 8004f7e:	bf00      	nop
 8004f80:	2000040c 	.word	0x2000040c

08004f84 <_Balloc>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	69c6      	ldr	r6, [r0, #28]
 8004f88:	4604      	mov	r4, r0
 8004f8a:	460d      	mov	r5, r1
 8004f8c:	b976      	cbnz	r6, 8004fac <_Balloc+0x28>
 8004f8e:	2010      	movs	r0, #16
 8004f90:	f7ff ff42 	bl	8004e18 <malloc>
 8004f94:	4602      	mov	r2, r0
 8004f96:	61e0      	str	r0, [r4, #28]
 8004f98:	b920      	cbnz	r0, 8004fa4 <_Balloc+0x20>
 8004f9a:	216b      	movs	r1, #107	@ 0x6b
 8004f9c:	4b17      	ldr	r3, [pc, #92]	@ (8004ffc <_Balloc+0x78>)
 8004f9e:	4818      	ldr	r0, [pc, #96]	@ (8005000 <_Balloc+0x7c>)
 8004fa0:	f000 fc36 	bl	8005810 <__assert_func>
 8004fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fa8:	6006      	str	r6, [r0, #0]
 8004faa:	60c6      	str	r6, [r0, #12]
 8004fac:	69e6      	ldr	r6, [r4, #28]
 8004fae:	68f3      	ldr	r3, [r6, #12]
 8004fb0:	b183      	cbz	r3, 8004fd4 <_Balloc+0x50>
 8004fb2:	69e3      	ldr	r3, [r4, #28]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004fba:	b9b8      	cbnz	r0, 8004fec <_Balloc+0x68>
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	fa01 f605 	lsl.w	r6, r1, r5
 8004fc2:	1d72      	adds	r2, r6, #5
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	0092      	lsls	r2, r2, #2
 8004fc8:	f000 fc40 	bl	800584c <_calloc_r>
 8004fcc:	b160      	cbz	r0, 8004fe8 <_Balloc+0x64>
 8004fce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004fd2:	e00e      	b.n	8004ff2 <_Balloc+0x6e>
 8004fd4:	2221      	movs	r2, #33	@ 0x21
 8004fd6:	2104      	movs	r1, #4
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f000 fc37 	bl	800584c <_calloc_r>
 8004fde:	69e3      	ldr	r3, [r4, #28]
 8004fe0:	60f0      	str	r0, [r6, #12]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e4      	bne.n	8004fb2 <_Balloc+0x2e>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	6802      	ldr	r2, [r0, #0]
 8004fee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ff8:	e7f7      	b.n	8004fea <_Balloc+0x66>
 8004ffa:	bf00      	nop
 8004ffc:	08005ea3 	.word	0x08005ea3
 8005000:	08005f23 	.word	0x08005f23

08005004 <_Bfree>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	69c6      	ldr	r6, [r0, #28]
 8005008:	4605      	mov	r5, r0
 800500a:	460c      	mov	r4, r1
 800500c:	b976      	cbnz	r6, 800502c <_Bfree+0x28>
 800500e:	2010      	movs	r0, #16
 8005010:	f7ff ff02 	bl	8004e18 <malloc>
 8005014:	4602      	mov	r2, r0
 8005016:	61e8      	str	r0, [r5, #28]
 8005018:	b920      	cbnz	r0, 8005024 <_Bfree+0x20>
 800501a:	218f      	movs	r1, #143	@ 0x8f
 800501c:	4b08      	ldr	r3, [pc, #32]	@ (8005040 <_Bfree+0x3c>)
 800501e:	4809      	ldr	r0, [pc, #36]	@ (8005044 <_Bfree+0x40>)
 8005020:	f000 fbf6 	bl	8005810 <__assert_func>
 8005024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005028:	6006      	str	r6, [r0, #0]
 800502a:	60c6      	str	r6, [r0, #12]
 800502c:	b13c      	cbz	r4, 800503e <_Bfree+0x3a>
 800502e:	69eb      	ldr	r3, [r5, #28]
 8005030:	6862      	ldr	r2, [r4, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005038:	6021      	str	r1, [r4, #0]
 800503a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	08005ea3 	.word	0x08005ea3
 8005044:	08005f23 	.word	0x08005f23

08005048 <__multadd>:
 8005048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504c:	4607      	mov	r7, r0
 800504e:	460c      	mov	r4, r1
 8005050:	461e      	mov	r6, r3
 8005052:	2000      	movs	r0, #0
 8005054:	690d      	ldr	r5, [r1, #16]
 8005056:	f101 0c14 	add.w	ip, r1, #20
 800505a:	f8dc 3000 	ldr.w	r3, [ip]
 800505e:	3001      	adds	r0, #1
 8005060:	b299      	uxth	r1, r3
 8005062:	fb02 6101 	mla	r1, r2, r1, r6
 8005066:	0c1e      	lsrs	r6, r3, #16
 8005068:	0c0b      	lsrs	r3, r1, #16
 800506a:	fb02 3306 	mla	r3, r2, r6, r3
 800506e:	b289      	uxth	r1, r1
 8005070:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005074:	4285      	cmp	r5, r0
 8005076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800507a:	f84c 1b04 	str.w	r1, [ip], #4
 800507e:	dcec      	bgt.n	800505a <__multadd+0x12>
 8005080:	b30e      	cbz	r6, 80050c6 <__multadd+0x7e>
 8005082:	68a3      	ldr	r3, [r4, #8]
 8005084:	42ab      	cmp	r3, r5
 8005086:	dc19      	bgt.n	80050bc <__multadd+0x74>
 8005088:	6861      	ldr	r1, [r4, #4]
 800508a:	4638      	mov	r0, r7
 800508c:	3101      	adds	r1, #1
 800508e:	f7ff ff79 	bl	8004f84 <_Balloc>
 8005092:	4680      	mov	r8, r0
 8005094:	b928      	cbnz	r0, 80050a2 <__multadd+0x5a>
 8005096:	4602      	mov	r2, r0
 8005098:	21ba      	movs	r1, #186	@ 0xba
 800509a:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <__multadd+0x84>)
 800509c:	480c      	ldr	r0, [pc, #48]	@ (80050d0 <__multadd+0x88>)
 800509e:	f000 fbb7 	bl	8005810 <__assert_func>
 80050a2:	6922      	ldr	r2, [r4, #16]
 80050a4:	f104 010c 	add.w	r1, r4, #12
 80050a8:	3202      	adds	r2, #2
 80050aa:	0092      	lsls	r2, r2, #2
 80050ac:	300c      	adds	r0, #12
 80050ae:	f000 fba1 	bl	80057f4 <memcpy>
 80050b2:	4621      	mov	r1, r4
 80050b4:	4638      	mov	r0, r7
 80050b6:	f7ff ffa5 	bl	8005004 <_Bfree>
 80050ba:	4644      	mov	r4, r8
 80050bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80050c0:	3501      	adds	r5, #1
 80050c2:	615e      	str	r6, [r3, #20]
 80050c4:	6125      	str	r5, [r4, #16]
 80050c6:	4620      	mov	r0, r4
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050cc:	08005f12 	.word	0x08005f12
 80050d0:	08005f23 	.word	0x08005f23

080050d4 <__hi0bits>:
 80050d4:	4603      	mov	r3, r0
 80050d6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80050da:	bf3a      	itte	cc
 80050dc:	0403      	lslcc	r3, r0, #16
 80050de:	2010      	movcc	r0, #16
 80050e0:	2000      	movcs	r0, #0
 80050e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050e6:	bf3c      	itt	cc
 80050e8:	021b      	lslcc	r3, r3, #8
 80050ea:	3008      	addcc	r0, #8
 80050ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050f0:	bf3c      	itt	cc
 80050f2:	011b      	lslcc	r3, r3, #4
 80050f4:	3004      	addcc	r0, #4
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fa:	bf3c      	itt	cc
 80050fc:	009b      	lslcc	r3, r3, #2
 80050fe:	3002      	addcc	r0, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	db05      	blt.n	8005110 <__hi0bits+0x3c>
 8005104:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005108:	f100 0001 	add.w	r0, r0, #1
 800510c:	bf08      	it	eq
 800510e:	2020      	moveq	r0, #32
 8005110:	4770      	bx	lr

08005112 <__lo0bits>:
 8005112:	6803      	ldr	r3, [r0, #0]
 8005114:	4602      	mov	r2, r0
 8005116:	f013 0007 	ands.w	r0, r3, #7
 800511a:	d00b      	beq.n	8005134 <__lo0bits+0x22>
 800511c:	07d9      	lsls	r1, r3, #31
 800511e:	d421      	bmi.n	8005164 <__lo0bits+0x52>
 8005120:	0798      	lsls	r0, r3, #30
 8005122:	bf49      	itett	mi
 8005124:	085b      	lsrmi	r3, r3, #1
 8005126:	089b      	lsrpl	r3, r3, #2
 8005128:	2001      	movmi	r0, #1
 800512a:	6013      	strmi	r3, [r2, #0]
 800512c:	bf5c      	itt	pl
 800512e:	2002      	movpl	r0, #2
 8005130:	6013      	strpl	r3, [r2, #0]
 8005132:	4770      	bx	lr
 8005134:	b299      	uxth	r1, r3
 8005136:	b909      	cbnz	r1, 800513c <__lo0bits+0x2a>
 8005138:	2010      	movs	r0, #16
 800513a:	0c1b      	lsrs	r3, r3, #16
 800513c:	b2d9      	uxtb	r1, r3
 800513e:	b909      	cbnz	r1, 8005144 <__lo0bits+0x32>
 8005140:	3008      	adds	r0, #8
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	0719      	lsls	r1, r3, #28
 8005146:	bf04      	itt	eq
 8005148:	091b      	lsreq	r3, r3, #4
 800514a:	3004      	addeq	r0, #4
 800514c:	0799      	lsls	r1, r3, #30
 800514e:	bf04      	itt	eq
 8005150:	089b      	lsreq	r3, r3, #2
 8005152:	3002      	addeq	r0, #2
 8005154:	07d9      	lsls	r1, r3, #31
 8005156:	d403      	bmi.n	8005160 <__lo0bits+0x4e>
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	f100 0001 	add.w	r0, r0, #1
 800515e:	d003      	beq.n	8005168 <__lo0bits+0x56>
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4770      	bx	lr
 8005164:	2000      	movs	r0, #0
 8005166:	4770      	bx	lr
 8005168:	2020      	movs	r0, #32
 800516a:	4770      	bx	lr

0800516c <__i2b>:
 800516c:	b510      	push	{r4, lr}
 800516e:	460c      	mov	r4, r1
 8005170:	2101      	movs	r1, #1
 8005172:	f7ff ff07 	bl	8004f84 <_Balloc>
 8005176:	4602      	mov	r2, r0
 8005178:	b928      	cbnz	r0, 8005186 <__i2b+0x1a>
 800517a:	f240 1145 	movw	r1, #325	@ 0x145
 800517e:	4b04      	ldr	r3, [pc, #16]	@ (8005190 <__i2b+0x24>)
 8005180:	4804      	ldr	r0, [pc, #16]	@ (8005194 <__i2b+0x28>)
 8005182:	f000 fb45 	bl	8005810 <__assert_func>
 8005186:	2301      	movs	r3, #1
 8005188:	6144      	str	r4, [r0, #20]
 800518a:	6103      	str	r3, [r0, #16]
 800518c:	bd10      	pop	{r4, pc}
 800518e:	bf00      	nop
 8005190:	08005f12 	.word	0x08005f12
 8005194:	08005f23 	.word	0x08005f23

08005198 <__multiply>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	4614      	mov	r4, r2
 800519e:	690a      	ldr	r2, [r1, #16]
 80051a0:	6923      	ldr	r3, [r4, #16]
 80051a2:	460f      	mov	r7, r1
 80051a4:	429a      	cmp	r2, r3
 80051a6:	bfa2      	ittt	ge
 80051a8:	4623      	movge	r3, r4
 80051aa:	460c      	movge	r4, r1
 80051ac:	461f      	movge	r7, r3
 80051ae:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80051b2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80051b6:	68a3      	ldr	r3, [r4, #8]
 80051b8:	6861      	ldr	r1, [r4, #4]
 80051ba:	eb0a 0609 	add.w	r6, sl, r9
 80051be:	42b3      	cmp	r3, r6
 80051c0:	b085      	sub	sp, #20
 80051c2:	bfb8      	it	lt
 80051c4:	3101      	addlt	r1, #1
 80051c6:	f7ff fedd 	bl	8004f84 <_Balloc>
 80051ca:	b930      	cbnz	r0, 80051da <__multiply+0x42>
 80051cc:	4602      	mov	r2, r0
 80051ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80051d2:	4b43      	ldr	r3, [pc, #268]	@ (80052e0 <__multiply+0x148>)
 80051d4:	4843      	ldr	r0, [pc, #268]	@ (80052e4 <__multiply+0x14c>)
 80051d6:	f000 fb1b 	bl	8005810 <__assert_func>
 80051da:	f100 0514 	add.w	r5, r0, #20
 80051de:	462b      	mov	r3, r5
 80051e0:	2200      	movs	r2, #0
 80051e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80051e6:	4543      	cmp	r3, r8
 80051e8:	d321      	bcc.n	800522e <__multiply+0x96>
 80051ea:	f107 0114 	add.w	r1, r7, #20
 80051ee:	f104 0214 	add.w	r2, r4, #20
 80051f2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80051f6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80051fa:	9302      	str	r3, [sp, #8]
 80051fc:	1b13      	subs	r3, r2, r4
 80051fe:	3b15      	subs	r3, #21
 8005200:	f023 0303 	bic.w	r3, r3, #3
 8005204:	3304      	adds	r3, #4
 8005206:	f104 0715 	add.w	r7, r4, #21
 800520a:	42ba      	cmp	r2, r7
 800520c:	bf38      	it	cc
 800520e:	2304      	movcc	r3, #4
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	9b02      	ldr	r3, [sp, #8]
 8005214:	9103      	str	r1, [sp, #12]
 8005216:	428b      	cmp	r3, r1
 8005218:	d80c      	bhi.n	8005234 <__multiply+0x9c>
 800521a:	2e00      	cmp	r6, #0
 800521c:	dd03      	ble.n	8005226 <__multiply+0x8e>
 800521e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005222:	2b00      	cmp	r3, #0
 8005224:	d05a      	beq.n	80052dc <__multiply+0x144>
 8005226:	6106      	str	r6, [r0, #16]
 8005228:	b005      	add	sp, #20
 800522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522e:	f843 2b04 	str.w	r2, [r3], #4
 8005232:	e7d8      	b.n	80051e6 <__multiply+0x4e>
 8005234:	f8b1 a000 	ldrh.w	sl, [r1]
 8005238:	f1ba 0f00 	cmp.w	sl, #0
 800523c:	d023      	beq.n	8005286 <__multiply+0xee>
 800523e:	46a9      	mov	r9, r5
 8005240:	f04f 0c00 	mov.w	ip, #0
 8005244:	f104 0e14 	add.w	lr, r4, #20
 8005248:	f85e 7b04 	ldr.w	r7, [lr], #4
 800524c:	f8d9 3000 	ldr.w	r3, [r9]
 8005250:	fa1f fb87 	uxth.w	fp, r7
 8005254:	b29b      	uxth	r3, r3
 8005256:	fb0a 330b 	mla	r3, sl, fp, r3
 800525a:	4463      	add	r3, ip
 800525c:	f8d9 c000 	ldr.w	ip, [r9]
 8005260:	0c3f      	lsrs	r7, r7, #16
 8005262:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005266:	fb0a c707 	mla	r7, sl, r7, ip
 800526a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800526e:	b29b      	uxth	r3, r3
 8005270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005274:	4572      	cmp	r2, lr
 8005276:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800527a:	f849 3b04 	str.w	r3, [r9], #4
 800527e:	d8e3      	bhi.n	8005248 <__multiply+0xb0>
 8005280:	9b01      	ldr	r3, [sp, #4]
 8005282:	f845 c003 	str.w	ip, [r5, r3]
 8005286:	9b03      	ldr	r3, [sp, #12]
 8005288:	3104      	adds	r1, #4
 800528a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800528e:	f1b9 0f00 	cmp.w	r9, #0
 8005292:	d021      	beq.n	80052d8 <__multiply+0x140>
 8005294:	46ae      	mov	lr, r5
 8005296:	f04f 0a00 	mov.w	sl, #0
 800529a:	682b      	ldr	r3, [r5, #0]
 800529c:	f104 0c14 	add.w	ip, r4, #20
 80052a0:	f8bc b000 	ldrh.w	fp, [ip]
 80052a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	fb09 770b 	mla	r7, r9, fp, r7
 80052ae:	4457      	add	r7, sl
 80052b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80052b4:	f84e 3b04 	str.w	r3, [lr], #4
 80052b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052c0:	f8be 3000 	ldrh.w	r3, [lr]
 80052c4:	4562      	cmp	r2, ip
 80052c6:	fb09 330a 	mla	r3, r9, sl, r3
 80052ca:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80052ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052d2:	d8e5      	bhi.n	80052a0 <__multiply+0x108>
 80052d4:	9f01      	ldr	r7, [sp, #4]
 80052d6:	51eb      	str	r3, [r5, r7]
 80052d8:	3504      	adds	r5, #4
 80052da:	e79a      	b.n	8005212 <__multiply+0x7a>
 80052dc:	3e01      	subs	r6, #1
 80052de:	e79c      	b.n	800521a <__multiply+0x82>
 80052e0:	08005f12 	.word	0x08005f12
 80052e4:	08005f23 	.word	0x08005f23

080052e8 <__pow5mult>:
 80052e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ec:	4615      	mov	r5, r2
 80052ee:	f012 0203 	ands.w	r2, r2, #3
 80052f2:	4607      	mov	r7, r0
 80052f4:	460e      	mov	r6, r1
 80052f6:	d007      	beq.n	8005308 <__pow5mult+0x20>
 80052f8:	4c25      	ldr	r4, [pc, #148]	@ (8005390 <__pow5mult+0xa8>)
 80052fa:	3a01      	subs	r2, #1
 80052fc:	2300      	movs	r3, #0
 80052fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005302:	f7ff fea1 	bl	8005048 <__multadd>
 8005306:	4606      	mov	r6, r0
 8005308:	10ad      	asrs	r5, r5, #2
 800530a:	d03d      	beq.n	8005388 <__pow5mult+0xa0>
 800530c:	69fc      	ldr	r4, [r7, #28]
 800530e:	b97c      	cbnz	r4, 8005330 <__pow5mult+0x48>
 8005310:	2010      	movs	r0, #16
 8005312:	f7ff fd81 	bl	8004e18 <malloc>
 8005316:	4602      	mov	r2, r0
 8005318:	61f8      	str	r0, [r7, #28]
 800531a:	b928      	cbnz	r0, 8005328 <__pow5mult+0x40>
 800531c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005320:	4b1c      	ldr	r3, [pc, #112]	@ (8005394 <__pow5mult+0xac>)
 8005322:	481d      	ldr	r0, [pc, #116]	@ (8005398 <__pow5mult+0xb0>)
 8005324:	f000 fa74 	bl	8005810 <__assert_func>
 8005328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800532c:	6004      	str	r4, [r0, #0]
 800532e:	60c4      	str	r4, [r0, #12]
 8005330:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005338:	b94c      	cbnz	r4, 800534e <__pow5mult+0x66>
 800533a:	f240 2171 	movw	r1, #625	@ 0x271
 800533e:	4638      	mov	r0, r7
 8005340:	f7ff ff14 	bl	800516c <__i2b>
 8005344:	2300      	movs	r3, #0
 8005346:	4604      	mov	r4, r0
 8005348:	f8c8 0008 	str.w	r0, [r8, #8]
 800534c:	6003      	str	r3, [r0, #0]
 800534e:	f04f 0900 	mov.w	r9, #0
 8005352:	07eb      	lsls	r3, r5, #31
 8005354:	d50a      	bpl.n	800536c <__pow5mult+0x84>
 8005356:	4631      	mov	r1, r6
 8005358:	4622      	mov	r2, r4
 800535a:	4638      	mov	r0, r7
 800535c:	f7ff ff1c 	bl	8005198 <__multiply>
 8005360:	4680      	mov	r8, r0
 8005362:	4631      	mov	r1, r6
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff fe4d 	bl	8005004 <_Bfree>
 800536a:	4646      	mov	r6, r8
 800536c:	106d      	asrs	r5, r5, #1
 800536e:	d00b      	beq.n	8005388 <__pow5mult+0xa0>
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	b938      	cbnz	r0, 8005384 <__pow5mult+0x9c>
 8005374:	4622      	mov	r2, r4
 8005376:	4621      	mov	r1, r4
 8005378:	4638      	mov	r0, r7
 800537a:	f7ff ff0d 	bl	8005198 <__multiply>
 800537e:	6020      	str	r0, [r4, #0]
 8005380:	f8c0 9000 	str.w	r9, [r0]
 8005384:	4604      	mov	r4, r0
 8005386:	e7e4      	b.n	8005352 <__pow5mult+0x6a>
 8005388:	4630      	mov	r0, r6
 800538a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800538e:	bf00      	nop
 8005390:	08005f7c 	.word	0x08005f7c
 8005394:	08005ea3 	.word	0x08005ea3
 8005398:	08005f23 	.word	0x08005f23

0800539c <__lshift>:
 800539c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	460c      	mov	r4, r1
 80053a2:	4607      	mov	r7, r0
 80053a4:	4691      	mov	r9, r2
 80053a6:	6923      	ldr	r3, [r4, #16]
 80053a8:	6849      	ldr	r1, [r1, #4]
 80053aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80053ae:	68a3      	ldr	r3, [r4, #8]
 80053b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053b4:	f108 0601 	add.w	r6, r8, #1
 80053b8:	42b3      	cmp	r3, r6
 80053ba:	db0b      	blt.n	80053d4 <__lshift+0x38>
 80053bc:	4638      	mov	r0, r7
 80053be:	f7ff fde1 	bl	8004f84 <_Balloc>
 80053c2:	4605      	mov	r5, r0
 80053c4:	b948      	cbnz	r0, 80053da <__lshift+0x3e>
 80053c6:	4602      	mov	r2, r0
 80053c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80053cc:	4b27      	ldr	r3, [pc, #156]	@ (800546c <__lshift+0xd0>)
 80053ce:	4828      	ldr	r0, [pc, #160]	@ (8005470 <__lshift+0xd4>)
 80053d0:	f000 fa1e 	bl	8005810 <__assert_func>
 80053d4:	3101      	adds	r1, #1
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	e7ee      	b.n	80053b8 <__lshift+0x1c>
 80053da:	2300      	movs	r3, #0
 80053dc:	f100 0114 	add.w	r1, r0, #20
 80053e0:	f100 0210 	add.w	r2, r0, #16
 80053e4:	4618      	mov	r0, r3
 80053e6:	4553      	cmp	r3, sl
 80053e8:	db33      	blt.n	8005452 <__lshift+0xb6>
 80053ea:	6920      	ldr	r0, [r4, #16]
 80053ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053f0:	f104 0314 	add.w	r3, r4, #20
 80053f4:	f019 091f 	ands.w	r9, r9, #31
 80053f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005400:	d02b      	beq.n	800545a <__lshift+0xbe>
 8005402:	468a      	mov	sl, r1
 8005404:	2200      	movs	r2, #0
 8005406:	f1c9 0e20 	rsb	lr, r9, #32
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	fa00 f009 	lsl.w	r0, r0, r9
 8005410:	4310      	orrs	r0, r2
 8005412:	f84a 0b04 	str.w	r0, [sl], #4
 8005416:	f853 2b04 	ldr.w	r2, [r3], #4
 800541a:	459c      	cmp	ip, r3
 800541c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005420:	d8f3      	bhi.n	800540a <__lshift+0x6e>
 8005422:	ebac 0304 	sub.w	r3, ip, r4
 8005426:	3b15      	subs	r3, #21
 8005428:	f023 0303 	bic.w	r3, r3, #3
 800542c:	3304      	adds	r3, #4
 800542e:	f104 0015 	add.w	r0, r4, #21
 8005432:	4584      	cmp	ip, r0
 8005434:	bf38      	it	cc
 8005436:	2304      	movcc	r3, #4
 8005438:	50ca      	str	r2, [r1, r3]
 800543a:	b10a      	cbz	r2, 8005440 <__lshift+0xa4>
 800543c:	f108 0602 	add.w	r6, r8, #2
 8005440:	3e01      	subs	r6, #1
 8005442:	4638      	mov	r0, r7
 8005444:	4621      	mov	r1, r4
 8005446:	612e      	str	r6, [r5, #16]
 8005448:	f7ff fddc 	bl	8005004 <_Bfree>
 800544c:	4628      	mov	r0, r5
 800544e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005452:	f842 0f04 	str.w	r0, [r2, #4]!
 8005456:	3301      	adds	r3, #1
 8005458:	e7c5      	b.n	80053e6 <__lshift+0x4a>
 800545a:	3904      	subs	r1, #4
 800545c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005460:	459c      	cmp	ip, r3
 8005462:	f841 2f04 	str.w	r2, [r1, #4]!
 8005466:	d8f9      	bhi.n	800545c <__lshift+0xc0>
 8005468:	e7ea      	b.n	8005440 <__lshift+0xa4>
 800546a:	bf00      	nop
 800546c:	08005f12 	.word	0x08005f12
 8005470:	08005f23 	.word	0x08005f23

08005474 <__mcmp>:
 8005474:	4603      	mov	r3, r0
 8005476:	690a      	ldr	r2, [r1, #16]
 8005478:	6900      	ldr	r0, [r0, #16]
 800547a:	b530      	push	{r4, r5, lr}
 800547c:	1a80      	subs	r0, r0, r2
 800547e:	d10e      	bne.n	800549e <__mcmp+0x2a>
 8005480:	3314      	adds	r3, #20
 8005482:	3114      	adds	r1, #20
 8005484:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005488:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800548c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005490:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005494:	4295      	cmp	r5, r2
 8005496:	d003      	beq.n	80054a0 <__mcmp+0x2c>
 8005498:	d205      	bcs.n	80054a6 <__mcmp+0x32>
 800549a:	f04f 30ff 	mov.w	r0, #4294967295
 800549e:	bd30      	pop	{r4, r5, pc}
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d3f3      	bcc.n	800548c <__mcmp+0x18>
 80054a4:	e7fb      	b.n	800549e <__mcmp+0x2a>
 80054a6:	2001      	movs	r0, #1
 80054a8:	e7f9      	b.n	800549e <__mcmp+0x2a>
	...

080054ac <__mdiff>:
 80054ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	4689      	mov	r9, r1
 80054b2:	4606      	mov	r6, r0
 80054b4:	4611      	mov	r1, r2
 80054b6:	4648      	mov	r0, r9
 80054b8:	4614      	mov	r4, r2
 80054ba:	f7ff ffdb 	bl	8005474 <__mcmp>
 80054be:	1e05      	subs	r5, r0, #0
 80054c0:	d112      	bne.n	80054e8 <__mdiff+0x3c>
 80054c2:	4629      	mov	r1, r5
 80054c4:	4630      	mov	r0, r6
 80054c6:	f7ff fd5d 	bl	8004f84 <_Balloc>
 80054ca:	4602      	mov	r2, r0
 80054cc:	b928      	cbnz	r0, 80054da <__mdiff+0x2e>
 80054ce:	f240 2137 	movw	r1, #567	@ 0x237
 80054d2:	4b3e      	ldr	r3, [pc, #248]	@ (80055cc <__mdiff+0x120>)
 80054d4:	483e      	ldr	r0, [pc, #248]	@ (80055d0 <__mdiff+0x124>)
 80054d6:	f000 f99b 	bl	8005810 <__assert_func>
 80054da:	2301      	movs	r3, #1
 80054dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80054e0:	4610      	mov	r0, r2
 80054e2:	b003      	add	sp, #12
 80054e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e8:	bfbc      	itt	lt
 80054ea:	464b      	movlt	r3, r9
 80054ec:	46a1      	movlt	r9, r4
 80054ee:	4630      	mov	r0, r6
 80054f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80054f4:	bfba      	itte	lt
 80054f6:	461c      	movlt	r4, r3
 80054f8:	2501      	movlt	r5, #1
 80054fa:	2500      	movge	r5, #0
 80054fc:	f7ff fd42 	bl	8004f84 <_Balloc>
 8005500:	4602      	mov	r2, r0
 8005502:	b918      	cbnz	r0, 800550c <__mdiff+0x60>
 8005504:	f240 2145 	movw	r1, #581	@ 0x245
 8005508:	4b30      	ldr	r3, [pc, #192]	@ (80055cc <__mdiff+0x120>)
 800550a:	e7e3      	b.n	80054d4 <__mdiff+0x28>
 800550c:	f100 0b14 	add.w	fp, r0, #20
 8005510:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005514:	f109 0310 	add.w	r3, r9, #16
 8005518:	60c5      	str	r5, [r0, #12]
 800551a:	f04f 0c00 	mov.w	ip, #0
 800551e:	f109 0514 	add.w	r5, r9, #20
 8005522:	46d9      	mov	r9, fp
 8005524:	6926      	ldr	r6, [r4, #16]
 8005526:	f104 0e14 	add.w	lr, r4, #20
 800552a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800552e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	9b01      	ldr	r3, [sp, #4]
 8005536:	f85e 0b04 	ldr.w	r0, [lr], #4
 800553a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800553e:	b281      	uxth	r1, r0
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	fa1f f38a 	uxth.w	r3, sl
 8005546:	1a5b      	subs	r3, r3, r1
 8005548:	0c00      	lsrs	r0, r0, #16
 800554a:	4463      	add	r3, ip
 800554c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005550:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005554:	b29b      	uxth	r3, r3
 8005556:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800555a:	4576      	cmp	r6, lr
 800555c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005560:	f849 3b04 	str.w	r3, [r9], #4
 8005564:	d8e6      	bhi.n	8005534 <__mdiff+0x88>
 8005566:	1b33      	subs	r3, r6, r4
 8005568:	3b15      	subs	r3, #21
 800556a:	f023 0303 	bic.w	r3, r3, #3
 800556e:	3415      	adds	r4, #21
 8005570:	3304      	adds	r3, #4
 8005572:	42a6      	cmp	r6, r4
 8005574:	bf38      	it	cc
 8005576:	2304      	movcc	r3, #4
 8005578:	441d      	add	r5, r3
 800557a:	445b      	add	r3, fp
 800557c:	461e      	mov	r6, r3
 800557e:	462c      	mov	r4, r5
 8005580:	4544      	cmp	r4, r8
 8005582:	d30e      	bcc.n	80055a2 <__mdiff+0xf6>
 8005584:	f108 0103 	add.w	r1, r8, #3
 8005588:	1b49      	subs	r1, r1, r5
 800558a:	f021 0103 	bic.w	r1, r1, #3
 800558e:	3d03      	subs	r5, #3
 8005590:	45a8      	cmp	r8, r5
 8005592:	bf38      	it	cc
 8005594:	2100      	movcc	r1, #0
 8005596:	440b      	add	r3, r1
 8005598:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800559c:	b199      	cbz	r1, 80055c6 <__mdiff+0x11a>
 800559e:	6117      	str	r7, [r2, #16]
 80055a0:	e79e      	b.n	80054e0 <__mdiff+0x34>
 80055a2:	46e6      	mov	lr, ip
 80055a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80055a8:	fa1f fc81 	uxth.w	ip, r1
 80055ac:	44f4      	add	ip, lr
 80055ae:	0c08      	lsrs	r0, r1, #16
 80055b0:	4471      	add	r1, lr
 80055b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80055b6:	b289      	uxth	r1, r1
 80055b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80055bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80055c0:	f846 1b04 	str.w	r1, [r6], #4
 80055c4:	e7dc      	b.n	8005580 <__mdiff+0xd4>
 80055c6:	3f01      	subs	r7, #1
 80055c8:	e7e6      	b.n	8005598 <__mdiff+0xec>
 80055ca:	bf00      	nop
 80055cc:	08005f12 	.word	0x08005f12
 80055d0:	08005f23 	.word	0x08005f23

080055d4 <__d2b>:
 80055d4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80055d8:	2101      	movs	r1, #1
 80055da:	4690      	mov	r8, r2
 80055dc:	4699      	mov	r9, r3
 80055de:	9e08      	ldr	r6, [sp, #32]
 80055e0:	f7ff fcd0 	bl	8004f84 <_Balloc>
 80055e4:	4604      	mov	r4, r0
 80055e6:	b930      	cbnz	r0, 80055f6 <__d2b+0x22>
 80055e8:	4602      	mov	r2, r0
 80055ea:	f240 310f 	movw	r1, #783	@ 0x30f
 80055ee:	4b23      	ldr	r3, [pc, #140]	@ (800567c <__d2b+0xa8>)
 80055f0:	4823      	ldr	r0, [pc, #140]	@ (8005680 <__d2b+0xac>)
 80055f2:	f000 f90d 	bl	8005810 <__assert_func>
 80055f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80055fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055fe:	b10d      	cbz	r5, 8005604 <__d2b+0x30>
 8005600:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	f1b8 0300 	subs.w	r3, r8, #0
 800560a:	d024      	beq.n	8005656 <__d2b+0x82>
 800560c:	4668      	mov	r0, sp
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	f7ff fd7f 	bl	8005112 <__lo0bits>
 8005614:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005618:	b1d8      	cbz	r0, 8005652 <__d2b+0x7e>
 800561a:	f1c0 0320 	rsb	r3, r0, #32
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	430b      	orrs	r3, r1
 8005624:	40c2      	lsrs	r2, r0
 8005626:	6163      	str	r3, [r4, #20]
 8005628:	9201      	str	r2, [sp, #4]
 800562a:	9b01      	ldr	r3, [sp, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf0c      	ite	eq
 8005630:	2201      	moveq	r2, #1
 8005632:	2202      	movne	r2, #2
 8005634:	61a3      	str	r3, [r4, #24]
 8005636:	6122      	str	r2, [r4, #16]
 8005638:	b1ad      	cbz	r5, 8005666 <__d2b+0x92>
 800563a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800563e:	4405      	add	r5, r0
 8005640:	6035      	str	r5, [r6, #0]
 8005642:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005648:	6018      	str	r0, [r3, #0]
 800564a:	4620      	mov	r0, r4
 800564c:	b002      	add	sp, #8
 800564e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005652:	6161      	str	r1, [r4, #20]
 8005654:	e7e9      	b.n	800562a <__d2b+0x56>
 8005656:	a801      	add	r0, sp, #4
 8005658:	f7ff fd5b 	bl	8005112 <__lo0bits>
 800565c:	9b01      	ldr	r3, [sp, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	6163      	str	r3, [r4, #20]
 8005662:	3020      	adds	r0, #32
 8005664:	e7e7      	b.n	8005636 <__d2b+0x62>
 8005666:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800566a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800566e:	6030      	str	r0, [r6, #0]
 8005670:	6918      	ldr	r0, [r3, #16]
 8005672:	f7ff fd2f 	bl	80050d4 <__hi0bits>
 8005676:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800567a:	e7e4      	b.n	8005646 <__d2b+0x72>
 800567c:	08005f12 	.word	0x08005f12
 8005680:	08005f23 	.word	0x08005f23

08005684 <__sflush_r>:
 8005684:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	0716      	lsls	r6, r2, #28
 800568c:	4605      	mov	r5, r0
 800568e:	460c      	mov	r4, r1
 8005690:	d454      	bmi.n	800573c <__sflush_r+0xb8>
 8005692:	684b      	ldr	r3, [r1, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	dc02      	bgt.n	800569e <__sflush_r+0x1a>
 8005698:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	dd48      	ble.n	8005730 <__sflush_r+0xac>
 800569e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	d045      	beq.n	8005730 <__sflush_r+0xac>
 80056a4:	2300      	movs	r3, #0
 80056a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056aa:	682f      	ldr	r7, [r5, #0]
 80056ac:	6a21      	ldr	r1, [r4, #32]
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	d030      	beq.n	8005714 <__sflush_r+0x90>
 80056b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	0759      	lsls	r1, r3, #29
 80056b8:	d505      	bpl.n	80056c6 <__sflush_r+0x42>
 80056ba:	6863      	ldr	r3, [r4, #4]
 80056bc:	1ad2      	subs	r2, r2, r3
 80056be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80056c0:	b10b      	cbz	r3, 80056c6 <__sflush_r+0x42>
 80056c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056c4:	1ad2      	subs	r2, r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	4628      	mov	r0, r5
 80056ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056cc:	6a21      	ldr	r1, [r4, #32]
 80056ce:	47b0      	blx	r6
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	d106      	bne.n	80056e4 <__sflush_r+0x60>
 80056d6:	6829      	ldr	r1, [r5, #0]
 80056d8:	291d      	cmp	r1, #29
 80056da:	d82b      	bhi.n	8005734 <__sflush_r+0xb0>
 80056dc:	4a28      	ldr	r2, [pc, #160]	@ (8005780 <__sflush_r+0xfc>)
 80056de:	410a      	asrs	r2, r1
 80056e0:	07d6      	lsls	r6, r2, #31
 80056e2:	d427      	bmi.n	8005734 <__sflush_r+0xb0>
 80056e4:	2200      	movs	r2, #0
 80056e6:	6062      	str	r2, [r4, #4]
 80056e8:	6922      	ldr	r2, [r4, #16]
 80056ea:	04d9      	lsls	r1, r3, #19
 80056ec:	6022      	str	r2, [r4, #0]
 80056ee:	d504      	bpl.n	80056fa <__sflush_r+0x76>
 80056f0:	1c42      	adds	r2, r0, #1
 80056f2:	d101      	bne.n	80056f8 <__sflush_r+0x74>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b903      	cbnz	r3, 80056fa <__sflush_r+0x76>
 80056f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80056fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056fc:	602f      	str	r7, [r5, #0]
 80056fe:	b1b9      	cbz	r1, 8005730 <__sflush_r+0xac>
 8005700:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005704:	4299      	cmp	r1, r3
 8005706:	d002      	beq.n	800570e <__sflush_r+0x8a>
 8005708:	4628      	mov	r0, r5
 800570a:	f7ff fb3d 	bl	8004d88 <_free_r>
 800570e:	2300      	movs	r3, #0
 8005710:	6363      	str	r3, [r4, #52]	@ 0x34
 8005712:	e00d      	b.n	8005730 <__sflush_r+0xac>
 8005714:	2301      	movs	r3, #1
 8005716:	4628      	mov	r0, r5
 8005718:	47b0      	blx	r6
 800571a:	4602      	mov	r2, r0
 800571c:	1c50      	adds	r0, r2, #1
 800571e:	d1c9      	bne.n	80056b4 <__sflush_r+0x30>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0c6      	beq.n	80056b4 <__sflush_r+0x30>
 8005726:	2b1d      	cmp	r3, #29
 8005728:	d001      	beq.n	800572e <__sflush_r+0xaa>
 800572a:	2b16      	cmp	r3, #22
 800572c:	d11d      	bne.n	800576a <__sflush_r+0xe6>
 800572e:	602f      	str	r7, [r5, #0]
 8005730:	2000      	movs	r0, #0
 8005732:	e021      	b.n	8005778 <__sflush_r+0xf4>
 8005734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005738:	b21b      	sxth	r3, r3
 800573a:	e01a      	b.n	8005772 <__sflush_r+0xee>
 800573c:	690f      	ldr	r7, [r1, #16]
 800573e:	2f00      	cmp	r7, #0
 8005740:	d0f6      	beq.n	8005730 <__sflush_r+0xac>
 8005742:	0793      	lsls	r3, r2, #30
 8005744:	bf18      	it	ne
 8005746:	2300      	movne	r3, #0
 8005748:	680e      	ldr	r6, [r1, #0]
 800574a:	bf08      	it	eq
 800574c:	694b      	ldreq	r3, [r1, #20]
 800574e:	1bf6      	subs	r6, r6, r7
 8005750:	600f      	str	r7, [r1, #0]
 8005752:	608b      	str	r3, [r1, #8]
 8005754:	2e00      	cmp	r6, #0
 8005756:	ddeb      	ble.n	8005730 <__sflush_r+0xac>
 8005758:	4633      	mov	r3, r6
 800575a:	463a      	mov	r2, r7
 800575c:	4628      	mov	r0, r5
 800575e:	6a21      	ldr	r1, [r4, #32]
 8005760:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005764:	47e0      	blx	ip
 8005766:	2800      	cmp	r0, #0
 8005768:	dc07      	bgt.n	800577a <__sflush_r+0xf6>
 800576a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800576e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005772:	f04f 30ff 	mov.w	r0, #4294967295
 8005776:	81a3      	strh	r3, [r4, #12]
 8005778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800577a:	4407      	add	r7, r0
 800577c:	1a36      	subs	r6, r6, r0
 800577e:	e7e9      	b.n	8005754 <__sflush_r+0xd0>
 8005780:	dfbffffe 	.word	0xdfbffffe

08005784 <_fflush_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	690b      	ldr	r3, [r1, #16]
 8005788:	4605      	mov	r5, r0
 800578a:	460c      	mov	r4, r1
 800578c:	b913      	cbnz	r3, 8005794 <_fflush_r+0x10>
 800578e:	2500      	movs	r5, #0
 8005790:	4628      	mov	r0, r5
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	b118      	cbz	r0, 800579e <_fflush_r+0x1a>
 8005796:	6a03      	ldr	r3, [r0, #32]
 8005798:	b90b      	cbnz	r3, 800579e <_fflush_r+0x1a>
 800579a:	f7fe fb9d 	bl	8003ed8 <__sinit>
 800579e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0f3      	beq.n	800578e <_fflush_r+0xa>
 80057a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057a8:	07d0      	lsls	r0, r2, #31
 80057aa:	d404      	bmi.n	80057b6 <_fflush_r+0x32>
 80057ac:	0599      	lsls	r1, r3, #22
 80057ae:	d402      	bmi.n	80057b6 <_fflush_r+0x32>
 80057b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057b2:	f7fe fc88 	bl	80040c6 <__retarget_lock_acquire_recursive>
 80057b6:	4628      	mov	r0, r5
 80057b8:	4621      	mov	r1, r4
 80057ba:	f7ff ff63 	bl	8005684 <__sflush_r>
 80057be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057c0:	4605      	mov	r5, r0
 80057c2:	07da      	lsls	r2, r3, #31
 80057c4:	d4e4      	bmi.n	8005790 <_fflush_r+0xc>
 80057c6:	89a3      	ldrh	r3, [r4, #12]
 80057c8:	059b      	lsls	r3, r3, #22
 80057ca:	d4e1      	bmi.n	8005790 <_fflush_r+0xc>
 80057cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057ce:	f7fe fc7b 	bl	80040c8 <__retarget_lock_release_recursive>
 80057d2:	e7dd      	b.n	8005790 <_fflush_r+0xc>

080057d4 <_sbrk_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	2300      	movs	r3, #0
 80057d8:	4d05      	ldr	r5, [pc, #20]	@ (80057f0 <_sbrk_r+0x1c>)
 80057da:	4604      	mov	r4, r0
 80057dc:	4608      	mov	r0, r1
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	f7fc f916 	bl	8001a10 <_sbrk>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_sbrk_r+0x1a>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_sbrk_r+0x1a>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	20000408 	.word	0x20000408

080057f4 <memcpy>:
 80057f4:	440a      	add	r2, r1
 80057f6:	4291      	cmp	r1, r2
 80057f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057fc:	d100      	bne.n	8005800 <memcpy+0xc>
 80057fe:	4770      	bx	lr
 8005800:	b510      	push	{r4, lr}
 8005802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005806:	4291      	cmp	r1, r2
 8005808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800580c:	d1f9      	bne.n	8005802 <memcpy+0xe>
 800580e:	bd10      	pop	{r4, pc}

08005810 <__assert_func>:
 8005810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005812:	4614      	mov	r4, r2
 8005814:	461a      	mov	r2, r3
 8005816:	4b09      	ldr	r3, [pc, #36]	@ (800583c <__assert_func+0x2c>)
 8005818:	4605      	mov	r5, r0
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68d8      	ldr	r0, [r3, #12]
 800581e:	b954      	cbnz	r4, 8005836 <__assert_func+0x26>
 8005820:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <__assert_func+0x30>)
 8005822:	461c      	mov	r4, r3
 8005824:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005828:	9100      	str	r1, [sp, #0]
 800582a:	462b      	mov	r3, r5
 800582c:	4905      	ldr	r1, [pc, #20]	@ (8005844 <__assert_func+0x34>)
 800582e:	f000 f841 	bl	80058b4 <fiprintf>
 8005832:	f000 f851 	bl	80058d8 <abort>
 8005836:	4b04      	ldr	r3, [pc, #16]	@ (8005848 <__assert_func+0x38>)
 8005838:	e7f4      	b.n	8005824 <__assert_func+0x14>
 800583a:	bf00      	nop
 800583c:	20000030 	.word	0x20000030
 8005840:	080060bd 	.word	0x080060bd
 8005844:	0800608f 	.word	0x0800608f
 8005848:	08006082 	.word	0x08006082

0800584c <_calloc_r>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	fba1 5402 	umull	r5, r4, r1, r2
 8005852:	b93c      	cbnz	r4, 8005864 <_calloc_r+0x18>
 8005854:	4629      	mov	r1, r5
 8005856:	f7ff fb09 	bl	8004e6c <_malloc_r>
 800585a:	4606      	mov	r6, r0
 800585c:	b928      	cbnz	r0, 800586a <_calloc_r+0x1e>
 800585e:	2600      	movs	r6, #0
 8005860:	4630      	mov	r0, r6
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	220c      	movs	r2, #12
 8005866:	6002      	str	r2, [r0, #0]
 8005868:	e7f9      	b.n	800585e <_calloc_r+0x12>
 800586a:	462a      	mov	r2, r5
 800586c:	4621      	mov	r1, r4
 800586e:	f7fe fbac 	bl	8003fca <memset>
 8005872:	e7f5      	b.n	8005860 <_calloc_r+0x14>

08005874 <__ascii_mbtowc>:
 8005874:	b082      	sub	sp, #8
 8005876:	b901      	cbnz	r1, 800587a <__ascii_mbtowc+0x6>
 8005878:	a901      	add	r1, sp, #4
 800587a:	b142      	cbz	r2, 800588e <__ascii_mbtowc+0x1a>
 800587c:	b14b      	cbz	r3, 8005892 <__ascii_mbtowc+0x1e>
 800587e:	7813      	ldrb	r3, [r2, #0]
 8005880:	600b      	str	r3, [r1, #0]
 8005882:	7812      	ldrb	r2, [r2, #0]
 8005884:	1e10      	subs	r0, r2, #0
 8005886:	bf18      	it	ne
 8005888:	2001      	movne	r0, #1
 800588a:	b002      	add	sp, #8
 800588c:	4770      	bx	lr
 800588e:	4610      	mov	r0, r2
 8005890:	e7fb      	b.n	800588a <__ascii_mbtowc+0x16>
 8005892:	f06f 0001 	mvn.w	r0, #1
 8005896:	e7f8      	b.n	800588a <__ascii_mbtowc+0x16>

08005898 <__ascii_wctomb>:
 8005898:	4603      	mov	r3, r0
 800589a:	4608      	mov	r0, r1
 800589c:	b141      	cbz	r1, 80058b0 <__ascii_wctomb+0x18>
 800589e:	2aff      	cmp	r2, #255	@ 0xff
 80058a0:	d904      	bls.n	80058ac <__ascii_wctomb+0x14>
 80058a2:	228a      	movs	r2, #138	@ 0x8a
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	4770      	bx	lr
 80058ac:	2001      	movs	r0, #1
 80058ae:	700a      	strb	r2, [r1, #0]
 80058b0:	4770      	bx	lr
	...

080058b4 <fiprintf>:
 80058b4:	b40e      	push	{r1, r2, r3}
 80058b6:	b503      	push	{r0, r1, lr}
 80058b8:	4601      	mov	r1, r0
 80058ba:	ab03      	add	r3, sp, #12
 80058bc:	4805      	ldr	r0, [pc, #20]	@ (80058d4 <fiprintf+0x20>)
 80058be:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c2:	6800      	ldr	r0, [r0, #0]
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	f000 f835 	bl	8005934 <_vfiprintf_r>
 80058ca:	b002      	add	sp, #8
 80058cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d0:	b003      	add	sp, #12
 80058d2:	4770      	bx	lr
 80058d4:	20000030 	.word	0x20000030

080058d8 <abort>:
 80058d8:	2006      	movs	r0, #6
 80058da:	b508      	push	{r3, lr}
 80058dc:	f000 f9fe 	bl	8005cdc <raise>
 80058e0:	2001      	movs	r0, #1
 80058e2:	f7fc f820 	bl	8001926 <_exit>

080058e6 <__sfputc_r>:
 80058e6:	6893      	ldr	r3, [r2, #8]
 80058e8:	b410      	push	{r4}
 80058ea:	3b01      	subs	r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	6093      	str	r3, [r2, #8]
 80058f0:	da07      	bge.n	8005902 <__sfputc_r+0x1c>
 80058f2:	6994      	ldr	r4, [r2, #24]
 80058f4:	42a3      	cmp	r3, r4
 80058f6:	db01      	blt.n	80058fc <__sfputc_r+0x16>
 80058f8:	290a      	cmp	r1, #10
 80058fa:	d102      	bne.n	8005902 <__sfputc_r+0x1c>
 80058fc:	bc10      	pop	{r4}
 80058fe:	f000 b931 	b.w	8005b64 <__swbuf_r>
 8005902:	6813      	ldr	r3, [r2, #0]
 8005904:	1c58      	adds	r0, r3, #1
 8005906:	6010      	str	r0, [r2, #0]
 8005908:	7019      	strb	r1, [r3, #0]
 800590a:	4608      	mov	r0, r1
 800590c:	bc10      	pop	{r4}
 800590e:	4770      	bx	lr

08005910 <__sfputs_r>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	4606      	mov	r6, r0
 8005914:	460f      	mov	r7, r1
 8005916:	4614      	mov	r4, r2
 8005918:	18d5      	adds	r5, r2, r3
 800591a:	42ac      	cmp	r4, r5
 800591c:	d101      	bne.n	8005922 <__sfputs_r+0x12>
 800591e:	2000      	movs	r0, #0
 8005920:	e007      	b.n	8005932 <__sfputs_r+0x22>
 8005922:	463a      	mov	r2, r7
 8005924:	4630      	mov	r0, r6
 8005926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592a:	f7ff ffdc 	bl	80058e6 <__sfputc_r>
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	d1f3      	bne.n	800591a <__sfputs_r+0xa>
 8005932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005934 <_vfiprintf_r>:
 8005934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	460d      	mov	r5, r1
 800593a:	4614      	mov	r4, r2
 800593c:	4698      	mov	r8, r3
 800593e:	4606      	mov	r6, r0
 8005940:	b09d      	sub	sp, #116	@ 0x74
 8005942:	b118      	cbz	r0, 800594c <_vfiprintf_r+0x18>
 8005944:	6a03      	ldr	r3, [r0, #32]
 8005946:	b90b      	cbnz	r3, 800594c <_vfiprintf_r+0x18>
 8005948:	f7fe fac6 	bl	8003ed8 <__sinit>
 800594c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800594e:	07d9      	lsls	r1, r3, #31
 8005950:	d405      	bmi.n	800595e <_vfiprintf_r+0x2a>
 8005952:	89ab      	ldrh	r3, [r5, #12]
 8005954:	059a      	lsls	r2, r3, #22
 8005956:	d402      	bmi.n	800595e <_vfiprintf_r+0x2a>
 8005958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800595a:	f7fe fbb4 	bl	80040c6 <__retarget_lock_acquire_recursive>
 800595e:	89ab      	ldrh	r3, [r5, #12]
 8005960:	071b      	lsls	r3, r3, #28
 8005962:	d501      	bpl.n	8005968 <_vfiprintf_r+0x34>
 8005964:	692b      	ldr	r3, [r5, #16]
 8005966:	b99b      	cbnz	r3, 8005990 <_vfiprintf_r+0x5c>
 8005968:	4629      	mov	r1, r5
 800596a:	4630      	mov	r0, r6
 800596c:	f000 f938 	bl	8005be0 <__swsetup_r>
 8005970:	b170      	cbz	r0, 8005990 <_vfiprintf_r+0x5c>
 8005972:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005974:	07dc      	lsls	r4, r3, #31
 8005976:	d504      	bpl.n	8005982 <_vfiprintf_r+0x4e>
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	b01d      	add	sp, #116	@ 0x74
 800597e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	0598      	lsls	r0, r3, #22
 8005986:	d4f7      	bmi.n	8005978 <_vfiprintf_r+0x44>
 8005988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800598a:	f7fe fb9d 	bl	80040c8 <__retarget_lock_release_recursive>
 800598e:	e7f3      	b.n	8005978 <_vfiprintf_r+0x44>
 8005990:	2300      	movs	r3, #0
 8005992:	9309      	str	r3, [sp, #36]	@ 0x24
 8005994:	2320      	movs	r3, #32
 8005996:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800599a:	2330      	movs	r3, #48	@ 0x30
 800599c:	f04f 0901 	mov.w	r9, #1
 80059a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005b50 <_vfiprintf_r+0x21c>
 80059a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059ac:	4623      	mov	r3, r4
 80059ae:	469a      	mov	sl, r3
 80059b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059b4:	b10a      	cbz	r2, 80059ba <_vfiprintf_r+0x86>
 80059b6:	2a25      	cmp	r2, #37	@ 0x25
 80059b8:	d1f9      	bne.n	80059ae <_vfiprintf_r+0x7a>
 80059ba:	ebba 0b04 	subs.w	fp, sl, r4
 80059be:	d00b      	beq.n	80059d8 <_vfiprintf_r+0xa4>
 80059c0:	465b      	mov	r3, fp
 80059c2:	4622      	mov	r2, r4
 80059c4:	4629      	mov	r1, r5
 80059c6:	4630      	mov	r0, r6
 80059c8:	f7ff ffa2 	bl	8005910 <__sfputs_r>
 80059cc:	3001      	adds	r0, #1
 80059ce:	f000 80a7 	beq.w	8005b20 <_vfiprintf_r+0x1ec>
 80059d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059d4:	445a      	add	r2, fp
 80059d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80059d8:	f89a 3000 	ldrb.w	r3, [sl]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 809f 	beq.w	8005b20 <_vfiprintf_r+0x1ec>
 80059e2:	2300      	movs	r3, #0
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295
 80059e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059ec:	f10a 0a01 	add.w	sl, sl, #1
 80059f0:	9304      	str	r3, [sp, #16]
 80059f2:	9307      	str	r3, [sp, #28]
 80059f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80059fa:	4654      	mov	r4, sl
 80059fc:	2205      	movs	r2, #5
 80059fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a02:	4853      	ldr	r0, [pc, #332]	@ (8005b50 <_vfiprintf_r+0x21c>)
 8005a04:	f7fe fb61 	bl	80040ca <memchr>
 8005a08:	9a04      	ldr	r2, [sp, #16]
 8005a0a:	b9d8      	cbnz	r0, 8005a44 <_vfiprintf_r+0x110>
 8005a0c:	06d1      	lsls	r1, r2, #27
 8005a0e:	bf44      	itt	mi
 8005a10:	2320      	movmi	r3, #32
 8005a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a16:	0713      	lsls	r3, r2, #28
 8005a18:	bf44      	itt	mi
 8005a1a:	232b      	movmi	r3, #43	@ 0x2b
 8005a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a20:	f89a 3000 	ldrb.w	r3, [sl]
 8005a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a26:	d015      	beq.n	8005a54 <_vfiprintf_r+0x120>
 8005a28:	4654      	mov	r4, sl
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f04f 0c0a 	mov.w	ip, #10
 8005a30:	9a07      	ldr	r2, [sp, #28]
 8005a32:	4621      	mov	r1, r4
 8005a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a38:	3b30      	subs	r3, #48	@ 0x30
 8005a3a:	2b09      	cmp	r3, #9
 8005a3c:	d94b      	bls.n	8005ad6 <_vfiprintf_r+0x1a2>
 8005a3e:	b1b0      	cbz	r0, 8005a6e <_vfiprintf_r+0x13a>
 8005a40:	9207      	str	r2, [sp, #28]
 8005a42:	e014      	b.n	8005a6e <_vfiprintf_r+0x13a>
 8005a44:	eba0 0308 	sub.w	r3, r0, r8
 8005a48:	fa09 f303 	lsl.w	r3, r9, r3
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	46a2      	mov	sl, r4
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	e7d2      	b.n	80059fa <_vfiprintf_r+0xc6>
 8005a54:	9b03      	ldr	r3, [sp, #12]
 8005a56:	1d19      	adds	r1, r3, #4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	9103      	str	r1, [sp, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	bfbb      	ittet	lt
 8005a60:	425b      	neglt	r3, r3
 8005a62:	f042 0202 	orrlt.w	r2, r2, #2
 8005a66:	9307      	strge	r3, [sp, #28]
 8005a68:	9307      	strlt	r3, [sp, #28]
 8005a6a:	bfb8      	it	lt
 8005a6c:	9204      	strlt	r2, [sp, #16]
 8005a6e:	7823      	ldrb	r3, [r4, #0]
 8005a70:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a72:	d10a      	bne.n	8005a8a <_vfiprintf_r+0x156>
 8005a74:	7863      	ldrb	r3, [r4, #1]
 8005a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a78:	d132      	bne.n	8005ae0 <_vfiprintf_r+0x1ac>
 8005a7a:	9b03      	ldr	r3, [sp, #12]
 8005a7c:	3402      	adds	r4, #2
 8005a7e:	1d1a      	adds	r2, r3, #4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	9203      	str	r2, [sp, #12]
 8005a84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a88:	9305      	str	r3, [sp, #20]
 8005a8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005b54 <_vfiprintf_r+0x220>
 8005a8e:	2203      	movs	r2, #3
 8005a90:	4650      	mov	r0, sl
 8005a92:	7821      	ldrb	r1, [r4, #0]
 8005a94:	f7fe fb19 	bl	80040ca <memchr>
 8005a98:	b138      	cbz	r0, 8005aaa <_vfiprintf_r+0x176>
 8005a9a:	2240      	movs	r2, #64	@ 0x40
 8005a9c:	9b04      	ldr	r3, [sp, #16]
 8005a9e:	eba0 000a 	sub.w	r0, r0, sl
 8005aa2:	4082      	lsls	r2, r0
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	3401      	adds	r4, #1
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aae:	2206      	movs	r2, #6
 8005ab0:	4829      	ldr	r0, [pc, #164]	@ (8005b58 <_vfiprintf_r+0x224>)
 8005ab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ab6:	f7fe fb08 	bl	80040ca <memchr>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d03f      	beq.n	8005b3e <_vfiprintf_r+0x20a>
 8005abe:	4b27      	ldr	r3, [pc, #156]	@ (8005b5c <_vfiprintf_r+0x228>)
 8005ac0:	bb1b      	cbnz	r3, 8005b0a <_vfiprintf_r+0x1d6>
 8005ac2:	9b03      	ldr	r3, [sp, #12]
 8005ac4:	3307      	adds	r3, #7
 8005ac6:	f023 0307 	bic.w	r3, r3, #7
 8005aca:	3308      	adds	r3, #8
 8005acc:	9303      	str	r3, [sp, #12]
 8005ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ad0:	443b      	add	r3, r7
 8005ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ad4:	e76a      	b.n	80059ac <_vfiprintf_r+0x78>
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	2001      	movs	r0, #1
 8005ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ade:	e7a8      	b.n	8005a32 <_vfiprintf_r+0xfe>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f04f 0c0a 	mov.w	ip, #10
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	3401      	adds	r4, #1
 8005aea:	9305      	str	r3, [sp, #20]
 8005aec:	4620      	mov	r0, r4
 8005aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005af2:	3a30      	subs	r2, #48	@ 0x30
 8005af4:	2a09      	cmp	r2, #9
 8005af6:	d903      	bls.n	8005b00 <_vfiprintf_r+0x1cc>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0c6      	beq.n	8005a8a <_vfiprintf_r+0x156>
 8005afc:	9105      	str	r1, [sp, #20]
 8005afe:	e7c4      	b.n	8005a8a <_vfiprintf_r+0x156>
 8005b00:	4604      	mov	r4, r0
 8005b02:	2301      	movs	r3, #1
 8005b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b08:	e7f0      	b.n	8005aec <_vfiprintf_r+0x1b8>
 8005b0a:	ab03      	add	r3, sp, #12
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	462a      	mov	r2, r5
 8005b10:	4630      	mov	r0, r6
 8005b12:	4b13      	ldr	r3, [pc, #76]	@ (8005b60 <_vfiprintf_r+0x22c>)
 8005b14:	a904      	add	r1, sp, #16
 8005b16:	f7fd fd95 	bl	8003644 <_printf_float>
 8005b1a:	4607      	mov	r7, r0
 8005b1c:	1c78      	adds	r0, r7, #1
 8005b1e:	d1d6      	bne.n	8005ace <_vfiprintf_r+0x19a>
 8005b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b22:	07d9      	lsls	r1, r3, #31
 8005b24:	d405      	bmi.n	8005b32 <_vfiprintf_r+0x1fe>
 8005b26:	89ab      	ldrh	r3, [r5, #12]
 8005b28:	059a      	lsls	r2, r3, #22
 8005b2a:	d402      	bmi.n	8005b32 <_vfiprintf_r+0x1fe>
 8005b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b2e:	f7fe facb 	bl	80040c8 <__retarget_lock_release_recursive>
 8005b32:	89ab      	ldrh	r3, [r5, #12]
 8005b34:	065b      	lsls	r3, r3, #25
 8005b36:	f53f af1f 	bmi.w	8005978 <_vfiprintf_r+0x44>
 8005b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b3c:	e71e      	b.n	800597c <_vfiprintf_r+0x48>
 8005b3e:	ab03      	add	r3, sp, #12
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	462a      	mov	r2, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	4b06      	ldr	r3, [pc, #24]	@ (8005b60 <_vfiprintf_r+0x22c>)
 8005b48:	a904      	add	r1, sp, #16
 8005b4a:	f7fe f819 	bl	8003b80 <_printf_i>
 8005b4e:	e7e4      	b.n	8005b1a <_vfiprintf_r+0x1e6>
 8005b50:	080061bf 	.word	0x080061bf
 8005b54:	080061c5 	.word	0x080061c5
 8005b58:	080061c9 	.word	0x080061c9
 8005b5c:	08003645 	.word	0x08003645
 8005b60:	08005911 	.word	0x08005911

08005b64 <__swbuf_r>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	460e      	mov	r6, r1
 8005b68:	4614      	mov	r4, r2
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	b118      	cbz	r0, 8005b76 <__swbuf_r+0x12>
 8005b6e:	6a03      	ldr	r3, [r0, #32]
 8005b70:	b90b      	cbnz	r3, 8005b76 <__swbuf_r+0x12>
 8005b72:	f7fe f9b1 	bl	8003ed8 <__sinit>
 8005b76:	69a3      	ldr	r3, [r4, #24]
 8005b78:	60a3      	str	r3, [r4, #8]
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	071a      	lsls	r2, r3, #28
 8005b7e:	d501      	bpl.n	8005b84 <__swbuf_r+0x20>
 8005b80:	6923      	ldr	r3, [r4, #16]
 8005b82:	b943      	cbnz	r3, 8005b96 <__swbuf_r+0x32>
 8005b84:	4621      	mov	r1, r4
 8005b86:	4628      	mov	r0, r5
 8005b88:	f000 f82a 	bl	8005be0 <__swsetup_r>
 8005b8c:	b118      	cbz	r0, 8005b96 <__swbuf_r+0x32>
 8005b8e:	f04f 37ff 	mov.w	r7, #4294967295
 8005b92:	4638      	mov	r0, r7
 8005b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	6922      	ldr	r2, [r4, #16]
 8005b9a:	b2f6      	uxtb	r6, r6
 8005b9c:	1a98      	subs	r0, r3, r2
 8005b9e:	6963      	ldr	r3, [r4, #20]
 8005ba0:	4637      	mov	r7, r6
 8005ba2:	4283      	cmp	r3, r0
 8005ba4:	dc05      	bgt.n	8005bb2 <__swbuf_r+0x4e>
 8005ba6:	4621      	mov	r1, r4
 8005ba8:	4628      	mov	r0, r5
 8005baa:	f7ff fdeb 	bl	8005784 <_fflush_r>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d1ed      	bne.n	8005b8e <__swbuf_r+0x2a>
 8005bb2:	68a3      	ldr	r3, [r4, #8]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	60a3      	str	r3, [r4, #8]
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	6022      	str	r2, [r4, #0]
 8005bbe:	701e      	strb	r6, [r3, #0]
 8005bc0:	6962      	ldr	r2, [r4, #20]
 8005bc2:	1c43      	adds	r3, r0, #1
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d004      	beq.n	8005bd2 <__swbuf_r+0x6e>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	07db      	lsls	r3, r3, #31
 8005bcc:	d5e1      	bpl.n	8005b92 <__swbuf_r+0x2e>
 8005bce:	2e0a      	cmp	r6, #10
 8005bd0:	d1df      	bne.n	8005b92 <__swbuf_r+0x2e>
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	f7ff fdd5 	bl	8005784 <_fflush_r>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d0d9      	beq.n	8005b92 <__swbuf_r+0x2e>
 8005bde:	e7d6      	b.n	8005b8e <__swbuf_r+0x2a>

08005be0 <__swsetup_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4b29      	ldr	r3, [pc, #164]	@ (8005c88 <__swsetup_r+0xa8>)
 8005be4:	4605      	mov	r5, r0
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	460c      	mov	r4, r1
 8005bea:	b118      	cbz	r0, 8005bf4 <__swsetup_r+0x14>
 8005bec:	6a03      	ldr	r3, [r0, #32]
 8005bee:	b90b      	cbnz	r3, 8005bf4 <__swsetup_r+0x14>
 8005bf0:	f7fe f972 	bl	8003ed8 <__sinit>
 8005bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf8:	0719      	lsls	r1, r3, #28
 8005bfa:	d422      	bmi.n	8005c42 <__swsetup_r+0x62>
 8005bfc:	06da      	lsls	r2, r3, #27
 8005bfe:	d407      	bmi.n	8005c10 <__swsetup_r+0x30>
 8005c00:	2209      	movs	r2, #9
 8005c02:	602a      	str	r2, [r5, #0]
 8005c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0c:	81a3      	strh	r3, [r4, #12]
 8005c0e:	e033      	b.n	8005c78 <__swsetup_r+0x98>
 8005c10:	0758      	lsls	r0, r3, #29
 8005c12:	d512      	bpl.n	8005c3a <__swsetup_r+0x5a>
 8005c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c16:	b141      	cbz	r1, 8005c2a <__swsetup_r+0x4a>
 8005c18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c1c:	4299      	cmp	r1, r3
 8005c1e:	d002      	beq.n	8005c26 <__swsetup_r+0x46>
 8005c20:	4628      	mov	r0, r5
 8005c22:	f7ff f8b1 	bl	8004d88 <_free_r>
 8005c26:	2300      	movs	r3, #0
 8005c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c30:	81a3      	strh	r3, [r4, #12]
 8005c32:	2300      	movs	r3, #0
 8005c34:	6063      	str	r3, [r4, #4]
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	f043 0308 	orr.w	r3, r3, #8
 8005c40:	81a3      	strh	r3, [r4, #12]
 8005c42:	6923      	ldr	r3, [r4, #16]
 8005c44:	b94b      	cbnz	r3, 8005c5a <__swsetup_r+0x7a>
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c50:	d003      	beq.n	8005c5a <__swsetup_r+0x7a>
 8005c52:	4621      	mov	r1, r4
 8005c54:	4628      	mov	r0, r5
 8005c56:	f000 f882 	bl	8005d5e <__smakebuf_r>
 8005c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5e:	f013 0201 	ands.w	r2, r3, #1
 8005c62:	d00a      	beq.n	8005c7a <__swsetup_r+0x9a>
 8005c64:	2200      	movs	r2, #0
 8005c66:	60a2      	str	r2, [r4, #8]
 8005c68:	6962      	ldr	r2, [r4, #20]
 8005c6a:	4252      	negs	r2, r2
 8005c6c:	61a2      	str	r2, [r4, #24]
 8005c6e:	6922      	ldr	r2, [r4, #16]
 8005c70:	b942      	cbnz	r2, 8005c84 <__swsetup_r+0xa4>
 8005c72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c76:	d1c5      	bne.n	8005c04 <__swsetup_r+0x24>
 8005c78:	bd38      	pop	{r3, r4, r5, pc}
 8005c7a:	0799      	lsls	r1, r3, #30
 8005c7c:	bf58      	it	pl
 8005c7e:	6962      	ldrpl	r2, [r4, #20]
 8005c80:	60a2      	str	r2, [r4, #8]
 8005c82:	e7f4      	b.n	8005c6e <__swsetup_r+0x8e>
 8005c84:	2000      	movs	r0, #0
 8005c86:	e7f7      	b.n	8005c78 <__swsetup_r+0x98>
 8005c88:	20000030 	.word	0x20000030

08005c8c <_raise_r>:
 8005c8c:	291f      	cmp	r1, #31
 8005c8e:	b538      	push	{r3, r4, r5, lr}
 8005c90:	4605      	mov	r5, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	d904      	bls.n	8005ca0 <_raise_r+0x14>
 8005c96:	2316      	movs	r3, #22
 8005c98:	6003      	str	r3, [r0, #0]
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005ca2:	b112      	cbz	r2, 8005caa <_raise_r+0x1e>
 8005ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ca8:	b94b      	cbnz	r3, 8005cbe <_raise_r+0x32>
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 f830 	bl	8005d10 <_getpid_r>
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	4601      	mov	r1, r0
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cba:	f000 b817 	b.w	8005cec <_kill_r>
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d00a      	beq.n	8005cd8 <_raise_r+0x4c>
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	d103      	bne.n	8005cce <_raise_r+0x42>
 8005cc6:	2316      	movs	r3, #22
 8005cc8:	6003      	str	r3, [r0, #0]
 8005cca:	2001      	movs	r0, #1
 8005ccc:	e7e7      	b.n	8005c9e <_raise_r+0x12>
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005cd6:	4798      	blx	r3
 8005cd8:	2000      	movs	r0, #0
 8005cda:	e7e0      	b.n	8005c9e <_raise_r+0x12>

08005cdc <raise>:
 8005cdc:	4b02      	ldr	r3, [pc, #8]	@ (8005ce8 <raise+0xc>)
 8005cde:	4601      	mov	r1, r0
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	f7ff bfd3 	b.w	8005c8c <_raise_r>
 8005ce6:	bf00      	nop
 8005ce8:	20000030 	.word	0x20000030

08005cec <_kill_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	2300      	movs	r3, #0
 8005cf0:	4d06      	ldr	r5, [pc, #24]	@ (8005d0c <_kill_r+0x20>)
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	602b      	str	r3, [r5, #0]
 8005cfa:	f7fb fe04 	bl	8001906 <_kill>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d102      	bne.n	8005d08 <_kill_r+0x1c>
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	b103      	cbz	r3, 8005d08 <_kill_r+0x1c>
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	bd38      	pop	{r3, r4, r5, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000408 	.word	0x20000408

08005d10 <_getpid_r>:
 8005d10:	f7fb bdf2 	b.w	80018f8 <_getpid>

08005d14 <__swhatbuf_r>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	460c      	mov	r4, r1
 8005d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d1c:	4615      	mov	r5, r2
 8005d1e:	2900      	cmp	r1, #0
 8005d20:	461e      	mov	r6, r3
 8005d22:	b096      	sub	sp, #88	@ 0x58
 8005d24:	da0c      	bge.n	8005d40 <__swhatbuf_r+0x2c>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	2100      	movs	r1, #0
 8005d2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d2e:	bf14      	ite	ne
 8005d30:	2340      	movne	r3, #64	@ 0x40
 8005d32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d36:	2000      	movs	r0, #0
 8005d38:	6031      	str	r1, [r6, #0]
 8005d3a:	602b      	str	r3, [r5, #0]
 8005d3c:	b016      	add	sp, #88	@ 0x58
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	466a      	mov	r2, sp
 8005d42:	f000 f849 	bl	8005dd8 <_fstat_r>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	dbed      	blt.n	8005d26 <__swhatbuf_r+0x12>
 8005d4a:	9901      	ldr	r1, [sp, #4]
 8005d4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d54:	4259      	negs	r1, r3
 8005d56:	4159      	adcs	r1, r3
 8005d58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d5c:	e7eb      	b.n	8005d36 <__swhatbuf_r+0x22>

08005d5e <__smakebuf_r>:
 8005d5e:	898b      	ldrh	r3, [r1, #12]
 8005d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d62:	079d      	lsls	r5, r3, #30
 8005d64:	4606      	mov	r6, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	d507      	bpl.n	8005d7a <__smakebuf_r+0x1c>
 8005d6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	6123      	str	r3, [r4, #16]
 8005d72:	2301      	movs	r3, #1
 8005d74:	6163      	str	r3, [r4, #20]
 8005d76:	b003      	add	sp, #12
 8005d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d7a:	466a      	mov	r2, sp
 8005d7c:	ab01      	add	r3, sp, #4
 8005d7e:	f7ff ffc9 	bl	8005d14 <__swhatbuf_r>
 8005d82:	9f00      	ldr	r7, [sp, #0]
 8005d84:	4605      	mov	r5, r0
 8005d86:	4639      	mov	r1, r7
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f7ff f86f 	bl	8004e6c <_malloc_r>
 8005d8e:	b948      	cbnz	r0, 8005da4 <__smakebuf_r+0x46>
 8005d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d94:	059a      	lsls	r2, r3, #22
 8005d96:	d4ee      	bmi.n	8005d76 <__smakebuf_r+0x18>
 8005d98:	f023 0303 	bic.w	r3, r3, #3
 8005d9c:	f043 0302 	orr.w	r3, r3, #2
 8005da0:	81a3      	strh	r3, [r4, #12]
 8005da2:	e7e2      	b.n	8005d6a <__smakebuf_r+0xc>
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	9b01      	ldr	r3, [sp, #4]
 8005db2:	6020      	str	r0, [r4, #0]
 8005db4:	b15b      	cbz	r3, 8005dce <__smakebuf_r+0x70>
 8005db6:	4630      	mov	r0, r6
 8005db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dbc:	f000 f81e 	bl	8005dfc <_isatty_r>
 8005dc0:	b128      	cbz	r0, 8005dce <__smakebuf_r+0x70>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	f023 0303 	bic.w	r3, r3, #3
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	431d      	orrs	r5, r3
 8005dd2:	81a5      	strh	r5, [r4, #12]
 8005dd4:	e7cf      	b.n	8005d76 <__smakebuf_r+0x18>
	...

08005dd8 <_fstat_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4d06      	ldr	r5, [pc, #24]	@ (8005df8 <_fstat_r+0x20>)
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	f7fb fded 	bl	80019c4 <_fstat>
 8005dea:	1c43      	adds	r3, r0, #1
 8005dec:	d102      	bne.n	8005df4 <_fstat_r+0x1c>
 8005dee:	682b      	ldr	r3, [r5, #0]
 8005df0:	b103      	cbz	r3, 8005df4 <_fstat_r+0x1c>
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	bd38      	pop	{r3, r4, r5, pc}
 8005df6:	bf00      	nop
 8005df8:	20000408 	.word	0x20000408

08005dfc <_isatty_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	2300      	movs	r3, #0
 8005e00:	4d05      	ldr	r5, [pc, #20]	@ (8005e18 <_isatty_r+0x1c>)
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	f7fb fdeb 	bl	80019e2 <_isatty>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_isatty_r+0x1a>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_isatty_r+0x1a>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	20000408 	.word	0x20000408

08005e1c <_init>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	bf00      	nop
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr

08005e28 <_fini>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	bf00      	nop
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr
