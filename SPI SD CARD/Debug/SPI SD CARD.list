
SPI SD CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b364  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000960  0800b478  0800b478  0000c478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdd8  0800bdd8  0000d1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdd8  0800bdd8  0000cdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bde0  0800bde0  0000d1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bde0  0800bde0  0000cde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bde4  0800bde4  0000cde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800bde8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002570  200001ec  0800bfd4  0000d1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000275c  0800bfd4  0000d75c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f08a  00000000  00000000  0000d215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e69  00000000  00000000  0001c29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  0001f108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2a  00000000  00000000  0001ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6c9  00000000  00000000  00020ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ef4  00000000  00000000  0003b19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd92  00000000  00000000  0005008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dce21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  000dce64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e1a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b45c 	.word	0x0800b45c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800b45c 	.word	0x0800b45c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <ReadPosition>:
#include "main.h"
#include "adc_multi.h"
#include "math.h"

/* Exported functions --------------------------------------------------------*/
float ReadPosition(float voltage){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	float position = (voltage / 3.3f)* 75.0f; // Converte Tensão em Milimetros
 8000f4c:	490e      	ldr	r1, [pc, #56]	@ (8000f88 <ReadPosition+0x44>)
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff5c 	bl	8000e0c <__aeabi_fdiv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <ReadPosition+0x48>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fea3 	bl	8000ca4 <__aeabi_fmul>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	60fb      	str	r3, [r7, #12]
	return roundf(position * 100) / 100; // Arredonda para 2 casas decimais
 8000f62:	490b      	ldr	r1, [pc, #44]	@ (8000f90 <ReadPosition+0x4c>)
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f7ff fe9d 	bl	8000ca4 <__aeabi_fmul>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f00a fa51 	bl	800b414 <roundf>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4906      	ldr	r1, [pc, #24]	@ (8000f90 <ReadPosition+0x4c>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff48 	bl	8000e0c <__aeabi_fdiv>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40533333 	.word	0x40533333
 8000f8c:	42960000 	.word	0x42960000
 8000f90:	42c80000 	.word	0x42c80000

08000f94 <ReadVoltage>:

float ReadVoltage(uint16_t Analog_Val) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
    float voltage = (Analog_Val * 3.3f) / ((1 << 12) - 1.0f); // Converte um valor analogico para tensão
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fe2b 	bl	8000bfc <__aeabi_i2f>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	490e      	ldr	r1, [pc, #56]	@ (8000fe4 <ReadVoltage+0x50>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fe7a 	bl	8000ca4 <__aeabi_fmul>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	490d      	ldr	r1, [pc, #52]	@ (8000fe8 <ReadVoltage+0x54>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff29 	bl	8000e0c <__aeabi_fdiv>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	60fb      	str	r3, [r7, #12]
    return roundf(voltage * 100) / 100;  // Arredonda para 2 casas decimais
 8000fbe:	490b      	ldr	r1, [pc, #44]	@ (8000fec <ReadVoltage+0x58>)
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff fe6f 	bl	8000ca4 <__aeabi_fmul>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f00a fa23 	bl	800b414 <roundf>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4906      	ldr	r1, [pc, #24]	@ (8000fec <ReadVoltage+0x58>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff1a 	bl	8000e0c <__aeabi_fdiv>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40533333 	.word	0x40533333
 8000fe8:	457ff000 	.word	0x457ff000
 8000fec:	42c80000 	.word	0x42c80000

08000ff0 <SELECT>:
#define SD_CS_GPIO_Port GPIOC
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <SELECT+0x14>)
 8000ffa:	f002 fa8b 	bl	8003514 <HAL_GPIO_WritePin>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40011000 	.word	0x40011000

08001008 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <DESELECT+0x14>)
 8001012:	f002 fa7f 	bl	8003514 <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40011000 	.word	0x40011000

08001020 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800102a:	bf00      	nop
 800102c:	4808      	ldr	r0, [pc, #32]	@ (8001050 <SPI_TxByte+0x30>)
 800102e:	f003 fae2 	bl	80045f6 <HAL_SPI_GetState>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d1f9      	bne.n	800102c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001038:	1df9      	adds	r1, r7, #7
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	2201      	movs	r2, #1
 8001040:	4803      	ldr	r0, [pc, #12]	@ (8001050 <SPI_TxByte+0x30>)
 8001042:	f002 ffeb 	bl	800401c <HAL_SPI_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000280 	.word	0x20000280

08001054 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800105a:	23ff      	movs	r3, #255	@ 0xff
 800105c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001062:	bf00      	nop
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <SPI_RxByte+0x38>)
 8001066:	f003 fac6 	bl	80045f6 <HAL_SPI_GetState>
 800106a:	4603      	mov	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	d1f9      	bne.n	8001064 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001070:	1dba      	adds	r2, r7, #6
 8001072:	1df9      	adds	r1, r7, #7
 8001074:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <SPI_RxByte+0x38>)
 800107e:	f003 f911 	bl	80042a4 <HAL_SPI_TransmitReceive>

  return data;
 8001082:	79bb      	ldrb	r3, [r7, #6]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000280 	.word	0x20000280

08001090 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001098:	f7ff ffdc 	bl	8001054 <SPI_RxByte>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	701a      	strb	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <SD_ReadyWait+0x34>)
 80010b4:	2232      	movs	r2, #50	@ 0x32
 80010b6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80010b8:	f7ff ffcc 	bl	8001054 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80010bc:	f7ff ffca 	bl	8001054 <SPI_RxByte>
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2bff      	cmp	r3, #255	@ 0xff
 80010c8:	d004      	beq.n	80010d4 <SD_ReadyWait+0x28>
 80010ca:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <SD_ReadyWait+0x34>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f3      	bne.n	80010bc <SD_ReadyWait+0x10>

  return res;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200023d0 	.word	0x200023d0

080010e4 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80010ea:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010ee:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80010f0:	f7ff ff8a 	bl	8001008 <DESELECT>

  for(int i = 0; i < 10; i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	e005      	b.n	8001106 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	f7ff ff90 	bl	8001020 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	3301      	adds	r3, #1
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	2b09      	cmp	r3, #9
 800110a:	ddf6      	ble.n	80010fa <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 800110c:	f7ff ff70 	bl	8000ff0 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001110:	2340      	movs	r3, #64	@ 0x40
 8001112:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001124:	2395      	movs	r3, #149	@ 0x95
 8001126:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	e009      	b.n	8001142 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800112e:	1d3a      	adds	r2, r7, #4
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff72 	bl	8001020 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b05      	cmp	r3, #5
 8001146:	ddf2      	ble.n	800112e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001148:	e002      	b.n	8001150 <SD_PowerOn+0x6c>
  {
    Count--;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3b01      	subs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001150:	f7ff ff80 	bl	8001054 <SPI_RxByte>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	d002      	beq.n	8001160 <SD_PowerOn+0x7c>
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f4      	bne.n	800114a <SD_PowerOn+0x66>
  }

  DESELECT();
 8001160:	f7ff ff52 	bl	8001008 <DESELECT>
  SPI_TxByte(0XFF);
 8001164:	20ff      	movs	r0, #255	@ 0xff
 8001166:	f7ff ff5b 	bl	8001020 <SPI_TxByte>

  PowerFlag = 1;
 800116a:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <SD_PowerOn+0x94>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000209 	.word	0x20000209

0800117c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <SD_PowerOff+0x14>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000209 	.word	0x20000209

08001194 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001198:	4b02      	ldr	r3, [pc, #8]	@ (80011a4 <SD_CheckPower+0x10>)
 800119a:	781b      	ldrb	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	20000209 	.word	0x20000209

080011a8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80011b2:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <SD_RxDataBlock+0x68>)
 80011b4:	220a      	movs	r2, #10
 80011b6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80011b8:	f7ff ff4c 	bl	8001054 <SPI_RxByte>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2bff      	cmp	r3, #255	@ 0xff
 80011c4:	d104      	bne.n	80011d0 <SD_RxDataBlock+0x28>
 80011c6:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <SD_RxDataBlock+0x68>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f3      	bne.n	80011b8 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80011d4:	d001      	beq.n	80011da <SD_RxDataBlock+0x32>
    return FALSE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e016      	b.n	8001208 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff55 	bl	8001090 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff4f 	bl	8001090 <SPI_RxBytePtr>
  } while(btr -= 2);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3b02      	subs	r3, #2
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1ed      	bne.n	80011da <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80011fe:	f7ff ff29 	bl	8001054 <SPI_RxByte>
  SPI_RxByte();
 8001202:	f7ff ff27 	bl	8001054 <SPI_RxByte>

  return TRUE;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200023cf 	.word	0x200023cf

08001214 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001224:	f7ff ff42 	bl	80010ac <SD_ReadyWait>
 8001228:	4603      	mov	r3, r0
 800122a:	2bff      	cmp	r3, #255	@ 0xff
 800122c:	d001      	beq.n	8001232 <SD_TxDataBlock+0x1e>
    return FALSE;
 800122e:	2300      	movs	r3, #0
 8001230:	e040      	b.n	80012b4 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fef3 	bl	8001020 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	2bfd      	cmp	r3, #253	@ 0xfd
 800123e:	d031      	beq.n	80012a4 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fee7 	bl	8001020 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fee0 	bl	8001020 <SPI_TxByte>
    } while (--wc);
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	3b01      	subs	r3, #1
 8001264:	73bb      	strb	r3, [r7, #14]
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1eb      	bne.n	8001244 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 800126c:	f7ff fef2 	bl	8001054 <SPI_RxByte>
    SPI_RxByte();
 8001270:	f7ff fef0 	bl	8001054 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001274:	e00b      	b.n	800128e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001276:	f7ff feed 	bl	8001054 <SPI_RxByte>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	2b05      	cmp	r3, #5
 8001286:	d006      	beq.n	8001296 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001288:	7b7b      	ldrb	r3, [r7, #13]
 800128a:	3301      	adds	r3, #1
 800128c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800128e:	7b7b      	ldrb	r3, [r7, #13]
 8001290:	2b40      	cmp	r3, #64	@ 0x40
 8001292:	d9f0      	bls.n	8001276 <SD_TxDataBlock+0x62>
 8001294:	e000      	b.n	8001298 <SD_TxDataBlock+0x84>
        break;
 8001296:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001298:	bf00      	nop
 800129a:	f7ff fedb 	bl	8001054 <SPI_RxByte>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0fa      	beq.n	800129a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d101      	bne.n	80012b2 <SD_TxDataBlock+0x9e>
    return TRUE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80012c8:	f7ff fef0 	bl	80010ac <SD_ReadyWait>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2bff      	cmp	r3, #255	@ 0xff
 80012d0:	d001      	beq.n	80012d6 <SD_SendCmd+0x1a>
    return 0xFF;
 80012d2:	23ff      	movs	r3, #255	@ 0xff
 80012d4:	e040      	b.n	8001358 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fea1 	bl	8001020 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	0e1b      	lsrs	r3, r3, #24
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe9b 	bl	8001020 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	0c1b      	lsrs	r3, r3, #16
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe95 	bl	8001020 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe8f 	bl	8001020 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe8a 	bl	8001020 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b40      	cmp	r3, #64	@ 0x40
 8001314:	d101      	bne.n	800131a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001316:	2395      	movs	r3, #149	@ 0x95
 8001318:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b48      	cmp	r3, #72	@ 0x48
 800131e:	d101      	bne.n	8001324 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001320:	2387      	movs	r3, #135	@ 0x87
 8001322:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fe7a 	bl	8001020 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b4c      	cmp	r3, #76	@ 0x4c
 8001330:	d101      	bne.n	8001336 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001332:	f7ff fe8f 	bl	8001054 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001336:	230a      	movs	r3, #10
 8001338:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800133a:	f7ff fe8b 	bl	8001054 <SPI_RxByte>
 800133e:	4603      	mov	r3, r0
 8001340:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001342:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001346:	2b00      	cmp	r3, #0
 8001348:	da05      	bge.n	8001356 <SD_SendCmd+0x9a>
 800134a:	7bbb      	ldrb	r3, [r7, #14]
 800134c:	3b01      	subs	r3, #1
 800134e:	73bb      	strb	r3, [r7, #14]
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f1      	bne.n	800133a <SD_SendCmd+0x7e>

  return res;
 8001356:	7b7b      	ldrb	r3, [r7, #13]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001370:	2301      	movs	r3, #1
 8001372:	e0d5      	b.n	8001520 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001374:	4b6c      	ldr	r3, [pc, #432]	@ (8001528 <SD_disk_initialize+0x1c8>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <SD_disk_initialize+0x2a>
    return Stat;
 8001382:	4b69      	ldr	r3, [pc, #420]	@ (8001528 <SD_disk_initialize+0x1c8>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	e0ca      	b.n	8001520 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800138a:	f7ff feab 	bl	80010e4 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800138e:	f7ff fe2f 	bl	8000ff0 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001396:	2100      	movs	r1, #0
 8001398:	2040      	movs	r0, #64	@ 0x40
 800139a:	f7ff ff8f 	bl	80012bc <SD_SendCmd>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	f040 80a5 	bne.w	80014f0 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80013a6:	4b61      	ldr	r3, [pc, #388]	@ (800152c <SD_disk_initialize+0x1cc>)
 80013a8:	2264      	movs	r2, #100	@ 0x64
 80013aa:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013ac:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80013b0:	2048      	movs	r0, #72	@ 0x48
 80013b2:	f7ff ff83 	bl	80012bc <SD_SendCmd>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d158      	bne.n	800146e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e00c      	b.n	80013dc <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80013c2:	7bfc      	ldrb	r4, [r7, #15]
 80013c4:	f7ff fe46 	bl	8001054 <SPI_RxByte>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	f104 0310 	add.w	r3, r4, #16
 80013d0:	443b      	add	r3, r7
 80013d2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	3301      	adds	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d9ef      	bls.n	80013c2 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013e2:	7abb      	ldrb	r3, [r7, #10]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	f040 8083 	bne.w	80014f0 <SD_disk_initialize+0x190>
 80013ea:	7afb      	ldrb	r3, [r7, #11]
 80013ec:	2baa      	cmp	r3, #170	@ 0xaa
 80013ee:	d17f      	bne.n	80014f0 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80013f0:	2100      	movs	r1, #0
 80013f2:	2077      	movs	r0, #119	@ 0x77
 80013f4:	f7ff ff62 	bl	80012bc <SD_SendCmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d807      	bhi.n	800140e <SD_disk_initialize+0xae>
 80013fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001402:	2069      	movs	r0, #105	@ 0x69
 8001404:	f7ff ff5a 	bl	80012bc <SD_SendCmd>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800140e:	4b47      	ldr	r3, [pc, #284]	@ (800152c <SD_disk_initialize+0x1cc>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1eb      	bne.n	80013f0 <SD_disk_initialize+0x90>
 8001418:	e000      	b.n	800141c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800141a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800141c:	4b43      	ldr	r3, [pc, #268]	@ (800152c <SD_disk_initialize+0x1cc>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d064      	beq.n	80014f0 <SD_disk_initialize+0x190>
 8001426:	2100      	movs	r1, #0
 8001428:	207a      	movs	r0, #122	@ 0x7a
 800142a:	f7ff ff47 	bl	80012bc <SD_SendCmd>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d15d      	bne.n	80014f0 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e00c      	b.n	8001454 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800143a:	7bfc      	ldrb	r4, [r7, #15]
 800143c:	f7ff fe0a 	bl	8001054 <SPI_RxByte>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	f104 0310 	add.w	r3, r4, #16
 8001448:	443b      	add	r3, r7
 800144a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	3301      	adds	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d9ef      	bls.n	800143a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800145a:	7a3b      	ldrb	r3, [r7, #8]
 800145c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SD_disk_initialize+0x108>
 8001464:	2306      	movs	r3, #6
 8001466:	e000      	b.n	800146a <SD_disk_initialize+0x10a>
 8001468:	2302      	movs	r3, #2
 800146a:	73bb      	strb	r3, [r7, #14]
 800146c:	e040      	b.n	80014f0 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800146e:	2100      	movs	r1, #0
 8001470:	2077      	movs	r0, #119	@ 0x77
 8001472:	f7ff ff23 	bl	80012bc <SD_SendCmd>
 8001476:	4603      	mov	r3, r0
 8001478:	2b01      	cmp	r3, #1
 800147a:	d808      	bhi.n	800148e <SD_disk_initialize+0x12e>
 800147c:	2100      	movs	r1, #0
 800147e:	2069      	movs	r0, #105	@ 0x69
 8001480:	f7ff ff1c 	bl	80012bc <SD_SendCmd>
 8001484:	4603      	mov	r3, r0
 8001486:	2b01      	cmp	r3, #1
 8001488:	d801      	bhi.n	800148e <SD_disk_initialize+0x12e>
 800148a:	2302      	movs	r3, #2
 800148c:	e000      	b.n	8001490 <SD_disk_initialize+0x130>
 800148e:	2301      	movs	r3, #1
 8001490:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d10e      	bne.n	80014b6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001498:	2100      	movs	r1, #0
 800149a:	2077      	movs	r0, #119	@ 0x77
 800149c:	f7ff ff0e 	bl	80012bc <SD_SendCmd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d80e      	bhi.n	80014c4 <SD_disk_initialize+0x164>
 80014a6:	2100      	movs	r1, #0
 80014a8:	2069      	movs	r0, #105	@ 0x69
 80014aa:	f7ff ff07 	bl	80012bc <SD_SendCmd>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d107      	bne.n	80014c4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80014b4:	e00d      	b.n	80014d2 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80014b6:	2100      	movs	r1, #0
 80014b8:	2041      	movs	r0, #65	@ 0x41
 80014ba:	f7ff feff 	bl	80012bc <SD_SendCmd>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <SD_disk_initialize+0x1cc>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1e1      	bne.n	8001492 <SD_disk_initialize+0x132>
 80014ce:	e000      	b.n	80014d2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80014d0:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <SD_disk_initialize+0x1cc>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <SD_disk_initialize+0x18c>
 80014dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e0:	2050      	movs	r0, #80	@ 0x50
 80014e2:	f7ff feeb 	bl	80012bc <SD_SendCmd>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80014f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001530 <SD_disk_initialize+0x1d0>)
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80014f6:	f7ff fd87 	bl	8001008 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80014fa:	f7ff fdab 	bl	8001054 <SPI_RxByte>

  if (type)
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <SD_disk_initialize+0x1c8>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <SD_disk_initialize+0x1c8>)
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e001      	b.n	800151a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001516:	f7ff fe31 	bl	800117c <SD_PowerOff>
  }

  return Stat;
 800151a:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <SD_disk_initialize+0x1c8>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b2db      	uxtb	r3, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	200023cf 	.word	0x200023cf
 8001530:	20000208 	.word	0x20000208

08001534 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001544:	2301      	movs	r3, #1
 8001546:	e002      	b.n	800154e <SD_disk_status+0x1a>

  return Stat;
 8001548:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <SD_disk_status+0x24>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	20000000 	.word	0x20000000

0800155c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <SD_disk_read+0x1c>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <SD_disk_read+0x20>
    return RES_PARERR;
 8001578:	2304      	movs	r3, #4
 800157a:	e051      	b.n	8001620 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 800157c:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <SD_disk_read+0xcc>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800158a:	2303      	movs	r3, #3
 800158c:	e048      	b.n	8001620 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <SD_disk_read+0xd0>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	025b      	lsls	r3, r3, #9
 800159e:	607b      	str	r3, [r7, #4]

  SELECT();
 80015a0:	f7ff fd26 	bl	8000ff0 <SELECT>

  if (count == 1)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d111      	bne.n	80015ce <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	2051      	movs	r0, #81	@ 0x51
 80015ae:	f7ff fe85 	bl	80012bc <SD_SendCmd>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d129      	bne.n	800160c <SD_disk_read+0xb0>
 80015b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015bc:	68b8      	ldr	r0, [r7, #8]
 80015be:	f7ff fdf3 	bl	80011a8 <SD_RxDataBlock>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d021      	beq.n	800160c <SD_disk_read+0xb0>
      count = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	e01e      	b.n	800160c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	2052      	movs	r0, #82	@ 0x52
 80015d2:	f7ff fe73 	bl	80012bc <SD_SendCmd>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d117      	bne.n	800160c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80015dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015e0:	68b8      	ldr	r0, [r7, #8]
 80015e2:	f7ff fde1 	bl	80011a8 <SD_RxDataBlock>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00a      	beq.n	8001602 <SD_disk_read+0xa6>
          break;

        buff += 512;
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015f2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ed      	bne.n	80015dc <SD_disk_read+0x80>
 8001600:	e000      	b.n	8001604 <SD_disk_read+0xa8>
          break;
 8001602:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001604:	2100      	movs	r1, #0
 8001606:	204c      	movs	r0, #76	@ 0x4c
 8001608:	f7ff fe58 	bl	80012bc <SD_SendCmd>
    }
  }

  DESELECT();
 800160c:	f7ff fcfc 	bl	8001008 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001610:	f7ff fd20 	bl	8001054 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf14      	ite	ne
 800161a:	2301      	movne	r3, #1
 800161c:	2300      	moveq	r3, #0
 800161e:	b2db      	uxtb	r3, r3
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	20000208 	.word	0x20000208

08001630 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <SD_disk_write+0x1c>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <SD_disk_write+0x20>
    return RES_PARERR;
 800164c:	2304      	movs	r3, #4
 800164e:	e06b      	b.n	8001728 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001650:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <SD_disk_write+0x100>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800165e:	2303      	movs	r3, #3
 8001660:	e062      	b.n	8001728 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001662:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <SD_disk_write+0x100>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001670:	2302      	movs	r3, #2
 8001672:	e059      	b.n	8001728 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001674:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <SD_disk_write+0x104>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	025b      	lsls	r3, r3, #9
 8001684:	607b      	str	r3, [r7, #4]

  SELECT();
 8001686:	f7ff fcb3 	bl	8000ff0 <SELECT>

  if (count == 1)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d110      	bne.n	80016b2 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	2058      	movs	r0, #88	@ 0x58
 8001694:	f7ff fe12 	bl	80012bc <SD_SendCmd>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d13a      	bne.n	8001714 <SD_disk_write+0xe4>
 800169e:	21fe      	movs	r1, #254	@ 0xfe
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f7ff fdb7 	bl	8001214 <SD_TxDataBlock>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d033      	beq.n	8001714 <SD_disk_write+0xe4>
      count = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	e030      	b.n	8001714 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <SD_disk_write+0x104>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80016be:	2100      	movs	r1, #0
 80016c0:	2077      	movs	r0, #119	@ 0x77
 80016c2:	f7ff fdfb 	bl	80012bc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80016c6:	6839      	ldr	r1, [r7, #0]
 80016c8:	2057      	movs	r0, #87	@ 0x57
 80016ca:	f7ff fdf7 	bl	80012bc <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	2059      	movs	r0, #89	@ 0x59
 80016d2:	f7ff fdf3 	bl	80012bc <SD_SendCmd>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11b      	bne.n	8001714 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80016dc:	21fc      	movs	r1, #252	@ 0xfc
 80016de:	68b8      	ldr	r0, [r7, #8]
 80016e0:	f7ff fd98 	bl	8001214 <SD_TxDataBlock>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00a      	beq.n	8001700 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016f0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ee      	bne.n	80016dc <SD_disk_write+0xac>
 80016fe:	e000      	b.n	8001702 <SD_disk_write+0xd2>
          break;
 8001700:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001702:	21fd      	movs	r1, #253	@ 0xfd
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fd85 	bl	8001214 <SD_TxDataBlock>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <SD_disk_write+0xe4>
      {
        count = 1;
 8001710:	2301      	movs	r3, #1
 8001712:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001714:	f7ff fc78 	bl	8001008 <DESELECT>
  SPI_RxByte();
 8001718:	f7ff fc9c 	bl	8001054 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	bf14      	ite	ne
 8001722:	2301      	movne	r3, #1
 8001724:	2300      	moveq	r3, #0
 8001726:	b2db      	uxtb	r3, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000000 	.word	0x20000000
 8001734:	20000208 	.word	0x20000208

08001738 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b08b      	sub	sp, #44	@ 0x2c
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	603a      	str	r2, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	460b      	mov	r3, r1
 8001746:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001752:	2304      	movs	r3, #4
 8001754:	e119      	b.n	800198a <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800175c:	79bb      	ldrb	r3, [r7, #6]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d129      	bne.n	80017b6 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d017      	beq.n	800179a <SD_disk_ioctl+0x62>
 800176a:	2b02      	cmp	r3, #2
 800176c:	dc1f      	bgt.n	80017ae <SD_disk_ioctl+0x76>
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <SD_disk_ioctl+0x40>
 8001772:	2b01      	cmp	r3, #1
 8001774:	d00b      	beq.n	800178e <SD_disk_ioctl+0x56>
 8001776:	e01a      	b.n	80017ae <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001778:	f7ff fd0c 	bl	8001194 <SD_CheckPower>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001782:	f7ff fcfb 	bl	800117c <SD_PowerOff>
      res = RES_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800178c:	e0fb      	b.n	8001986 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 800178e:	f7ff fca9 	bl	80010e4 <SD_PowerOn>
      res = RES_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001798:	e0f5      	b.n	8001986 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	1c5c      	adds	r4, r3, #1
 800179e:	f7ff fcf9 	bl	8001194 <SD_CheckPower>
 80017a2:	4603      	mov	r3, r0
 80017a4:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017ac:	e0eb      	b.n	8001986 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 80017ae:	2304      	movs	r3, #4
 80017b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017b4:	e0e7      	b.n	8001986 <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80017b6:	4b77      	ldr	r3, [pc, #476]	@ (8001994 <SD_disk_ioctl+0x25c>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0e0      	b.n	800198a <SD_disk_ioctl+0x252>

    SELECT();
 80017c8:	f7ff fc12 	bl	8000ff0 <SELECT>

    switch (ctrl)
 80017cc:	79bb      	ldrb	r3, [r7, #6]
 80017ce:	2b0d      	cmp	r3, #13
 80017d0:	f200 80ca 	bhi.w	8001968 <SD_disk_ioctl+0x230>
 80017d4:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <SD_disk_ioctl+0xa4>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080018d3 	.word	0x080018d3
 80017e0:	08001815 	.word	0x08001815
 80017e4:	080018c3 	.word	0x080018c3
 80017e8:	08001969 	.word	0x08001969
 80017ec:	08001969 	.word	0x08001969
 80017f0:	08001969 	.word	0x08001969
 80017f4:	08001969 	.word	0x08001969
 80017f8:	08001969 	.word	0x08001969
 80017fc:	08001969 	.word	0x08001969
 8001800:	08001969 	.word	0x08001969
 8001804:	08001969 	.word	0x08001969
 8001808:	080018e5 	.word	0x080018e5
 800180c:	08001909 	.word	0x08001909
 8001810:	0800192d 	.word	0x0800192d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001814:	2100      	movs	r1, #0
 8001816:	2049      	movs	r0, #73	@ 0x49
 8001818:	f7ff fd50 	bl	80012bc <SD_SendCmd>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 80a6 	bne.w	8001970 <SD_disk_ioctl+0x238>
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2110      	movs	r1, #16
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fcbc 	bl	80011a8 <SD_RxDataBlock>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 809c 	beq.w	8001970 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8001838:	7b3b      	ldrb	r3, [r7, #12]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d10d      	bne.n	800185e <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001842:	7d7b      	ldrb	r3, [r7, #21]
 8001844:	461a      	mov	r2, r3
 8001846:	7d3b      	ldrb	r3, [r7, #20]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b29b      	uxth	r3, r3
 800184c:	4413      	add	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	3301      	adds	r3, #1
 8001852:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001854:	8bfb      	ldrh	r3, [r7, #30]
 8001856:	029a      	lsls	r2, r3, #10
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	e02d      	b.n	80018ba <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800185e:	7c7b      	ldrb	r3, [r7, #17]
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	b2da      	uxtb	r2, r3
 8001866:	7dbb      	ldrb	r3, [r7, #22]
 8001868:	09db      	lsrs	r3, r3, #7
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4413      	add	r3, r2
 800186e:	b2da      	uxtb	r2, r3
 8001870:	7d7b      	ldrb	r3, [r7, #21]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f003 0306 	and.w	r3, r3, #6
 800187a:	b2db      	uxtb	r3, r3
 800187c:	4413      	add	r3, r2
 800187e:	b2db      	uxtb	r3, r3
 8001880:	3302      	adds	r3, #2
 8001882:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001886:	7d3b      	ldrb	r3, [r7, #20]
 8001888:	099b      	lsrs	r3, r3, #6
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	7cfb      	ldrb	r3, [r7, #19]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	b29b      	uxth	r3, r3
 8001894:	4413      	add	r3, r2
 8001896:	b29a      	uxth	r2, r3
 8001898:	7cbb      	ldrb	r3, [r7, #18]
 800189a:	029b      	lsls	r3, r3, #10
 800189c:	b29b      	uxth	r3, r3
 800189e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80018ac:	8bfa      	ldrh	r2, [r7, #30]
 80018ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018b2:	3b09      	subs	r3, #9
 80018b4:	409a      	lsls	r2, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80018c0:	e056      	b.n	8001970 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018d0:	e055      	b.n	800197e <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80018d2:	f7ff fbeb 	bl	80010ac <SD_ReadyWait>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2bff      	cmp	r3, #255	@ 0xff
 80018da:	d14b      	bne.n	8001974 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018e2:	e047      	b.n	8001974 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80018e4:	2100      	movs	r1, #0
 80018e6:	2049      	movs	r0, #73	@ 0x49
 80018e8:	f7ff fce8 	bl	80012bc <SD_SendCmd>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d142      	bne.n	8001978 <SD_disk_ioctl+0x240>
 80018f2:	2110      	movs	r1, #16
 80018f4:	6a38      	ldr	r0, [r7, #32]
 80018f6:	f7ff fc57 	bl	80011a8 <SD_RxDataBlock>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d03b      	beq.n	8001978 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001906:	e037      	b.n	8001978 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001908:	2100      	movs	r1, #0
 800190a:	204a      	movs	r0, #74	@ 0x4a
 800190c:	f7ff fcd6 	bl	80012bc <SD_SendCmd>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d132      	bne.n	800197c <SD_disk_ioctl+0x244>
 8001916:	2110      	movs	r1, #16
 8001918:	6a38      	ldr	r0, [r7, #32]
 800191a:	f7ff fc45 	bl	80011a8 <SD_RxDataBlock>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d02b      	beq.n	800197c <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800192a:	e027      	b.n	800197c <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 800192c:	2100      	movs	r1, #0
 800192e:	207a      	movs	r0, #122	@ 0x7a
 8001930:	f7ff fcc4 	bl	80012bc <SD_SendCmd>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d116      	bne.n	8001968 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001940:	e00b      	b.n	800195a <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001942:	6a3c      	ldr	r4, [r7, #32]
 8001944:	1c63      	adds	r3, r4, #1
 8001946:	623b      	str	r3, [r7, #32]
 8001948:	f7ff fb84 	bl	8001054 <SPI_RxByte>
 800194c:	4603      	mov	r3, r0
 800194e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001950:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001954:	3301      	adds	r3, #1
 8001956:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800195a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800195e:	2b03      	cmp	r3, #3
 8001960:	d9ef      	bls.n	8001942 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8001968:	2304      	movs	r3, #4
 800196a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800196e:	e006      	b.n	800197e <SD_disk_ioctl+0x246>
      break;
 8001970:	bf00      	nop
 8001972:	e004      	b.n	800197e <SD_disk_ioctl+0x246>
      break;
 8001974:	bf00      	nop
 8001976:	e002      	b.n	800197e <SD_disk_ioctl+0x246>
      break;
 8001978:	bf00      	nop
 800197a:	e000      	b.n	800197e <SD_disk_ioctl+0x246>
      break;
 800197c:	bf00      	nop
    }

    DESELECT();
 800197e:	f7ff fb43 	bl	8001008 <DESELECT>
    SPI_RxByte();
 8001982:	f7ff fb67 	bl	8001054 <SPI_RxByte>
  }

  return res;
 8001986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800198a:	4618      	mov	r0, r3
 800198c:	372c      	adds	r7, #44	@ 0x2c
 800198e:	46bd      	mov	sp, r7
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	bf00      	nop
 8001994:	20000000 	.word	0x20000000

08001998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199e:	f000 fd0b 	bl	80023b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a2:	f000 f85b 	bl	8001a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a6:	f000 f981 	bl	8001cac <MX_GPIO_Init>
  MX_DMA_Init();
 80019aa:	f000 f961 	bl	8001c70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019ae:	f000 f935 	bl	8001c1c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80019b2:	f000 f8fd 	bl	8001bb0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80019b6:	f002 ffc3 	bl	8004940 <MX_FATFS_Init>
  MX_ADC1_Init();
 80019ba:	f000 f8ab 	bl	8001b14 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_VAL, READSIZE);
 80019be:	2202      	movs	r2, #2
 80019c0:	4921      	ldr	r1, [pc, #132]	@ (8001a48 <main+0xb0>)
 80019c2:	4822      	ldr	r0, [pc, #136]	@ (8001a4c <main+0xb4>)
 80019c4:	f000 fe32 	bl	800262c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IsADCFinished == 1){
 80019c8:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <main+0xb8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d123      	bne.n	8001a18 <main+0x80>
		  for(int i = 0; i < READSIZE; i++){
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	e01a      	b.n	8001a0c <main+0x74>
			  ADC_Voltage[i] = ReadVoltage(ADC_VAL[i]); // Recebe as tensões convertidas
 80019d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a48 <main+0xb0>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fad8 	bl	8000f94 <ReadVoltage>
 80019e4:	4602      	mov	r2, r0
 80019e6:	491b      	ldr	r1, [pc, #108]	@ (8001a54 <main+0xbc>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  ADC_Position[i] = ReadPosition(ADC_Voltage[i]); // Recebe a Tensão e converte em Posição do potenciometro linear
 80019ee:	4a19      	ldr	r2, [pc, #100]	@ (8001a54 <main+0xbc>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff faa4 	bl	8000f44 <ReadPosition>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4916      	ldr	r1, [pc, #88]	@ (8001a58 <main+0xc0>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i = 0; i < READSIZE; i++){
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	dde1      	ble.n	80019d6 <main+0x3e>
		  }
		  IsADCFinished = 0;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <main+0xb8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
	  }

#ifdef CSV_WRITE
	  for(int i =0; i < READSIZE; i++){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	e010      	b.n	8001a40 <main+0xa8>
	  sd_writeCSV(ADC_Voltage[i]);
 8001a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <main+0xbc>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f9ca 	bl	8001dc0 <sd_writeCSV>
	  sd_writeCSV(ADC_Position[i]);
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <main+0xc0>)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f9c3 	bl	8001dc0 <sd_writeCSV>
	  for(int i =0; i < READSIZE; i++){
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	ddeb      	ble.n	8001a1e <main+0x86>
	  if(IsADCFinished == 1){
 8001a46:	e7bf      	b.n	80019c8 <main+0x30>
 8001a48:	20000320 	.word	0x20000320
 8001a4c:	2000020c 	.word	0x2000020c
 8001a50:	20000334 	.word	0x20000334
 8001a54:	20000324 	.word	0x20000324
 8001a58:	2000032c 	.word	0x2000032c

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b094      	sub	sp, #80	@ 0x50
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a66:	2228      	movs	r2, #40	@ 0x28
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f007 fc01 	bl	8009272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a90:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aa8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 fd68 	bl	8003588 <HAL_RCC_OscConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001abe:	f000 f979 	bl	8001db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ad2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2102      	movs	r1, #2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 ffd4 	bl	8003a8c <HAL_RCC_ClockConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001aea:	f000 f963 	bl	8001db4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001aee:	2302      	movs	r3, #2
 8001af0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001af6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 f954 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001b06:	f000 f955 	bl	8001db4 <Error_Handler>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3750      	adds	r7, #80	@ 0x50
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b24:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <MX_ADC1_Init+0x94>)
 8001b26:	4a21      	ldr	r2, [pc, #132]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <MX_ADC1_Init+0x94>)
 8001b2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <MX_ADC1_Init+0x94>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <MX_ADC1_Init+0x94>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <MX_ADC1_Init+0x94>)
 8001b40:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001b44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b46:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <MX_ADC1_Init+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001b4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <MX_ADC1_Init+0x94>)
 8001b4e:	2202      	movs	r2, #2
 8001b50:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b52:	4815      	ldr	r0, [pc, #84]	@ (8001ba8 <MX_ADC1_Init+0x94>)
 8001b54:	f000 fc92 	bl	800247c <HAL_ADC_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001b5e:	f000 f929 	bl	8001db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <MX_ADC1_Init+0x94>)
 8001b74:	f000 fe54 	bl	8002820 <HAL_ADC_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b7e:	f000 f919 	bl	8001db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b86:	2302      	movs	r3, #2
 8001b88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <MX_ADC1_Init+0x94>)
 8001b90:	f000 fe46 	bl	8002820 <HAL_ADC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001b9a:	f000 f90b 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000020c 	.word	0x2000020c
 8001bac:	40012400 	.word	0x40012400

08001bb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bb6:	4a18      	ldr	r2, [pc, #96]	@ (8001c18 <MX_SPI1_Init+0x68>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bba:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001be2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001be4:	2210      	movs	r2, #16
 8001be6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c00:	4804      	ldr	r0, [pc, #16]	@ (8001c14 <MX_SPI1_Init+0x64>)
 8001c02:	f002 f987 	bl	8003f14 <HAL_SPI_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c0c:	f000 f8d2 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000280 	.word	0x20000280
 8001c18:	40013000 	.word	0x40013000

08001c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <MX_USART2_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c54:	f002 fd95 	bl	8004782 <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c5e:	f000 f8a9 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200002d8 	.word	0x200002d8
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <MX_DMA_Init+0x38>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca8 <MX_DMA_Init+0x38>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6153      	str	r3, [r2, #20]
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <MX_DMA_Init+0x38>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	200b      	movs	r0, #11
 8001c94:	f001 f895 	bl	8002dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c98:	200b      	movs	r0, #11
 8001c9a:	f001 f8ae 	bl	8002dfa <HAL_NVIC_EnableIRQ>

}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000

08001cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc0:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a37      	ldr	r2, [pc, #220]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001cc6:	f043 0310 	orr.w	r3, r3, #16
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b35      	ldr	r3, [pc, #212]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a31      	ldr	r2, [pc, #196]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001cde:	f043 0320 	orr.w	r3, r3, #32
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a25      	ldr	r2, [pc, #148]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <MX_GPIO_Init+0xf8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2110      	movs	r1, #16
 8001d24:	4820      	ldr	r0, [pc, #128]	@ (8001da8 <MX_GPIO_Init+0xfc>)
 8001d26:	f001 fbf5 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d30:	481e      	ldr	r0, [pc, #120]	@ (8001dac <MX_GPIO_Init+0x100>)
 8001d32:	f001 fbef 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001db0 <MX_GPIO_Init+0x104>)
 8001d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4817      	ldr	r0, [pc, #92]	@ (8001da8 <MX_GPIO_Init+0xfc>)
 8001d4c:	f001 fa5e 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 8001d50:	2310      	movs	r3, #16
 8001d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4619      	mov	r1, r3
 8001d66:	4810      	ldr	r0, [pc, #64]	@ (8001da8 <MX_GPIO_Init+0xfc>)
 8001d68:	f001 fa50 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4619      	mov	r1, r3
 8001d84:	4809      	ldr	r0, [pc, #36]	@ (8001dac <MX_GPIO_Init+0x100>)
 8001d86:	f001 fa41 	bl	800320c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2028      	movs	r0, #40	@ 0x28
 8001d90:	f001 f817 	bl	8002dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d94:	2028      	movs	r0, #40	@ 0x28
 8001d96:	f001 f830 	bl	8002dfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d9a:	bf00      	nop
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40011000 	.word	0x40011000
 8001dac:	40010800 	.word	0x40010800
 8001db0:	10110000 	.word	0x10110000

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <Error_Handler+0x8>

08001dc0 <sd_writeCSV>:
#define Buffersize 50
char buffer[Buffersize];

/* Exported functions --------------------------------------------------------*/

void sd_writeCSV(float value) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
/* Mount SD Card -------------------------------------------------------------*/
		    fresult = f_mount(&fs, "", 1);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4924      	ldr	r1, [pc, #144]	@ (8001e5c <sd_writeCSV+0x9c>)
 8001dcc:	4824      	ldr	r0, [pc, #144]	@ (8001e60 <sd_writeCSV+0xa0>)
 8001dce:	f005 fa8b 	bl	80072e8 <f_mount>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <sd_writeCSV+0xa4>)
 8001dd8:	701a      	strb	r2, [r3, #0]
		    if (fresult != FR_OK) {
 8001dda:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <sd_writeCSV+0xa4>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d134      	bne.n	8001e4c <sd_writeCSV+0x8c>
		        return;
		    }

/* Open/Create file ----------------------------------------------------------*/
		    fresult = f_open(&fil, "DadosFSAE.csv", FA_OPEN_ALWAYS | FA_WRITE);
 8001de2:	2212      	movs	r2, #18
 8001de4:	4920      	ldr	r1, [pc, #128]	@ (8001e68 <sd_writeCSV+0xa8>)
 8001de6:	4821      	ldr	r0, [pc, #132]	@ (8001e6c <sd_writeCSV+0xac>)
 8001de8:	f005 fac8 	bl	800737c <f_open>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <sd_writeCSV+0xa4>)
 8001df2:	701a      	strb	r2, [r3, #0]
		    if (fresult != FR_OK) {
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <sd_writeCSV+0xa4>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d129      	bne.n	8001e50 <sd_writeCSV+0x90>
		        return;
		    }

/* Move pointer to end of file -----------------------------------------------*/
		f_lseek(&fil, f_size(&fil));
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <sd_writeCSV+0xac>)
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4619      	mov	r1, r3
 8001e06:	4819      	ldr	r0, [pc, #100]	@ (8001e6c <sd_writeCSV+0xac>)
 8001e08:	f006 f8fe 	bl	8008008 <f_lseek>
/* Float to String Conversion ------------------------------------------------*/
		sprintf(buffer, "%.2f,\n", value);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7fe fb0b 	bl	8000428 <__aeabi_f2d>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4916      	ldr	r1, [pc, #88]	@ (8001e70 <sd_writeCSV+0xb0>)
 8001e18:	4816      	ldr	r0, [pc, #88]	@ (8001e74 <sd_writeCSV+0xb4>)
 8001e1a:	f007 f9c7 	bl	80091ac <siprintf>

/* Write data to file --------------------------------------------------------*/
	    fresult = f_write(&fil, buffer, strlen(buffer), &bw);
 8001e1e:	4815      	ldr	r0, [pc, #84]	@ (8001e74 <sd_writeCSV+0xb4>)
 8001e20:	f7fe f996 	bl	8000150 <strlen>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <sd_writeCSV+0xb8>)
 8001e28:	4912      	ldr	r1, [pc, #72]	@ (8001e74 <sd_writeCSV+0xb4>)
 8001e2a:	4810      	ldr	r0, [pc, #64]	@ (8001e6c <sd_writeCSV+0xac>)
 8001e2c:	f005 fdba 	bl	80079a4 <f_write>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <sd_writeCSV+0xa4>)
 8001e36:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK) {
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <sd_writeCSV+0xa4>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <sd_writeCSV+0x94>
	        return;
	    }

/* Close file ----------------------------------------------------------------*/
	    f_close(&fil);
 8001e40:	480a      	ldr	r0, [pc, #40]	@ (8001e6c <sd_writeCSV+0xac>)
 8001e42:	f006 f8b6 	bl	8007fb2 <f_close>
	    bufclear();
 8001e46:	f000 f819 	bl	8001e7c <bufclear>
 8001e4a:	e004      	b.n	8001e56 <sd_writeCSV+0x96>
		        return;
 8001e4c:	bf00      	nop
 8001e4e:	e002      	b.n	8001e56 <sd_writeCSV+0x96>
		        return;
 8001e50:	bf00      	nop
 8001e52:	e000      	b.n	8001e56 <sd_writeCSV+0x96>
	        return;
 8001e54:	bf00      	nop
	}
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	0800b478 	.word	0x0800b478
 8001e60:	20000338 	.word	0x20000338
 8001e64:	20002394 	.word	0x20002394
 8001e68:	0800b47c 	.word	0x0800b47c
 8001e6c:	20001368 	.word	0x20001368
 8001e70:	0800b48c 	.word	0x0800b48c
 8001e74:	2000239c 	.word	0x2000239c
 8001e78:	20002398 	.word	0x20002398

08001e7c <bufclear>:
/* Close file ----------------------------------------------------------------*/
	    f_close(&fil);
	    bufclear();
	}

void bufclear (void){
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
/* Clean Buffer --------------------------------------------------------------*/
	for(int i = 0; i < Buffersize; i++){
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	e007      	b.n	8001e98 <bufclear+0x1c>
		buffer[i] = '\0';
 8001e88:	4a08      	ldr	r2, [pc, #32]	@ (8001eac <bufclear+0x30>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < Buffersize; i++){
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3301      	adds	r3, #1
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b31      	cmp	r3, #49	@ 0x31
 8001e9c:	ddf4      	ble.n	8001e88 <bufclear+0xc>
	}
}
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000239c 	.word	0x2000239c

08001eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_MspInit+0x5c>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	4a14      	ldr	r2, [pc, #80]	@ (8001f0c <HAL_MspInit+0x5c>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6193      	str	r3, [r2, #24]
 8001ec2:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <HAL_MspInit+0x5c>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <HAL_MspInit+0x5c>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f0c <HAL_MspInit+0x5c>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <HAL_MspInit+0x5c>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_MspInit+0x60>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <HAL_MspInit+0x60>)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000

08001f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a28      	ldr	r2, [pc, #160]	@ (8001fd0 <HAL_ADC_MspInit+0xbc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d149      	bne.n	8001fc8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f34:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <HAL_ADC_MspInit+0xc0>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a26      	ldr	r2, [pc, #152]	@ (8001fd4 <HAL_ADC_MspInit+0xc0>)
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <HAL_ADC_MspInit+0xc0>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4b21      	ldr	r3, [pc, #132]	@ (8001fd4 <HAL_ADC_MspInit+0xc0>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a20      	ldr	r2, [pc, #128]	@ (8001fd4 <HAL_ADC_MspInit+0xc0>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd4 <HAL_ADC_MspInit+0xc0>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f64:	2303      	movs	r3, #3
 8001f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4619      	mov	r1, r3
 8001f72:	4819      	ldr	r0, [pc, #100]	@ (8001fd8 <HAL_ADC_MspInit+0xc4>)
 8001f74:	f001 f94a 	bl	800320c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001f7a:	4a19      	ldr	r2, [pc, #100]	@ (8001fe0 <HAL_ADC_MspInit+0xcc>)
 8001f7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001f8c:	2280      	movs	r2, #128	@ 0x80
 8001f8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001f92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f98:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001f9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fac:	480b      	ldr	r0, [pc, #44]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001fae:	f000 ff3f 	bl	8002e30 <HAL_DMA_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001fb8:	f7ff fefc 	bl	8001db4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001fc0:	621a      	str	r2, [r3, #32]
 8001fc2:	4a06      	ldr	r2, [pc, #24]	@ (8001fdc <HAL_ADC_MspInit+0xc8>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fc8:	bf00      	nop
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40012400 	.word	0x40012400
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	2000023c 	.word	0x2000023c
 8001fe0:	40020008 	.word	0x40020008

08001fe4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0310 	add.w	r3, r7, #16
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <HAL_SPI_MspInit+0x88>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d12f      	bne.n	8002064 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002004:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_SPI_MspInit+0x8c>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_SPI_MspInit+0x8c>)
 800200a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <HAL_SPI_MspInit+0x8c>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <HAL_SPI_MspInit+0x8c>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a13      	ldr	r2, [pc, #76]	@ (8002070 <HAL_SPI_MspInit+0x8c>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_SPI_MspInit+0x8c>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002034:	23a0      	movs	r3, #160	@ 0xa0
 8002036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4619      	mov	r1, r3
 8002046:	480b      	ldr	r0, [pc, #44]	@ (8002074 <HAL_SPI_MspInit+0x90>)
 8002048:	f001 f8e0 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800204c:	2340      	movs	r3, #64	@ 0x40
 800204e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	4619      	mov	r1, r3
 800205e:	4805      	ldr	r0, [pc, #20]	@ (8002074 <HAL_SPI_MspInit+0x90>)
 8002060:	f001 f8d4 	bl	800320c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40013000 	.word	0x40013000
 8002070:	40021000 	.word	0x40021000
 8002074:	40010800 	.word	0x40010800

08002078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a15      	ldr	r2, [pc, #84]	@ (80020e8 <HAL_UART_MspInit+0x70>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d123      	bne.n	80020e0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002098:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <HAL_UART_MspInit+0x74>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	4a13      	ldr	r2, [pc, #76]	@ (80020ec <HAL_UART_MspInit+0x74>)
 800209e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a2:	61d3      	str	r3, [r2, #28]
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_UART_MspInit+0x74>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_UART_MspInit+0x74>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <HAL_UART_MspInit+0x74>)
 80020b6:	f043 0304 	orr.w	r3, r3, #4
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_UART_MspInit+0x74>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020c8:	230c      	movs	r3, #12
 80020ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4619      	mov	r1, r3
 80020da:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <HAL_UART_MspInit+0x78>)
 80020dc:	f001 f896 	bl	800320c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40004400 	.word	0x40004400
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010800 	.word	0x40010800

080020f4 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80020f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <SDTimer_Handler+0x3c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <SDTimer_Handler+0x1c>
		Timer1--;
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <SDTimer_Handler+0x3c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <SDTimer_Handler+0x3c>)
 800210e:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8002110:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <SDTimer_Handler+0x40>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <SDTimer_Handler+0x34>
		Timer2--;
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <SDTimer_Handler+0x40>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <SDTimer_Handler+0x40>)
 8002126:	701a      	strb	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	200023cf 	.word	0x200023cf
 8002134:	200023d0 	.word	0x200023d0

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <NMI_Handler+0x4>

08002140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <HardFault_Handler+0x4>

08002148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800214c:	bf00      	nop
 800214e:	e7fd      	b.n	800214c <MemManage_Handler+0x4>

08002150 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <BusFault_Handler+0x4>

08002158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <UsageFault_Handler+0x4>

08002160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002188:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <SysTick_Handler+0x30>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	3301      	adds	r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <SysTick_Handler+0x30>)
 8002194:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <SysTick_Handler+0x30>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b09      	cmp	r3, #9
 800219e:	d904      	bls.n	80021aa <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80021a0:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <SysTick_Handler+0x30>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80021a6:	f7ff ffa5 	bl	80020f4 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021aa:	f000 f94b 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200023ce 	.word	0x200023ce

080021b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021bc:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <DMA1_Channel1_IRQHandler+0x10>)
 80021be:	f000 fef1 	bl	8002fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000023c 	.word	0x2000023c

080021cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80021d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80021d4:	f001 f9b6 	bl	8003544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return 1;
 80021e0:	2301      	movs	r3, #1
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <_kill>:

int _kill(int pid, int sig)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021f4:	f007 f890 	bl	8009318 <__errno>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2216      	movs	r2, #22
 80021fc:	601a      	str	r2, [r3, #0]
  return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_exit>:

void _exit (int status)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002212:	f04f 31ff 	mov.w	r1, #4294967295
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffe7 	bl	80021ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <_exit+0x12>

08002220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	e00a      	b.n	8002248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002232:	f3af 8000 	nop.w
 8002236:	4601      	mov	r1, r0
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	b2ca      	uxtb	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbf0      	blt.n	8002232 <_read+0x12>
  }

  return len;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e009      	b.n	8002280 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	dbf1      	blt.n	800226c <_write+0x12>
  }
  return len;
 8002288:	687b      	ldr	r3, [r7, #4]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <_close>:

int _close(int file)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022b8:	605a      	str	r2, [r3, #4]
  return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <_isatty>:

int _isatty(int file)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
	...

080022f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022fc:	4a14      	ldr	r2, [pc, #80]	@ (8002350 <_sbrk+0x5c>)
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <_sbrk+0x60>)
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002308:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <_sbrk+0x64>)
 8002312:	4a12      	ldr	r2, [pc, #72]	@ (800235c <_sbrk+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002316:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	429a      	cmp	r2, r3
 8002322:	d207      	bcs.n	8002334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002324:	f006 fff8 	bl	8009318 <__errno>
 8002328:	4603      	mov	r3, r0
 800232a:	220c      	movs	r2, #12
 800232c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	e009      	b.n	8002348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233a:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <_sbrk+0x64>)
 8002344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20005000 	.word	0x20005000
 8002354:	00000400 	.word	0x00000400
 8002358:	200023d4 	.word	0x200023d4
 800235c:	20002760 	.word	0x20002760

08002360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <Reset_Handler>:
 800236c:	f7ff fff8 	bl	8002360 <SystemInit>
 8002370:	480b      	ldr	r0, [pc, #44]	@ (80023a0 <LoopFillZerobss+0xe>)
 8002372:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <LoopFillZerobss+0x12>)
 8002374:	4a0c      	ldr	r2, [pc, #48]	@ (80023a8 <LoopFillZerobss+0x16>)
 8002376:	2300      	movs	r3, #0
 8002378:	e002      	b.n	8002380 <LoopCopyDataInit>

0800237a <CopyDataInit>:
 800237a:	58d4      	ldr	r4, [r2, r3]
 800237c:	50c4      	str	r4, [r0, r3]
 800237e:	3304      	adds	r3, #4

08002380 <LoopCopyDataInit>:
 8002380:	18c4      	adds	r4, r0, r3
 8002382:	428c      	cmp	r4, r1
 8002384:	d3f9      	bcc.n	800237a <CopyDataInit>
 8002386:	4a09      	ldr	r2, [pc, #36]	@ (80023ac <LoopFillZerobss+0x1a>)
 8002388:	4c09      	ldr	r4, [pc, #36]	@ (80023b0 <LoopFillZerobss+0x1e>)
 800238a:	2300      	movs	r3, #0
 800238c:	e001      	b.n	8002392 <LoopFillZerobss>

0800238e <FillZerobss>:
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	3204      	adds	r2, #4

08002392 <LoopFillZerobss>:
 8002392:	42a2      	cmp	r2, r4
 8002394:	d3fb      	bcc.n	800238e <FillZerobss>
 8002396:	f006 ffc5 	bl	8009324 <__libc_init_array>
 800239a:	f7ff fafd 	bl	8001998 <main>
 800239e:	4770      	bx	lr
 80023a0:	20000000 	.word	0x20000000
 80023a4:	200001ec 	.word	0x200001ec
 80023a8:	0800bde8 	.word	0x0800bde8
 80023ac:	200001ec 	.word	0x200001ec
 80023b0:	2000275c 	.word	0x2000275c

080023b4 <ADC1_2_IRQHandler>:
 80023b4:	e7fe      	b.n	80023b4 <ADC1_2_IRQHandler>
	...

080023b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <HAL_Init+0x28>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a07      	ldr	r2, [pc, #28]	@ (80023e0 <HAL_Init+0x28>)
 80023c2:	f043 0310 	orr.w	r3, r3, #16
 80023c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f000 fcef 	bl	8002dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 f808 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d4:	f7ff fd6c 	bl	8001eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000

080023e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ec:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_InitTick+0x54>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_InitTick+0x58>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fd07 	bl	8002e16 <HAL_SYSTICK_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e00e      	b.n	8002430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d80a      	bhi.n	800242e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f000 fccf 	bl	8002dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002424:	4a06      	ldr	r2, [pc, #24]	@ (8002440 <HAL_InitTick+0x5c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000004 	.word	0x20000004
 800243c:	2000000c 	.word	0x2000000c
 8002440:	20000008 	.word	0x20000008

08002444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_IncTick+0x1c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_IncTick+0x20>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a03      	ldr	r2, [pc, #12]	@ (8002464 <HAL_IncTick+0x20>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	2000000c 	.word	0x2000000c
 8002464:	200023d8 	.word	0x200023d8

08002468 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b02      	ldr	r3, [pc, #8]	@ (8002478 <HAL_GetTick+0x10>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	200023d8 	.word	0x200023d8

0800247c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0be      	b.n	800261c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fd2a 	bl	8001f14 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 faff 	bl	8002ac4 <ADC_ConversionStop_Disable>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 8099 	bne.w	800260a <HAL_ADC_Init+0x18e>
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 8095 	bne.w	800260a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024e8:	f023 0302 	bic.w	r3, r3, #2
 80024ec:	f043 0202 	orr.w	r2, r3, #2
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7b1b      	ldrb	r3, [r3, #12]
 8002502:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002504:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	4313      	orrs	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002514:	d003      	beq.n	800251e <HAL_ADC_Init+0xa2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_ADC_Init+0xa8>
 800251e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002522:	e000      	b.n	8002526 <HAL_ADC_Init+0xaa>
 8002524:	2300      	movs	r3, #0
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7d1b      	ldrb	r3, [r3, #20]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d119      	bne.n	8002568 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7b1b      	ldrb	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	3b01      	subs	r3, #1
 8002542:	035a      	lsls	r2, r3, #13
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	e00b      	b.n	8002568 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	430a      	orrs	r2, r1
 800257a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <HAL_ADC_Init+0x1a8>)
 8002584:	4013      	ands	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	430b      	orrs	r3, r1
 800258e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002598:	d003      	beq.n	80025a2 <HAL_ADC_Init+0x126>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d104      	bne.n	80025ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	051b      	lsls	r3, r3, #20
 80025aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	430a      	orrs	r2, r1
 80025be:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	4b18      	ldr	r3, [pc, #96]	@ (8002628 <HAL_ADC_Init+0x1ac>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d10b      	bne.n	80025e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025e6:	e018      	b.n	800261a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	f023 0312 	bic.w	r3, r3, #18
 80025f0:	f043 0210 	orr.w	r2, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002608:	e007      	b.n	800261a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	f043 0210 	orr.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800261a:	7dfb      	ldrb	r3, [r7, #23]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	ffe1f7fd 	.word	0xffe1f7fd
 8002628:	ff1f0efe 	.word	0xff1f0efe

0800262c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a64      	ldr	r2, [pc, #400]	@ (80027d4 <HAL_ADC_Start_DMA+0x1a8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d004      	beq.n	8002650 <HAL_ADC_Start_DMA+0x24>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a63      	ldr	r2, [pc, #396]	@ (80027d8 <HAL_ADC_Start_DMA+0x1ac>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d106      	bne.n	800265e <HAL_ADC_Start_DMA+0x32>
 8002650:	4b60      	ldr	r3, [pc, #384]	@ (80027d4 <HAL_ADC_Start_DMA+0x1a8>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 80b3 	bne.w	80027c4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_ADC_Start_DMA+0x40>
 8002668:	2302      	movs	r3, #2
 800266a:	e0ae      	b.n	80027ca <HAL_ADC_Start_DMA+0x19e>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f9cb 	bl	8002a10 <ADC_Enable>
 800267a:	4603      	mov	r3, r0
 800267c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 809a 	bne.w	80027ba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a4e      	ldr	r2, [pc, #312]	@ (80027d8 <HAL_ADC_Start_DMA+0x1ac>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d105      	bne.n	80026b0 <HAL_ADC_Start_DMA+0x84>
 80026a4:	4b4b      	ldr	r3, [pc, #300]	@ (80027d4 <HAL_ADC_Start_DMA+0x1a8>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d115      	bne.n	80026dc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d026      	beq.n	8002718 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026da:	e01d      	b.n	8002718 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a39      	ldr	r2, [pc, #228]	@ (80027d4 <HAL_ADC_Start_DMA+0x1a8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_ADC_Start_DMA+0xd0>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a38      	ldr	r2, [pc, #224]	@ (80027d8 <HAL_ADC_Start_DMA+0x1ac>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d10d      	bne.n	8002718 <HAL_ADC_Start_DMA+0xec>
 80026fc:	4b35      	ldr	r3, [pc, #212]	@ (80027d4 <HAL_ADC_Start_DMA+0x1a8>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002710:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d006      	beq.n	8002732 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	f023 0206 	bic.w	r2, r3, #6
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002730:	e002      	b.n	8002738 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4a25      	ldr	r2, [pc, #148]	@ (80027dc <HAL_ADC_Start_DMA+0x1b0>)
 8002746:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a24      	ldr	r2, [pc, #144]	@ (80027e0 <HAL_ADC_Start_DMA+0x1b4>)
 800274e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4a23      	ldr	r2, [pc, #140]	@ (80027e4 <HAL_ADC_Start_DMA+0x1b8>)
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0202 	mvn.w	r2, #2
 8002760:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002770:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a18      	ldr	r0, [r3, #32]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	334c      	adds	r3, #76	@ 0x4c
 800277c:	4619      	mov	r1, r3
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f000 fbaf 	bl	8002ee4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002790:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002794:	d108      	bne.n	80027a8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80027a4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80027a6:	e00f      	b.n	80027c8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80027b6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80027b8:	e006      	b.n	80027c8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80027c2:	e001      	b.n	80027c8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40012400 	.word	0x40012400
 80027d8:	40012800 	.word	0x40012800
 80027dc:	08002b47 	.word	0x08002b47
 80027e0:	08002bc3 	.word	0x08002bc3
 80027e4:	08002bdf 	.word	0x08002bdf

080027e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
	...

08002820 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x20>
 800283c:	2302      	movs	r3, #2
 800283e:	e0dc      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1da>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b06      	cmp	r3, #6
 800284e:	d81c      	bhi.n	800288a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	3b05      	subs	r3, #5
 8002862:	221f      	movs	r2, #31
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	4019      	ands	r1, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	3b05      	subs	r3, #5
 800287c:	fa00 f203 	lsl.w	r2, r0, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	635a      	str	r2, [r3, #52]	@ 0x34
 8002888:	e03c      	b.n	8002904 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d81c      	bhi.n	80028cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	3b23      	subs	r3, #35	@ 0x23
 80028a4:	221f      	movs	r2, #31
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	4019      	ands	r1, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	3b23      	subs	r3, #35	@ 0x23
 80028be:	fa00 f203 	lsl.w	r2, r0, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ca:	e01b      	b.n	8002904 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	3b41      	subs	r3, #65	@ 0x41
 80028de:	221f      	movs	r2, #31
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4019      	ands	r1, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	3b41      	subs	r3, #65	@ 0x41
 80028f8:	fa00 f203 	lsl.w	r2, r0, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b09      	cmp	r3, #9
 800290a:	d91c      	bls.n	8002946 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68d9      	ldr	r1, [r3, #12]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	3b1e      	subs	r3, #30
 800291e:	2207      	movs	r2, #7
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	4019      	ands	r1, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6898      	ldr	r0, [r3, #8]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	3b1e      	subs	r3, #30
 8002938:	fa00 f203 	lsl.w	r2, r0, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	e019      	b.n	800297a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6919      	ldr	r1, [r3, #16]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	2207      	movs	r2, #7
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	4019      	ands	r1, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6898      	ldr	r0, [r3, #8]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	fa00 f203 	lsl.w	r2, r0, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b10      	cmp	r3, #16
 8002980:	d003      	beq.n	800298a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002986:	2b11      	cmp	r3, #17
 8002988:	d132      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_ADC_ConfigChannel+0x1e4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d125      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d126      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80029b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d11a      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ba:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <HAL_ADC_ConfigChannel+0x1e8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a13      	ldr	r2, [pc, #76]	@ (8002a0c <HAL_ADC_ConfigChannel+0x1ec>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	0c9a      	lsrs	r2, r3, #18
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029d0:	e002      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f9      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x1b2>
 80029de:	e007      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40012400 	.word	0x40012400
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	431bde83 	.word	0x431bde83

08002a10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d040      	beq.n	8002ab0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <ADC_Enable+0xac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac0 <ADC_Enable+0xb0>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	0c9b      	lsrs	r3, r3, #18
 8002a4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a4c:	e002      	b.n	8002a54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f9      	bne.n	8002a4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a5a:	f7ff fd05 	bl	8002468 <HAL_GetTick>
 8002a5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a60:	e01f      	b.n	8002aa2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a62:	f7ff fd01 	bl	8002468 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d918      	bls.n	8002aa2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d011      	beq.n	8002aa2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	f043 0210 	orr.w	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e007      	b.n	8002ab2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d1d8      	bne.n	8002a62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	431bde83 	.word	0x431bde83

08002ac4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d12e      	bne.n	8002b3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aee:	f7ff fcbb 	bl	8002468 <HAL_GetTick>
 8002af2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002af4:	e01b      	b.n	8002b2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002af6:	f7ff fcb7 	bl	8002468 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d914      	bls.n	8002b2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10d      	bne.n	8002b2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b16:	f043 0210 	orr.w	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e007      	b.n	8002b3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d0dc      	beq.n	8002af6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d127      	bne.n	8002bb0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002b76:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002b7a:	d115      	bne.n	8002ba8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d111      	bne.n	8002ba8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fe1d 	bl	80027e8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002bae:	e004      	b.n	8002bba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff fe12 	bl	80027fa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfc:	f043 0204 	orr.w	r2, r3, #4
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff fe01 	bl	800280c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c30:	4013      	ands	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c46:	4a04      	ldr	r2, [pc, #16]	@ (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	60d3      	str	r3, [r2, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c60:	4b04      	ldr	r3, [pc, #16]	@ (8002c74 <__NVIC_GetPriorityGrouping+0x18>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 0307 	and.w	r3, r3, #7
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	db0b      	blt.n	8002ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	4906      	ldr	r1, [pc, #24]	@ (8002cac <__NVIC_EnableIRQ+0x34>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2001      	movs	r0, #1
 8002c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db0a      	blt.n	8002cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	490c      	ldr	r1, [pc, #48]	@ (8002cfc <__NVIC_SetPriority+0x4c>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd8:	e00a      	b.n	8002cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4908      	ldr	r1, [pc, #32]	@ (8002d00 <__NVIC_SetPriority+0x50>)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	761a      	strb	r2, [r3, #24]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	@ 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f1c3 0307 	rsb	r3, r3, #7
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf28      	it	cs
 8002d22:	2304      	movcs	r3, #4
 8002d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d902      	bls.n	8002d34 <NVIC_EncodePriority+0x30>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3b03      	subs	r3, #3
 8002d32:	e000      	b.n	8002d36 <NVIC_EncodePriority+0x32>
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	401a      	ands	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43d9      	mvns	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	4313      	orrs	r3, r2
         );
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	@ 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d78:	d301      	bcc.n	8002d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00f      	b.n	8002d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <SysTick_Config+0x40>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d86:	210f      	movs	r1, #15
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f7ff ff90 	bl	8002cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <SysTick_Config+0x40>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d96:	4b04      	ldr	r3, [pc, #16]	@ (8002da8 <SysTick_Config+0x40>)
 8002d98:	2207      	movs	r2, #7
 8002d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	e000e010 	.word	0xe000e010

08002dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ff2d 	bl	8002c14 <__NVIC_SetPriorityGrouping>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd4:	f7ff ff42 	bl	8002c5c <__NVIC_GetPriorityGrouping>
 8002dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f7ff ff90 	bl	8002d04 <NVIC_EncodePriority>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff5f 	bl	8002cb0 <__NVIC_SetPriority>
}
 8002df2:	bf00      	nop
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff35 	bl	8002c78 <__NVIC_EnableIRQ>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ffa2 	bl	8002d68 <SysTick_Config>
 8002e24:	4603      	mov	r3, r0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e043      	b.n	8002ece <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b22      	ldr	r3, [pc, #136]	@ (8002ed8 <HAL_DMA_Init+0xa8>)
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <HAL_DMA_Init+0xac>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	009a      	lsls	r2, r3, #2
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee0 <HAL_DMA_Init+0xb0>)
 8002e62:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e7a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	bffdfff8 	.word	0xbffdfff8
 8002edc:	cccccccd 	.word	0xcccccccd
 8002ee0:	40020000 	.word	0x40020000

08002ee4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_DMA_Start_IT+0x20>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e04b      	b.n	8002f9c <HAL_DMA_Start_IT+0xb8>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d13a      	bne.n	8002f8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0201 	bic.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f937 	bl	80031b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 020e 	orr.w	r2, r2, #14
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e00f      	b.n	8002f7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 020a 	orr.w	r2, r2, #10
 8002f7a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e005      	b.n	8002f9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
 8002f98:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d04f      	beq.n	800306c <HAL_DMA_IRQHandler+0xc8>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d04a      	beq.n	800306c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d107      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0204 	bic.w	r2, r2, #4
 8002ff2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a66      	ldr	r2, [pc, #408]	@ (8003194 <HAL_DMA_IRQHandler+0x1f0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d029      	beq.n	8003052 <HAL_DMA_IRQHandler+0xae>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a65      	ldr	r2, [pc, #404]	@ (8003198 <HAL_DMA_IRQHandler+0x1f4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d022      	beq.n	800304e <HAL_DMA_IRQHandler+0xaa>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a63      	ldr	r2, [pc, #396]	@ (800319c <HAL_DMA_IRQHandler+0x1f8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01a      	beq.n	8003048 <HAL_DMA_IRQHandler+0xa4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a62      	ldr	r2, [pc, #392]	@ (80031a0 <HAL_DMA_IRQHandler+0x1fc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d012      	beq.n	8003042 <HAL_DMA_IRQHandler+0x9e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a60      	ldr	r2, [pc, #384]	@ (80031a4 <HAL_DMA_IRQHandler+0x200>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00a      	beq.n	800303c <HAL_DMA_IRQHandler+0x98>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a5f      	ldr	r2, [pc, #380]	@ (80031a8 <HAL_DMA_IRQHandler+0x204>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d102      	bne.n	8003036 <HAL_DMA_IRQHandler+0x92>
 8003030:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003034:	e00e      	b.n	8003054 <HAL_DMA_IRQHandler+0xb0>
 8003036:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800303a:	e00b      	b.n	8003054 <HAL_DMA_IRQHandler+0xb0>
 800303c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003040:	e008      	b.n	8003054 <HAL_DMA_IRQHandler+0xb0>
 8003042:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003046:	e005      	b.n	8003054 <HAL_DMA_IRQHandler+0xb0>
 8003048:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800304c:	e002      	b.n	8003054 <HAL_DMA_IRQHandler+0xb0>
 800304e:	2340      	movs	r3, #64	@ 0x40
 8003050:	e000      	b.n	8003054 <HAL_DMA_IRQHandler+0xb0>
 8003052:	2304      	movs	r3, #4
 8003054:	4a55      	ldr	r2, [pc, #340]	@ (80031ac <HAL_DMA_IRQHandler+0x208>)
 8003056:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8094 	beq.w	800318a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800306a:	e08e      	b.n	800318a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	2202      	movs	r2, #2
 8003072:	409a      	lsls	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d056      	beq.n	800312a <HAL_DMA_IRQHandler+0x186>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d051      	beq.n	800312a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 020a 	bic.w	r2, r2, #10
 80030a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a38      	ldr	r2, [pc, #224]	@ (8003194 <HAL_DMA_IRQHandler+0x1f0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d029      	beq.n	800310a <HAL_DMA_IRQHandler+0x166>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a37      	ldr	r2, [pc, #220]	@ (8003198 <HAL_DMA_IRQHandler+0x1f4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d022      	beq.n	8003106 <HAL_DMA_IRQHandler+0x162>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a35      	ldr	r2, [pc, #212]	@ (800319c <HAL_DMA_IRQHandler+0x1f8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01a      	beq.n	8003100 <HAL_DMA_IRQHandler+0x15c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a34      	ldr	r2, [pc, #208]	@ (80031a0 <HAL_DMA_IRQHandler+0x1fc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d012      	beq.n	80030fa <HAL_DMA_IRQHandler+0x156>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a32      	ldr	r2, [pc, #200]	@ (80031a4 <HAL_DMA_IRQHandler+0x200>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00a      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x150>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a31      	ldr	r2, [pc, #196]	@ (80031a8 <HAL_DMA_IRQHandler+0x204>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d102      	bne.n	80030ee <HAL_DMA_IRQHandler+0x14a>
 80030e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80030ec:	e00e      	b.n	800310c <HAL_DMA_IRQHandler+0x168>
 80030ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030f2:	e00b      	b.n	800310c <HAL_DMA_IRQHandler+0x168>
 80030f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030f8:	e008      	b.n	800310c <HAL_DMA_IRQHandler+0x168>
 80030fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030fe:	e005      	b.n	800310c <HAL_DMA_IRQHandler+0x168>
 8003100:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003104:	e002      	b.n	800310c <HAL_DMA_IRQHandler+0x168>
 8003106:	2320      	movs	r3, #32
 8003108:	e000      	b.n	800310c <HAL_DMA_IRQHandler+0x168>
 800310a:	2302      	movs	r3, #2
 800310c:	4a27      	ldr	r2, [pc, #156]	@ (80031ac <HAL_DMA_IRQHandler+0x208>)
 800310e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d034      	beq.n	800318a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003128:	e02f      	b.n	800318a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	2208      	movs	r2, #8
 8003130:	409a      	lsls	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d028      	beq.n	800318c <HAL_DMA_IRQHandler+0x1e8>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d023      	beq.n	800318c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 020e 	bic.w	r2, r2, #14
 8003152:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f202 	lsl.w	r2, r1, r2
 8003162:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
    }
  }
  return;
 800318a:	bf00      	nop
 800318c:	bf00      	nop
}
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40020008 	.word	0x40020008
 8003198:	4002001c 	.word	0x4002001c
 800319c:	40020030 	.word	0x40020030
 80031a0:	40020044 	.word	0x40020044
 80031a4:	40020058 	.word	0x40020058
 80031a8:	4002006c 	.word	0x4002006c
 80031ac:	40020000 	.word	0x40020000

080031b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d108      	bne.n	80031f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031ee:	e007      	b.n	8003200 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
	...

0800320c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800320c:	b480      	push	{r7}
 800320e:	b08b      	sub	sp, #44	@ 0x2c
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800321a:	2300      	movs	r3, #0
 800321c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321e:	e169      	b.n	80034f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003220:	2201      	movs	r2, #1
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	429a      	cmp	r2, r3
 800323a:	f040 8158 	bne.w	80034ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4a9a      	ldr	r2, [pc, #616]	@ (80034ac <HAL_GPIO_Init+0x2a0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d05e      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
 8003248:	4a98      	ldr	r2, [pc, #608]	@ (80034ac <HAL_GPIO_Init+0x2a0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d875      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 800324e:	4a98      	ldr	r2, [pc, #608]	@ (80034b0 <HAL_GPIO_Init+0x2a4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d058      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
 8003254:	4a96      	ldr	r2, [pc, #600]	@ (80034b0 <HAL_GPIO_Init+0x2a4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d86f      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 800325a:	4a96      	ldr	r2, [pc, #600]	@ (80034b4 <HAL_GPIO_Init+0x2a8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d052      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
 8003260:	4a94      	ldr	r2, [pc, #592]	@ (80034b4 <HAL_GPIO_Init+0x2a8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d869      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 8003266:	4a94      	ldr	r2, [pc, #592]	@ (80034b8 <HAL_GPIO_Init+0x2ac>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d04c      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
 800326c:	4a92      	ldr	r2, [pc, #584]	@ (80034b8 <HAL_GPIO_Init+0x2ac>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d863      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 8003272:	4a92      	ldr	r2, [pc, #584]	@ (80034bc <HAL_GPIO_Init+0x2b0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d046      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
 8003278:	4a90      	ldr	r2, [pc, #576]	@ (80034bc <HAL_GPIO_Init+0x2b0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d85d      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 800327e:	2b12      	cmp	r3, #18
 8003280:	d82a      	bhi.n	80032d8 <HAL_GPIO_Init+0xcc>
 8003282:	2b12      	cmp	r3, #18
 8003284:	d859      	bhi.n	800333a <HAL_GPIO_Init+0x12e>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <HAL_GPIO_Init+0x80>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	08003307 	.word	0x08003307
 8003290:	080032e1 	.word	0x080032e1
 8003294:	080032f3 	.word	0x080032f3
 8003298:	08003335 	.word	0x08003335
 800329c:	0800333b 	.word	0x0800333b
 80032a0:	0800333b 	.word	0x0800333b
 80032a4:	0800333b 	.word	0x0800333b
 80032a8:	0800333b 	.word	0x0800333b
 80032ac:	0800333b 	.word	0x0800333b
 80032b0:	0800333b 	.word	0x0800333b
 80032b4:	0800333b 	.word	0x0800333b
 80032b8:	0800333b 	.word	0x0800333b
 80032bc:	0800333b 	.word	0x0800333b
 80032c0:	0800333b 	.word	0x0800333b
 80032c4:	0800333b 	.word	0x0800333b
 80032c8:	0800333b 	.word	0x0800333b
 80032cc:	0800333b 	.word	0x0800333b
 80032d0:	080032e9 	.word	0x080032e9
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	4a79      	ldr	r2, [pc, #484]	@ (80034c0 <HAL_GPIO_Init+0x2b4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032de:	e02c      	b.n	800333a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	623b      	str	r3, [r7, #32]
          break;
 80032e6:	e029      	b.n	800333c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	3304      	adds	r3, #4
 80032ee:	623b      	str	r3, [r7, #32]
          break;
 80032f0:	e024      	b.n	800333c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	3308      	adds	r3, #8
 80032f8:	623b      	str	r3, [r7, #32]
          break;
 80032fa:	e01f      	b.n	800333c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	330c      	adds	r3, #12
 8003302:	623b      	str	r3, [r7, #32]
          break;
 8003304:	e01a      	b.n	800333c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800330e:	2304      	movs	r3, #4
 8003310:	623b      	str	r3, [r7, #32]
          break;
 8003312:	e013      	b.n	800333c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800331c:	2308      	movs	r3, #8
 800331e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	611a      	str	r2, [r3, #16]
          break;
 8003326:	e009      	b.n	800333c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003328:	2308      	movs	r3, #8
 800332a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	615a      	str	r2, [r3, #20]
          break;
 8003332:	e003      	b.n	800333c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003334:	2300      	movs	r3, #0
 8003336:	623b      	str	r3, [r7, #32]
          break;
 8003338:	e000      	b.n	800333c <HAL_GPIO_Init+0x130>
          break;
 800333a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2bff      	cmp	r3, #255	@ 0xff
 8003340:	d801      	bhi.n	8003346 <HAL_GPIO_Init+0x13a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	e001      	b.n	800334a <HAL_GPIO_Init+0x13e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3304      	adds	r3, #4
 800334a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2bff      	cmp	r3, #255	@ 0xff
 8003350:	d802      	bhi.n	8003358 <HAL_GPIO_Init+0x14c>
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	e002      	b.n	800335e <HAL_GPIO_Init+0x152>
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	3b08      	subs	r3, #8
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	210f      	movs	r1, #15
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	401a      	ands	r2, r3
 8003370:	6a39      	ldr	r1, [r7, #32]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	431a      	orrs	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 80b1 	beq.w	80034ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800338c:	4b4d      	ldr	r3, [pc, #308]	@ (80034c4 <HAL_GPIO_Init+0x2b8>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	4a4c      	ldr	r2, [pc, #304]	@ (80034c4 <HAL_GPIO_Init+0x2b8>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6193      	str	r3, [r2, #24]
 8003398:	4b4a      	ldr	r3, [pc, #296]	@ (80034c4 <HAL_GPIO_Init+0x2b8>)
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033a4:	4a48      	ldr	r2, [pc, #288]	@ (80034c8 <HAL_GPIO_Init+0x2bc>)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	3302      	adds	r3, #2
 80033ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	220f      	movs	r2, #15
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a40      	ldr	r2, [pc, #256]	@ (80034cc <HAL_GPIO_Init+0x2c0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <HAL_GPIO_Init+0x1ec>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3f      	ldr	r2, [pc, #252]	@ (80034d0 <HAL_GPIO_Init+0x2c4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00d      	beq.n	80033f4 <HAL_GPIO_Init+0x1e8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3e      	ldr	r2, [pc, #248]	@ (80034d4 <HAL_GPIO_Init+0x2c8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <HAL_GPIO_Init+0x1e4>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3d      	ldr	r2, [pc, #244]	@ (80034d8 <HAL_GPIO_Init+0x2cc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_GPIO_Init+0x1e0>
 80033e8:	2303      	movs	r3, #3
 80033ea:	e006      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e004      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e002      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_GPIO_Init+0x1ee>
 80033f8:	2300      	movs	r3, #0
 80033fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033fc:	f002 0203 	and.w	r2, r2, #3
 8003400:	0092      	lsls	r2, r2, #2
 8003402:	4093      	lsls	r3, r2
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800340a:	492f      	ldr	r1, [pc, #188]	@ (80034c8 <HAL_GPIO_Init+0x2bc>)
 800340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	3302      	adds	r3, #2
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d006      	beq.n	8003432 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003424:	4b2d      	ldr	r3, [pc, #180]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	492c      	ldr	r1, [pc, #176]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003432:	4b2a      	ldr	r3, [pc, #168]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	43db      	mvns	r3, r3
 800343a:	4928      	ldr	r1, [pc, #160]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 800343c:	4013      	ands	r3, r2
 800343e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d006      	beq.n	800345a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800344c:	4b23      	ldr	r3, [pc, #140]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	4922      	ldr	r1, [pc, #136]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	60cb      	str	r3, [r1, #12]
 8003458:	e006      	b.n	8003468 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800345a:	4b20      	ldr	r3, [pc, #128]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	43db      	mvns	r3, r3
 8003462:	491e      	ldr	r1, [pc, #120]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 8003464:	4013      	ands	r3, r2
 8003466:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d006      	beq.n	8003482 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003474:	4b19      	ldr	r3, [pc, #100]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	4918      	ldr	r1, [pc, #96]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
 8003480:	e006      	b.n	8003490 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003482:	4b16      	ldr	r3, [pc, #88]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	43db      	mvns	r3, r3
 800348a:	4914      	ldr	r1, [pc, #80]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 800348c:	4013      	ands	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d021      	beq.n	80034e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800349c:	4b0f      	ldr	r3, [pc, #60]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	490e      	ldr	r1, [pc, #56]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]
 80034a8:	e021      	b.n	80034ee <HAL_GPIO_Init+0x2e2>
 80034aa:	bf00      	nop
 80034ac:	10320000 	.word	0x10320000
 80034b0:	10310000 	.word	0x10310000
 80034b4:	10220000 	.word	0x10220000
 80034b8:	10210000 	.word	0x10210000
 80034bc:	10120000 	.word	0x10120000
 80034c0:	10110000 	.word	0x10110000
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40010800 	.word	0x40010800
 80034d0:	40010c00 	.word	0x40010c00
 80034d4:	40011000 	.word	0x40011000
 80034d8:	40011400 	.word	0x40011400
 80034dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <HAL_GPIO_Init+0x304>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	4909      	ldr	r1, [pc, #36]	@ (8003510 <HAL_GPIO_Init+0x304>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	3301      	adds	r3, #1
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f47f ae8e 	bne.w	8003220 <HAL_GPIO_Init+0x14>
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	372c      	adds	r7, #44	@ 0x2c
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003530:	e003      	b.n	800353a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	041a      	lsls	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800354e:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d006      	beq.n	8003568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800355a:	4a05      	ldr	r2, [pc, #20]	@ (8003570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f806 	bl	8003574 <HAL_GPIO_EXTI_Callback>
  }
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40010400 	.word	0x40010400

08003574 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e272      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8087 	beq.w	80036b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a8:	4b92      	ldr	r3, [pc, #584]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d00c      	beq.n	80035ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035b4:	4b8f      	ldr	r3, [pc, #572]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d112      	bne.n	80035e6 <HAL_RCC_OscConfig+0x5e>
 80035c0:	4b8c      	ldr	r3, [pc, #560]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035cc:	d10b      	bne.n	80035e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ce:	4b89      	ldr	r3, [pc, #548]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d06c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x12c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d168      	bne.n	80036b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e24c      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_OscConfig+0x76>
 80035f0:	4b80      	ldr	r3, [pc, #512]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a7f      	ldr	r2, [pc, #508]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	e02e      	b.n	800365c <HAL_RCC_OscConfig+0xd4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10c      	bne.n	8003620 <HAL_RCC_OscConfig+0x98>
 8003606:	4b7b      	ldr	r3, [pc, #492]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a7a      	ldr	r2, [pc, #488]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800360c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b78      	ldr	r3, [pc, #480]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a77      	ldr	r2, [pc, #476]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e01d      	b.n	800365c <HAL_RCC_OscConfig+0xd4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0xbc>
 800362a:	4b72      	ldr	r3, [pc, #456]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a71      	ldr	r2, [pc, #452]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b6f      	ldr	r3, [pc, #444]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6e      	ldr	r2, [pc, #440]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e00b      	b.n	800365c <HAL_RCC_OscConfig+0xd4>
 8003644:	4b6b      	ldr	r3, [pc, #428]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a6a      	ldr	r2, [pc, #424]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800364a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b68      	ldr	r3, [pc, #416]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a67      	ldr	r2, [pc, #412]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d013      	beq.n	800368c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe ff00 	bl	8002468 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe fefc 	bl	8002468 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	@ 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e200      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	4b5d      	ldr	r3, [pc, #372]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0xe4>
 800368a:	e014      	b.n	80036b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fe feec 	bl	8002468 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003694:	f7fe fee8 	bl	8002468 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	@ 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e1ec      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a6:	4b53      	ldr	r3, [pc, #332]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x10c>
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d063      	beq.n	800378a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036c2:	4b4c      	ldr	r3, [pc, #304]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036ce:	4b49      	ldr	r3, [pc, #292]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d11c      	bne.n	8003714 <HAL_RCC_OscConfig+0x18c>
 80036da:	4b46      	ldr	r3, [pc, #280]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d116      	bne.n	8003714 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	4b43      	ldr	r3, [pc, #268]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_RCC_OscConfig+0x176>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e1c0      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fe:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4939      	ldr	r1, [pc, #228]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	e03a      	b.n	800378a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d020      	beq.n	800375e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800371c:	4b36      	ldr	r3, [pc, #216]	@ (80037f8 <HAL_RCC_OscConfig+0x270>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003722:	f7fe fea1 	bl	8002468 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372a:	f7fe fe9d 	bl	8002468 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e1a1      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373c:	4b2d      	ldr	r3, [pc, #180]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	4b2a      	ldr	r3, [pc, #168]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4927      	ldr	r1, [pc, #156]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]
 800375c:	e015      	b.n	800378a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375e:	4b26      	ldr	r3, [pc, #152]	@ (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fe80 	bl	8002468 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376c:	f7fe fe7c 	bl	8002468 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e180      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	4b1d      	ldr	r3, [pc, #116]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d03a      	beq.n	800380c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d019      	beq.n	80037d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <HAL_RCC_OscConfig+0x274>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a4:	f7fe fe60 	bl	8002468 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fe fe5c 	bl	8002468 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e160      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037be:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037ca:	2001      	movs	r0, #1
 80037cc:	f000 face 	bl	8003d6c <RCC_Delay>
 80037d0:	e01c      	b.n	800380c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d2:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <HAL_RCC_OscConfig+0x274>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d8:	f7fe fe46 	bl	8002468 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037de:	e00f      	b.n	8003800 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fe fe42 	bl	8002468 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d908      	bls.n	8003800 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e146      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	42420000 	.word	0x42420000
 80037fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003800:	4b92      	ldr	r3, [pc, #584]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e9      	bne.n	80037e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a6 	beq.w	8003966 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10d      	bne.n	8003846 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382a:	4b88      	ldr	r3, [pc, #544]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4a87      	ldr	r2, [pc, #540]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003834:	61d3      	str	r3, [r2, #28]
 8003836:	4b85      	ldr	r3, [pc, #532]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003846:	4b82      	ldr	r3, [pc, #520]	@ (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d118      	bne.n	8003884 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003852:	4b7f      	ldr	r3, [pc, #508]	@ (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7e      	ldr	r2, [pc, #504]	@ (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385e:	f7fe fe03 	bl	8002468 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7fe fdff 	bl	8002468 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	@ 0x64
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e103      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	4b75      	ldr	r3, [pc, #468]	@ (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x312>
 800388c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4a6e      	ldr	r2, [pc, #440]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6213      	str	r3, [r2, #32]
 8003898:	e02d      	b.n	80038f6 <HAL_RCC_OscConfig+0x36e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0x334>
 80038a2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4a69      	ldr	r2, [pc, #420]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	6213      	str	r3, [r2, #32]
 80038ae:	4b67      	ldr	r3, [pc, #412]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a66      	ldr	r2, [pc, #408]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	6213      	str	r3, [r2, #32]
 80038ba:	e01c      	b.n	80038f6 <HAL_RCC_OscConfig+0x36e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d10c      	bne.n	80038de <HAL_RCC_OscConfig+0x356>
 80038c4:	4b61      	ldr	r3, [pc, #388]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	4a60      	ldr	r2, [pc, #384]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	6213      	str	r3, [r2, #32]
 80038d0:	4b5e      	ldr	r3, [pc, #376]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6213      	str	r3, [r2, #32]
 80038dc:	e00b      	b.n	80038f6 <HAL_RCC_OscConfig+0x36e>
 80038de:	4b5b      	ldr	r3, [pc, #364]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4a5a      	ldr	r2, [pc, #360]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6213      	str	r3, [r2, #32]
 80038ea:	4b58      	ldr	r3, [pc, #352]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a57      	ldr	r2, [pc, #348]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d015      	beq.n	800392a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fe:	f7fe fdb3 	bl	8002468 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	e00a      	b.n	800391c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fe fdaf 	bl	8002468 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e0b1      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ee      	beq.n	8003906 <HAL_RCC_OscConfig+0x37e>
 8003928:	e014      	b.n	8003954 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fe fd9d 	bl	8002468 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fe fd99 	bl	8002468 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e09b      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003948:	4b40      	ldr	r3, [pc, #256]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ee      	bne.n	8003932 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003964:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8087 	beq.w	8003a7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003970:	4b36      	ldr	r3, [pc, #216]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d061      	beq.n	8003a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d146      	bne.n	8003a12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003984:	4b33      	ldr	r3, [pc, #204]	@ (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe fd6d 	bl	8002468 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe fd69 	bl	8002468 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e06d      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a4:	4b29      	ldr	r3, [pc, #164]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b8:	d108      	bne.n	80039cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4921      	ldr	r1, [pc, #132]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039cc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a19      	ldr	r1, [r3, #32]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	430b      	orrs	r3, r1
 80039de:	491b      	ldr	r1, [pc, #108]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fe fd3d 	bl	8002468 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fe fd39 	bl	8002468 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e03d      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a04:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x46a>
 8003a10:	e035      	b.n	8003a7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a12:	4b10      	ldr	r3, [pc, #64]	@ (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe fd26 	bl	8002468 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fe fd22 	bl	8002468 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e026      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x498>
 8003a3e:	e01e      	b.n	8003a7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e019      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40007000 	.word	0x40007000
 8003a54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <HAL_RCC_OscConfig+0x500>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000

08003a8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0d0      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d910      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 0207 	bic.w	r2, r3, #7
 8003ab6:	4965      	ldr	r1, [pc, #404]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b63      	ldr	r3, [pc, #396]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0b8      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae8:	4b59      	ldr	r3, [pc, #356]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a58      	ldr	r2, [pc, #352]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003af2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b00:	4b53      	ldr	r3, [pc, #332]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4a52      	ldr	r2, [pc, #328]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b50      	ldr	r3, [pc, #320]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	494d      	ldr	r1, [pc, #308]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d040      	beq.n	8003bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d115      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07f      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	4b41      	ldr	r3, [pc, #260]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e073      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06b      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6a:	4b39      	ldr	r3, [pc, #228]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4936      	ldr	r1, [pc, #216]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b7c:	f7fe fc74 	bl	8002468 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fe fc70 	bl	8002468 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e053      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 020c 	and.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1eb      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d210      	bcs.n	8003bdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b24      	ldr	r3, [pc, #144]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	4922      	ldr	r1, [pc, #136]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b20      	ldr	r3, [pc, #128]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e032      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be8:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4916      	ldr	r1, [pc, #88]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c06:	4b12      	ldr	r3, [pc, #72]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	490e      	ldr	r1, [pc, #56]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c1a:	f000 f821 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	490a      	ldr	r1, [pc, #40]	@ (8003c54 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2c:	5ccb      	ldrb	r3, [r1, r3]
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c32:	4a09      	ldr	r2, [pc, #36]	@ (8003c58 <HAL_RCC_ClockConfig+0x1cc>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c36:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <HAL_RCC_ClockConfig+0x1d0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fbd2 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40021000 	.word	0x40021000
 8003c54:	0800b4ec 	.word	0x0800b4ec
 8003c58:	20000004 	.word	0x20000004
 8003c5c:	20000008 	.word	0x20000008

08003c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	2300      	movs	r3, #0
 8003c74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d002      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x30>
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_GetSysClockFreq+0x36>
 8003c8e:	e027      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c90:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c92:	613b      	str	r3, [r7, #16]
      break;
 8003c94:	e027      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	0c9b      	lsrs	r3, r3, #18
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ca0:	5cd3      	ldrb	r3, [r2, r3]
 8003ca2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d010      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cae:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	0c5b      	lsrs	r3, r3, #17
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	4a11      	ldr	r2, [pc, #68]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cc2:	fb03 f202 	mul.w	r2, r3, r2
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e004      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cd4:	fb02 f303 	mul.w	r3, r2, r3
 8003cd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	613b      	str	r3, [r7, #16]
      break;
 8003cde:	e002      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ce2:	613b      	str	r3, [r7, #16]
      break;
 8003ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce6:	693b      	ldr	r3, [r7, #16]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	007a1200 	.word	0x007a1200
 8003cfc:	0800b504 	.word	0x0800b504
 8003d00:	0800b514 	.word	0x0800b514
 8003d04:	003d0900 	.word	0x003d0900

08003d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b02      	ldr	r3, [pc, #8]	@ (8003d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	20000004 	.word	0x20000004

08003d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d20:	f7ff fff2 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	@ (8003d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	0800b4fc 	.word	0x0800b4fc

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d48:	f7ff ffde 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	0adb      	lsrs	r3, r3, #11
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4903      	ldr	r1, [pc, #12]	@ (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	0800b4fc 	.word	0x0800b4fc

08003d6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d74:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <RCC_Delay+0x34>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0a      	ldr	r2, [pc, #40]	@ (8003da4 <RCC_Delay+0x38>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	0a5b      	lsrs	r3, r3, #9
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d88:	bf00      	nop
  }
  while (Delay --);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1e5a      	subs	r2, r3, #1
 8003d8e:	60fa      	str	r2, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f9      	bne.n	8003d88 <RCC_Delay+0x1c>
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	20000004 	.word	0x20000004
 8003da4:	10624dd3 	.word	0x10624dd3

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d07d      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10d      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	61d3      	str	r3, [r2, #28]
 8003de0:	4b49      	ldr	r3, [pc, #292]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dec:	2301      	movs	r3, #1
 8003dee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	4b46      	ldr	r3, [pc, #280]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d118      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfc:	4b43      	ldr	r3, [pc, #268]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a42      	ldr	r2, [pc, #264]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e08:	f7fe fb2e 	bl	8002468 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	e008      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fe fb2a 	bl	8002468 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	@ 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e06d      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b3a      	ldr	r3, [pc, #232]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e2e:	4b36      	ldr	r3, [pc, #216]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d02e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d027      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e56:	4b2e      	ldr	r3, [pc, #184]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e62:	4a29      	ldr	r2, [pc, #164]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d014      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fe faf9 	bl	8002468 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fe faf5 	bl	8002468 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e036      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	4b1d      	ldr	r3, [pc, #116]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ee      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4917      	ldr	r1, [pc, #92]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	4b14      	ldr	r3, [pc, #80]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	4a13      	ldr	r2, [pc, #76]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	490b      	ldr	r1, [pc, #44]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eea:	4b07      	ldr	r3, [pc, #28]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	4904      	ldr	r1, [pc, #16]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	42420440 	.word	0x42420440

08003f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e076      	b.n	8004014 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f36:	d009      	beq.n	8003f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
 8003f3e:	e005      	b.n	8003f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fe f83c 	bl	8001fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd0:	ea42 0103 	orr.w	r1, r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	0c1a      	lsrs	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f002 0204 	and.w	r2, r2, #4
 8003ff2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004002:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800402c:	f7fe fa1c 	bl	8002468 <HAL_GetTick>
 8004030:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
 8004044:	e12a      	b.n	800429c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_SPI_Transmit+0x36>
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e122      	b.n	800429c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_SPI_Transmit+0x48>
 8004060:	2302      	movs	r3, #2
 8004062:	e11b      	b.n	800429c <HAL_SPI_Transmit+0x280>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2203      	movs	r2, #3
 8004070:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b2:	d10f      	bne.n	80040d4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040de:	2b40      	cmp	r3, #64	@ 0x40
 80040e0:	d007      	beq.n	80040f2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040fa:	d152      	bne.n	80041a2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_SPI_Transmit+0xee>
 8004104:	8b7b      	ldrh	r3, [r7, #26]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d145      	bne.n	8004196 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	881a      	ldrh	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	1c9a      	adds	r2, r3, #2
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800412e:	e032      	b.n	8004196 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d112      	bne.n	8004164 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	881a      	ldrh	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	1c9a      	adds	r2, r3, #2
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004162:	e018      	b.n	8004196 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004164:	f7fe f980 	bl	8002468 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d803      	bhi.n	800417c <HAL_SPI_Transmit+0x160>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d102      	bne.n	8004182 <HAL_SPI_Transmit+0x166>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e082      	b.n	800429c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1c7      	bne.n	8004130 <HAL_SPI_Transmit+0x114>
 80041a0:	e053      	b.n	800424a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_SPI_Transmit+0x194>
 80041aa:	8b7b      	ldrh	r3, [r7, #26]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d147      	bne.n	8004240 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	7812      	ldrb	r2, [r2, #0]
 80041bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041d6:	e033      	b.n	8004240 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d113      	bne.n	800420e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800420c:	e018      	b.n	8004240 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800420e:	f7fe f92b 	bl	8002468 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d803      	bhi.n	8004226 <HAL_SPI_Transmit+0x20a>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d102      	bne.n	800422c <HAL_SPI_Transmit+0x210>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e02d      	b.n	800429c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1c6      	bne.n	80041d8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fa66 	bl	8004720 <SPI_EndRxTxTransaction>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800429a:	2300      	movs	r3, #0
  }
}
 800429c:	4618      	mov	r0, r3
 800429e:	3720      	adds	r7, #32
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	@ 0x28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042b2:	2301      	movs	r3, #1
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042b6:	f7fe f8d7 	bl	8002468 <HAL_GetTick>
 80042ba:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042c2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042ce:	7ffb      	ldrb	r3, [r7, #31]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d00c      	beq.n	80042ee <HAL_SPI_TransmitReceive+0x4a>
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042da:	d106      	bne.n	80042ea <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <HAL_SPI_TransmitReceive+0x46>
 80042e4:	7ffb      	ldrb	r3, [r7, #31]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d001      	beq.n	80042ee <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
 80042ec:	e17f      	b.n	80045ee <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_SPI_TransmitReceive+0x5c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_TransmitReceive+0x5c>
 80042fa:	887b      	ldrh	r3, [r7, #2]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e174      	b.n	80045ee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x6e>
 800430e:	2302      	movs	r3, #2
 8004310:	e16d      	b.n	80045ee <HAL_SPI_TransmitReceive+0x34a>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b04      	cmp	r3, #4
 8004324:	d003      	beq.n	800432e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2205      	movs	r2, #5
 800432a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	887a      	ldrh	r2, [r7, #2]
 800433e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	887a      	ldrh	r2, [r7, #2]
 8004350:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	887a      	ldrh	r2, [r7, #2]
 8004356:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436e:	2b40      	cmp	r3, #64	@ 0x40
 8004370:	d007      	beq.n	8004382 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004380:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800438a:	d17e      	bne.n	800448a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_SPI_TransmitReceive+0xf6>
 8004394:	8afb      	ldrh	r3, [r7, #22]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d16c      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439e:	881a      	ldrh	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	1c9a      	adds	r2, r3, #2
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043be:	e059      	b.n	8004474 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d11b      	bne.n	8004406 <HAL_SPI_TransmitReceive+0x162>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d016      	beq.n	8004406 <HAL_SPI_TransmitReceive+0x162>
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d113      	bne.n	8004406 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	881a      	ldrh	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b01      	cmp	r3, #1
 8004412:	d119      	bne.n	8004448 <HAL_SPI_TransmitReceive+0x1a4>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d014      	beq.n	8004448 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	b292      	uxth	r2, r2
 800442a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004430:	1c9a      	adds	r2, r3, #2
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004444:	2301      	movs	r3, #1
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004448:	f7fe f80e 	bl	8002468 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004454:	429a      	cmp	r2, r3
 8004456:	d80d      	bhi.n	8004474 <HAL_SPI_TransmitReceive+0x1d0>
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d009      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0bc      	b.n	80045ee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1a0      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x11c>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d19b      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x11c>
 8004488:	e082      	b.n	8004590 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_SPI_TransmitReceive+0x1f4>
 8004492:	8afb      	ldrh	r3, [r7, #22]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d171      	bne.n	800457c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044be:	e05d      	b.n	800457c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d11c      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x264>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d017      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x264>
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d114      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d119      	bne.n	800454a <HAL_SPI_TransmitReceive+0x2a6>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d014      	beq.n	800454a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004546:	2301      	movs	r3, #1
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800454a:	f7fd ff8d 	bl	8002468 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004556:	429a      	cmp	r2, r3
 8004558:	d803      	bhi.n	8004562 <HAL_SPI_TransmitReceive+0x2be>
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004560:	d102      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x2c4>
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e038      	b.n	80045ee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d19c      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x21c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d197      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004590:	6a3a      	ldr	r2, [r7, #32]
 8004592:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f8c3 	bl	8004720 <SPI_EndRxTxTransaction>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e01d      	b.n	80045ee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3728      	adds	r7, #40	@ 0x28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004604:	b2db      	uxtb	r3, r3
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004620:	f7fd ff22 	bl	8002468 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	4413      	add	r3, r2
 800462e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004630:	f7fd ff1a 	bl	8002468 <HAL_GetTick>
 8004634:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004636:	4b39      	ldr	r3, [pc, #228]	@ (800471c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	015b      	lsls	r3, r3, #5
 800463c:	0d1b      	lsrs	r3, r3, #20
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004646:	e054      	b.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d050      	beq.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004650:	f7fd ff0a 	bl	8002468 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	429a      	cmp	r2, r3
 800465e:	d902      	bls.n	8004666 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d13d      	bne.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004674:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800467e:	d111      	bne.n	80046a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004688:	d004      	beq.n	8004694 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004692:	d107      	bne.n	80046a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ac:	d10f      	bne.n	80046ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e017      	b.n	8004712 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4013      	ands	r3, r2
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	bf0c      	ite	eq
 8004702:	2301      	moveq	r3, #1
 8004704:	2300      	movne	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	429a      	cmp	r2, r3
 800470e:	d19b      	bne.n	8004648 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000004 	.word	0x20000004

08004720 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2201      	movs	r2, #1
 8004734:	2102      	movs	r1, #2
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff ff6a 	bl	8004610 <SPI_WaitFlagStateUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e013      	b.n	800477a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2200      	movs	r2, #0
 800475a:	2180      	movs	r1, #128	@ 0x80
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7ff ff57 	bl	8004610 <SPI_WaitFlagStateUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476c:	f043 0220 	orr.w	r2, r3, #32
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e000      	b.n	800477a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e042      	b.n	800481a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7fd fc65 	bl	8002078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2224      	movs	r2, #36	@ 0x24
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f82c 	bl	8004824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800485e:	f023 030c 	bic.w	r3, r3, #12
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	430b      	orrs	r3, r1
 800486a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2c      	ldr	r2, [pc, #176]	@ (8004938 <UART_SetConfig+0x114>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d103      	bne.n	8004894 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800488c:	f7ff fa5a 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	e002      	b.n	800489a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004894:	f7ff fa42 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8004898:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	009a      	lsls	r2, r3, #2
 80048a4:	441a      	add	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	4a22      	ldr	r2, [pc, #136]	@ (800493c <UART_SetConfig+0x118>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	0119      	lsls	r1, r3, #4
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009a      	lsls	r2, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048d0:	4b1a      	ldr	r3, [pc, #104]	@ (800493c <UART_SetConfig+0x118>)
 80048d2:	fba3 0302 	umull	r0, r3, r3, r2
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	2064      	movs	r0, #100	@ 0x64
 80048da:	fb00 f303 	mul.w	r3, r0, r3
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	3332      	adds	r3, #50	@ 0x32
 80048e4:	4a15      	ldr	r2, [pc, #84]	@ (800493c <UART_SetConfig+0x118>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048f0:	4419      	add	r1, r3
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009a      	lsls	r2, r3, #2
 80048fc:	441a      	add	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fbb2 f2f3 	udiv	r2, r2, r3
 8004908:	4b0c      	ldr	r3, [pc, #48]	@ (800493c <UART_SetConfig+0x118>)
 800490a:	fba3 0302 	umull	r0, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2064      	movs	r0, #100	@ 0x64
 8004912:	fb00 f303 	mul.w	r3, r0, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	3332      	adds	r3, #50	@ 0x32
 800491c:	4a07      	ldr	r2, [pc, #28]	@ (800493c <UART_SetConfig+0x118>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	f003 020f 	and.w	r2, r3, #15
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	440a      	add	r2, r1
 800492e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40013800 	.word	0x40013800
 800493c:	51eb851f 	.word	0x51eb851f

08004940 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004944:	4904      	ldr	r1, [pc, #16]	@ (8004958 <MX_FATFS_Init+0x18>)
 8004946:	4805      	ldr	r0, [pc, #20]	@ (800495c <MX_FATFS_Init+0x1c>)
 8004948:	f003 fe9a 	bl	8008680 <FATFS_LinkDriver>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	4b03      	ldr	r3, [pc, #12]	@ (8004960 <MX_FATFS_Init+0x20>)
 8004952:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004954:	bf00      	nop
 8004956:	bd80      	pop	{r7, pc}
 8004958:	200023e0 	.word	0x200023e0
 800495c:	20000010 	.word	0x20000010
 8004960:	200023dc 	.word	0x200023dc

08004964 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004968:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800496a:	4618      	mov	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr

08004972 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	4603      	mov	r3, r0
 800497a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fc fcee 	bl	8001360 <SD_disk_initialize>
 8004984:	4603      	mov	r3, r0
 8004986:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	4618      	mov	r0, r3
 800499e:	f7fc fdc9 	bl	8001534 <SD_disk_status>
 80049a2:	4603      	mov	r3, r0
 80049a4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4603      	mov	r3, r0
 80049bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff , sector, count);
 80049be:	7bf8      	ldrb	r0, [r7, #15]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	f7fc fdc9 	bl	800155c <SD_disk_read>
 80049ca:	4603      	mov	r3, r0
 80049cc:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
 80049e2:	4603      	mov	r3, r0
 80049e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80049e6:	7bf8      	ldrb	r0, [r7, #15]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	f7fc fe1f 	bl	8001630 <SD_disk_write>
 80049f2:	4603      	mov	r3, r0
 80049f4:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4603      	mov	r3, r0
 8004a06:	603a      	str	r2, [r7, #0]
 8004a08:	71fb      	strb	r3, [r7, #7]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	79b9      	ldrb	r1, [r7, #6]
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fc fe8f 	bl	8001738 <SD_disk_ioctl>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	4a08      	ldr	r2, [pc, #32]	@ (8004a58 <disk_status+0x30>)
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	79fa      	ldrb	r2, [r7, #7]
 8004a40:	4905      	ldr	r1, [pc, #20]	@ (8004a58 <disk_status+0x30>)
 8004a42:	440a      	add	r2, r1
 8004a44:	7a12      	ldrb	r2, [r2, #8]
 8004a46:	4610      	mov	r0, r2
 8004a48:	4798      	blx	r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20002604 	.word	0x20002604

08004a5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa4 <disk_initialize+0x48>)
 8004a6e:	5cd3      	ldrb	r3, [r2, r3]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d111      	bne.n	8004a98 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	4a0b      	ldr	r2, [pc, #44]	@ (8004aa4 <disk_initialize+0x48>)
 8004a78:	2101      	movs	r1, #1
 8004a7a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	4a09      	ldr	r2, [pc, #36]	@ (8004aa4 <disk_initialize+0x48>)
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	79fa      	ldrb	r2, [r7, #7]
 8004a8a:	4906      	ldr	r1, [pc, #24]	@ (8004aa4 <disk_initialize+0x48>)
 8004a8c:	440a      	add	r2, r1
 8004a8e:	7a12      	ldrb	r2, [r2, #8]
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20002604 	.word	0x20002604

08004aa8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae4 <disk_read+0x3c>)
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	689c      	ldr	r4, [r3, #8]
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	4a07      	ldr	r2, [pc, #28]	@ (8004ae4 <disk_read+0x3c>)
 8004ac8:	4413      	add	r3, r2
 8004aca:	7a18      	ldrb	r0, [r3, #8]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	47a0      	blx	r4
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20002604 	.word	0x20002604

08004ae8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4603      	mov	r3, r0
 8004af6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	4a0a      	ldr	r2, [pc, #40]	@ (8004b24 <disk_write+0x3c>)
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	68dc      	ldr	r4, [r3, #12]
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	4a07      	ldr	r2, [pc, #28]	@ (8004b24 <disk_write+0x3c>)
 8004b08:	4413      	add	r3, r2
 8004b0a:	7a18      	ldrb	r0, [r3, #8]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	47a0      	blx	r4
 8004b14:	4603      	mov	r3, r0
 8004b16:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd90      	pop	{r4, r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20002604 	.word	0x20002604

08004b28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	603a      	str	r2, [r7, #0]
 8004b32:	71fb      	strb	r3, [r7, #7]
 8004b34:	460b      	mov	r3, r1
 8004b36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	4a09      	ldr	r2, [pc, #36]	@ (8004b60 <disk_ioctl+0x38>)
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	79fa      	ldrb	r2, [r7, #7]
 8004b46:	4906      	ldr	r1, [pc, #24]	@ (8004b60 <disk_ioctl+0x38>)
 8004b48:	440a      	add	r2, r1
 8004b4a:	7a10      	ldrb	r0, [r2, #8]
 8004b4c:	79b9      	ldrb	r1, [r7, #6]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	4798      	blx	r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	73fb      	strb	r3, [r7, #15]
  return res;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20002604 	.word	0x20002604

08004b64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004b78:	e007      	b.n	8004b8a <mem_cpy+0x26>
		*d++ = *s++;
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	1c53      	adds	r3, r2, #1
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	1c59      	adds	r1, r3, #1
 8004b84:	6179      	str	r1, [r7, #20]
 8004b86:	7812      	ldrb	r2, [r2, #0]
 8004b88:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	1e5a      	subs	r2, r3, #1
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f2      	bne.n	8004b7a <mem_cpy+0x16>
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr

08004ba0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004bb0:	e005      	b.n	8004bbe <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	617a      	str	r2, [r7, #20]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	1e5a      	subs	r2, r3, #1
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f4      	bne.n	8004bb2 <mem_set+0x12>
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr

08004bd4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	@ 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004bec:	bf00      	nop
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1e5a      	subs	r2, r3, #1
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <mem_cmp+0x40>
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	61fa      	str	r2, [r7, #28]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	4619      	mov	r1, r3
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	61ba      	str	r2, [r7, #24]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	1acb      	subs	r3, r1, r3
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ec      	beq.n	8004bee <mem_cmp+0x1a>
	return r;
 8004c14:	697b      	ldr	r3, [r7, #20]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3724      	adds	r7, #36	@ 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004c2a:	e002      	b.n	8004c32 <chk_chr+0x12>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <chk_chr+0x26>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d1f2      	bne.n	8004c2c <chk_chr+0xc>
	return *str;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	781b      	ldrb	r3, [r3, #0]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e03b      	b.n	8004ce0 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8004c68:	4931      	ldr	r1, [pc, #196]	@ (8004d30 <chk_lock+0xdc>)
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02c      	beq.n	8004cd6 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004c7c:	492c      	ldr	r1, [pc, #176]	@ (8004d30 <chk_lock+0xdc>)
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4613      	mov	r3, r2
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d120      	bne.n	8004cda <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8004c98:	4925      	ldr	r1, [pc, #148]	@ (8004d30 <chk_lock+0xdc>)
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cb0:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d111      	bne.n	8004cda <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004cb6:	491e      	ldr	r1, [pc, #120]	@ (8004d30 <chk_lock+0xdc>)
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	881a      	ldrh	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cce:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d102      	bne.n	8004cda <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004cd4:	e007      	b.n	8004ce6 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d9c0      	bls.n	8004c68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d109      	bne.n	8004d00 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d102      	bne.n	8004cf8 <chk_lock+0xa4>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d101      	bne.n	8004cfc <chk_lock+0xa8>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e013      	b.n	8004d24 <chk_lock+0xd0>
 8004cfc:	2312      	movs	r3, #18
 8004cfe:	e011      	b.n	8004d24 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10b      	bne.n	8004d1e <chk_lock+0xca>
 8004d06:	490a      	ldr	r1, [pc, #40]	@ (8004d30 <chk_lock+0xdc>)
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	330a      	adds	r3, #10
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d1c:	d101      	bne.n	8004d22 <chk_lock+0xce>
 8004d1e:	2310      	movs	r3, #16
 8004d20:	e000      	b.n	8004d24 <chk_lock+0xd0>
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	200023ec 	.word	0x200023ec

08004d34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	e002      	b.n	8004d46 <enq_lock+0x12>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3301      	adds	r3, #1
 8004d44:	607b      	str	r3, [r7, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d809      	bhi.n	8004d60 <enq_lock+0x2c>
 8004d4c:	490a      	ldr	r1, [pc, #40]	@ (8004d78 <enq_lock+0x44>)
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ef      	bne.n	8004d40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	200023ec 	.word	0x200023ec

08004d7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e02e      	b.n	8004dea <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8004d8c:	4958      	ldr	r1, [pc, #352]	@ (8004ef0 <inc_lock+0x174>)
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4613      	mov	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d11d      	bne.n	8004de4 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8004da8:	4951      	ldr	r1, [pc, #324]	@ (8004ef0 <inc_lock+0x174>)
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4613      	mov	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	3304      	adds	r3, #4
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dc0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d10e      	bne.n	8004de4 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8004dc6:	494a      	ldr	r1, [pc, #296]	@ (8004ef0 <inc_lock+0x174>)
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	881a      	ldrh	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dde:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d006      	beq.n	8004df2 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3301      	adds	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d9cd      	bls.n	8004d8c <inc_lock+0x10>
 8004df0:	e000      	b.n	8004df4 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8004df2:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d148      	bne.n	8004e8c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e002      	b.n	8004e06 <inc_lock+0x8a>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d809      	bhi.n	8004e20 <inc_lock+0xa4>
 8004e0c:	4938      	ldr	r1, [pc, #224]	@ (8004ef0 <inc_lock+0x174>)
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4613      	mov	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ef      	bne.n	8004e00 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d101      	bne.n	8004e2a <inc_lock+0xae>
 8004e26:	2300      	movs	r3, #0
 8004e28:	e05d      	b.n	8004ee6 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	482f      	ldr	r0, [pc, #188]	@ (8004ef0 <inc_lock+0x174>)
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4613      	mov	r3, r2
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4403      	add	r3, r0
 8004e40:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e48:	6899      	ldr	r1, [r3, #8]
 8004e4a:	4829      	ldr	r0, [pc, #164]	@ (8004ef0 <inc_lock+0x174>)
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4403      	add	r3, r0
 8004e58:	3304      	adds	r3, #4
 8004e5a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e62:	88d8      	ldrh	r0, [r3, #6]
 8004e64:	4922      	ldr	r1, [pc, #136]	@ (8004ef0 <inc_lock+0x174>)
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	3308      	adds	r3, #8
 8004e74:	4602      	mov	r2, r0
 8004e76:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004e78:	491d      	ldr	r1, [pc, #116]	@ (8004ef0 <inc_lock+0x174>)
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	330a      	adds	r3, #10
 8004e88:	2200      	movs	r2, #0
 8004e8a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00c      	beq.n	8004eac <inc_lock+0x130>
 8004e92:	4917      	ldr	r1, [pc, #92]	@ (8004ef0 <inc_lock+0x174>)
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4613      	mov	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	330a      	adds	r3, #10
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <inc_lock+0x130>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e01c      	b.n	8004ee6 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10b      	bne.n	8004eca <inc_lock+0x14e>
 8004eb2:	490f      	ldr	r1, [pc, #60]	@ (8004ef0 <inc_lock+0x174>)
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	330a      	adds	r3, #10
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	b299      	uxth	r1, r3
 8004ec8:	e001      	b.n	8004ece <inc_lock+0x152>
 8004eca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ece:	4808      	ldr	r0, [pc, #32]	@ (8004ef0 <inc_lock+0x174>)
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4403      	add	r3, r0
 8004edc:	330a      	adds	r3, #10
 8004ede:	460a      	mov	r2, r1
 8004ee0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3301      	adds	r3, #1
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	200023ec 	.word	0x200023ec

08004ef4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d82e      	bhi.n	8004f66 <dec_lock+0x72>
		n = Files[i].ctr;
 8004f08:	491b      	ldr	r1, [pc, #108]	@ (8004f78 <dec_lock+0x84>)
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	330a      	adds	r3, #10
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004f1c:	89fb      	ldrh	r3, [r7, #14]
 8004f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f22:	d101      	bne.n	8004f28 <dec_lock+0x34>
 8004f24:	2300      	movs	r3, #0
 8004f26:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004f28:	89fb      	ldrh	r3, [r7, #14]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <dec_lock+0x40>
 8004f2e:	89fb      	ldrh	r3, [r7, #14]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004f34:	4910      	ldr	r1, [pc, #64]	@ (8004f78 <dec_lock+0x84>)
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	330a      	adds	r3, #10
 8004f44:	89fa      	ldrh	r2, [r7, #14]
 8004f46:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004f48:	89fb      	ldrh	r3, [r7, #14]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d108      	bne.n	8004f60 <dec_lock+0x6c>
 8004f4e:	490a      	ldr	r1, [pc, #40]	@ (8004f78 <dec_lock+0x84>)
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	737b      	strb	r3, [r7, #13]
 8004f64:	e001      	b.n	8004f6a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004f66:	2302      	movs	r3, #2
 8004f68:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004f6a:	7b7b      	ldrb	r3, [r7, #13]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	200023ec 	.word	0x200023ec

08004f7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e016      	b.n	8004fb8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004f8a:	4910      	ldr	r1, [pc, #64]	@ (8004fcc <clear_lock+0x50>)
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d108      	bne.n	8004fb2 <clear_lock+0x36>
 8004fa0:	490a      	ldr	r1, [pc, #40]	@ (8004fcc <clear_lock+0x50>)
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d9e5      	bls.n	8004f8a <clear_lock+0xe>
	}
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	200023ec 	.word	0x200023ec

08004fd0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fe2:	791b      	ldrb	r3, [r3, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d040      	beq.n	800506a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ff8:	7858      	ldrb	r0, [r3, #1]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	f7ff fd72 	bl	8004ae8 <disk_write>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <sync_window+0x40>
			res = FR_DISK_ERR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
 800500e:	e02c      	b.n	800506a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005016:	2200      	movs	r2, #0
 8005018:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	1ad2      	subs	r2, r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	429a      	cmp	r2, r3
 8005030:	d21b      	bcs.n	800506a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005038:	78db      	ldrb	r3, [r3, #3]
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	e012      	b.n	8005064 <sync_window+0x94>
					wsect += fs->fsize;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005052:	7858      	ldrb	r0, [r3, #1]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	2301      	movs	r3, #1
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	f7ff fd45 	bl	8004ae8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3b01      	subs	r3, #1
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d8e9      	bhi.n	800503e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d01e      	beq.n	80050ce <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ff9d 	bl	8004fd0 <sync_window>
 8005096:	4603      	mov	r3, r0
 8005098:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d116      	bne.n	80050ce <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a6:	7858      	ldrb	r0, [r3, #1]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	2301      	movs	r3, #1
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	f7ff fcfb 	bl	8004aa8 <disk_read>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d004      	beq.n	80050c2 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050c8:	461a      	mov	r2, r3
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff ff75 	bl	8004fd0 <sync_window>
 80050e6:	4603      	mov	r3, r0
 80050e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 80ad 	bne.w	800524c <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	f040 8098 	bne.w	8005230 <sync_fs+0x158>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005106:	795b      	ldrb	r3, [r3, #5]
 8005108:	2b01      	cmp	r3, #1
 800510a:	f040 8091 	bne.w	8005230 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005116:	895b      	ldrh	r3, [r3, #10]
 8005118:	461a      	mov	r2, r3
 800511a:	2100      	movs	r1, #0
 800511c:	f7ff fd40 	bl	8004ba0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2255      	movs	r2, #85	@ 0x55
 8005124:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	22aa      	movs	r2, #170	@ 0xaa
 800512c:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2252      	movs	r2, #82	@ 0x52
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2252      	movs	r2, #82	@ 0x52
 800513a:	705a      	strb	r2, [r3, #1]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2261      	movs	r2, #97	@ 0x61
 8005140:	709a      	strb	r2, [r3, #2]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2241      	movs	r2, #65	@ 0x41
 8005146:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2272      	movs	r2, #114	@ 0x72
 800514c:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2272      	movs	r2, #114	@ 0x72
 8005154:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2241      	movs	r2, #65	@ 0x41
 800515c:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2261      	movs	r2, #97	@ 0x61
 8005164:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	b29b      	uxth	r3, r3
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	b29b      	uxth	r3, r3
 8005186:	b2da      	uxtb	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	b2da      	uxtb	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	0e1b      	lsrs	r3, r3, #24
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	0a1b      	lsrs	r3, r3, #8
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	0e1b      	lsrs	r3, r3, #24
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	3301      	adds	r3, #1
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800520c:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005214:	7858      	ldrb	r0, [r3, #1]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800521e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005220:	2301      	movs	r3, #1
 8005222:	f7ff fc61 	bl	8004ae8 <disk_write>
			fs->fsi_flag = 0;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800522c:	2200      	movs	r2, #0
 800522e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2200      	movs	r2, #0
 800523a:	2100      	movs	r1, #0
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fc73 	bl	8004b28 <disk_ioctl>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <sync_fs+0x174>
			res = FR_DISK_ERR;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	3b02      	subs	r3, #2
 8005264:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	3b02      	subs	r3, #2
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d301      	bcc.n	800527a <clust2sect+0x24>
 8005276:	2300      	movs	r3, #0
 8005278:	e00c      	b.n	8005294 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005280:	789b      	ldrb	r3, [r3, #2]
 8005282:	461a      	mov	r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	fb03 f202 	mul.w	r2, r3, r2
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	4413      	add	r3, r2
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b086      	sub	sp, #24
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d906      	bls.n	80052bc <get_fat+0x1e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <get_fat+0x24>
		val = 1;	/* Internal error */
 80052bc:	2301      	movs	r3, #1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	e0e3      	b.n	800548a <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	f000 8097 	beq.w	8005404 <get_fat+0x166>
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	f300 80cd 	bgt.w	8005476 <get_fat+0x1d8>
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d002      	beq.n	80052e6 <get_fat+0x48>
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d05e      	beq.n	80053a2 <get_fat+0x104>
 80052e4:	e0c7      	b.n	8005476 <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052fa:	6a1a      	ldr	r2, [r3, #32]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005302:	895b      	ldrh	r3, [r3, #10]
 8005304:	4619      	mov	r1, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	fbb3 f3f1 	udiv	r3, r3, r1
 800530c:	4413      	add	r3, r2
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff feaf 	bl	8005074 <move_window>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 80af 	bne.w	800547c <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	60fa      	str	r2, [r7, #12]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800532a:	8952      	ldrh	r2, [r2, #10]
 800532c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005330:	fb01 f202 	mul.w	r2, r1, r2
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	5cd3      	ldrb	r3, [r2, r3]
 800533a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800534a:	895b      	ldrh	r3, [r3, #10]
 800534c:	4619      	mov	r1, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	fbb3 f3f1 	udiv	r3, r3, r1
 8005354:	4413      	add	r3, r2
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff fe8b 	bl	8005074 <move_window>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	f040 808d 	bne.w	8005480 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800536c:	895b      	ldrh	r3, [r3, #10]
 800536e:	461a      	mov	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	fbb3 f1f2 	udiv	r1, r3, r2
 8005376:	fb01 f202 	mul.w	r2, r1, r2
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	5cd3      	ldrb	r3, [r2, r3]
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	4313      	orrs	r3, r2
 8005386:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <get_fat+0xfa>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	e002      	b.n	800539e <get_fat+0x100>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800539e:	617b      	str	r3, [r7, #20]
			break;
 80053a0:	e073      	b.n	800548a <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053a8:	6a1a      	ldr	r2, [r3, #32]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053b0:	895b      	ldrh	r3, [r3, #10]
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	4619      	mov	r1, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80053be:	4413      	add	r3, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fe56 	bl	8005074 <move_window>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d15a      	bne.n	8005484 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053d8:	8952      	ldrh	r2, [r2, #10]
 80053da:	fbb3 f1f2 	udiv	r1, r3, r2
 80053de:	fb01 f202 	mul.w	r2, r1, r2
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	3301      	adds	r3, #1
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	b21a      	sxth	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	4313      	orrs	r3, r2
 80053fc:	b21b      	sxth	r3, r3
 80053fe:	b29b      	uxth	r3, r3
 8005400:	617b      	str	r3, [r7, #20]
			break;
 8005402:	e042      	b.n	800548a <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005412:	895b      	ldrh	r3, [r3, #10]
 8005414:	089b      	lsrs	r3, r3, #2
 8005416:	b29b      	uxth	r3, r3
 8005418:	4619      	mov	r1, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005420:	4413      	add	r3, r2
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff fe25 	bl	8005074 <move_window>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d12b      	bne.n	8005488 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800543a:	8952      	ldrh	r2, [r2, #10]
 800543c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005440:	fb01 f202 	mul.w	r2, r1, r2
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	3303      	adds	r3, #3
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	061a      	lsls	r2, r3, #24
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	3302      	adds	r3, #2
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	431a      	orrs	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	3301      	adds	r3, #1
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	4313      	orrs	r3, r2
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	7812      	ldrb	r2, [r2, #0]
 800546c:	4313      	orrs	r3, r2
 800546e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005472:	617b      	str	r3, [r7, #20]
			break;
 8005474:	e009      	b.n	800548a <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 8005476:	2301      	movs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e006      	b.n	800548a <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800547c:	bf00      	nop
 800547e:	e004      	b.n	800548a <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005488:	bf00      	nop
		}
	}

	return val;
 800548a:	697b      	ldr	r3, [r7, #20]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d906      	bls.n	80054b4 <put_fat+0x20>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d302      	bcc.n	80054ba <put_fat+0x26>
		res = FR_INT_ERR;
 80054b4:	2302      	movs	r3, #2
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	e13a      	b.n	8005730 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	f000 80d0 	beq.w	8005668 <put_fat+0x1d4>
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	f300 8127 	bgt.w	800571c <put_fat+0x288>
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d003      	beq.n	80054da <put_fat+0x46>
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	f000 808f 	beq.w	80055f6 <put_fat+0x162>
 80054d8:	e120      	b.n	800571c <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4413      	add	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054f6:	895b      	ldrh	r3, [r3, #10]
 80054f8:	4619      	mov	r1, r3
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005500:	4413      	add	r3, r2
 8005502:	4619      	mov	r1, r3
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7ff fdb5 	bl	8005074 <move_window>
 800550a:	4603      	mov	r3, r0
 800550c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800550e:	7ffb      	ldrb	r3, [r7, #31]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f040 8106 	bne.w	8005722 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	617a      	str	r2, [r7, #20]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005522:	8952      	ldrh	r2, [r2, #10]
 8005524:	fbb3 f1f2 	udiv	r1, r3, r2
 8005528:	fb01 f202 	mul.w	r2, r1, r2
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00d      	beq.n	800555a <put_fat+0xc6>
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	b25b      	sxtb	r3, r3
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	b25a      	sxtb	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	b25b      	sxtb	r3, r3
 8005552:	4313      	orrs	r3, r2
 8005554:	b25b      	sxtb	r3, r3
 8005556:	b2db      	uxtb	r3, r3
 8005558:	e001      	b.n	800555e <put_fat+0xca>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005568:	2201      	movs	r2, #1
 800556a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005572:	6a1a      	ldr	r2, [r3, #32]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800557a:	895b      	ldrh	r3, [r3, #10]
 800557c:	4619      	mov	r1, r3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	fbb3 f3f1 	udiv	r3, r3, r1
 8005584:	4413      	add	r3, r2
 8005586:	4619      	mov	r1, r3
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff fd73 	bl	8005074 <move_window>
 800558e:	4603      	mov	r3, r0
 8005590:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005592:	7ffb      	ldrb	r3, [r7, #31]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f040 80c6 	bne.w	8005726 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055a0:	895b      	ldrh	r3, [r3, #10]
 80055a2:	461a      	mov	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80055aa:	fb01 f202 	mul.w	r2, r1, r2
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <put_fat+0x134>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	091b      	lsrs	r3, r3, #4
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	e00e      	b.n	80055e6 <put_fat+0x152>
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	f023 030f 	bic.w	r3, r3, #15
 80055d2:	b25a      	sxtb	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	b25b      	sxtb	r3, r3
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	4313      	orrs	r3, r2
 80055e2:	b25b      	sxtb	r3, r3
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055f0:	2201      	movs	r2, #1
 80055f2:	711a      	strb	r2, [r3, #4]
			break;
 80055f4:	e09c      	b.n	8005730 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005604:	895b      	ldrh	r3, [r3, #10]
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	b29b      	uxth	r3, r3
 800560a:	4619      	mov	r1, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005612:	4413      	add	r3, r2
 8005614:	4619      	mov	r1, r3
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7ff fd2c 	bl	8005074 <move_window>
 800561c:	4603      	mov	r3, r0
 800561e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005620:	7ffb      	ldrb	r3, [r7, #31]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 8081 	bne.w	800572a <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005632:	8952      	ldrh	r2, [r2, #10]
 8005634:	fbb3 f1f2 	udiv	r1, r3, r2
 8005638:	fb01 f202 	mul.w	r2, r1, r2
 800563c:	1a9b      	subs	r3, r3, r2
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	b2da      	uxtb	r2, r3
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	b29b      	uxth	r3, r3
 8005650:	0a1b      	lsrs	r3, r3, #8
 8005652:	b29a      	uxth	r2, r3
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	3301      	adds	r3, #1
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005662:	2201      	movs	r2, #1
 8005664:	711a      	strb	r2, [r3, #4]
			break;
 8005666:	e063      	b.n	8005730 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800566e:	6a1a      	ldr	r2, [r3, #32]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005676:	895b      	ldrh	r3, [r3, #10]
 8005678:	089b      	lsrs	r3, r3, #2
 800567a:	b29b      	uxth	r3, r3
 800567c:	4619      	mov	r1, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	fbb3 f3f1 	udiv	r3, r3, r1
 8005684:	4413      	add	r3, r2
 8005686:	4619      	mov	r1, r3
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff fcf3 	bl	8005074 <move_window>
 800568e:	4603      	mov	r3, r0
 8005690:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005692:	7ffb      	ldrb	r3, [r7, #31]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d14a      	bne.n	800572e <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80056a2:	8952      	ldrh	r2, [r2, #10]
 80056a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80056a8:	fb01 f202 	mul.w	r2, r1, r2
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	3303      	adds	r3, #3
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	061a      	lsls	r2, r3, #24
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	3302      	adds	r3, #2
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	431a      	orrs	r2, r3
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	3301      	adds	r3, #1
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	4313      	orrs	r3, r2
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	7812      	ldrb	r2, [r2, #0]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4313      	orrs	r3, r2
 80056de:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	3301      	adds	r3, #1
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	0c1a      	lsrs	r2, r3, #16
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	3302      	adds	r3, #2
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	0e1a      	lsrs	r2, r3, #24
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	3303      	adds	r3, #3
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005716:	2201      	movs	r2, #1
 8005718:	711a      	strb	r2, [r3, #4]
			break;
 800571a:	e009      	b.n	8005730 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800571c:	2302      	movs	r3, #2
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e006      	b.n	8005730 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005722:	bf00      	nop
 8005724:	e004      	b.n	8005730 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005726:	bf00      	nop
 8005728:	e002      	b.n	8005730 <put_fat+0x29c>
			if (res != FR_OK) break;
 800572a:	bf00      	nop
 800572c:	e000      	b.n	8005730 <put_fat+0x29c>
			if (res != FR_OK) break;
 800572e:	bf00      	nop
		}
	}

	return res;
 8005730:	7ffb      	ldrb	r3, [r7, #31]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d906      	bls.n	8005758 <remove_chain+0x1e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d302      	bcc.n	800575e <remove_chain+0x24>
		res = FR_INT_ERR;
 8005758:	2302      	movs	r3, #2
 800575a:	73fb      	strb	r3, [r7, #15]
 800575c:	e049      	b.n	80057f2 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005762:	e03b      	b.n	80057dc <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff fd99 	bl	800529e <get_fat>
 800576c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d03b      	beq.n	80057ec <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d102      	bne.n	8005780 <remove_chain+0x46>
 800577a:	2302      	movs	r3, #2
 800577c:	73fb      	strb	r3, [r7, #15]
 800577e:	e038      	b.n	80057f2 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d102      	bne.n	800578e <remove_chain+0x54>
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
 800578c:	e031      	b.n	80057f2 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800578e:	2200      	movs	r2, #0
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fe7e 	bl	8005494 <put_fat>
 8005798:	4603      	mov	r3, r0
 800579a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d126      	bne.n	80057f0 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ae:	d013      	beq.n	80057d8 <remove_chain+0x9e>
				fs->free_clust++;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	3301      	adds	r3, #1
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80057c0:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057c8:	795b      	ldrb	r3, [r3, #5]
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057d6:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d3bc      	bcc.n	8005764 <remove_chain+0x2a>
 80057ea:	e002      	b.n	80057f2 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <remove_chain+0xb8>
			if (res != FR_OK) break;
 80057f0:	bf00      	nop
		}
	}

	return res;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d111      	bne.n	8005830 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d006      	beq.n	800582a <create_chain+0x2e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	429a      	cmp	r2, r3
 8005828:	d31d      	bcc.n	8005866 <create_chain+0x6a>
 800582a:	2301      	movs	r3, #1
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	e01a      	b.n	8005866 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fd33 	bl	800529e <get_fat>
 8005838:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d801      	bhi.n	8005844 <create_chain+0x48>
 8005840:	2301      	movs	r3, #1
 8005842:	e07f      	b.n	8005944 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d101      	bne.n	8005850 <create_chain+0x54>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	e079      	b.n	8005944 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	429a      	cmp	r2, r3
 800585c:	d201      	bcs.n	8005862 <create_chain+0x66>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	e070      	b.n	8005944 <create_chain+0x148>
		scl = clst;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	3301      	adds	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	429a      	cmp	r2, r3
 800587c:	d307      	bcc.n	800588e <create_chain+0x92>
			ncl = 2;
 800587e:	2302      	movs	r3, #2
 8005880:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	429a      	cmp	r2, r3
 8005888:	d901      	bls.n	800588e <create_chain+0x92>
 800588a:	2300      	movs	r3, #0
 800588c:	e05a      	b.n	8005944 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800588e:	6979      	ldr	r1, [r7, #20]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fd04 	bl	800529e <get_fat>
 8005896:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00e      	beq.n	80058bc <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d002      	beq.n	80058ac <create_chain+0xb0>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <create_chain+0xb4>
			return cs;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	e049      	b.n	8005944 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d1d8      	bne.n	800586a <create_chain+0x6e>
 80058b8:	2300      	movs	r3, #0
 80058ba:	e043      	b.n	8005944 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80058bc:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80058be:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 80058c2:	6979      	ldr	r1, [r7, #20]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fde5 	bl	8005494 <put_fat>
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <create_chain+0xec>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fdd8 	bl	8005494 <put_fat>
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d121      	bne.n	8005932 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058f4:	461a      	mov	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d01c      	beq.n	8005942 <create_chain+0x146>
			fs->free_clust--;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	3b01      	subs	r3, #1
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005918:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005920:	795b      	ldrb	r3, [r3, #5]
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	b2da      	uxtb	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800592e:	715a      	strb	r2, [r3, #5]
 8005930:	e007      	b.n	8005942 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d102      	bne.n	800593e <create_chain+0x142>
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
 800593c:	e000      	b.n	8005940 <create_chain+0x144>
 800593e:	2301      	movs	r3, #1
 8005940:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005942:	697b      	ldr	r3, [r7, #20]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	3304      	adds	r3, #4
 8005960:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800596e:	895b      	ldrh	r3, [r3, #10]
 8005970:	461a      	mov	r2, r3
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	fbb3 f3f2 	udiv	r3, r3, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005984:	7892      	ldrb	r2, [r2, #2]
 8005986:	fbb3 f3f2 	udiv	r3, r3, r2
 800598a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1d1a      	adds	r2, r3, #4
 8005990:	613a      	str	r2, [r7, #16]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <clmt_clust+0x54>
 800599c:	2300      	movs	r3, #0
 800599e:	e010      	b.n	80059c2 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d307      	bcc.n	80059b8 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	3304      	adds	r3, #4
 80059b4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059b6:	e7e9      	b.n	800598c <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 80059b8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	4413      	add	r3, r2
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059e0:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d009      	beq.n	8005a06 <dir_sdi+0x3a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d301      	bcc.n	8005a0a <dir_sdi+0x3e>
		return FR_INT_ERR;
 8005a06:	2302      	movs	r3, #2
 8005a08:	e0aa      	b.n	8005b60 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d110      	bne.n	8005a32 <dir_sdi+0x66>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d107      	bne.n	8005a32 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d115      	bne.n	8005a64 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a44:	891b      	ldrh	r3, [r3, #8]
 8005a46:	461a      	mov	r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d301      	bcc.n	8005a52 <dir_sdi+0x86>
			return FR_INT_ERR;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e086      	b.n	8005b60 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	e043      	b.n	8005aec <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a70:	895b      	ldrh	r3, [r3, #10]
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a84:	789b      	ldrb	r3, [r3, #2]
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005a8c:	e021      	b.n	8005ad2 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6979      	ldr	r1, [r7, #20]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fc00 	bl	800529e <get_fat>
 8005a9e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d101      	bne.n	8005aac <dir_sdi+0xe0>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e059      	b.n	8005b60 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d909      	bls.n	8005ac6 <dir_sdi+0xfa>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d301      	bcc.n	8005aca <dir_sdi+0xfe>
				return FR_INT_ERR;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e04a      	b.n	8005b60 <dir_sdi+0x194>
			idx -= ic;
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d2d9      	bcs.n	8005a8e <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6979      	ldr	r1, [r7, #20]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fbb6 	bl	8005256 <clust2sect>
 8005aea:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005af2:	461a      	mov	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <dir_sdi+0x136>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e02e      	b.n	8005b60 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b0e:	895b      	ldrh	r3, [r3, #10]
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4413      	add	r3, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b26:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b3e:	895b      	ldrh	r3, [r3, #10]
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b4c:	fb01 f202 	mul.w	r2, r1, r2
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	015b      	lsls	r3, r3, #5
 8005b54:	4403      	add	r3, r0
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b5c:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b78:	88db      	ldrh	r3, [r3, #6]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <dir_next+0x2a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <dir_next+0x2e>
		return FR_NO_FILE;
 8005b92:	2304      	movs	r3, #4
 8005b94:	e12e      	b.n	8005df4 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ba2:	895b      	ldrh	r3, [r3, #10]
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bb0:	fb01 f202 	mul.w	r2, r1, r2
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f040 80fa 	bne.w	8005db0 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bcc:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10d      	bne.n	8005bf6 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be6:	891b      	ldrh	r3, [r3, #8]
 8005be8:	461a      	mov	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4293      	cmp	r3, r2
 8005bee:	f0c0 80df 	bcc.w	8005db0 <dir_next+0x248>
				return FR_NO_FILE;
 8005bf2:	2304      	movs	r3, #4
 8005bf4:	e0fe      	b.n	8005df4 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c02:	895b      	ldrh	r3, [r3, #10]
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c1c:	7892      	ldrb	r2, [r2, #2]
 8005c1e:	3a01      	subs	r2, #1
 8005c20:	4013      	ands	r3, r2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f040 80c4 	bne.w	8005db0 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f7ff fb2f 	bl	800529e <get_fat>
 8005c40:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d801      	bhi.n	8005c4c <dir_next+0xe4>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e0d3      	b.n	8005df4 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d101      	bne.n	8005c58 <dir_next+0xf0>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0cd      	b.n	8005df4 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	f0c0 808e 	bcc.w	8005d8a <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <dir_next+0x110>
 8005c74:	2304      	movs	r3, #4
 8005c76:	e0bd      	b.n	8005df4 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f7ff fdb6 	bl	80057fc <create_chain>
 8005c90:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <dir_next+0x134>
 8005c98:	2307      	movs	r3, #7
 8005c9a:	e0ab      	b.n	8005df4 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <dir_next+0x13e>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e0a6      	b.n	8005df4 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d101      	bne.n	8005cb2 <dir_next+0x14a>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e0a0      	b.n	8005df4 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff f988 	bl	8004fd0 <sync_window>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <dir_next+0x162>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e094      	b.n	8005df4 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ce0:	895b      	ldrh	r3, [r3, #10]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	f7fe ff5b 	bl	8004ba0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cf8:	681c      	ldr	r4, [r3, #0]
 8005cfa:	6979      	ldr	r1, [r7, #20]
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	f7ff faaa 	bl	8005256 <clust2sect>
 8005d02:	4603      	mov	r3, r0
 8005d04:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8005d08:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	e021      	b.n	8005d54 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff f951 	bl	8004fd0 <sync_window>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <dir_next+0x1d0>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e05d      	b.n	8005df4 <dir_next+0x28c>
						dp->fs->winsect++;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8005d44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d46:	3201      	adds	r2, #1
 8005d48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	3301      	adds	r3, #1
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d60:	789b      	ldrb	r3, [r3, #2]
 8005d62:	461a      	mov	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d3d2      	bcc.n	8005d10 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d76:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1acb      	subs	r3, r1, r3
 8005d84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d88:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d90:	461a      	mov	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6979      	ldr	r1, [r7, #20]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fa58 	bl	8005256 <clust2sect>
 8005da6:	4602      	mov	r2, r0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dae:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dba:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dd2:	895b      	ldrh	r3, [r3, #10]
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005de0:	fb01 f202 	mul.w	r2, r1, r2
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	015b      	lsls	r3, r3, #5
 8005de8:	4403      	add	r3, r0
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005df0:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd90      	pop	{r4, r7, pc}

08005dfc <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005e06:	2100      	movs	r1, #0
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff fddf 	bl	80059cc <dir_sdi>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d135      	bne.n	8005e84 <dir_alloc+0x88>
		n = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4610      	mov	r0, r2
 8005e30:	f7ff f920 	bl	8005074 <move_window>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d121      	bne.n	8005e82 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2be5      	cmp	r3, #229	@ 0xe5
 8005e4a:	d006      	beq.n	8005e5a <dir_alloc+0x5e>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d107      	bne.n	8005e6a <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	60bb      	str	r3, [r7, #8]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d102      	bne.n	8005e6e <dir_alloc+0x72>
 8005e68:	e00c      	b.n	8005e84 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005e6e:	2101      	movs	r1, #1
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fe79 	bl	8005b68 <dir_next>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0cd      	beq.n	8005e1c <dir_alloc+0x20>
 8005e80:	e000      	b.n	8005e84 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8005e82:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d101      	bne.n	8005e8e <dir_alloc+0x92>
 8005e8a:	2307      	movs	r3, #7
 8005e8c:	73fb      	strb	r3, [r7, #15]
	return res;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	331b      	adds	r3, #27
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	b21a      	sxth	r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	331a      	adds	r3, #26
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	b21b      	sxth	r3, r3
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	b21b      	sxth	r3, r3
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d10f      	bne.n	8005ee8 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	3315      	adds	r3, #21
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	b21a      	sxth	r2, r3
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	3314      	adds	r3, #20
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	b21b      	sxth	r3, r3
 8005eda:	4313      	orrs	r3, r2
 8005edc:	b21b      	sxth	r3, r3
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	041b      	lsls	r3, r3, #16
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]

	return cl;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr

08005ef4 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	331a      	adds	r3, #26
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	0a1b      	lsrs	r3, r3, #8
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	331b      	adds	r3, #27
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	0c1a      	lsrs	r2, r3, #16
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3314      	adds	r3, #20
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	0a1b      	lsrs	r3, r3, #8
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3315      	adds	r3, #21
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr

08005f40 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f52:	1e5a      	subs	r2, r3, #1
 8005f54:	4613      	mov	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005f60:	2300      	movs	r3, #0
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	2301      	movs	r3, #1
 8005f66:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005f68:	4a2b      	ldr	r2, [pc, #172]	@ (8006018 <cmp_lfn+0xd8>)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	4413      	add	r3, r2
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	b21a      	sxth	r2, r3
 8005f7c:	4926      	ldr	r1, [pc, #152]	@ (8006018 <cmp_lfn+0xd8>)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	440b      	add	r3, r1
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	4619      	mov	r1, r3
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	440b      	add	r3, r1
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	b21b      	sxth	r3, r3
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	b21b      	sxth	r3, r3
 8005f92:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8005f94:	89fb      	ldrh	r3, [r7, #14]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d019      	beq.n	8005fce <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005f9a:	89bb      	ldrh	r3, [r7, #12]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f002 fbb9 	bl	8008714 <ff_wtoupper>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2bfe      	cmp	r3, #254	@ 0xfe
 8005faa:	d80e      	bhi.n	8005fca <cmp_lfn+0x8a>
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	617a      	str	r2, [r7, #20]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f002 fbaa 	bl	8008714 <ff_wtoupper>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	89fb      	ldrh	r3, [r7, #14]
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d008      	beq.n	8005fdc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e01f      	b.n	800600e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005fce:	89bb      	ldrh	r3, [r7, #12]
 8005fd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d001      	beq.n	8005fdc <cmp_lfn+0x9c>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e018      	b.n	800600e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2b0c      	cmp	r3, #12
 8005fe6:	d9bf      	bls.n	8005f68 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00b      	beq.n	800600c <cmp_lfn+0xcc>
 8005ff4:	89fb      	ldrh	r3, [r7, #14]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <cmp_lfn+0xcc>
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <cmp_lfn+0xcc>
		return 0;
 8006008:	2300      	movs	r3, #0
 800600a:	e000      	b.n	800600e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800600c:	2301      	movs	r3, #1
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	0800b598 	.word	0x0800b598

0800601c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800601c:	b480      	push	{r7}
 800601e:	b089      	sub	sp, #36	@ 0x24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	4611      	mov	r1, r2
 8006028:	461a      	mov	r2, r3
 800602a:	460b      	mov	r3, r1
 800602c:	71fb      	strb	r3, [r7, #7]
 800602e:	4613      	mov	r3, r2
 8006030:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	330d      	adds	r3, #13
 8006036:	79ba      	ldrb	r2, [r7, #6]
 8006038:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	330b      	adds	r3, #11
 800603e:	220f      	movs	r2, #15
 8006040:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	330c      	adds	r3, #12
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	331a      	adds	r3, #26
 800604e:	2200      	movs	r2, #0
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	331b      	adds	r3, #27
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	1e5a      	subs	r2, r3, #1
 800605e:	4613      	mov	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	82fb      	strh	r3, [r7, #22]
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006072:	8afb      	ldrh	r3, [r7, #22]
 8006074:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <fit_lfn+0x70>
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	61fa      	str	r2, [r7, #28]
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800608c:	4a1c      	ldr	r2, [pc, #112]	@ (8006100 <fit_lfn+0xe4>)
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	4413      	add	r3, r2
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	4413      	add	r3, r2
 800609a:	8afa      	ldrh	r2, [r7, #22]
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	8afb      	ldrh	r3, [r7, #22]
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	b299      	uxth	r1, r3
 80060a6:	4a16      	ldr	r2, [pc, #88]	@ (8006100 <fit_lfn+0xe4>)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	4413      	add	r3, r2
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	3301      	adds	r3, #1
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	4413      	add	r3, r2
 80060b4:	b2ca      	uxtb	r2, r1
 80060b6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80060b8:	8afb      	ldrh	r3, [r7, #22]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d102      	bne.n	80060c4 <fit_lfn+0xa8>
 80060be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80060c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	3301      	adds	r3, #1
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b0c      	cmp	r3, #12
 80060ce:	d9d0      	bls.n	8006072 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80060d0:	8afb      	ldrh	r3, [r7, #22]
 80060d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d006      	beq.n	80060e8 <fit_lfn+0xcc>
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d103      	bne.n	80060f0 <fit_lfn+0xd4>
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	79fa      	ldrb	r2, [r7, #7]
 80060f4:	701a      	strb	r2, [r3, #0]
}
 80060f6:	bf00      	nop
 80060f8:	3724      	adds	r7, #36	@ 0x24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr
 8006100:	0800b598 	.word	0x0800b598

08006104 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	@ 0x30
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006112:	220b      	movs	r2, #11
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7fe fd24 	bl	8004b64 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b05      	cmp	r3, #5
 8006120:	d92b      	bls.n	800617a <gen_numname+0x76>
		sr = seq;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006126:	e022      	b.n	800616e <gen_numname+0x6a>
			wc = *lfn++;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	1c9a      	adds	r2, r3, #2
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006132:	2300      	movs	r3, #0
 8006134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006136:	e017      	b.n	8006168 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	005a      	lsls	r2, r3, #1
 800613c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	4413      	add	r3, r2
 8006144:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006146:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <gen_numname+0x5e>
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800615c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006160:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006164:	3301      	adds	r3, #1
 8006166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616a:	2b0f      	cmp	r3, #15
 800616c:	d9e4      	bls.n	8006138 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1d8      	bne.n	8006128 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800617a:	2307      	movs	r3, #7
 800617c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	b2db      	uxtb	r3, r3
 8006188:	3330      	adds	r3, #48	@ 0x30
 800618a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800618e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006192:	2b39      	cmp	r3, #57	@ 0x39
 8006194:	d904      	bls.n	80061a0 <gen_numname+0x9c>
 8006196:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800619a:	3307      	adds	r3, #7
 800619c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	1e5a      	subs	r2, r3, #1
 80061a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80061a6:	3330      	adds	r3, #48	@ 0x30
 80061a8:	443b      	add	r3, r7
 80061aa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80061ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	091b      	lsrs	r3, r3, #4
 80061b6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1df      	bne.n	800617e <gen_numname+0x7a>
	ns[i] = '~';
 80061be:	f107 0214 	add.w	r2, r7, #20
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	4413      	add	r3, r2
 80061c6:	227e      	movs	r2, #126	@ 0x7e
 80061c8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80061ca:	2300      	movs	r3, #0
 80061cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ce:	e002      	b.n	80061d6 <gen_numname+0xd2>
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	3301      	adds	r3, #1
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	429a      	cmp	r2, r3
 80061dc:	d205      	bcs.n	80061ea <gen_numname+0xe6>
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	4413      	add	r3, r2
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d1f2      	bne.n	80061d0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80061ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ec:	2b07      	cmp	r3, #7
 80061ee:	d807      	bhi.n	8006200 <gen_numname+0xfc>
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80061f6:	3330      	adds	r3, #48	@ 0x30
 80061f8:	443b      	add	r3, r7
 80061fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80061fe:	e000      	b.n	8006202 <gen_numname+0xfe>
 8006200:	2120      	movs	r1, #32
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	627a      	str	r2, [r7, #36]	@ 0x24
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	460a      	mov	r2, r1
 800620e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	2b07      	cmp	r3, #7
 8006214:	d9e9      	bls.n	80061ea <gen_numname+0xe6>
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	3730      	adds	r7, #48	@ 0x30
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800622c:	230b      	movs	r3, #11
 800622e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	b2da      	uxtb	r2, r3
 8006234:	0852      	lsrs	r2, r2, #1
 8006236:	01db      	lsls	r3, r3, #7
 8006238:	4313      	orrs	r3, r2
 800623a:	b2da      	uxtb	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1c59      	adds	r1, r3, #1
 8006240:	6079      	str	r1, [r7, #4]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	4413      	add	r3, r2
 8006246:	73fb      	strb	r3, [r7, #15]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	3b01      	subs	r3, #1
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1ed      	bne.n	8006230 <sum_sfn+0x10>
	return sum;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006268:	2100      	movs	r1, #0
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fbae 	bl	80059cc <dir_sdi>
 8006270:	4603      	mov	r3, r0
 8006272:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <dir_find+0x1e>
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	e0b8      	b.n	80063f0 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800627e:	23ff      	movs	r3, #255	@ 0xff
 8006280:	753b      	strb	r3, [r7, #20]
 8006282:	7d3b      	ldrb	r3, [r7, #20]
 8006284:	757b      	strb	r3, [r7, #21]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800628c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006290:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f7fe fee5 	bl	8005074 <move_window>
 80062aa:	4603      	mov	r3, r0
 80062ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f040 8097 	bne.w	80063e4 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80062c6:	7dbb      	ldrb	r3, [r7, #22]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <dir_find+0x72>
 80062cc:	2304      	movs	r3, #4
 80062ce:	75fb      	strb	r3, [r7, #23]
 80062d0:	e08d      	b.n	80063ee <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	330b      	adds	r3, #11
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062dc:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80062de:	7dbb      	ldrb	r3, [r7, #22]
 80062e0:	2be5      	cmp	r3, #229	@ 0xe5
 80062e2:	d007      	beq.n	80062f4 <dir_find+0x94>
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <dir_find+0xa6>
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b0f      	cmp	r3, #15
 80062f2:	d008      	beq.n	8006306 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80062f4:	23ff      	movs	r3, #255	@ 0xff
 80062f6:	757b      	strb	r3, [r7, #21]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006302:	849a      	strh	r2, [r3, #36]	@ 0x24
 8006304:	e063      	b.n	80063ce <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	2b0f      	cmp	r3, #15
 800630a:	d137      	bne.n	800637c <dir_find+0x11c>
				if (dp->lfn) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d05a      	beq.n	80063ce <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006318:	7dbb      	ldrb	r3, [r7, #22]
 800631a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d010      	beq.n	8006344 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	7b5b      	ldrb	r3, [r3, #13]
 8006326:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006328:	7dbb      	ldrb	r3, [r7, #22]
 800632a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800632e:	75bb      	strb	r3, [r7, #22]
 8006330:	7dbb      	ldrb	r3, [r7, #22]
 8006332:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800633a:	88da      	ldrh	r2, [r3, #6]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006342:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006344:	7dba      	ldrb	r2, [r7, #22]
 8006346:	7d7b      	ldrb	r3, [r7, #21]
 8006348:	429a      	cmp	r2, r3
 800634a:	d114      	bne.n	8006376 <dir_find+0x116>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	330d      	adds	r3, #13
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	7d3a      	ldrb	r2, [r7, #20]
 8006354:	429a      	cmp	r2, r3
 8006356:	d10e      	bne.n	8006376 <dir_find+0x116>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	6939      	ldr	r1, [r7, #16]
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff fdec 	bl	8005f40 <cmp_lfn>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <dir_find+0x116>
 800636e:	7d7b      	ldrb	r3, [r7, #21]
 8006370:	3b01      	subs	r3, #1
 8006372:	b2db      	uxtb	r3, r3
 8006374:	e000      	b.n	8006378 <dir_find+0x118>
 8006376:	23ff      	movs	r3, #255	@ 0xff
 8006378:	757b      	strb	r3, [r7, #21]
 800637a:	e028      	b.n	80063ce <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800637c:	7d7b      	ldrb	r3, [r7, #21]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <dir_find+0x132>
 8006382:	6938      	ldr	r0, [r7, #16]
 8006384:	f7ff ff4c 	bl	8006220 <sum_sfn>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	7d3b      	ldrb	r3, [r7, #20]
 800638e:	4293      	cmp	r3, r2
 8006390:	d02a      	beq.n	80063e8 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	330b      	adds	r3, #11
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10b      	bne.n	80063be <dir_find+0x15e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	220b      	movs	r2, #11
 80063b0:	4619      	mov	r1, r3
 80063b2:	6938      	ldr	r0, [r7, #16]
 80063b4:	f7fe fc0e 	bl	8004bd4 <mem_cmp>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80063be:	23ff      	movs	r3, #255	@ 0xff
 80063c0:	757b      	strb	r3, [r7, #21]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80063cc:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80063ce:	2100      	movs	r1, #0
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fbc9 	bl	8005b68 <dir_next>
 80063d6:	4603      	mov	r3, r0
 80063d8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f43f af58 	beq.w	8006292 <dir_find+0x32>
 80063e2:	e004      	b.n	80063ee <dir_find+0x18e>
		if (res != FR_OK) break;
 80063e4:	bf00      	nop
 80063e6:	e002      	b.n	80063ee <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80063e8:	bf00      	nop
 80063ea:	e000      	b.n	80063ee <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80063ec:	bf00      	nop

	return res;
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08c      	sub	sp, #48	@ 0x30
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	623b      	str	r3, [r7, #32]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006414:	f107 030c 	add.w	r3, r7, #12
 8006418:	220c      	movs	r2, #12
 800641a:	6a39      	ldr	r1, [r7, #32]
 800641c:	4618      	mov	r0, r3
 800641e:	f7fe fba1 	bl	8004b64 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d03b      	beq.n	80064a4 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	330b      	adds	r3, #11
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800643a:	461a      	mov	r2, r3
 800643c:	2300      	movs	r3, #0
 800643e:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8006440:	2301      	movs	r3, #1
 8006442:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006444:	e013      	b.n	800646e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006446:	f107 010c 	add.w	r1, r7, #12
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	69fa      	ldr	r2, [r7, #28]
 800644e:	6a38      	ldr	r0, [r7, #32]
 8006450:	f7ff fe58 	bl	8006104 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff ff03 	bl	8006260 <dir_find>
 800645a:	4603      	mov	r3, r0
 800645c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006460:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006464:	2b00      	cmp	r3, #0
 8006466:	d106      	bne.n	8006476 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8006468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646a:	3301      	adds	r3, #1
 800646c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800646e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006470:	2b63      	cmp	r3, #99	@ 0x63
 8006472:	d9e8      	bls.n	8006446 <dir_register+0x4e>
 8006474:	e000      	b.n	8006478 <dir_register+0x80>
			if (res != FR_OK) break;
 8006476:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	2b64      	cmp	r3, #100	@ 0x64
 800647c:	d101      	bne.n	8006482 <dir_register+0x8a>
 800647e:	2307      	movs	r3, #7
 8006480:	e0d8      	b.n	8006634 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006486:	2b04      	cmp	r3, #4
 8006488:	d002      	beq.n	8006490 <dir_register+0x98>
 800648a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800648e:	e0d1      	b.n	8006634 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	330b      	adds	r3, #11
 8006494:	7dfa      	ldrb	r2, [r7, #23]
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800649e:	461a      	mov	r2, r3
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d014      	beq.n	80064d8 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 80064ae:	2300      	movs	r3, #0
 80064b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064b2:	e002      	b.n	80064ba <dir_register+0xc2>
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	3301      	adds	r3, #1
 80064b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f5      	bne.n	80064b4 <dir_register+0xbc>
		nent = (n + 25) / 13;
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	3319      	adds	r3, #25
 80064cc:	4a5b      	ldr	r2, [pc, #364]	@ (800663c <dir_register+0x244>)
 80064ce:	fba2 2303 	umull	r2, r3, r2, r3
 80064d2:	089b      	lsrs	r3, r3, #2
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d6:	e001      	b.n	80064dc <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80064d8:	2301      	movs	r3, #1
 80064da:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80064dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fc8c 	bl	8005dfc <dir_alloc>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80064ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d15b      	bne.n	80065aa <dir_register+0x1b2>
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	3b01      	subs	r3, #1
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d055      	beq.n	80065aa <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006504:	88db      	ldrh	r3, [r3, #6]
 8006506:	461a      	mov	r2, r3
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff fa5c 	bl	80059cc <dir_sdi>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800651a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800651e:	2b00      	cmp	r3, #0
 8006520:	d143      	bne.n	80065aa <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fe78 	bl	8006220 <sum_sfn>
 8006530:	4603      	mov	r3, r0
 8006532:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7fe fd94 	bl	8005074 <move_window>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006552:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006556:	2b00      	cmp	r3, #0
 8006558:	d126      	bne.n	80065a8 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006560:	6a18      	ldr	r0, [r3, #32]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006568:	6959      	ldr	r1, [r3, #20]
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	b2da      	uxtb	r2, r3
 800656e:	7efb      	ldrb	r3, [r7, #27]
 8006570:	f7ff fd54 	bl	800601c <fit_lfn>
				dp->fs->wflag = 1;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006580:	2201      	movs	r2, #1
 8006582:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8006584:	2100      	movs	r1, #0
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff faee 	bl	8005b68 <dir_next>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006592:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006596:	2b00      	cmp	r3, #0
 8006598:	d107      	bne.n	80065aa <dir_register+0x1b2>
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	3b01      	subs	r3, #1
 800659e:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1c6      	bne.n	8006534 <dir_register+0x13c>
 80065a6:	e000      	b.n	80065aa <dir_register+0x1b2>
				if (res != FR_OK) break;
 80065a8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80065aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d13e      	bne.n	8006630 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	4619      	mov	r1, r3
 80065c4:	4610      	mov	r0, r2
 80065c6:	f7fe fd55 	bl	8005074 <move_window>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80065d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d12b      	bne.n	8006630 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	2220      	movs	r2, #32
 80065e2:	2100      	movs	r1, #0
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fadb 	bl	8004ba0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065f0:	6958      	ldr	r0, [r3, #20]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	220b      	movs	r2, #11
 80065fc:	4619      	mov	r1, r3
 80065fe:	f7fe fab1 	bl	8004b64 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	330b      	adds	r3, #11
 800660c:	781a      	ldrb	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	330c      	adds	r3, #12
 8006618:	f002 0218 	and.w	r2, r2, #24
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800662c:	2201      	movs	r2, #1
 800662e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006630:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006634:	4618      	mov	r0, r3
 8006636:	3730      	adds	r7, #48	@ 0x30
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	4ec4ec4f 	.word	0x4ec4ec4f

08006640 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	@ 0x28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	e002      	b.n	8006658 <create_name+0x18>
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3301      	adds	r3, #1
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b2f      	cmp	r3, #47	@ 0x2f
 800665e:	d0f8      	beq.n	8006652 <create_name+0x12>
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b5c      	cmp	r3, #92	@ 0x5c
 8006666:	d0f4      	beq.n	8006652 <create_name+0x12>
	lfn = dp->lfn;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	61ba      	str	r2, [r7, #24]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4413      	add	r3, r2
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006688:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800668a:	2b1f      	cmp	r3, #31
 800668c:	d92f      	bls.n	80066ee <create_name+0xae>
 800668e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006690:	2b2f      	cmp	r3, #47	@ 0x2f
 8006692:	d02c      	beq.n	80066ee <create_name+0xae>
 8006694:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006696:	2b5c      	cmp	r3, #92	@ 0x5c
 8006698:	d029      	beq.n	80066ee <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2bfe      	cmp	r3, #254	@ 0xfe
 800669e:	d901      	bls.n	80066a4 <create_name+0x64>
			return FR_INVALID_NAME;
 80066a0:	2306      	movs	r3, #6
 80066a2:	e186      	b.n	80069b2 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 80066a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80066aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066ac:	2101      	movs	r1, #1
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 fff6 	bl	80086a0 <ff_convert>
 80066b4:	4603      	mov	r3, r0
 80066b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80066b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <create_name+0x82>
 80066be:	2306      	movs	r3, #6
 80066c0:	e177      	b.n	80069b2 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80066c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80066c6:	d809      	bhi.n	80066dc <create_name+0x9c>
 80066c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066ca:	4619      	mov	r1, r3
 80066cc:	488e      	ldr	r0, [pc, #568]	@ (8006908 <create_name+0x2c8>)
 80066ce:	f7fe faa7 	bl	8004c20 <chk_chr>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <create_name+0x9c>
			return FR_INVALID_NAME;
 80066d8:	2306      	movs	r3, #6
 80066da:	e16a      	b.n	80069b2 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	617a      	str	r2, [r7, #20]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066ea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80066ec:	e7c5      	b.n	800667a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	441a      	add	r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80066f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066fa:	2b1f      	cmp	r3, #31
 80066fc:	d801      	bhi.n	8006702 <create_name+0xc2>
 80066fe:	2304      	movs	r3, #4
 8006700:	e000      	b.n	8006704 <create_name+0xc4>
 8006702:	2300      	movs	r3, #0
 8006704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006708:	e011      	b.n	800672e <create_name+0xee>
		w = lfn[di - 1];
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006710:	3b01      	subs	r3, #1
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800671c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800671e:	2b20      	cmp	r3, #32
 8006720:	d002      	beq.n	8006728 <create_name+0xe8>
 8006722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006724:	2b2e      	cmp	r3, #46	@ 0x2e
 8006726:	d106      	bne.n	8006736 <create_name+0xf6>
		di--;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	3b01      	subs	r3, #1
 800672c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1ea      	bne.n	800670a <create_name+0xca>
 8006734:	e000      	b.n	8006738 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006736:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <create_name+0x102>
 800673e:	2306      	movs	r3, #6
 8006740:	e137      	b.n	80069b2 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	2200      	movs	r2, #0
 800674c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	220b      	movs	r2, #11
 8006758:	2120      	movs	r1, #32
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fa20 	bl	8004ba0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006760:	2300      	movs	r3, #0
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e002      	b.n	800676c <create_name+0x12c>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	3301      	adds	r3, #1
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	2b20      	cmp	r3, #32
 8006778:	d0f5      	beq.n	8006766 <create_name+0x126>
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4413      	add	r3, r2
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	2b2e      	cmp	r3, #46	@ 0x2e
 8006786:	d0ee      	beq.n	8006766 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <create_name+0x162>
 800678e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006792:	f043 0303 	orr.w	r3, r3, #3
 8006796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800679a:	e002      	b.n	80067a2 <create_name+0x162>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3b01      	subs	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d009      	beq.n	80067bc <create_name+0x17c>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80067ae:	3b01      	subs	r3, #1
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80067ba:	d1ef      	bne.n	800679c <create_name+0x15c>

	b = i = 0; ni = 8;
 80067bc:	2300      	movs	r3, #0
 80067be:	623b      	str	r3, [r7, #32]
 80067c0:	2300      	movs	r3, #0
 80067c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80067c6:	2308      	movs	r3, #8
 80067c8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	61ba      	str	r2, [r7, #24]
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80067da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8091 	beq.w	8006904 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80067e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d006      	beq.n	80067f6 <create_name+0x1b6>
 80067e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80067ec:	d10a      	bne.n	8006804 <create_name+0x1c4>
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d006      	beq.n	8006804 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 80067f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067fa:	f043 0303 	orr.w	r3, r3, #3
 80067fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006802:	e07e      	b.n	8006902 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006804:	6a3a      	ldr	r2, [r7, #32]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	429a      	cmp	r2, r3
 800680a:	d203      	bcs.n	8006814 <create_name+0x1d4>
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	429a      	cmp	r2, r3
 8006812:	d123      	bne.n	800685c <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b0b      	cmp	r3, #11
 8006818:	d106      	bne.n	8006828 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800681a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800681e:	f043 0303 	orr.w	r3, r3, #3
 8006822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006826:	e076      	b.n	8006916 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	429a      	cmp	r2, r3
 800682e:	d005      	beq.n	800683c <create_name+0x1fc>
 8006830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006834:	f043 0303 	orr.w	r3, r3, #3
 8006838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	429a      	cmp	r2, r3
 8006842:	d867      	bhi.n	8006914 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	2308      	movs	r3, #8
 800684a:	623b      	str	r3, [r7, #32]
 800684c:	230b      	movs	r3, #11
 800684e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006850:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800685a:	e052      	b.n	8006902 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800685c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800685e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006860:	d914      	bls.n	800688c <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006862:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f001 ff1a 	bl	80086a0 <ff_convert>
 800686c:	4603      	mov	r3, r0
 800686e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006870:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <create_name+0x240>
 8006876:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006878:	3b80      	subs	r3, #128	@ 0x80
 800687a:	4a24      	ldr	r2, [pc, #144]	@ (800690c <create_name+0x2cc>)
 800687c:	5cd3      	ldrb	r3, [r2, r3]
 800687e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006884:	f043 0302 	orr.w	r3, r3, #2
 8006888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800688c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	d007      	beq.n	80068a2 <create_name+0x262>
 8006892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006894:	4619      	mov	r1, r3
 8006896:	481e      	ldr	r0, [pc, #120]	@ (8006910 <create_name+0x2d0>)
 8006898:	f7fe f9c2 	bl	8004c20 <chk_chr>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d008      	beq.n	80068b4 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80068a2:	235f      	movs	r3, #95	@ 0x5f
 80068a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80068a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068aa:	f043 0303 	orr.w	r3, r3, #3
 80068ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80068b2:	e01b      	b.n	80068ec <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80068b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068b6:	2b40      	cmp	r3, #64	@ 0x40
 80068b8:	d909      	bls.n	80068ce <create_name+0x28e>
 80068ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068bc:	2b5a      	cmp	r3, #90	@ 0x5a
 80068be:	d806      	bhi.n	80068ce <create_name+0x28e>
					b |= 2;
 80068c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068c4:	f043 0302 	orr.w	r3, r3, #2
 80068c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80068cc:	e00e      	b.n	80068ec <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80068ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068d0:	2b60      	cmp	r3, #96	@ 0x60
 80068d2:	d90b      	bls.n	80068ec <create_name+0x2ac>
 80068d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068d6:	2b7a      	cmp	r3, #122	@ 0x7a
 80068d8:	d808      	bhi.n	80068ec <create_name+0x2ac>
						b |= 1; w -= 0x20;
 80068da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80068e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068e8:	3b20      	subs	r3, #32
 80068ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	1c59      	adds	r1, r3, #1
 80068f8:	6239      	str	r1, [r7, #32]
 80068fa:	4413      	add	r3, r2
 80068fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006902:	e762      	b.n	80067ca <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8006904:	bf00      	nop
 8006906:	e006      	b.n	8006916 <create_name+0x2d6>
 8006908:	0800b4a4 	.word	0x0800b4a4
 800690c:	0800b518 	.word	0x0800b518
 8006910:	0800b4b0 	.word	0x0800b4b0
			if (si > di) break;			/* No extension */
 8006914:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2be5      	cmp	r3, #229	@ 0xe5
 8006922:	d105      	bne.n	8006930 <create_name+0x2f0>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	2205      	movs	r2, #5
 800692e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	2b08      	cmp	r3, #8
 8006934:	d104      	bne.n	8006940 <create_name+0x300>
 8006936:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006940:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006944:	f003 030c 	and.w	r3, r3, #12
 8006948:	2b0c      	cmp	r3, #12
 800694a:	d005      	beq.n	8006958 <create_name+0x318>
 800694c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	2b03      	cmp	r3, #3
 8006956:	d105      	bne.n	8006964 <create_name+0x324>
		cf |= NS_LFN;
 8006958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800695c:	f043 0302 	orr.w	r3, r3, #2
 8006960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d117      	bne.n	80069a0 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006970:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006974:	f003 0303 	and.w	r3, r3, #3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d105      	bne.n	8006988 <create_name+0x348>
 800697c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006980:	f043 0310 	orr.w	r3, r3, #16
 8006984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800698c:	f003 030c 	and.w	r3, r3, #12
 8006990:	2b04      	cmp	r3, #4
 8006992:	d105      	bne.n	80069a0 <create_name+0x360>
 8006994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006998:	f043 0308 	orr.w	r3, r3, #8
 800699c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	330b      	adds	r3, #11
 80069aa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80069ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80069b0:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3728      	adds	r7, #40	@ 0x28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop

080069bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80069cc:	d003      	beq.n	80069d6 <follow_path+0x1a>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b5c      	cmp	r3, #92	@ 0x5c
 80069d4:	d102      	bne.n	80069dc <follow_path+0x20>
		path++;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	3301      	adds	r3, #1
 80069da:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069e2:	461a      	mov	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b1f      	cmp	r3, #31
 80069ee:	d80c      	bhi.n	8006a0a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80069f0:	2100      	movs	r1, #0
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fe ffea 	bl	80059cc <dir_sdi>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a02:	461a      	mov	r2, r3
 8006a04:	2300      	movs	r3, #0
 8006a06:	6153      	str	r3, [r2, #20]
 8006a08:	e049      	b.n	8006a9e <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff fe16 	bl	8006640 <create_name>
 8006a14:	4603      	mov	r3, r0
 8006a16:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d13a      	bne.n	8006a94 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fc1e 	bl	8006260 <dir_find>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	7adb      	ldrb	r3, [r3, #11]
 8006a32:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d12b      	bne.n	8006a98 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d126      	bne.n	8006a98 <follow_path+0xdc>
 8006a4a:	2305      	movs	r3, #5
 8006a4c:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006a4e:	e023      	b.n	8006a98 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d120      	bne.n	8006a9c <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	330b      	adds	r3, #11
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8006a72:	2305      	movs	r3, #5
 8006a74:	73fb      	strb	r3, [r7, #15]
 8006a76:	e012      	b.n	8006a9e <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff fa08 	bl	8005e98 <ld_clust>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a90:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a92:	e7ba      	b.n	8006a0a <follow_path+0x4e>
			if (res != FR_OK) break;
 8006a94:	bf00      	nop
 8006a96:	e002      	b.n	8006a9e <follow_path+0xe2>
				break;
 8006a98:	bf00      	nop
 8006a9a:	e000      	b.n	8006a9e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a9c:	bf00      	nop
		}
	}

	return res;
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d031      	beq.n	8006b22 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	e002      	b.n	8006acc <get_ldnumber+0x24>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b1f      	cmp	r3, #31
 8006ad2:	d903      	bls.n	8006adc <get_ldnumber+0x34>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b3a      	cmp	r3, #58	@ 0x3a
 8006ada:	d1f4      	bne.n	8006ac6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b3a      	cmp	r3, #58	@ 0x3a
 8006ae2:	d11c      	bne.n	8006b1e <get_ldnumber+0x76>
			tp = *path;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	60fa      	str	r2, [r7, #12]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	3b30      	subs	r3, #48	@ 0x30
 8006af4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	d80e      	bhi.n	8006b1a <get_ldnumber+0x72>
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d10a      	bne.n	8006b1a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d107      	bne.n	8006b1a <get_ldnumber+0x72>
					vol = (int)i;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	3301      	adds	r3, #1
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	e002      	b.n	8006b24 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b1e:	2300      	movs	r3, #0
 8006b20:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006b22:	693b      	ldr	r3, [r7, #16]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr
	...

08006b30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b40:	2200      	movs	r2, #0
 8006b42:	711a      	strb	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b50:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7fe fa8d 	bl	8005074 <move_window>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <check_fs+0x34>
		return 3;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e04a      	b.n	8006bfa <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	b21a      	sxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8006b78:	b21b      	sxth	r3, r3
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	b21b      	sxth	r3, r3
 8006b7e:	4a21      	ldr	r2, [pc, #132]	@ (8006c04 <check_fs+0xd4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d001      	beq.n	8006b88 <check_fs+0x58>
		return 2;
 8006b84:	2302      	movs	r3, #2
 8006b86:	e038      	b.n	8006bfa <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3336      	adds	r3, #54	@ 0x36
 8006b8c:	3303      	adds	r3, #3
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	061a      	lsls	r2, r3, #24
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3336      	adds	r3, #54	@ 0x36
 8006b96:	3302      	adds	r3, #2
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	041b      	lsls	r3, r3, #16
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3336      	adds	r3, #54	@ 0x36
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006bb6:	4a14      	ldr	r2, [pc, #80]	@ (8006c08 <check_fs+0xd8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d101      	bne.n	8006bc0 <check_fs+0x90>
		return 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e01c      	b.n	8006bfa <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3352      	adds	r3, #82	@ 0x52
 8006bc4:	3303      	adds	r3, #3
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	061a      	lsls	r2, r3, #24
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3352      	adds	r3, #82	@ 0x52
 8006bce:	3302      	adds	r3, #2
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	041b      	lsls	r3, r3, #16
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3352      	adds	r3, #82	@ 0x52
 8006bda:	3301      	adds	r3, #1
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	4313      	orrs	r3, r2
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006bee:	4a06      	ldr	r2, [pc, #24]	@ (8006c08 <check_fs+0xd8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d101      	bne.n	8006bf8 <check_fs+0xc8>
		return 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e000      	b.n	8006bfa <check_fs+0xca>

	return 1;
 8006bf8:	2301      	movs	r3, #1
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	ffffaa55 	.word	0xffffaa55
 8006c08:	00544146 	.word	0x00544146

08006c0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b096      	sub	sp, #88	@ 0x58
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c20:	68b8      	ldr	r0, [r7, #8]
 8006c22:	f7ff ff41 	bl	8006aa8 <get_ldnumber>
 8006c26:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	da01      	bge.n	8006c32 <find_volume+0x26>
 8006c2e:	230b      	movs	r3, #11
 8006c30:	e311      	b.n	8007256 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c32:	4a98      	ldr	r2, [pc, #608]	@ (8006e94 <find_volume+0x288>)
 8006c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <find_volume+0x3a>
 8006c42:	230c      	movs	r3, #12
 8006c44:	e307      	b.n	8007256 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c4a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01c      	beq.n	8006c92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd fee1 	bl	8004a28 <disk_status>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10c      	bne.n	8006c92 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <find_volume+0x82>
 8006c7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006c8a:	230a      	movs	r3, #10
 8006c8c:	e2e3      	b.n	8007256 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e2e1      	b.n	8007256 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c98:	2200      	movs	r2, #0
 8006c9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fd fed3 	bl	8004a5c <disk_initialize>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006cbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e2c4      	b.n	8007256 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <find_volume+0xd6>
 8006cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8006cde:	230a      	movs	r3, #10
 8006ce0:	e2b9      	b.n	8007256 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ce8:	7858      	ldrb	r0, [r3, #1]
 8006cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cf0:	330a      	adds	r3, #10
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	f7fd ff17 	bl	8004b28 <disk_ioctl>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10d      	bne.n	8006d1c <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d06:	895b      	ldrh	r3, [r3, #10]
 8006d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d0c:	d306      	bcc.n	8006d1c <find_volume+0x110>
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d14:	895b      	ldrh	r3, [r3, #10]
 8006d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d1a:	d901      	bls.n	8006d20 <find_volume+0x114>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e29a      	b.n	8007256 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006d24:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d28:	f7ff ff02 	bl	8006b30 <check_fs>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006d32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d153      	bne.n	8006de2 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d3e:	e028      	b.n	8006d92 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006d40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006d4a:	4413      	add	r3, r2
 8006d4c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	3304      	adds	r3, #4
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d012      	beq.n	8006d7e <find_volume+0x172>
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	330b      	adds	r3, #11
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	061a      	lsls	r2, r3, #24
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	330a      	adds	r3, #10
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	3309      	adds	r3, #9
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	4313      	orrs	r3, r2
 8006d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d76:	3208      	adds	r2, #8
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	e000      	b.n	8006d80 <find_volume+0x174>
 8006d7e:	2200      	movs	r2, #0
 8006d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	3358      	adds	r3, #88	@ 0x58
 8006d86:	443b      	add	r3, r7
 8006d88:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d8e:	3301      	adds	r3, #1
 8006d90:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d9d3      	bls.n	8006d40 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006d98:	2300      	movs	r3, #0
 8006d9a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <find_volume+0x19c>
 8006da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da4:	3b01      	subs	r3, #1
 8006da6:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	3358      	adds	r3, #88	@ 0x58
 8006dae:	443b      	add	r3, r7
 8006db0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006db4:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <find_volume+0x1bc>
 8006dbc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006dbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006dc0:	f7ff feb6 	bl	8006b30 <check_fs>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	e000      	b.n	8006dca <find_volume+0x1be>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006dce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <find_volume+0x1d6>
 8006dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd8:	3301      	adds	r3, #1
 8006dda:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d9e2      	bls.n	8006da8 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006de2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d101      	bne.n	8006dee <find_volume+0x1e2>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e233      	b.n	8007256 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006dee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <find_volume+0x1ee>
 8006df6:	230d      	movs	r3, #13
 8006df8:	e22d      	b.n	8007256 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfc:	7b1b      	ldrb	r3, [r3, #12]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	b21a      	sxth	r2, r3
 8006e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e04:	7adb      	ldrb	r3, [r3, #11]
 8006e06:	b21b      	sxth	r3, r3
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	b21a      	sxth	r2, r3
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e12:	895b      	ldrh	r3, [r3, #10]
 8006e14:	b21b      	sxth	r3, r3
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d001      	beq.n	8006e1e <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8006e1a:	230d      	movs	r3, #13
 8006e1c:	e21b      	b.n	8007256 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e20:	7ddb      	ldrb	r3, [r3, #23]
 8006e22:	021b      	lsls	r3, r3, #8
 8006e24:	b21a      	sxth	r2, r3
 8006e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e28:	7d9b      	ldrb	r3, [r3, #22]
 8006e2a:	b21b      	sxth	r3, r3
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	b21b      	sxth	r3, r3
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d112      	bne.n	8006e60 <find_volume+0x254>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006e40:	061a      	lsls	r2, r3, #24
 8006e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e44:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	4313      	orrs	r3, r2
 8006e56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e58:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8006e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e66:	461a      	mov	r2, r3
 8006e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e6a:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6e:	7c1a      	ldrb	r2, [r3, #16]
 8006e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e76:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e7e:	78db      	ldrb	r3, [r3, #3]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d009      	beq.n	8006e98 <find_volume+0x28c>
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e8a:	78db      	ldrb	r3, [r3, #3]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d003      	beq.n	8006e98 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8006e90:	230d      	movs	r3, #13
 8006e92:	e1e0      	b.n	8007256 <find_volume+0x64a>
 8006e94:	200023e4 	.word	0x200023e4
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e9e:	78db      	ldrb	r3, [r3, #3]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea4:	fb02 f303 	mul.w	r3, r2, r3
 8006ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eac:	7b5a      	ldrb	r2, [r3, #13]
 8006eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb4:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ebc:	789b      	ldrb	r3, [r3, #2]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00c      	beq.n	8006edc <find_volume+0x2d0>
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec8:	789b      	ldrb	r3, [r3, #2]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed2:	789b      	ldrb	r3, [r3, #2]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8006edc:	230d      	movs	r3, #13
 8006ede:	e1ba      	b.n	8007256 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee2:	7c9b      	ldrb	r3, [r3, #18]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	b21a      	sxth	r2, r3
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eea:	7c5b      	ldrb	r3, [r3, #17]
 8006eec:	b21b      	sxth	r3, r3
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	b21b      	sxth	r3, r3
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006efa:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f02:	891b      	ldrh	r3, [r3, #8]
 8006f04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f0a:	8952      	ldrh	r2, [r2, #10]
 8006f0c:	0952      	lsrs	r2, r2, #5
 8006f0e:	b292      	uxth	r2, r2
 8006f10:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f14:	fb01 f202 	mul.w	r2, r1, r2
 8006f18:	1a9b      	subs	r3, r3, r2
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8006f20:	230d      	movs	r3, #13
 8006f22:	e198      	b.n	8007256 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f26:	7d1b      	ldrb	r3, [r3, #20]
 8006f28:	021b      	lsls	r3, r3, #8
 8006f2a:	b21a      	sxth	r2, r3
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	7cdb      	ldrb	r3, [r3, #19]
 8006f30:	b21b      	sxth	r3, r3
 8006f32:	4313      	orrs	r3, r2
 8006f34:	b21b      	sxth	r3, r3
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d112      	bne.n	8006f66 <find_volume+0x35a>
 8006f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f42:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006f46:	061a      	lsls	r2, r3, #24
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006f4e:	041b      	lsls	r3, r3, #16
 8006f50:	431a      	orrs	r2, r3
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f5e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f68:	7bdb      	ldrb	r3, [r3, #15]
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	b21a      	sxth	r2, r3
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f70:	7b9b      	ldrb	r3, [r3, #14]
 8006f72:	b21b      	sxth	r3, r3
 8006f74:	4313      	orrs	r3, r2
 8006f76:	b21b      	sxth	r3, r3
 8006f78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006f7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <find_volume+0x378>
 8006f80:	230d      	movs	r3, #13
 8006f82:	e168      	b.n	8007256 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006f84:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f88:	4413      	add	r3, r2
 8006f8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f90:	8911      	ldrh	r1, [r2, #8]
 8006f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f98:	8952      	ldrh	r2, [r2, #10]
 8006f9a:	0952      	lsrs	r2, r2, #5
 8006f9c:	b292      	uxth	r2, r2
 8006f9e:	fbb1 f2f2 	udiv	r2, r1, r2
 8006fa2:	b292      	uxth	r2, r2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006fa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d201      	bcs.n	8006fb4 <find_volume+0x3a8>
 8006fb0:	230d      	movs	r3, #13
 8006fb2:	e150      	b.n	8007256 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006fb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006fc0:	7892      	ldrb	r2, [r2, #2]
 8006fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <find_volume+0x3c6>
 8006fce:	230d      	movs	r3, #13
 8006fd0:	e141      	b.n	8007256 <find_volume+0x64a>
	fmt = FS_FAT12;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d902      	bls.n	8006fe8 <find_volume+0x3dc>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d902      	bls.n	8006ff8 <find_volume+0x3ec>
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	3302      	adds	r3, #2
 8006ffc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ffe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007002:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800700a:	461a      	mov	r2, r3
 800700c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800700e:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007010:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007014:	4413      	add	r3, r2
 8007016:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007018:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800701c:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800701e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	4413      	add	r3, r2
 8007024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007026:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800702a:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 800702c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007030:	2b03      	cmp	r3, #3
 8007032:	d124      	bne.n	800707e <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800703a:	891b      	ldrh	r3, [r3, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <find_volume+0x438>
 8007040:	230d      	movs	r3, #13
 8007042:	e108      	b.n	8007256 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007046:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800704a:	061a      	lsls	r2, r3, #24
 800704c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007052:	041b      	lsls	r3, r3, #16
 8007054:	431a      	orrs	r2, r3
 8007056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007058:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	4313      	orrs	r3, r2
 8007060:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007062:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007066:	4313      	orrs	r3, r2
 8007068:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800706a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800706e:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	647b      	str	r3, [r7, #68]	@ 0x44
 800707c:	e02b      	b.n	80070d6 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007084:	891b      	ldrh	r3, [r3, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <find_volume+0x482>
 800708a:	230d      	movs	r3, #13
 800708c:	e0e3      	b.n	8007256 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007094:	6a1a      	ldr	r2, [r3, #32]
 8007096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007098:	4413      	add	r3, r2
 800709a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800709c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80070a0:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80070a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d105      	bne.n	80070b6 <find_volume+0x4aa>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	e00e      	b.n	80070d4 <find_volume+0x4c8>
 80070b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070bc:	695a      	ldr	r2, [r3, #20]
 80070be:	4613      	mov	r3, r2
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	4413      	add	r3, r2
 80070c4:	085a      	lsrs	r2, r3, #1
 80070c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80070d4:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80070d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070dc:	699a      	ldr	r2, [r3, #24]
 80070de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070e4:	895b      	ldrh	r3, [r3, #10]
 80070e6:	4619      	mov	r1, r3
 80070e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ea:	440b      	add	r3, r1
 80070ec:	3b01      	subs	r3, #1
 80070ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070f0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80070f4:	8949      	ldrh	r1, [r1, #10]
 80070f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d201      	bcs.n	8007102 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80070fe:	230d      	movs	r3, #13
 8007100:	e0a9      	b.n	8007256 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007108:	461a      	mov	r2, r3
 800710a:	f04f 33ff 	mov.w	r3, #4294967295
 800710e:	6113      	str	r3, [r2, #16]
 8007110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800711a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800711e:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007126:	2280      	movs	r2, #128	@ 0x80
 8007128:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800712a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800712e:	2b03      	cmp	r3, #3
 8007130:	d17a      	bne.n	8007228 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007134:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	b21a      	sxth	r2, r3
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007142:	b21b      	sxth	r3, r3
 8007144:	4313      	orrs	r3, r2
 8007146:	b21b      	sxth	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d16d      	bne.n	8007228 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800714c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800714e:	3301      	adds	r3, #1
 8007150:	4619      	mov	r1, r3
 8007152:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007154:	f7fd ff8e 	bl	8005074 <move_window>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d164      	bne.n	8007228 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800715e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007164:	2200      	movs	r2, #0
 8007166:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800716e:	021b      	lsls	r3, r3, #8
 8007170:	b21a      	sxth	r2, r3
 8007172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007174:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8007178:	b21b      	sxth	r3, r3
 800717a:	4313      	orrs	r3, r2
 800717c:	b21b      	sxth	r3, r3
 800717e:	4a38      	ldr	r2, [pc, #224]	@ (8007260 <find_volume+0x654>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d151      	bne.n	8007228 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007186:	78db      	ldrb	r3, [r3, #3]
 8007188:	061a      	lsls	r2, r3, #24
 800718a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718c:	789b      	ldrb	r3, [r3, #2]
 800718e:	041b      	lsls	r3, r3, #16
 8007190:	431a      	orrs	r2, r3
 8007192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	4313      	orrs	r3, r2
 800719a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800719c:	7812      	ldrb	r2, [r2, #0]
 800719e:	4313      	orrs	r3, r2
 80071a0:	4a30      	ldr	r2, [pc, #192]	@ (8007264 <find_volume+0x658>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d140      	bne.n	8007228 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80071a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a8:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 80071ac:	061a      	lsls	r2, r3, #24
 80071ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b0:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	431a      	orrs	r2, r3
 80071b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ba:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 80071be:	021b      	lsls	r3, r3, #8
 80071c0:	4313      	orrs	r3, r2
 80071c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071c4:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 80071c8:	4313      	orrs	r3, r2
 80071ca:	4a27      	ldr	r2, [pc, #156]	@ (8007268 <find_volume+0x65c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d12b      	bne.n	8007228 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 80071d6:	061a      	lsls	r2, r3, #24
 80071d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071da:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 80071de:	041b      	lsls	r3, r3, #16
 80071e0:	431a      	orrs	r2, r3
 80071e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e4:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	4313      	orrs	r3, r2
 80071ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071ee:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 80071f2:	4313      	orrs	r3, r2
 80071f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071fa:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8007202:	061a      	lsls	r2, r3, #24
 8007204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007206:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	431a      	orrs	r2, r3
 800720e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007210:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	4313      	orrs	r3, r2
 8007218:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800721a:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800721e:	4313      	orrs	r3, r2
 8007220:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007222:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007226:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800722e:	461a      	mov	r2, r3
 8007230:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007234:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8007236:	4b0d      	ldr	r3, [pc, #52]	@ (800726c <find_volume+0x660>)
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	3301      	adds	r3, #1
 800723c:	b29a      	uxth	r2, r3
 800723e:	4b0b      	ldr	r3, [pc, #44]	@ (800726c <find_volume+0x660>)
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	4b0a      	ldr	r3, [pc, #40]	@ (800726c <find_volume+0x660>)
 8007244:	881a      	ldrh	r2, [r3, #0]
 8007246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800724c:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800724e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007250:	f7fd fe94 	bl	8004f7c <clear_lock>
#endif

	return FR_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3758      	adds	r7, #88	@ 0x58
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	ffffaa55 	.word	0xffffaa55
 8007264:	41615252 	.word	0x41615252
 8007268:	61417272 	.word	0x61417272
 800726c:	200023e8 	.word	0x200023e8

08007270 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d02a      	beq.n	80072d8 <validate+0x68>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d024      	beq.n	80072d8 <validate+0x68>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01b      	beq.n	80072d8 <validate+0x68>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ac:	88da      	ldrh	r2, [r3, #6]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072b4:	889b      	ldrh	r3, [r3, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d10e      	bne.n	80072d8 <validate+0x68>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c6:	785b      	ldrb	r3, [r3, #1]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fd fbad 	bl	8004a28 <disk_status>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <validate+0x6c>
		return FR_INVALID_OBJECT;
 80072d8:	2309      	movs	r3, #9
 80072da:	e000      	b.n	80072de <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	4613      	mov	r3, r2
 80072f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80072fa:	f107 0310 	add.w	r3, r7, #16
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff fbd2 	bl	8006aa8 <get_ldnumber>
 8007304:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	2b00      	cmp	r3, #0
 800730a:	da01      	bge.n	8007310 <f_mount+0x28>
 800730c:	230b      	movs	r3, #11
 800730e:	e02f      	b.n	8007370 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007310:	4a19      	ldr	r2, [pc, #100]	@ (8007378 <f_mount+0x90>)
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007318:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d007      	beq.n	8007330 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007320:	69b8      	ldr	r0, [r7, #24]
 8007322:	f7fd fe2b 	bl	8004f7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800732c:	2200      	movs	r2, #0
 800732e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d004      	beq.n	8007340 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	490d      	ldr	r1, [pc, #52]	@ (8007378 <f_mount+0x90>)
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <f_mount+0x6e>
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d001      	beq.n	800735a <f_mount+0x72>
 8007356:	2300      	movs	r3, #0
 8007358:	e00a      	b.n	8007370 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800735a:	f107 0108 	add.w	r1, r7, #8
 800735e:	f107 030c 	add.w	r3, r7, #12
 8007362:	2200      	movs	r2, #0
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff fc51 	bl	8006c0c <find_volume>
 800736a:	4603      	mov	r3, r0
 800736c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800736e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3720      	adds	r7, #32
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200023e4 	.word	0x200023e4

0800737c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800738a:	f843 0c4c 	str.w	r0, [r3, #-76]
 800738e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007392:	f843 1c50 	str.w	r1, [r3, #-80]
 8007396:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800739a:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800739e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80073a2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <f_open+0x32>
 80073aa:	2309      	movs	r3, #9
 80073ac:	e2f3      	b.n	8007996 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 80073ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80073b2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80073b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ba:	461a      	mov	r2, r3
 80073bc:	2300      	movs	r3, #0
 80073be:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80073c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80073c4:	461a      	mov	r2, r3
 80073c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80073ca:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80073ce:	f003 031f 	and.w	r3, r3, #31
 80073d2:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80073d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80073da:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80073de:	f023 0301 	bic.w	r3, r3, #1
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	f107 0118 	add.w	r1, r7, #24
 80073e8:	3910      	subs	r1, #16
 80073ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80073ee:	3b18      	subs	r3, #24
 80073f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fc09 	bl	8006c0c <find_volume>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007400:	f102 0217 	add.w	r2, r2, #23
 8007404:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007406:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800740a:	f103 0317 	add.w	r3, r3, #23
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f040 82bb 	bne.w	800798c <f_open+0x610>
		INIT_BUF(dj);
 8007416:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800741a:	461a      	mov	r2, r3
 800741c:	f107 0318 	add.w	r3, r7, #24
 8007420:	3b04      	subs	r3, #4
 8007422:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 8007426:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800742a:	461a      	mov	r2, r3
 800742c:	4bd3      	ldr	r3, [pc, #844]	@ (800777c <f_open+0x400>)
 800742e:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8007432:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007436:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800743a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800743e:	3b18      	subs	r3, #24
 8007440:	4611      	mov	r1, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff faba 	bl	80069bc <follow_path>
 8007448:	4603      	mov	r3, r0
 800744a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800744e:	f102 0217 	add.w	r2, r2, #23
 8007452:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8007454:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007458:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 800745c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007460:	f102 0210 	add.w	r2, r2, #16
 8007464:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007466:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800746a:	f103 0317 	add.w	r3, r3, #23
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d124      	bne.n	80074be <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8007474:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007478:	f103 0310 	add.w	r3, r3, #16
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <f_open+0x114>
				res = FR_INVALID_NAME;
 8007482:	2306      	movs	r3, #6
 8007484:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007488:	f102 0217 	add.w	r2, r2, #23
 800748c:	7013      	strb	r3, [r2, #0]
 800748e:	e016      	b.n	80074be <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007490:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007494:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007498:	2b01      	cmp	r3, #1
 800749a:	bf8c      	ite	hi
 800749c:	2301      	movhi	r3, #1
 800749e:	2300      	movls	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80074a8:	3b18      	subs	r3, #24
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fd fbd1 	bl	8004c54 <chk_lock>
 80074b2:	4603      	mov	r3, r0
 80074b4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80074b8:	f102 0217 	add.w	r2, r2, #23
 80074bc:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80074be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80074c2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80074c6:	f003 031c 	and.w	r3, r3, #28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 813c 	beq.w	8007748 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 80074d0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80074d4:	f103 0317 	add.w	r3, r3, #23
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d02e      	beq.n	800753c <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80074de:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80074e2:	f103 0317 	add.w	r3, r3, #23
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d112      	bne.n	8007512 <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80074ec:	f7fd fc22 	bl	8004d34 <enq_lock>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <f_open+0x18a>
 80074f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80074fa:	3b18      	subs	r3, #24
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe ff7b 	bl	80063f8 <dir_register>
 8007502:	4603      	mov	r3, r0
 8007504:	e000      	b.n	8007508 <f_open+0x18c>
 8007506:	2312      	movs	r3, #18
 8007508:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800750c:	f102 0217 	add.w	r2, r2, #23
 8007510:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007512:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007516:	461a      	mov	r2, r3
 8007518:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800751c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007520:	f043 0308 	orr.w	r3, r3, #8
 8007524:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8007528:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800752c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8007530:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007534:	f102 0210 	add.w	r2, r2, #16
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	e01f      	b.n	800757c <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800753c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007540:	f103 0310 	add.w	r3, r3, #16
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	330b      	adds	r3, #11
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	f003 0311 	and.w	r3, r3, #17
 800754e:	2b00      	cmp	r3, #0
 8007550:	d006      	beq.n	8007560 <f_open+0x1e4>
					res = FR_DENIED;
 8007552:	2307      	movs	r3, #7
 8007554:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007558:	f102 0217 	add.w	r2, r2, #23
 800755c:	7013      	strb	r3, [r2, #0]
 800755e:	e00d      	b.n	800757c <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007560:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007564:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <f_open+0x200>
						res = FR_EXIST;
 8007570:	2308      	movs	r3, #8
 8007572:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007576:	f102 0217 	add.w	r2, r2, #23
 800757a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800757c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007580:	f103 0317 	add.w	r3, r3, #23
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 8113 	bne.w	80077b2 <f_open+0x436>
 800758c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007590:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 810a 	beq.w	80077b2 <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 800759e:	f7fd f9e1 	bl	8004964 <get_fattime>
 80075a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80075a6:	f103 030c 	add.w	r3, r3, #12
 80075aa:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80075ac:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80075b0:	f103 0310 	add.w	r3, r3, #16
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330e      	adds	r3, #14
 80075b8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80075bc:	f102 020c 	add.w	r2, r2, #12
 80075c0:	6812      	ldr	r2, [r2, #0]
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80075ca:	f103 030c 	add.w	r3, r3, #12
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	0a1b      	lsrs	r3, r3, #8
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80075da:	f103 0310 	add.w	r3, r3, #16
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	330f      	adds	r3, #15
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80075ea:	f103 030c 	add.w	r3, r3, #12
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	0c1a      	lsrs	r2, r3, #16
 80075f2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80075f6:	f103 0310 	add.w	r3, r3, #16
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3310      	adds	r3, #16
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007606:	f103 030c 	add.w	r3, r3, #12
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	0e1a      	lsrs	r2, r3, #24
 800760e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007612:	f103 0310 	add.w	r3, r3, #16
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3311      	adds	r3, #17
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800761e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007622:	f103 0310 	add.w	r3, r3, #16
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	330b      	adds	r3, #11
 800762a:	2200      	movs	r2, #0
 800762c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800762e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007632:	f103 0310 	add.w	r3, r3, #16
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	331c      	adds	r3, #28
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
 800763e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007642:	f103 0310 	add.w	r3, r3, #16
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	331d      	adds	r3, #29
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007652:	f103 0310 	add.w	r3, r3, #16
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	331e      	adds	r3, #30
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007662:	f103 0310 	add.w	r3, r3, #16
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	331f      	adds	r3, #31
 800766a:	2200      	movs	r2, #0
 800766c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800766e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007672:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8007676:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800767a:	f102 0210 	add.w	r2, r2, #16
 800767e:	6811      	ldr	r1, [r2, #0]
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe fc09 	bl	8005e98 <ld_clust>
 8007686:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800768a:	f103 0308 	add.w	r3, r3, #8
 800768e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007690:	2100      	movs	r1, #0
 8007692:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007696:	f103 0310 	add.w	r3, r3, #16
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	f7fe fc2a 	bl	8005ef4 <st_clust>
				dj.fs->wflag = 1;
 80076a0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80076a4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80076a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ac:	2201      	movs	r2, #1
 80076ae:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80076b0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80076b4:	f103 0308 	add.w	r3, r3, #8
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d079      	beq.n	80077b2 <f_open+0x436>
					dw = dj.fs->winsect;
 80076be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80076c2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80076c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80076d0:	f102 020c 	add.w	r2, r2, #12
 80076d4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80076d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80076da:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80076de:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80076e2:	f102 0208 	add.w	r2, r2, #8
 80076e6:	6811      	ldr	r1, [r2, #0]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fe f826 	bl	800573a <remove_chain>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80076f4:	f102 0217 	add.w	r2, r2, #23
 80076f8:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80076fa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80076fe:	f103 0317 	add.w	r3, r3, #23
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d154      	bne.n	80077b2 <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007708:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800770c:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 8007710:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007714:	f103 0308 	add.w	r3, r3, #8
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3b01      	subs	r3, #1
 800771c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007720:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8007722:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007726:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800772a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800772e:	f102 020c 	add.w	r2, r2, #12
 8007732:	6811      	ldr	r1, [r2, #0]
 8007734:	4618      	mov	r0, r3
 8007736:	f7fd fc9d 	bl	8005074 <move_window>
 800773a:	4603      	mov	r3, r0
 800773c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007740:	f102 0217 	add.w	r2, r2, #23
 8007744:	7013      	strb	r3, [r2, #0]
 8007746:	e034      	b.n	80077b2 <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007748:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800774c:	f103 0317 	add.w	r3, r3, #23
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d12d      	bne.n	80077b2 <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007756:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800775a:	f103 0310 	add.w	r3, r3, #16
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	330b      	adds	r3, #11
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	f003 0310 	and.w	r3, r3, #16
 8007768:	2b00      	cmp	r3, #0
 800776a:	d009      	beq.n	8007780 <f_open+0x404>
					res = FR_NO_FILE;
 800776c:	2304      	movs	r3, #4
 800776e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007772:	f102 0217 	add.w	r2, r2, #23
 8007776:	7013      	strb	r3, [r2, #0]
 8007778:	e01b      	b.n	80077b2 <f_open+0x436>
 800777a:	bf00      	nop
 800777c:	20002404 	.word	0x20002404
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007780:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007784:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007788:	f003 0302 	and.w	r3, r3, #2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d010      	beq.n	80077b2 <f_open+0x436>
 8007790:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007794:	f103 0310 	add.w	r3, r3, #16
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330b      	adds	r3, #11
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <f_open+0x436>
						res = FR_DENIED;
 80077a6:	2307      	movs	r3, #7
 80077a8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80077ac:	f102 0217 	add.w	r2, r2, #23
 80077b0:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80077b2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80077b6:	f103 0317 	add.w	r3, r3, #23
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d155      	bne.n	800786c <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80077c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80077c4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80077c8:	f003 0308 	and.w	r3, r3, #8
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <f_open+0x46a>
				mode |= FA__WRITTEN;
 80077d0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80077d4:	461a      	mov	r2, r3
 80077d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80077da:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80077de:	f043 0320 	orr.w	r3, r3, #32
 80077e2:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80077e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80077ea:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80077ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80077f8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80077fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007800:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8007802:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007806:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800780a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800780e:	461a      	mov	r2, r3
 8007810:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007814:	f103 0310 	add.w	r3, r3, #16
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800781c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007820:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007824:	2b01      	cmp	r3, #1
 8007826:	bf8c      	ite	hi
 8007828:	2301      	movhi	r3, #1
 800782a:	2300      	movls	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	461a      	mov	r2, r3
 8007830:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007834:	3b18      	subs	r3, #24
 8007836:	4611      	mov	r1, r2
 8007838:	4618      	mov	r0, r3
 800783a:	f7fd fa9f 	bl	8004d7c <inc_lock>
 800783e:	4602      	mov	r2, r0
 8007840:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007844:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800784c:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800784e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007852:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800785a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785c:	2b00      	cmp	r3, #0
 800785e:	d105      	bne.n	800786c <f_open+0x4f0>
 8007860:	2302      	movs	r3, #2
 8007862:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007866:	f102 0217 	add.w	r2, r2, #23
 800786a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800786c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007870:	f103 0317 	add.w	r3, r3, #23
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f040 8088 	bne.w	800798c <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 800787c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007880:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007888:	461a      	mov	r2, r3
 800788a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800788e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007892:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007894:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007898:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800789c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078a0:	2200      	movs	r2, #0
 80078a2:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80078a4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80078a8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80078ac:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80078b0:	f102 0210 	add.w	r2, r2, #16
 80078b4:	6811      	ldr	r1, [r2, #0]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe faee 	bl	8005e98 <ld_clust>
 80078bc:	4602      	mov	r2, r0
 80078be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80078c2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80078c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078ca:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80078cc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80078d0:	f103 0310 	add.w	r3, r3, #16
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	331f      	adds	r3, #31
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	061a      	lsls	r2, r3, #24
 80078dc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80078e0:	f103 0310 	add.w	r3, r3, #16
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	331e      	adds	r3, #30
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	041b      	lsls	r3, r3, #16
 80078ec:	431a      	orrs	r2, r3
 80078ee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80078f2:	f103 0310 	add.w	r3, r3, #16
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	331d      	adds	r3, #29
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	021b      	lsls	r3, r3, #8
 80078fe:	4313      	orrs	r3, r2
 8007900:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007904:	f102 0210 	add.w	r2, r2, #16
 8007908:	6812      	ldr	r2, [r2, #0]
 800790a:	321c      	adds	r2, #28
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	4313      	orrs	r3, r2
 8007910:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8007914:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007918:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800791c:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800791e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007922:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800792a:	461a      	mov	r2, r3
 800792c:	2300      	movs	r3, #0
 800792e:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8007930:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007934:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800793c:	461a      	mov	r2, r3
 800793e:	2300      	movs	r3, #0
 8007940:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007942:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007946:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800794a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800794e:	461a      	mov	r2, r3
 8007950:	2300      	movs	r3, #0
 8007952:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007954:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007958:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800795c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8007960:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007964:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007968:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800796a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800796e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800797c:	88da      	ldrh	r2, [r3, #6]
 800797e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007982:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800798a:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800798c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007990:	f103 0317 	add.w	r3, r3, #23
 8007994:	781b      	ldrb	r3, [r3, #0]
}
 8007996:	4618      	mov	r0, r3
 8007998:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop

080079a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08a      	sub	sp, #40	@ 0x28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f7ff fc57 	bl	8007270 <validate>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <f_write+0x2c>
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	e21e      	b.n	8007e0e <f_write+0x46a>
	if (fp->err)							/* Check error */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079d6:	79db      	ldrb	r3, [r3, #7]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079e2:	79db      	ldrb	r3, [r3, #7]
 80079e4:	e213      	b.n	8007e0e <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ec:	799b      	ldrb	r3, [r3, #6]
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80079f6:	2307      	movs	r3, #7
 80079f8:	e209      	b.n	8007e0e <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	441a      	add	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	f080 81d9 	bcs.w	8007dc6 <f_write+0x422>
 8007a14:	2300      	movs	r3, #0
 8007a16:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007a18:	e1d5      	b.n	8007dc6 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a28:	6812      	ldr	r2, [r2, #0]
 8007a2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a2e:	8952      	ldrh	r2, [r2, #10]
 8007a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a34:	fb01 f202 	mul.w	r2, r1, r2
 8007a38:	1a9b      	subs	r3, r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f040 8169 	bne.w	8007d12 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a54:	8952      	ldrh	r2, [r2, #10]
 8007a56:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a68:	789b      	ldrb	r3, [r3, #2]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	4013      	ands	r3, r2
 8007a70:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007a72:	7dbb      	ldrb	r3, [r7, #22]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d15f      	bne.n	8007b38 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d111      	bne.n	8007aa8 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d126      	bne.n	8007ae2 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd feac 	bl	80057fc <create_chain>
 8007aa4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007aa6:	e01c      	b.n	8007ae2 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d009      	beq.n	8007ac8 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	4619      	mov	r1, r3
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7fd ff44 	bl	800594c <clmt_clust>
 8007ac4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ac6:	e00c      	b.n	8007ae2 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4610      	mov	r0, r2
 8007adc:	f7fd fe8e 	bl	80057fc <create_chain>
 8007ae0:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8173 	beq.w	8007dd0 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d106      	bne.n	8007afe <f_write+0x15a>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007af6:	2202      	movs	r2, #2
 8007af8:	71da      	strb	r2, [r3, #7]
 8007afa:	2302      	movs	r3, #2
 8007afc:	e187      	b.n	8007e0e <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b04:	d106      	bne.n	8007b14 <f_write+0x170>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	71da      	strb	r2, [r3, #7]
 8007b10:	2301      	movs	r3, #1
 8007b12:	e17c      	b.n	8007e0e <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1e:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d105      	bne.n	8007b38 <f_write+0x194>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b32:	461a      	mov	r2, r3
 8007b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b36:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b3e:	799b      	ldrb	r3, [r3, #6]
 8007b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d023      	beq.n	8007b90 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b54:	7858      	ldrb	r0, [r3, #1]
 8007b56:	68f9      	ldr	r1, [r7, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b5e:	699a      	ldr	r2, [r3, #24]
 8007b60:	2301      	movs	r3, #1
 8007b62:	f7fc ffc1 	bl	8004ae8 <disk_write>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d006      	beq.n	8007b7a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b72:	2201      	movs	r2, #1
 8007b74:	71da      	strb	r2, [r3, #7]
 8007b76:	2301      	movs	r3, #1
 8007b78:	e149      	b.n	8007e0e <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b80:	799b      	ldrb	r3, [r3, #6]
 8007b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b8e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	f7fd fb57 	bl	8005256 <clust2sect>
 8007ba8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <f_write+0x21a>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	71da      	strb	r2, [r3, #7]
 8007bba:	2302      	movs	r3, #2
 8007bbc:	e127      	b.n	8007e0e <f_write+0x46a>
			sect += csect;
 8007bbe:	7dbb      	ldrb	r3, [r7, #22]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bd2:	895b      	ldrh	r3, [r3, #10]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bdc:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d069      	beq.n	8007cb8 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007be4:	7dba      	ldrb	r2, [r7, #22]
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	4413      	add	r3, r2
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bf6:	7892      	ldrb	r2, [r2, #2]
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d90a      	bls.n	8007c12 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c08:	789b      	ldrb	r3, [r3, #2]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	7dbb      	ldrb	r3, [r7, #22]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c1e:	7858      	ldrb	r0, [r3, #1]
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	69b9      	ldr	r1, [r7, #24]
 8007c26:	f7fc ff5f 	bl	8004ae8 <disk_write>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d006      	beq.n	8007c3e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c36:	2201      	movs	r2, #1
 8007c38:	71da      	strb	r2, [r3, #7]
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e0e7      	b.n	8007e0e <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d926      	bls.n	8007c9e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007c6a:	8952      	ldrh	r2, [r2, #10]
 8007c6c:	fb02 f303 	mul.w	r3, r2, r3
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	18d1      	adds	r1, r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c80:	895b      	ldrh	r3, [r3, #10]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f7fc ff6e 	bl	8004b64 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c8e:	799b      	ldrb	r3, [r3, #6]
 8007c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c9c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007caa:	895b      	ldrh	r3, [r3, #10]
 8007cac:	461a      	mov	r2, r3
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	fb02 f303 	mul.w	r3, r2, r3
 8007cb4:	623b      	str	r3, [r7, #32]
				continue;
 8007cb6:	e06e      	b.n	8007d96 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d01f      	beq.n	8007d06 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d215      	bcs.n	8007d06 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ce6:	7858      	ldrb	r0, [r3, #1]
 8007ce8:	68f9      	ldr	r1, [r7, #12]
 8007cea:	2301      	movs	r3, #1
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	f7fc fedb 	bl	8004aa8 <disk_read>
 8007cf2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d006      	beq.n	8007d06 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cfe:	2201      	movs	r2, #1
 8007d00:	71da      	strb	r2, [r3, #7]
 8007d02:	2301      	movs	r3, #1
 8007d04:	e083      	b.n	8007e0e <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d1e:	895b      	ldrh	r3, [r3, #10]
 8007d20:	4618      	mov	r0, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d30:	6812      	ldr	r2, [r2, #0]
 8007d32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d36:	8952      	ldrh	r2, [r2, #10]
 8007d38:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d3c:	fb01 f202 	mul.w	r2, r1, r2
 8007d40:	1a9b      	subs	r3, r3, r2
 8007d42:	1ac3      	subs	r3, r0, r3
 8007d44:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007d46:	6a3a      	ldr	r2, [r7, #32]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d901      	bls.n	8007d52 <f_write+0x3ae>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d60:	6812      	ldr	r2, [r2, #0]
 8007d62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d66:	8952      	ldrh	r2, [r2, #10]
 8007d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d6c:	fb01 f202 	mul.w	r2, r1, r2
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	6a3a      	ldr	r2, [r7, #32]
 8007d78:	69b9      	ldr	r1, [r7, #24]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fc fef2 	bl	8004b64 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d86:	799b      	ldrb	r3, [r3, #6]
 8007d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d94:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	4413      	add	r3, r2
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007db0:	6093      	str	r3, [r2, #8]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	441a      	add	r2, r3
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f47f ae26 	bne.w	8007a1a <f_write+0x76>
 8007dce:	e000      	b.n	8007dd2 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007dd0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dd8:	689a      	ldr	r2, [r3, #8]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d907      	bls.n	8007df6 <f_write+0x452>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007df4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dfc:	799b      	ldrb	r3, [r3, #6]
 8007dfe:	f043 0320 	orr.w	r3, r3, #32
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e0a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3728      	adds	r7, #40	@ 0x28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b086      	sub	sp, #24
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff fa26 	bl	8007270 <validate>
 8007e24:	4603      	mov	r3, r0
 8007e26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f040 80bc 	bne.w	8007fa8 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e36:	799b      	ldrb	r3, [r3, #6]
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 80b3 	beq.w	8007fa8 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e48:	799b      	ldrb	r3, [r3, #6]
 8007e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d01e      	beq.n	8007e90 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e5e:	7858      	ldrb	r0, [r3, #1]
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f7fc fe3c 	bl	8004ae8 <disk_write>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007e76:	2301      	movs	r3, #1
 8007e78:	e097      	b.n	8007faa <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e80:	799b      	ldrb	r3, [r3, #6]
 8007e82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e8e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fd f8e6 	bl	8005074 <move_window>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d17a      	bne.n	8007fa8 <f_sync+0x192>
				dir = fp->dir_ptr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	330b      	adds	r3, #11
 8007ec0:	781a      	ldrb	r2, [r3, #0]
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	330b      	adds	r3, #11
 8007ec6:	f042 0220 	orr.w	r2, r2, #32
 8007eca:	b2d2      	uxtb	r2, r2
 8007ecc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	331c      	adds	r3, #28
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	331d      	adds	r3, #29
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	0c1a      	lsrs	r2, r3, #16
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	331e      	adds	r3, #30
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	701a      	strb	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	0e1a      	lsrs	r2, r3, #24
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	331f      	adds	r3, #31
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	4619      	mov	r1, r3
 8007f22:	6938      	ldr	r0, [r7, #16]
 8007f24:	f7fd ffe6 	bl	8005ef4 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007f28:	f7fc fd1c 	bl	8004964 <get_fattime>
 8007f2c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	3316      	adds	r3, #22
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	701a      	strb	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	0a1b      	lsrs	r3, r3, #8
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	3317      	adds	r3, #23
 8007f44:	b2d2      	uxtb	r2, r2
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	0c1a      	lsrs	r2, r3, #16
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	3318      	adds	r3, #24
 8007f50:	b2d2      	uxtb	r2, r2
 8007f52:	701a      	strb	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	0e1a      	lsrs	r2, r3, #24
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	3319      	adds	r3, #25
 8007f5c:	b2d2      	uxtb	r2, r2
 8007f5e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	3312      	adds	r3, #18
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	3313      	adds	r3, #19
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f76:	799b      	ldrb	r3, [r3, #6]
 8007f78:	f023 0320 	bic.w	r3, r3, #32
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f84:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f92:	2201      	movs	r2, #1
 8007f94:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fd f89a 	bl	80050d8 <sync_fs>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff ff2b 	bl	8007e16 <f_sync>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d119      	bne.n	8007ffe <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff f950 	bl	8007270 <validate>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d111      	bne.n	8007ffe <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fc ff86 	bl	8004ef4 <dec_lock>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d105      	bne.n	8007ffe <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b090      	sub	sp, #64	@ 0x40
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff f92c 	bl	8007270 <validate>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800801e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <f_lseek+0x24>
 8008026:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800802a:	e2da      	b.n	80085e2 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008032:	79db      	ldrb	r3, [r3, #7]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800803e:	79db      	ldrb	r3, [r3, #7]
 8008040:	e2cf      	b.n	80085e2 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8124 	beq.w	8008298 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008056:	d16c      	bne.n	8008132 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800805e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008060:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008064:	1d1a      	adds	r2, r3, #4
 8008066:	627a      	str	r2, [r7, #36]	@ 0x24
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	2302      	movs	r3, #2
 800806e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800807a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807c:	2b00      	cmp	r3, #0
 800807e:	d046      	beq.n	800810e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	613b      	str	r3, [r7, #16]
 8008084:	2300      	movs	r3, #0
 8008086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808a:	3302      	adds	r3, #2
 800808c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008094:	3301      	adds	r3, #1
 8008096:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fd f8fb 	bl	800529e <get_fat>
 80080a8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80080aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d806      	bhi.n	80080be <f_lseek+0xb6>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080b6:	2202      	movs	r2, #2
 80080b8:	71da      	strb	r2, [r3, #7]
 80080ba:	2302      	movs	r3, #2
 80080bc:	e291      	b.n	80085e2 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80080be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c4:	d106      	bne.n	80080d4 <f_lseek+0xcc>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080cc:	2201      	movs	r2, #1
 80080ce:	71da      	strb	r2, [r3, #7]
 80080d0:	2301      	movs	r3, #1
 80080d2:	e286      	b.n	80085e2 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3301      	adds	r3, #1
 80080d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080da:	429a      	cmp	r2, r3
 80080dc:	d0d7      	beq.n	800808e <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80080de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d809      	bhi.n	80080fa <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 80080e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e8:	1d1a      	adds	r2, r3, #4
 80080ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80080ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	1d1a      	adds	r2, r3, #4
 80080f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800810a:	429a      	cmp	r2, r3
 800810c:	d3b8      	bcc.n	8008080 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008118:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800811a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	429a      	cmp	r2, r3
 8008120:	d803      	bhi.n	800812a <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8008122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	e259      	b.n	80085de <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800812a:	2311      	movs	r3, #17
 800812c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008130:	e255      	b.n	80085de <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d904      	bls.n	800814a <f_lseek+0x142>
				ofs = fp->fsize;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008150:	461a      	mov	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8240 	beq.w	80085de <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	3b01      	subs	r3, #1
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7fd fbf1 	bl	800594c <clmt_clust>
 800816a:	4602      	mov	r2, r0
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008172:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f7fd f865 	bl	8005256 <clust2sect>
 800818c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d106      	bne.n	80081a2 <f_lseek+0x19a>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800819a:	2202      	movs	r2, #2
 800819c:	71da      	strb	r2, [r3, #7]
 800819e:	2302      	movs	r3, #2
 80081a0:	e21f      	b.n	80085e2 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081ac:	6812      	ldr	r2, [r2, #0]
 80081ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081b2:	8952      	ldrh	r2, [r2, #10]
 80081b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081be:	6812      	ldr	r2, [r2, #0]
 80081c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081c4:	7892      	ldrb	r2, [r2, #2]
 80081c6:	3a01      	subs	r2, #1
 80081c8:	4013      	ands	r3, r2
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	4413      	add	r3, r2
 80081ce:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081de:	6812      	ldr	r2, [r2, #0]
 80081e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081e4:	8952      	ldrh	r2, [r2, #10]
 80081e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80081ea:	fb01 f202 	mul.w	r2, r1, r2
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 81f4 	beq.w	80085de <f_lseek+0x5d6>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	429a      	cmp	r2, r3
 8008202:	f000 81ec 	beq.w	80085de <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800820c:	799b      	ldrb	r3, [r3, #6]
 800820e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d023      	beq.n	800825e <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008222:	7858      	ldrb	r0, [r3, #1]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	2301      	movs	r3, #1
 8008230:	f7fc fc5a 	bl	8004ae8 <disk_write>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d006      	beq.n	8008248 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008240:	2201      	movs	r2, #1
 8008242:	71da      	strb	r2, [r3, #7]
 8008244:	2301      	movs	r3, #1
 8008246:	e1cc      	b.n	80085e2 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800824e:	799b      	ldrb	r3, [r3, #6]
 8008250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008254:	b2da      	uxtb	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800825c:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800826a:	7858      	ldrb	r0, [r3, #1]
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	2301      	movs	r3, #1
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	f7fc fc19 	bl	8004aa8 <disk_read>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d006      	beq.n	800828a <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008282:	2201      	movs	r2, #1
 8008284:	71da      	strb	r2, [r3, #7]
 8008286:	2301      	movs	r3, #1
 8008288:	e1ab      	b.n	80085e2 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008290:	461a      	mov	r2, r3
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	6193      	str	r3, [r2, #24]
 8008296:	e1a2      	b.n	80085de <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d90c      	bls.n	80082c0 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ac:	799b      	ldrb	r3, [r3, #6]
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d104      	bne.n	80082c0 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082d4:	461a      	mov	r2, r3
 80082d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d8:	6093      	str	r3, [r2, #8]
		if (ofs) {
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 8100 	beq.w	80084e2 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ee:	789b      	ldrb	r3, [r3, #2]
 80082f0:	461a      	mov	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082fe:	895b      	ldrh	r3, [r3, #10]
 8008300:	fb02 f303 	mul.w	r3, r2, r3
 8008304:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d021      	beq.n	8008350 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	1e5a      	subs	r2, r3, #1
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	fbb2 f2f3 	udiv	r2, r2, r3
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	1e59      	subs	r1, r3, #1
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008320:	429a      	cmp	r2, r3
 8008322:	d315      	bcc.n	8008350 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	1e5a      	subs	r2, r3, #1
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	425b      	negs	r3, r3
 800832c:	4013      	ands	r3, r2
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008334:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800834e:	e031      	b.n	80083b4 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	d123      	bne.n	80083a8 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2100      	movs	r1, #0
 800836a:	4618      	mov	r0, r3
 800836c:	f7fd fa46 	bl	80057fc <create_chain>
 8008370:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008374:	2b01      	cmp	r3, #1
 8008376:	d106      	bne.n	8008386 <f_lseek+0x37e>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800837e:	2202      	movs	r2, #2
 8008380:	71da      	strb	r2, [r3, #7]
 8008382:	2302      	movs	r3, #2
 8008384:	e12d      	b.n	80085e2 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838c:	d106      	bne.n	800839c <f_lseek+0x394>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008394:	2201      	movs	r2, #1
 8008396:	71da      	strb	r2, [r3, #7]
 8008398:	2301      	movs	r3, #1
 800839a:	e122      	b.n	80085e2 <f_lseek+0x5da>
					fp->sclust = clst;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083a2:	461a      	mov	r2, r3
 80083a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a6:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083ae:	461a      	mov	r2, r3
 80083b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b2:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 80083b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 8093 	beq.w	80084e2 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 80083bc:	e052      	b.n	8008464 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083c4:	799b      	ldrb	r3, [r3, #6]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00e      	beq.n	80083ec <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fd fa0f 	bl	80057fc <create_chain>
 80083de:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80083e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10b      	bne.n	80083fe <f_lseek+0x3f6>
							ofs = bcs; break;
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	603b      	str	r3, [r7, #0]
 80083ea:	e03f      	b.n	800846c <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fc ff51 	bl	800529e <get_fat>
 80083fc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008404:	d106      	bne.n	8008414 <f_lseek+0x40c>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800840c:	2201      	movs	r2, #1
 800840e:	71da      	strb	r2, [r3, #7]
 8008410:	2301      	movs	r3, #1
 8008412:	e0e6      	b.n	80085e2 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008416:	2b01      	cmp	r3, #1
 8008418:	d909      	bls.n	800842e <f_lseek+0x426>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800842a:	429a      	cmp	r2, r3
 800842c:	d306      	bcc.n	800843c <f_lseek+0x434>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008434:	2202      	movs	r2, #2
 8008436:	71da      	strb	r2, [r3, #7]
 8008438:	2302      	movs	r3, #2
 800843a:	e0d2      	b.n	80085e2 <f_lseek+0x5da>
					fp->clust = clst;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008442:	461a      	mov	r2, r3
 8008444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008446:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800845a:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	429a      	cmp	r2, r3
 800846a:	d8a8      	bhi.n	80083be <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	4413      	add	r3, r2
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800847e:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800848c:	895b      	ldrh	r3, [r3, #10]
 800848e:	461a      	mov	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	fbb3 f1f2 	udiv	r1, r3, r2
 8008496:	fb01 f202 	mul.w	r2, r1, r2
 800849a:	1a9b      	subs	r3, r3, r2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d020      	beq.n	80084e2 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fc fed3 	bl	8005256 <clust2sect>
 80084b0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80084b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d106      	bne.n	80084c6 <f_lseek+0x4be>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084be:	2202      	movs	r2, #2
 80084c0:	71da      	strb	r2, [r3, #7]
 80084c2:	2302      	movs	r3, #2
 80084c4:	e08d      	b.n	80085e2 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084d2:	895b      	ldrh	r3, [r3, #10]
 80084d4:	461a      	mov	r2, r3
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084de:	4413      	add	r3, r2
 80084e0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80084f0:	6812      	ldr	r2, [r2, #0]
 80084f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80084f6:	8952      	ldrh	r2, [r2, #10]
 80084f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80084fc:	fb01 f202 	mul.w	r2, r1, r2
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d04e      	beq.n	80085a4 <f_lseek+0x59c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008510:	429a      	cmp	r2, r3
 8008512:	d047      	beq.n	80085a4 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800851a:	799b      	ldrb	r3, [r3, #6]
 800851c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	d023      	beq.n	800856c <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008530:	7858      	ldrb	r0, [r3, #1]
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800853a:	699a      	ldr	r2, [r3, #24]
 800853c:	2301      	movs	r3, #1
 800853e:	f7fc fad3 	bl	8004ae8 <disk_write>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d006      	beq.n	8008556 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800854e:	2201      	movs	r2, #1
 8008550:	71da      	strb	r2, [r3, #7]
 8008552:	2301      	movs	r3, #1
 8008554:	e045      	b.n	80085e2 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800855c:	799b      	ldrb	r3, [r3, #6]
 800855e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008562:	b2da      	uxtb	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800856a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008578:	7858      	ldrb	r0, [r3, #1]
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	2301      	movs	r3, #1
 800857e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008580:	f7fc fa92 	bl	8004aa8 <disk_read>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d006      	beq.n	8008598 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008590:	2201      	movs	r2, #1
 8008592:	71da      	strb	r2, [r3, #7]
 8008594:	2301      	movs	r3, #1
 8008596:	e024      	b.n	80085e2 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800859e:	461a      	mov	r2, r3
 80085a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a2:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d912      	bls.n	80085de <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80085c6:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ce:	799b      	ldrb	r3, [r3, #6]
 80085d0:	f043 0320 	orr.w	r3, r3, #32
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085dc:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80085de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3740      	adds	r7, #64	@ 0x40
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80085fa:	2301      	movs	r3, #1
 80085fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008602:	4b1e      	ldr	r3, [pc, #120]	@ (800867c <FATFS_LinkDriverEx+0x90>)
 8008604:	7a5b      	ldrb	r3, [r3, #9]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b01      	cmp	r3, #1
 800860a:	d831      	bhi.n	8008670 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800860c:	4b1b      	ldr	r3, [pc, #108]	@ (800867c <FATFS_LinkDriverEx+0x90>)
 800860e:	7a5b      	ldrb	r3, [r3, #9]
 8008610:	b2db      	uxtb	r3, r3
 8008612:	461a      	mov	r2, r3
 8008614:	4b19      	ldr	r3, [pc, #100]	@ (800867c <FATFS_LinkDriverEx+0x90>)
 8008616:	2100      	movs	r1, #0
 8008618:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800861a:	4b18      	ldr	r3, [pc, #96]	@ (800867c <FATFS_LinkDriverEx+0x90>)
 800861c:	7a5b      	ldrb	r3, [r3, #9]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4a16      	ldr	r2, [pc, #88]	@ (800867c <FATFS_LinkDriverEx+0x90>)
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800862a:	4b14      	ldr	r3, [pc, #80]	@ (800867c <FATFS_LinkDriverEx+0x90>)
 800862c:	7a5b      	ldrb	r3, [r3, #9]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	461a      	mov	r2, r3
 8008632:	4b12      	ldr	r3, [pc, #72]	@ (800867c <FATFS_LinkDriverEx+0x90>)
 8008634:	4413      	add	r3, r2
 8008636:	79fa      	ldrb	r2, [r7, #7]
 8008638:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800863a:	4b10      	ldr	r3, [pc, #64]	@ (800867c <FATFS_LinkDriverEx+0x90>)
 800863c:	7a5b      	ldrb	r3, [r3, #9]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	b2d1      	uxtb	r1, r2
 8008644:	4a0d      	ldr	r2, [pc, #52]	@ (800867c <FATFS_LinkDriverEx+0x90>)
 8008646:	7251      	strb	r1, [r2, #9]
 8008648:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800864a:	7dbb      	ldrb	r3, [r7, #22]
 800864c:	3330      	adds	r3, #48	@ 0x30
 800864e:	b2da      	uxtb	r2, r3
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	3301      	adds	r3, #1
 8008658:	223a      	movs	r2, #58	@ 0x3a
 800865a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	3302      	adds	r3, #2
 8008660:	222f      	movs	r2, #47	@ 0x2f
 8008662:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	3303      	adds	r3, #3
 8008668:	2200      	movs	r2, #0
 800866a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008670:	7dfb      	ldrb	r3, [r7, #23]
}
 8008672:	4618      	mov	r0, r3
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr
 800867c:	20002604 	.word	0x20002604

08008680 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800868a:	2200      	movs	r2, #0
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff ffac 	bl	80085ec <FATFS_LinkDriverEx>
 8008694:	4603      	mov	r3, r0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	6039      	str	r1, [r7, #0]
 80086aa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80086b0:	d802      	bhi.n	80086b8 <ff_convert+0x18>
		c = chr;
 80086b2:	88fb      	ldrh	r3, [r7, #6]
 80086b4:	81fb      	strh	r3, [r7, #14]
 80086b6:	e025      	b.n	8008704 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00b      	beq.n	80086d6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80086be:	88fb      	ldrh	r3, [r7, #6]
 80086c0:	2bff      	cmp	r3, #255	@ 0xff
 80086c2:	d805      	bhi.n	80086d0 <ff_convert+0x30>
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	3b80      	subs	r3, #128	@ 0x80
 80086c8:	4a11      	ldr	r2, [pc, #68]	@ (8008710 <ff_convert+0x70>)
 80086ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ce:	e000      	b.n	80086d2 <ff_convert+0x32>
 80086d0:	2300      	movs	r3, #0
 80086d2:	81fb      	strh	r3, [r7, #14]
 80086d4:	e016      	b.n	8008704 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80086d6:	2300      	movs	r3, #0
 80086d8:	81fb      	strh	r3, [r7, #14]
 80086da:	e009      	b.n	80086f0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80086dc:	89fb      	ldrh	r3, [r7, #14]
 80086de:	4a0c      	ldr	r2, [pc, #48]	@ (8008710 <ff_convert+0x70>)
 80086e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086e4:	88fa      	ldrh	r2, [r7, #6]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d006      	beq.n	80086f8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80086ea:	89fb      	ldrh	r3, [r7, #14]
 80086ec:	3301      	adds	r3, #1
 80086ee:	81fb      	strh	r3, [r7, #14]
 80086f0:	89fb      	ldrh	r3, [r7, #14]
 80086f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80086f4:	d9f2      	bls.n	80086dc <ff_convert+0x3c>
 80086f6:	e000      	b.n	80086fa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80086f8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80086fa:	89fb      	ldrh	r3, [r7, #14]
 80086fc:	3380      	adds	r3, #128	@ 0x80
 80086fe:	b29b      	uxth	r3, r3
 8008700:	b2db      	uxtb	r3, r3
 8008702:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008704:	89fb      	ldrh	r3, [r7, #14]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr
 8008710:	0800b5a8 	.word	0x0800b5a8

08008714 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	e002      	b.n	800872a <ff_wtoupper+0x16>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3301      	adds	r3, #1
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	4a0f      	ldr	r2, [pc, #60]	@ (8008768 <ff_wtoupper+0x54>)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d006      	beq.n	8008744 <ff_wtoupper+0x30>
 8008736:	4a0c      	ldr	r2, [pc, #48]	@ (8008768 <ff_wtoupper+0x54>)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800873e:	88fa      	ldrh	r2, [r7, #6]
 8008740:	429a      	cmp	r2, r3
 8008742:	d1ef      	bne.n	8008724 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008744:	4a08      	ldr	r2, [pc, #32]	@ (8008768 <ff_wtoupper+0x54>)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d004      	beq.n	800875a <ff_wtoupper+0x46>
 8008750:	4a06      	ldr	r2, [pc, #24]	@ (800876c <ff_wtoupper+0x58>)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008758:	e000      	b.n	800875c <ff_wtoupper+0x48>
 800875a:	88fb      	ldrh	r3, [r7, #6]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	0800b6a8 	.word	0x0800b6a8
 800876c:	0800b888 	.word	0x0800b888

08008770 <__cvt>:
 8008770:	2b00      	cmp	r3, #0
 8008772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008776:	461d      	mov	r5, r3
 8008778:	bfbb      	ittet	lt
 800877a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800877e:	461d      	movlt	r5, r3
 8008780:	2300      	movge	r3, #0
 8008782:	232d      	movlt	r3, #45	@ 0x2d
 8008784:	b088      	sub	sp, #32
 8008786:	4614      	mov	r4, r2
 8008788:	bfb8      	it	lt
 800878a:	4614      	movlt	r4, r2
 800878c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800878e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008790:	7013      	strb	r3, [r2, #0]
 8008792:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008794:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008798:	f023 0820 	bic.w	r8, r3, #32
 800879c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087a0:	d005      	beq.n	80087ae <__cvt+0x3e>
 80087a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80087a6:	d100      	bne.n	80087aa <__cvt+0x3a>
 80087a8:	3601      	adds	r6, #1
 80087aa:	2302      	movs	r3, #2
 80087ac:	e000      	b.n	80087b0 <__cvt+0x40>
 80087ae:	2303      	movs	r3, #3
 80087b0:	aa07      	add	r2, sp, #28
 80087b2:	9204      	str	r2, [sp, #16]
 80087b4:	aa06      	add	r2, sp, #24
 80087b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80087ba:	e9cd 3600 	strd	r3, r6, [sp]
 80087be:	4622      	mov	r2, r4
 80087c0:	462b      	mov	r3, r5
 80087c2:	f000 fe6d 	bl	80094a0 <_dtoa_r>
 80087c6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80087ca:	4607      	mov	r7, r0
 80087cc:	d119      	bne.n	8008802 <__cvt+0x92>
 80087ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087d0:	07db      	lsls	r3, r3, #31
 80087d2:	d50e      	bpl.n	80087f2 <__cvt+0x82>
 80087d4:	eb00 0906 	add.w	r9, r0, r6
 80087d8:	2200      	movs	r2, #0
 80087da:	2300      	movs	r3, #0
 80087dc:	4620      	mov	r0, r4
 80087de:	4629      	mov	r1, r5
 80087e0:	f7f8 f8e2 	bl	80009a8 <__aeabi_dcmpeq>
 80087e4:	b108      	cbz	r0, 80087ea <__cvt+0x7a>
 80087e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80087ea:	2230      	movs	r2, #48	@ 0x30
 80087ec:	9b07      	ldr	r3, [sp, #28]
 80087ee:	454b      	cmp	r3, r9
 80087f0:	d31e      	bcc.n	8008830 <__cvt+0xc0>
 80087f2:	4638      	mov	r0, r7
 80087f4:	9b07      	ldr	r3, [sp, #28]
 80087f6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80087f8:	1bdb      	subs	r3, r3, r7
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	b008      	add	sp, #32
 80087fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008802:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008806:	eb00 0906 	add.w	r9, r0, r6
 800880a:	d1e5      	bne.n	80087d8 <__cvt+0x68>
 800880c:	7803      	ldrb	r3, [r0, #0]
 800880e:	2b30      	cmp	r3, #48	@ 0x30
 8008810:	d10a      	bne.n	8008828 <__cvt+0xb8>
 8008812:	2200      	movs	r2, #0
 8008814:	2300      	movs	r3, #0
 8008816:	4620      	mov	r0, r4
 8008818:	4629      	mov	r1, r5
 800881a:	f7f8 f8c5 	bl	80009a8 <__aeabi_dcmpeq>
 800881e:	b918      	cbnz	r0, 8008828 <__cvt+0xb8>
 8008820:	f1c6 0601 	rsb	r6, r6, #1
 8008824:	f8ca 6000 	str.w	r6, [sl]
 8008828:	f8da 3000 	ldr.w	r3, [sl]
 800882c:	4499      	add	r9, r3
 800882e:	e7d3      	b.n	80087d8 <__cvt+0x68>
 8008830:	1c59      	adds	r1, r3, #1
 8008832:	9107      	str	r1, [sp, #28]
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	e7d9      	b.n	80087ec <__cvt+0x7c>

08008838 <__exponent>:
 8008838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800883a:	2900      	cmp	r1, #0
 800883c:	bfb6      	itet	lt
 800883e:	232d      	movlt	r3, #45	@ 0x2d
 8008840:	232b      	movge	r3, #43	@ 0x2b
 8008842:	4249      	neglt	r1, r1
 8008844:	2909      	cmp	r1, #9
 8008846:	7002      	strb	r2, [r0, #0]
 8008848:	7043      	strb	r3, [r0, #1]
 800884a:	dd29      	ble.n	80088a0 <__exponent+0x68>
 800884c:	f10d 0307 	add.w	r3, sp, #7
 8008850:	461d      	mov	r5, r3
 8008852:	270a      	movs	r7, #10
 8008854:	fbb1 f6f7 	udiv	r6, r1, r7
 8008858:	461a      	mov	r2, r3
 800885a:	fb07 1416 	mls	r4, r7, r6, r1
 800885e:	3430      	adds	r4, #48	@ 0x30
 8008860:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008864:	460c      	mov	r4, r1
 8008866:	2c63      	cmp	r4, #99	@ 0x63
 8008868:	4631      	mov	r1, r6
 800886a:	f103 33ff 	add.w	r3, r3, #4294967295
 800886e:	dcf1      	bgt.n	8008854 <__exponent+0x1c>
 8008870:	3130      	adds	r1, #48	@ 0x30
 8008872:	1e94      	subs	r4, r2, #2
 8008874:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008878:	4623      	mov	r3, r4
 800887a:	1c41      	adds	r1, r0, #1
 800887c:	42ab      	cmp	r3, r5
 800887e:	d30a      	bcc.n	8008896 <__exponent+0x5e>
 8008880:	f10d 0309 	add.w	r3, sp, #9
 8008884:	1a9b      	subs	r3, r3, r2
 8008886:	42ac      	cmp	r4, r5
 8008888:	bf88      	it	hi
 800888a:	2300      	movhi	r3, #0
 800888c:	3302      	adds	r3, #2
 800888e:	4403      	add	r3, r0
 8008890:	1a18      	subs	r0, r3, r0
 8008892:	b003      	add	sp, #12
 8008894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008896:	f813 6b01 	ldrb.w	r6, [r3], #1
 800889a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800889e:	e7ed      	b.n	800887c <__exponent+0x44>
 80088a0:	2330      	movs	r3, #48	@ 0x30
 80088a2:	3130      	adds	r1, #48	@ 0x30
 80088a4:	7083      	strb	r3, [r0, #2]
 80088a6:	70c1      	strb	r1, [r0, #3]
 80088a8:	1d03      	adds	r3, r0, #4
 80088aa:	e7f1      	b.n	8008890 <__exponent+0x58>

080088ac <_printf_float>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	b091      	sub	sp, #68	@ 0x44
 80088b2:	460c      	mov	r4, r1
 80088b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80088b8:	4616      	mov	r6, r2
 80088ba:	461f      	mov	r7, r3
 80088bc:	4605      	mov	r5, r0
 80088be:	f000 fce1 	bl	8009284 <_localeconv_r>
 80088c2:	6803      	ldr	r3, [r0, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	9308      	str	r3, [sp, #32]
 80088c8:	f7f7 fc42 	bl	8000150 <strlen>
 80088cc:	2300      	movs	r3, #0
 80088ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80088d0:	f8d8 3000 	ldr.w	r3, [r8]
 80088d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80088d6:	3307      	adds	r3, #7
 80088d8:	f023 0307 	bic.w	r3, r3, #7
 80088dc:	f103 0208 	add.w	r2, r3, #8
 80088e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088e4:	f8d4 b000 	ldr.w	fp, [r4]
 80088e8:	f8c8 2000 	str.w	r2, [r8]
 80088ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80088f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088f6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80088fa:	f04f 32ff 	mov.w	r2, #4294967295
 80088fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008902:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008906:	4b9c      	ldr	r3, [pc, #624]	@ (8008b78 <_printf_float+0x2cc>)
 8008908:	f7f8 f880 	bl	8000a0c <__aeabi_dcmpun>
 800890c:	bb70      	cbnz	r0, 800896c <_printf_float+0xc0>
 800890e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008912:	f04f 32ff 	mov.w	r2, #4294967295
 8008916:	4b98      	ldr	r3, [pc, #608]	@ (8008b78 <_printf_float+0x2cc>)
 8008918:	f7f8 f85a 	bl	80009d0 <__aeabi_dcmple>
 800891c:	bb30      	cbnz	r0, 800896c <_printf_float+0xc0>
 800891e:	2200      	movs	r2, #0
 8008920:	2300      	movs	r3, #0
 8008922:	4640      	mov	r0, r8
 8008924:	4649      	mov	r1, r9
 8008926:	f7f8 f849 	bl	80009bc <__aeabi_dcmplt>
 800892a:	b110      	cbz	r0, 8008932 <_printf_float+0x86>
 800892c:	232d      	movs	r3, #45	@ 0x2d
 800892e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008932:	4a92      	ldr	r2, [pc, #584]	@ (8008b7c <_printf_float+0x2d0>)
 8008934:	4b92      	ldr	r3, [pc, #584]	@ (8008b80 <_printf_float+0x2d4>)
 8008936:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800893a:	bf94      	ite	ls
 800893c:	4690      	movls	r8, r2
 800893e:	4698      	movhi	r8, r3
 8008940:	2303      	movs	r3, #3
 8008942:	f04f 0900 	mov.w	r9, #0
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	f02b 0304 	bic.w	r3, fp, #4
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	4633      	mov	r3, r6
 8008950:	4621      	mov	r1, r4
 8008952:	4628      	mov	r0, r5
 8008954:	9700      	str	r7, [sp, #0]
 8008956:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008958:	f000 f9d4 	bl	8008d04 <_printf_common>
 800895c:	3001      	adds	r0, #1
 800895e:	f040 8090 	bne.w	8008a82 <_printf_float+0x1d6>
 8008962:	f04f 30ff 	mov.w	r0, #4294967295
 8008966:	b011      	add	sp, #68	@ 0x44
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	4642      	mov	r2, r8
 800896e:	464b      	mov	r3, r9
 8008970:	4640      	mov	r0, r8
 8008972:	4649      	mov	r1, r9
 8008974:	f7f8 f84a 	bl	8000a0c <__aeabi_dcmpun>
 8008978:	b148      	cbz	r0, 800898e <_printf_float+0xe2>
 800897a:	464b      	mov	r3, r9
 800897c:	2b00      	cmp	r3, #0
 800897e:	bfb8      	it	lt
 8008980:	232d      	movlt	r3, #45	@ 0x2d
 8008982:	4a80      	ldr	r2, [pc, #512]	@ (8008b84 <_printf_float+0x2d8>)
 8008984:	bfb8      	it	lt
 8008986:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800898a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b88 <_printf_float+0x2dc>)
 800898c:	e7d3      	b.n	8008936 <_printf_float+0x8a>
 800898e:	6863      	ldr	r3, [r4, #4]
 8008990:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	d13f      	bne.n	8008a18 <_printf_float+0x16c>
 8008998:	2306      	movs	r3, #6
 800899a:	6063      	str	r3, [r4, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	9206      	str	r2, [sp, #24]
 80089a6:	aa0e      	add	r2, sp, #56	@ 0x38
 80089a8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80089ac:	aa0d      	add	r2, sp, #52	@ 0x34
 80089ae:	9203      	str	r2, [sp, #12]
 80089b0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80089b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80089b8:	6863      	ldr	r3, [r4, #4]
 80089ba:	4642      	mov	r2, r8
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	4628      	mov	r0, r5
 80089c0:	464b      	mov	r3, r9
 80089c2:	910a      	str	r1, [sp, #40]	@ 0x28
 80089c4:	f7ff fed4 	bl	8008770 <__cvt>
 80089c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089ca:	4680      	mov	r8, r0
 80089cc:	2947      	cmp	r1, #71	@ 0x47
 80089ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80089d0:	d128      	bne.n	8008a24 <_printf_float+0x178>
 80089d2:	1cc8      	adds	r0, r1, #3
 80089d4:	db02      	blt.n	80089dc <_printf_float+0x130>
 80089d6:	6863      	ldr	r3, [r4, #4]
 80089d8:	4299      	cmp	r1, r3
 80089da:	dd40      	ble.n	8008a5e <_printf_float+0x1b2>
 80089dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80089e0:	fa5f fa8a 	uxtb.w	sl, sl
 80089e4:	4652      	mov	r2, sl
 80089e6:	3901      	subs	r1, #1
 80089e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80089ec:	910d      	str	r1, [sp, #52]	@ 0x34
 80089ee:	f7ff ff23 	bl	8008838 <__exponent>
 80089f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089f4:	4681      	mov	r9, r0
 80089f6:	1813      	adds	r3, r2, r0
 80089f8:	2a01      	cmp	r2, #1
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	dc02      	bgt.n	8008a04 <_printf_float+0x158>
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	07d2      	lsls	r2, r2, #31
 8008a02:	d501      	bpl.n	8008a08 <_printf_float+0x15c>
 8008a04:	3301      	adds	r3, #1
 8008a06:	6123      	str	r3, [r4, #16]
 8008a08:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d09e      	beq.n	800894e <_printf_float+0xa2>
 8008a10:	232d      	movs	r3, #45	@ 0x2d
 8008a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a16:	e79a      	b.n	800894e <_printf_float+0xa2>
 8008a18:	2947      	cmp	r1, #71	@ 0x47
 8008a1a:	d1bf      	bne.n	800899c <_printf_float+0xf0>
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1bd      	bne.n	800899c <_printf_float+0xf0>
 8008a20:	2301      	movs	r3, #1
 8008a22:	e7ba      	b.n	800899a <_printf_float+0xee>
 8008a24:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a28:	d9dc      	bls.n	80089e4 <_printf_float+0x138>
 8008a2a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a2e:	d118      	bne.n	8008a62 <_printf_float+0x1b6>
 8008a30:	2900      	cmp	r1, #0
 8008a32:	6863      	ldr	r3, [r4, #4]
 8008a34:	dd0b      	ble.n	8008a4e <_printf_float+0x1a2>
 8008a36:	6121      	str	r1, [r4, #16]
 8008a38:	b913      	cbnz	r3, 8008a40 <_printf_float+0x194>
 8008a3a:	6822      	ldr	r2, [r4, #0]
 8008a3c:	07d0      	lsls	r0, r2, #31
 8008a3e:	d502      	bpl.n	8008a46 <_printf_float+0x19a>
 8008a40:	3301      	adds	r3, #1
 8008a42:	440b      	add	r3, r1
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	f04f 0900 	mov.w	r9, #0
 8008a4a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a4c:	e7dc      	b.n	8008a08 <_printf_float+0x15c>
 8008a4e:	b913      	cbnz	r3, 8008a56 <_printf_float+0x1aa>
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	07d2      	lsls	r2, r2, #31
 8008a54:	d501      	bpl.n	8008a5a <_printf_float+0x1ae>
 8008a56:	3302      	adds	r3, #2
 8008a58:	e7f4      	b.n	8008a44 <_printf_float+0x198>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e7f2      	b.n	8008a44 <_printf_float+0x198>
 8008a5e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a64:	4299      	cmp	r1, r3
 8008a66:	db05      	blt.n	8008a74 <_printf_float+0x1c8>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	6121      	str	r1, [r4, #16]
 8008a6c:	07d8      	lsls	r0, r3, #31
 8008a6e:	d5ea      	bpl.n	8008a46 <_printf_float+0x19a>
 8008a70:	1c4b      	adds	r3, r1, #1
 8008a72:	e7e7      	b.n	8008a44 <_printf_float+0x198>
 8008a74:	2900      	cmp	r1, #0
 8008a76:	bfcc      	ite	gt
 8008a78:	2201      	movgt	r2, #1
 8008a7a:	f1c1 0202 	rsble	r2, r1, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	e7e0      	b.n	8008a44 <_printf_float+0x198>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	055a      	lsls	r2, r3, #21
 8008a86:	d407      	bmi.n	8008a98 <_printf_float+0x1ec>
 8008a88:	6923      	ldr	r3, [r4, #16]
 8008a8a:	4642      	mov	r2, r8
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4628      	mov	r0, r5
 8008a90:	47b8      	blx	r7
 8008a92:	3001      	adds	r0, #1
 8008a94:	d12b      	bne.n	8008aee <_printf_float+0x242>
 8008a96:	e764      	b.n	8008962 <_printf_float+0xb6>
 8008a98:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a9c:	f240 80dc 	bls.w	8008c58 <_printf_float+0x3ac>
 8008aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f7f7 ff7e 	bl	80009a8 <__aeabi_dcmpeq>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d033      	beq.n	8008b18 <_printf_float+0x26c>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	4a35      	ldr	r2, [pc, #212]	@ (8008b8c <_printf_float+0x2e0>)
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	f43f af51 	beq.w	8008962 <_printf_float+0xb6>
 8008ac0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008ac4:	4543      	cmp	r3, r8
 8008ac6:	db02      	blt.n	8008ace <_printf_float+0x222>
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	07d8      	lsls	r0, r3, #31
 8008acc:	d50f      	bpl.n	8008aee <_printf_float+0x242>
 8008ace:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f af42 	beq.w	8008962 <_printf_float+0xb6>
 8008ade:	f04f 0900 	mov.w	r9, #0
 8008ae2:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ae6:	f104 0a1a 	add.w	sl, r4, #26
 8008aea:	45c8      	cmp	r8, r9
 8008aec:	dc09      	bgt.n	8008b02 <_printf_float+0x256>
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	079b      	lsls	r3, r3, #30
 8008af2:	f100 8102 	bmi.w	8008cfa <_printf_float+0x44e>
 8008af6:	68e0      	ldr	r0, [r4, #12]
 8008af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008afa:	4298      	cmp	r0, r3
 8008afc:	bfb8      	it	lt
 8008afe:	4618      	movlt	r0, r3
 8008b00:	e731      	b.n	8008966 <_printf_float+0xba>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4652      	mov	r2, sl
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f af28 	beq.w	8008962 <_printf_float+0xb6>
 8008b12:	f109 0901 	add.w	r9, r9, #1
 8008b16:	e7e8      	b.n	8008aea <_printf_float+0x23e>
 8008b18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	dc38      	bgt.n	8008b90 <_printf_float+0x2e4>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4631      	mov	r1, r6
 8008b22:	4628      	mov	r0, r5
 8008b24:	4a19      	ldr	r2, [pc, #100]	@ (8008b8c <_printf_float+0x2e0>)
 8008b26:	47b8      	blx	r7
 8008b28:	3001      	adds	r0, #1
 8008b2a:	f43f af1a 	beq.w	8008962 <_printf_float+0xb6>
 8008b2e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008b32:	ea59 0303 	orrs.w	r3, r9, r3
 8008b36:	d102      	bne.n	8008b3e <_printf_float+0x292>
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	07d9      	lsls	r1, r3, #31
 8008b3c:	d5d7      	bpl.n	8008aee <_printf_float+0x242>
 8008b3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b42:	4631      	mov	r1, r6
 8008b44:	4628      	mov	r0, r5
 8008b46:	47b8      	blx	r7
 8008b48:	3001      	adds	r0, #1
 8008b4a:	f43f af0a 	beq.w	8008962 <_printf_float+0xb6>
 8008b4e:	f04f 0a00 	mov.w	sl, #0
 8008b52:	f104 0b1a 	add.w	fp, r4, #26
 8008b56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b58:	425b      	negs	r3, r3
 8008b5a:	4553      	cmp	r3, sl
 8008b5c:	dc01      	bgt.n	8008b62 <_printf_float+0x2b6>
 8008b5e:	464b      	mov	r3, r9
 8008b60:	e793      	b.n	8008a8a <_printf_float+0x1de>
 8008b62:	2301      	movs	r3, #1
 8008b64:	465a      	mov	r2, fp
 8008b66:	4631      	mov	r1, r6
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b8      	blx	r7
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f43f aef8 	beq.w	8008962 <_printf_float+0xb6>
 8008b72:	f10a 0a01 	add.w	sl, sl, #1
 8008b76:	e7ee      	b.n	8008b56 <_printf_float+0x2aa>
 8008b78:	7fefffff 	.word	0x7fefffff
 8008b7c:	0800ba68 	.word	0x0800ba68
 8008b80:	0800ba6c 	.word	0x0800ba6c
 8008b84:	0800ba70 	.word	0x0800ba70
 8008b88:	0800ba74 	.word	0x0800ba74
 8008b8c:	0800ba78 	.word	0x0800ba78
 8008b90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b92:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008b96:	4553      	cmp	r3, sl
 8008b98:	bfa8      	it	ge
 8008b9a:	4653      	movge	r3, sl
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	4699      	mov	r9, r3
 8008ba0:	dc36      	bgt.n	8008c10 <_printf_float+0x364>
 8008ba2:	f04f 0b00 	mov.w	fp, #0
 8008ba6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008baa:	f104 021a 	add.w	r2, r4, #26
 8008bae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008bb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bb2:	eba3 0309 	sub.w	r3, r3, r9
 8008bb6:	455b      	cmp	r3, fp
 8008bb8:	dc31      	bgt.n	8008c1e <_printf_float+0x372>
 8008bba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bbc:	459a      	cmp	sl, r3
 8008bbe:	dc3a      	bgt.n	8008c36 <_printf_float+0x38a>
 8008bc0:	6823      	ldr	r3, [r4, #0]
 8008bc2:	07da      	lsls	r2, r3, #31
 8008bc4:	d437      	bmi.n	8008c36 <_printf_float+0x38a>
 8008bc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bc8:	ebaa 0903 	sub.w	r9, sl, r3
 8008bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bce:	ebaa 0303 	sub.w	r3, sl, r3
 8008bd2:	4599      	cmp	r9, r3
 8008bd4:	bfa8      	it	ge
 8008bd6:	4699      	movge	r9, r3
 8008bd8:	f1b9 0f00 	cmp.w	r9, #0
 8008bdc:	dc33      	bgt.n	8008c46 <_printf_float+0x39a>
 8008bde:	f04f 0800 	mov.w	r8, #0
 8008be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008be6:	f104 0b1a 	add.w	fp, r4, #26
 8008bea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bec:	ebaa 0303 	sub.w	r3, sl, r3
 8008bf0:	eba3 0309 	sub.w	r3, r3, r9
 8008bf4:	4543      	cmp	r3, r8
 8008bf6:	f77f af7a 	ble.w	8008aee <_printf_float+0x242>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	465a      	mov	r2, fp
 8008bfe:	4631      	mov	r1, r6
 8008c00:	4628      	mov	r0, r5
 8008c02:	47b8      	blx	r7
 8008c04:	3001      	adds	r0, #1
 8008c06:	f43f aeac 	beq.w	8008962 <_printf_float+0xb6>
 8008c0a:	f108 0801 	add.w	r8, r8, #1
 8008c0e:	e7ec      	b.n	8008bea <_printf_float+0x33e>
 8008c10:	4642      	mov	r2, r8
 8008c12:	4631      	mov	r1, r6
 8008c14:	4628      	mov	r0, r5
 8008c16:	47b8      	blx	r7
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d1c2      	bne.n	8008ba2 <_printf_float+0x2f6>
 8008c1c:	e6a1      	b.n	8008962 <_printf_float+0xb6>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	920a      	str	r2, [sp, #40]	@ 0x28
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	f43f ae9a 	beq.w	8008962 <_printf_float+0xb6>
 8008c2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c30:	f10b 0b01 	add.w	fp, fp, #1
 8008c34:	e7bb      	b.n	8008bae <_printf_float+0x302>
 8008c36:	4631      	mov	r1, r6
 8008c38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	47b8      	blx	r7
 8008c40:	3001      	adds	r0, #1
 8008c42:	d1c0      	bne.n	8008bc6 <_printf_float+0x31a>
 8008c44:	e68d      	b.n	8008962 <_printf_float+0xb6>
 8008c46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c48:	464b      	mov	r3, r9
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	4442      	add	r2, r8
 8008c50:	47b8      	blx	r7
 8008c52:	3001      	adds	r0, #1
 8008c54:	d1c3      	bne.n	8008bde <_printf_float+0x332>
 8008c56:	e684      	b.n	8008962 <_printf_float+0xb6>
 8008c58:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008c5c:	f1ba 0f01 	cmp.w	sl, #1
 8008c60:	dc01      	bgt.n	8008c66 <_printf_float+0x3ba>
 8008c62:	07db      	lsls	r3, r3, #31
 8008c64:	d536      	bpl.n	8008cd4 <_printf_float+0x428>
 8008c66:	2301      	movs	r3, #1
 8008c68:	4642      	mov	r2, r8
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	47b8      	blx	r7
 8008c70:	3001      	adds	r0, #1
 8008c72:	f43f ae76 	beq.w	8008962 <_printf_float+0xb6>
 8008c76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	47b8      	blx	r7
 8008c80:	3001      	adds	r0, #1
 8008c82:	f43f ae6e 	beq.w	8008962 <_printf_float+0xb6>
 8008c86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c92:	f7f7 fe89 	bl	80009a8 <__aeabi_dcmpeq>
 8008c96:	b9c0      	cbnz	r0, 8008cca <_printf_float+0x41e>
 8008c98:	4653      	mov	r3, sl
 8008c9a:	f108 0201 	add.w	r2, r8, #1
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	47b8      	blx	r7
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d10c      	bne.n	8008cc2 <_printf_float+0x416>
 8008ca8:	e65b      	b.n	8008962 <_printf_float+0xb6>
 8008caa:	2301      	movs	r3, #1
 8008cac:	465a      	mov	r2, fp
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b8      	blx	r7
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	f43f ae54 	beq.w	8008962 <_printf_float+0xb6>
 8008cba:	f108 0801 	add.w	r8, r8, #1
 8008cbe:	45d0      	cmp	r8, sl
 8008cc0:	dbf3      	blt.n	8008caa <_printf_float+0x3fe>
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008cc8:	e6e0      	b.n	8008a8c <_printf_float+0x1e0>
 8008cca:	f04f 0800 	mov.w	r8, #0
 8008cce:	f104 0b1a 	add.w	fp, r4, #26
 8008cd2:	e7f4      	b.n	8008cbe <_printf_float+0x412>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	4642      	mov	r2, r8
 8008cd8:	e7e1      	b.n	8008c9e <_printf_float+0x3f2>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	464a      	mov	r2, r9
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f43f ae3c 	beq.w	8008962 <_printf_float+0xb6>
 8008cea:	f108 0801 	add.w	r8, r8, #1
 8008cee:	68e3      	ldr	r3, [r4, #12]
 8008cf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008cf2:	1a5b      	subs	r3, r3, r1
 8008cf4:	4543      	cmp	r3, r8
 8008cf6:	dcf0      	bgt.n	8008cda <_printf_float+0x42e>
 8008cf8:	e6fd      	b.n	8008af6 <_printf_float+0x24a>
 8008cfa:	f04f 0800 	mov.w	r8, #0
 8008cfe:	f104 0919 	add.w	r9, r4, #25
 8008d02:	e7f4      	b.n	8008cee <_printf_float+0x442>

08008d04 <_printf_common>:
 8008d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	4616      	mov	r6, r2
 8008d0a:	4698      	mov	r8, r3
 8008d0c:	688a      	ldr	r2, [r1, #8]
 8008d0e:	690b      	ldr	r3, [r1, #16]
 8008d10:	4607      	mov	r7, r0
 8008d12:	4293      	cmp	r3, r2
 8008d14:	bfb8      	it	lt
 8008d16:	4613      	movlt	r3, r2
 8008d18:	6033      	str	r3, [r6, #0]
 8008d1a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d1e:	460c      	mov	r4, r1
 8008d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d24:	b10a      	cbz	r2, 8008d2a <_printf_common+0x26>
 8008d26:	3301      	adds	r3, #1
 8008d28:	6033      	str	r3, [r6, #0]
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	0699      	lsls	r1, r3, #26
 8008d2e:	bf42      	ittt	mi
 8008d30:	6833      	ldrmi	r3, [r6, #0]
 8008d32:	3302      	addmi	r3, #2
 8008d34:	6033      	strmi	r3, [r6, #0]
 8008d36:	6825      	ldr	r5, [r4, #0]
 8008d38:	f015 0506 	ands.w	r5, r5, #6
 8008d3c:	d106      	bne.n	8008d4c <_printf_common+0x48>
 8008d3e:	f104 0a19 	add.w	sl, r4, #25
 8008d42:	68e3      	ldr	r3, [r4, #12]
 8008d44:	6832      	ldr	r2, [r6, #0]
 8008d46:	1a9b      	subs	r3, r3, r2
 8008d48:	42ab      	cmp	r3, r5
 8008d4a:	dc2b      	bgt.n	8008da4 <_printf_common+0xa0>
 8008d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	3b00      	subs	r3, #0
 8008d54:	bf18      	it	ne
 8008d56:	2301      	movne	r3, #1
 8008d58:	0692      	lsls	r2, r2, #26
 8008d5a:	d430      	bmi.n	8008dbe <_printf_common+0xba>
 8008d5c:	4641      	mov	r1, r8
 8008d5e:	4638      	mov	r0, r7
 8008d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d64:	47c8      	blx	r9
 8008d66:	3001      	adds	r0, #1
 8008d68:	d023      	beq.n	8008db2 <_printf_common+0xae>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	6922      	ldr	r2, [r4, #16]
 8008d6e:	f003 0306 	and.w	r3, r3, #6
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	bf14      	ite	ne
 8008d76:	2500      	movne	r5, #0
 8008d78:	6833      	ldreq	r3, [r6, #0]
 8008d7a:	f04f 0600 	mov.w	r6, #0
 8008d7e:	bf08      	it	eq
 8008d80:	68e5      	ldreq	r5, [r4, #12]
 8008d82:	f104 041a 	add.w	r4, r4, #26
 8008d86:	bf08      	it	eq
 8008d88:	1aed      	subeq	r5, r5, r3
 8008d8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008d8e:	bf08      	it	eq
 8008d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d94:	4293      	cmp	r3, r2
 8008d96:	bfc4      	itt	gt
 8008d98:	1a9b      	subgt	r3, r3, r2
 8008d9a:	18ed      	addgt	r5, r5, r3
 8008d9c:	42b5      	cmp	r5, r6
 8008d9e:	d11a      	bne.n	8008dd6 <_printf_common+0xd2>
 8008da0:	2000      	movs	r0, #0
 8008da2:	e008      	b.n	8008db6 <_printf_common+0xb2>
 8008da4:	2301      	movs	r3, #1
 8008da6:	4652      	mov	r2, sl
 8008da8:	4641      	mov	r1, r8
 8008daa:	4638      	mov	r0, r7
 8008dac:	47c8      	blx	r9
 8008dae:	3001      	adds	r0, #1
 8008db0:	d103      	bne.n	8008dba <_printf_common+0xb6>
 8008db2:	f04f 30ff 	mov.w	r0, #4294967295
 8008db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dba:	3501      	adds	r5, #1
 8008dbc:	e7c1      	b.n	8008d42 <_printf_common+0x3e>
 8008dbe:	2030      	movs	r0, #48	@ 0x30
 8008dc0:	18e1      	adds	r1, r4, r3
 8008dc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008dcc:	4422      	add	r2, r4
 8008dce:	3302      	adds	r3, #2
 8008dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dd4:	e7c2      	b.n	8008d5c <_printf_common+0x58>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4622      	mov	r2, r4
 8008dda:	4641      	mov	r1, r8
 8008ddc:	4638      	mov	r0, r7
 8008dde:	47c8      	blx	r9
 8008de0:	3001      	adds	r0, #1
 8008de2:	d0e6      	beq.n	8008db2 <_printf_common+0xae>
 8008de4:	3601      	adds	r6, #1
 8008de6:	e7d9      	b.n	8008d9c <_printf_common+0x98>

08008de8 <_printf_i>:
 8008de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dec:	7e0f      	ldrb	r7, [r1, #24]
 8008dee:	4691      	mov	r9, r2
 8008df0:	2f78      	cmp	r7, #120	@ 0x78
 8008df2:	4680      	mov	r8, r0
 8008df4:	460c      	mov	r4, r1
 8008df6:	469a      	mov	sl, r3
 8008df8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008dfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dfe:	d807      	bhi.n	8008e10 <_printf_i+0x28>
 8008e00:	2f62      	cmp	r7, #98	@ 0x62
 8008e02:	d80a      	bhi.n	8008e1a <_printf_i+0x32>
 8008e04:	2f00      	cmp	r7, #0
 8008e06:	f000 80d3 	beq.w	8008fb0 <_printf_i+0x1c8>
 8008e0a:	2f58      	cmp	r7, #88	@ 0x58
 8008e0c:	f000 80ba 	beq.w	8008f84 <_printf_i+0x19c>
 8008e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e18:	e03a      	b.n	8008e90 <_printf_i+0xa8>
 8008e1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e1e:	2b15      	cmp	r3, #21
 8008e20:	d8f6      	bhi.n	8008e10 <_printf_i+0x28>
 8008e22:	a101      	add	r1, pc, #4	@ (adr r1, 8008e28 <_printf_i+0x40>)
 8008e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e28:	08008e81 	.word	0x08008e81
 8008e2c:	08008e95 	.word	0x08008e95
 8008e30:	08008e11 	.word	0x08008e11
 8008e34:	08008e11 	.word	0x08008e11
 8008e38:	08008e11 	.word	0x08008e11
 8008e3c:	08008e11 	.word	0x08008e11
 8008e40:	08008e95 	.word	0x08008e95
 8008e44:	08008e11 	.word	0x08008e11
 8008e48:	08008e11 	.word	0x08008e11
 8008e4c:	08008e11 	.word	0x08008e11
 8008e50:	08008e11 	.word	0x08008e11
 8008e54:	08008f97 	.word	0x08008f97
 8008e58:	08008ebf 	.word	0x08008ebf
 8008e5c:	08008f51 	.word	0x08008f51
 8008e60:	08008e11 	.word	0x08008e11
 8008e64:	08008e11 	.word	0x08008e11
 8008e68:	08008fb9 	.word	0x08008fb9
 8008e6c:	08008e11 	.word	0x08008e11
 8008e70:	08008ebf 	.word	0x08008ebf
 8008e74:	08008e11 	.word	0x08008e11
 8008e78:	08008e11 	.word	0x08008e11
 8008e7c:	08008f59 	.word	0x08008f59
 8008e80:	6833      	ldr	r3, [r6, #0]
 8008e82:	1d1a      	adds	r2, r3, #4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6032      	str	r2, [r6, #0]
 8008e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e90:	2301      	movs	r3, #1
 8008e92:	e09e      	b.n	8008fd2 <_printf_i+0x1ea>
 8008e94:	6833      	ldr	r3, [r6, #0]
 8008e96:	6820      	ldr	r0, [r4, #0]
 8008e98:	1d19      	adds	r1, r3, #4
 8008e9a:	6031      	str	r1, [r6, #0]
 8008e9c:	0606      	lsls	r6, r0, #24
 8008e9e:	d501      	bpl.n	8008ea4 <_printf_i+0xbc>
 8008ea0:	681d      	ldr	r5, [r3, #0]
 8008ea2:	e003      	b.n	8008eac <_printf_i+0xc4>
 8008ea4:	0645      	lsls	r5, r0, #25
 8008ea6:	d5fb      	bpl.n	8008ea0 <_printf_i+0xb8>
 8008ea8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008eac:	2d00      	cmp	r5, #0
 8008eae:	da03      	bge.n	8008eb8 <_printf_i+0xd0>
 8008eb0:	232d      	movs	r3, #45	@ 0x2d
 8008eb2:	426d      	negs	r5, r5
 8008eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eb8:	230a      	movs	r3, #10
 8008eba:	4859      	ldr	r0, [pc, #356]	@ (8009020 <_printf_i+0x238>)
 8008ebc:	e011      	b.n	8008ee2 <_printf_i+0xfa>
 8008ebe:	6821      	ldr	r1, [r4, #0]
 8008ec0:	6833      	ldr	r3, [r6, #0]
 8008ec2:	0608      	lsls	r0, r1, #24
 8008ec4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ec8:	d402      	bmi.n	8008ed0 <_printf_i+0xe8>
 8008eca:	0649      	lsls	r1, r1, #25
 8008ecc:	bf48      	it	mi
 8008ece:	b2ad      	uxthmi	r5, r5
 8008ed0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ed2:	6033      	str	r3, [r6, #0]
 8008ed4:	bf14      	ite	ne
 8008ed6:	230a      	movne	r3, #10
 8008ed8:	2308      	moveq	r3, #8
 8008eda:	4851      	ldr	r0, [pc, #324]	@ (8009020 <_printf_i+0x238>)
 8008edc:	2100      	movs	r1, #0
 8008ede:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ee2:	6866      	ldr	r6, [r4, #4]
 8008ee4:	2e00      	cmp	r6, #0
 8008ee6:	bfa8      	it	ge
 8008ee8:	6821      	ldrge	r1, [r4, #0]
 8008eea:	60a6      	str	r6, [r4, #8]
 8008eec:	bfa4      	itt	ge
 8008eee:	f021 0104 	bicge.w	r1, r1, #4
 8008ef2:	6021      	strge	r1, [r4, #0]
 8008ef4:	b90d      	cbnz	r5, 8008efa <_printf_i+0x112>
 8008ef6:	2e00      	cmp	r6, #0
 8008ef8:	d04b      	beq.n	8008f92 <_printf_i+0x1aa>
 8008efa:	4616      	mov	r6, r2
 8008efc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f00:	fb03 5711 	mls	r7, r3, r1, r5
 8008f04:	5dc7      	ldrb	r7, [r0, r7]
 8008f06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f0a:	462f      	mov	r7, r5
 8008f0c:	42bb      	cmp	r3, r7
 8008f0e:	460d      	mov	r5, r1
 8008f10:	d9f4      	bls.n	8008efc <_printf_i+0x114>
 8008f12:	2b08      	cmp	r3, #8
 8008f14:	d10b      	bne.n	8008f2e <_printf_i+0x146>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	07df      	lsls	r7, r3, #31
 8008f1a:	d508      	bpl.n	8008f2e <_printf_i+0x146>
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	6861      	ldr	r1, [r4, #4]
 8008f20:	4299      	cmp	r1, r3
 8008f22:	bfde      	ittt	le
 8008f24:	2330      	movle	r3, #48	@ 0x30
 8008f26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f2e:	1b92      	subs	r2, r2, r6
 8008f30:	6122      	str	r2, [r4, #16]
 8008f32:	464b      	mov	r3, r9
 8008f34:	4621      	mov	r1, r4
 8008f36:	4640      	mov	r0, r8
 8008f38:	f8cd a000 	str.w	sl, [sp]
 8008f3c:	aa03      	add	r2, sp, #12
 8008f3e:	f7ff fee1 	bl	8008d04 <_printf_common>
 8008f42:	3001      	adds	r0, #1
 8008f44:	d14a      	bne.n	8008fdc <_printf_i+0x1f4>
 8008f46:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4a:	b004      	add	sp, #16
 8008f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	f043 0320 	orr.w	r3, r3, #32
 8008f56:	6023      	str	r3, [r4, #0]
 8008f58:	2778      	movs	r7, #120	@ 0x78
 8008f5a:	4832      	ldr	r0, [pc, #200]	@ (8009024 <_printf_i+0x23c>)
 8008f5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	6831      	ldr	r1, [r6, #0]
 8008f64:	061f      	lsls	r7, r3, #24
 8008f66:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f6a:	d402      	bmi.n	8008f72 <_printf_i+0x18a>
 8008f6c:	065f      	lsls	r7, r3, #25
 8008f6e:	bf48      	it	mi
 8008f70:	b2ad      	uxthmi	r5, r5
 8008f72:	6031      	str	r1, [r6, #0]
 8008f74:	07d9      	lsls	r1, r3, #31
 8008f76:	bf44      	itt	mi
 8008f78:	f043 0320 	orrmi.w	r3, r3, #32
 8008f7c:	6023      	strmi	r3, [r4, #0]
 8008f7e:	b11d      	cbz	r5, 8008f88 <_printf_i+0x1a0>
 8008f80:	2310      	movs	r3, #16
 8008f82:	e7ab      	b.n	8008edc <_printf_i+0xf4>
 8008f84:	4826      	ldr	r0, [pc, #152]	@ (8009020 <_printf_i+0x238>)
 8008f86:	e7e9      	b.n	8008f5c <_printf_i+0x174>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	f023 0320 	bic.w	r3, r3, #32
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	e7f6      	b.n	8008f80 <_printf_i+0x198>
 8008f92:	4616      	mov	r6, r2
 8008f94:	e7bd      	b.n	8008f12 <_printf_i+0x12a>
 8008f96:	6833      	ldr	r3, [r6, #0]
 8008f98:	6825      	ldr	r5, [r4, #0]
 8008f9a:	1d18      	adds	r0, r3, #4
 8008f9c:	6961      	ldr	r1, [r4, #20]
 8008f9e:	6030      	str	r0, [r6, #0]
 8008fa0:	062e      	lsls	r6, r5, #24
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	d501      	bpl.n	8008faa <_printf_i+0x1c2>
 8008fa6:	6019      	str	r1, [r3, #0]
 8008fa8:	e002      	b.n	8008fb0 <_printf_i+0x1c8>
 8008faa:	0668      	lsls	r0, r5, #25
 8008fac:	d5fb      	bpl.n	8008fa6 <_printf_i+0x1be>
 8008fae:	8019      	strh	r1, [r3, #0]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4616      	mov	r6, r2
 8008fb4:	6123      	str	r3, [r4, #16]
 8008fb6:	e7bc      	b.n	8008f32 <_printf_i+0x14a>
 8008fb8:	6833      	ldr	r3, [r6, #0]
 8008fba:	2100      	movs	r1, #0
 8008fbc:	1d1a      	adds	r2, r3, #4
 8008fbe:	6032      	str	r2, [r6, #0]
 8008fc0:	681e      	ldr	r6, [r3, #0]
 8008fc2:	6862      	ldr	r2, [r4, #4]
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f000 f9d4 	bl	8009372 <memchr>
 8008fca:	b108      	cbz	r0, 8008fd0 <_printf_i+0x1e8>
 8008fcc:	1b80      	subs	r0, r0, r6
 8008fce:	6060      	str	r0, [r4, #4]
 8008fd0:	6863      	ldr	r3, [r4, #4]
 8008fd2:	6123      	str	r3, [r4, #16]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fda:	e7aa      	b.n	8008f32 <_printf_i+0x14a>
 8008fdc:	4632      	mov	r2, r6
 8008fde:	4649      	mov	r1, r9
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	47d0      	blx	sl
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	d0ad      	beq.n	8008f46 <_printf_i+0x15e>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	079b      	lsls	r3, r3, #30
 8008fee:	d413      	bmi.n	8009018 <_printf_i+0x230>
 8008ff0:	68e0      	ldr	r0, [r4, #12]
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	4298      	cmp	r0, r3
 8008ff6:	bfb8      	it	lt
 8008ff8:	4618      	movlt	r0, r3
 8008ffa:	e7a6      	b.n	8008f4a <_printf_i+0x162>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	4632      	mov	r2, r6
 8009000:	4649      	mov	r1, r9
 8009002:	4640      	mov	r0, r8
 8009004:	47d0      	blx	sl
 8009006:	3001      	adds	r0, #1
 8009008:	d09d      	beq.n	8008f46 <_printf_i+0x15e>
 800900a:	3501      	adds	r5, #1
 800900c:	68e3      	ldr	r3, [r4, #12]
 800900e:	9903      	ldr	r1, [sp, #12]
 8009010:	1a5b      	subs	r3, r3, r1
 8009012:	42ab      	cmp	r3, r5
 8009014:	dcf2      	bgt.n	8008ffc <_printf_i+0x214>
 8009016:	e7eb      	b.n	8008ff0 <_printf_i+0x208>
 8009018:	2500      	movs	r5, #0
 800901a:	f104 0619 	add.w	r6, r4, #25
 800901e:	e7f5      	b.n	800900c <_printf_i+0x224>
 8009020:	0800ba7a 	.word	0x0800ba7a
 8009024:	0800ba8b 	.word	0x0800ba8b

08009028 <std>:
 8009028:	2300      	movs	r3, #0
 800902a:	b510      	push	{r4, lr}
 800902c:	4604      	mov	r4, r0
 800902e:	e9c0 3300 	strd	r3, r3, [r0]
 8009032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009036:	6083      	str	r3, [r0, #8]
 8009038:	8181      	strh	r1, [r0, #12]
 800903a:	6643      	str	r3, [r0, #100]	@ 0x64
 800903c:	81c2      	strh	r2, [r0, #14]
 800903e:	6183      	str	r3, [r0, #24]
 8009040:	4619      	mov	r1, r3
 8009042:	2208      	movs	r2, #8
 8009044:	305c      	adds	r0, #92	@ 0x5c
 8009046:	f000 f914 	bl	8009272 <memset>
 800904a:	4b0d      	ldr	r3, [pc, #52]	@ (8009080 <std+0x58>)
 800904c:	6224      	str	r4, [r4, #32]
 800904e:	6263      	str	r3, [r4, #36]	@ 0x24
 8009050:	4b0c      	ldr	r3, [pc, #48]	@ (8009084 <std+0x5c>)
 8009052:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009054:	4b0c      	ldr	r3, [pc, #48]	@ (8009088 <std+0x60>)
 8009056:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009058:	4b0c      	ldr	r3, [pc, #48]	@ (800908c <std+0x64>)
 800905a:	6323      	str	r3, [r4, #48]	@ 0x30
 800905c:	4b0c      	ldr	r3, [pc, #48]	@ (8009090 <std+0x68>)
 800905e:	429c      	cmp	r4, r3
 8009060:	d006      	beq.n	8009070 <std+0x48>
 8009062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009066:	4294      	cmp	r4, r2
 8009068:	d002      	beq.n	8009070 <std+0x48>
 800906a:	33d0      	adds	r3, #208	@ 0xd0
 800906c:	429c      	cmp	r4, r3
 800906e:	d105      	bne.n	800907c <std+0x54>
 8009070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009078:	f000 b978 	b.w	800936c <__retarget_lock_init_recursive>
 800907c:	bd10      	pop	{r4, pc}
 800907e:	bf00      	nop
 8009080:	080091ed 	.word	0x080091ed
 8009084:	0800920f 	.word	0x0800920f
 8009088:	08009247 	.word	0x08009247
 800908c:	0800926b 	.word	0x0800926b
 8009090:	20002610 	.word	0x20002610

08009094 <stdio_exit_handler>:
 8009094:	4a02      	ldr	r2, [pc, #8]	@ (80090a0 <stdio_exit_handler+0xc>)
 8009096:	4903      	ldr	r1, [pc, #12]	@ (80090a4 <stdio_exit_handler+0x10>)
 8009098:	4803      	ldr	r0, [pc, #12]	@ (80090a8 <stdio_exit_handler+0x14>)
 800909a:	f000 b869 	b.w	8009170 <_fwalk_sglue>
 800909e:	bf00      	nop
 80090a0:	20000024 	.word	0x20000024
 80090a4:	0800acdd 	.word	0x0800acdd
 80090a8:	20000034 	.word	0x20000034

080090ac <cleanup_stdio>:
 80090ac:	6841      	ldr	r1, [r0, #4]
 80090ae:	4b0c      	ldr	r3, [pc, #48]	@ (80090e0 <cleanup_stdio+0x34>)
 80090b0:	b510      	push	{r4, lr}
 80090b2:	4299      	cmp	r1, r3
 80090b4:	4604      	mov	r4, r0
 80090b6:	d001      	beq.n	80090bc <cleanup_stdio+0x10>
 80090b8:	f001 fe10 	bl	800acdc <_fflush_r>
 80090bc:	68a1      	ldr	r1, [r4, #8]
 80090be:	4b09      	ldr	r3, [pc, #36]	@ (80090e4 <cleanup_stdio+0x38>)
 80090c0:	4299      	cmp	r1, r3
 80090c2:	d002      	beq.n	80090ca <cleanup_stdio+0x1e>
 80090c4:	4620      	mov	r0, r4
 80090c6:	f001 fe09 	bl	800acdc <_fflush_r>
 80090ca:	68e1      	ldr	r1, [r4, #12]
 80090cc:	4b06      	ldr	r3, [pc, #24]	@ (80090e8 <cleanup_stdio+0x3c>)
 80090ce:	4299      	cmp	r1, r3
 80090d0:	d004      	beq.n	80090dc <cleanup_stdio+0x30>
 80090d2:	4620      	mov	r0, r4
 80090d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d8:	f001 be00 	b.w	800acdc <_fflush_r>
 80090dc:	bd10      	pop	{r4, pc}
 80090de:	bf00      	nop
 80090e0:	20002610 	.word	0x20002610
 80090e4:	20002678 	.word	0x20002678
 80090e8:	200026e0 	.word	0x200026e0

080090ec <global_stdio_init.part.0>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	4b0b      	ldr	r3, [pc, #44]	@ (800911c <global_stdio_init.part.0+0x30>)
 80090f0:	4c0b      	ldr	r4, [pc, #44]	@ (8009120 <global_stdio_init.part.0+0x34>)
 80090f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009124 <global_stdio_init.part.0+0x38>)
 80090f4:	4620      	mov	r0, r4
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	2104      	movs	r1, #4
 80090fa:	2200      	movs	r2, #0
 80090fc:	f7ff ff94 	bl	8009028 <std>
 8009100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009104:	2201      	movs	r2, #1
 8009106:	2109      	movs	r1, #9
 8009108:	f7ff ff8e 	bl	8009028 <std>
 800910c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009110:	2202      	movs	r2, #2
 8009112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009116:	2112      	movs	r1, #18
 8009118:	f7ff bf86 	b.w	8009028 <std>
 800911c:	20002748 	.word	0x20002748
 8009120:	20002610 	.word	0x20002610
 8009124:	08009095 	.word	0x08009095

08009128 <__sfp_lock_acquire>:
 8009128:	4801      	ldr	r0, [pc, #4]	@ (8009130 <__sfp_lock_acquire+0x8>)
 800912a:	f000 b920 	b.w	800936e <__retarget_lock_acquire_recursive>
 800912e:	bf00      	nop
 8009130:	20002751 	.word	0x20002751

08009134 <__sfp_lock_release>:
 8009134:	4801      	ldr	r0, [pc, #4]	@ (800913c <__sfp_lock_release+0x8>)
 8009136:	f000 b91b 	b.w	8009370 <__retarget_lock_release_recursive>
 800913a:	bf00      	nop
 800913c:	20002751 	.word	0x20002751

08009140 <__sinit>:
 8009140:	b510      	push	{r4, lr}
 8009142:	4604      	mov	r4, r0
 8009144:	f7ff fff0 	bl	8009128 <__sfp_lock_acquire>
 8009148:	6a23      	ldr	r3, [r4, #32]
 800914a:	b11b      	cbz	r3, 8009154 <__sinit+0x14>
 800914c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009150:	f7ff bff0 	b.w	8009134 <__sfp_lock_release>
 8009154:	4b04      	ldr	r3, [pc, #16]	@ (8009168 <__sinit+0x28>)
 8009156:	6223      	str	r3, [r4, #32]
 8009158:	4b04      	ldr	r3, [pc, #16]	@ (800916c <__sinit+0x2c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1f5      	bne.n	800914c <__sinit+0xc>
 8009160:	f7ff ffc4 	bl	80090ec <global_stdio_init.part.0>
 8009164:	e7f2      	b.n	800914c <__sinit+0xc>
 8009166:	bf00      	nop
 8009168:	080090ad 	.word	0x080090ad
 800916c:	20002748 	.word	0x20002748

08009170 <_fwalk_sglue>:
 8009170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009174:	4607      	mov	r7, r0
 8009176:	4688      	mov	r8, r1
 8009178:	4614      	mov	r4, r2
 800917a:	2600      	movs	r6, #0
 800917c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009180:	f1b9 0901 	subs.w	r9, r9, #1
 8009184:	d505      	bpl.n	8009192 <_fwalk_sglue+0x22>
 8009186:	6824      	ldr	r4, [r4, #0]
 8009188:	2c00      	cmp	r4, #0
 800918a:	d1f7      	bne.n	800917c <_fwalk_sglue+0xc>
 800918c:	4630      	mov	r0, r6
 800918e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d907      	bls.n	80091a8 <_fwalk_sglue+0x38>
 8009198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800919c:	3301      	adds	r3, #1
 800919e:	d003      	beq.n	80091a8 <_fwalk_sglue+0x38>
 80091a0:	4629      	mov	r1, r5
 80091a2:	4638      	mov	r0, r7
 80091a4:	47c0      	blx	r8
 80091a6:	4306      	orrs	r6, r0
 80091a8:	3568      	adds	r5, #104	@ 0x68
 80091aa:	e7e9      	b.n	8009180 <_fwalk_sglue+0x10>

080091ac <siprintf>:
 80091ac:	b40e      	push	{r1, r2, r3}
 80091ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80091b2:	b500      	push	{lr}
 80091b4:	b09c      	sub	sp, #112	@ 0x70
 80091b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80091b8:	9002      	str	r0, [sp, #8]
 80091ba:	9006      	str	r0, [sp, #24]
 80091bc:	9107      	str	r1, [sp, #28]
 80091be:	9104      	str	r1, [sp, #16]
 80091c0:	4808      	ldr	r0, [pc, #32]	@ (80091e4 <siprintf+0x38>)
 80091c2:	4909      	ldr	r1, [pc, #36]	@ (80091e8 <siprintf+0x3c>)
 80091c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c8:	9105      	str	r1, [sp, #20]
 80091ca:	6800      	ldr	r0, [r0, #0]
 80091cc:	a902      	add	r1, sp, #8
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	f001 fc08 	bl	800a9e4 <_svfiprintf_r>
 80091d4:	2200      	movs	r2, #0
 80091d6:	9b02      	ldr	r3, [sp, #8]
 80091d8:	701a      	strb	r2, [r3, #0]
 80091da:	b01c      	add	sp, #112	@ 0x70
 80091dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e0:	b003      	add	sp, #12
 80091e2:	4770      	bx	lr
 80091e4:	20000030 	.word	0x20000030
 80091e8:	ffff0208 	.word	0xffff0208

080091ec <__sread>:
 80091ec:	b510      	push	{r4, lr}
 80091ee:	460c      	mov	r4, r1
 80091f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f4:	f000 f86c 	bl	80092d0 <_read_r>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	bfab      	itete	ge
 80091fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80091fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009200:	181b      	addge	r3, r3, r0
 8009202:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009206:	bfac      	ite	ge
 8009208:	6563      	strge	r3, [r4, #84]	@ 0x54
 800920a:	81a3      	strhlt	r3, [r4, #12]
 800920c:	bd10      	pop	{r4, pc}

0800920e <__swrite>:
 800920e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009212:	461f      	mov	r7, r3
 8009214:	898b      	ldrh	r3, [r1, #12]
 8009216:	4605      	mov	r5, r0
 8009218:	05db      	lsls	r3, r3, #23
 800921a:	460c      	mov	r4, r1
 800921c:	4616      	mov	r6, r2
 800921e:	d505      	bpl.n	800922c <__swrite+0x1e>
 8009220:	2302      	movs	r3, #2
 8009222:	2200      	movs	r2, #0
 8009224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009228:	f000 f840 	bl	80092ac <_lseek_r>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	4632      	mov	r2, r6
 8009230:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	4628      	mov	r0, r5
 8009238:	463b      	mov	r3, r7
 800923a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800923e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009242:	f000 b857 	b.w	80092f4 <_write_r>

08009246 <__sseek>:
 8009246:	b510      	push	{r4, lr}
 8009248:	460c      	mov	r4, r1
 800924a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800924e:	f000 f82d 	bl	80092ac <_lseek_r>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	bf15      	itete	ne
 8009258:	6560      	strne	r0, [r4, #84]	@ 0x54
 800925a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800925e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009262:	81a3      	strheq	r3, [r4, #12]
 8009264:	bf18      	it	ne
 8009266:	81a3      	strhne	r3, [r4, #12]
 8009268:	bd10      	pop	{r4, pc}

0800926a <__sclose>:
 800926a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800926e:	f000 b80d 	b.w	800928c <_close_r>

08009272 <memset>:
 8009272:	4603      	mov	r3, r0
 8009274:	4402      	add	r2, r0
 8009276:	4293      	cmp	r3, r2
 8009278:	d100      	bne.n	800927c <memset+0xa>
 800927a:	4770      	bx	lr
 800927c:	f803 1b01 	strb.w	r1, [r3], #1
 8009280:	e7f9      	b.n	8009276 <memset+0x4>
	...

08009284 <_localeconv_r>:
 8009284:	4800      	ldr	r0, [pc, #0]	@ (8009288 <_localeconv_r+0x4>)
 8009286:	4770      	bx	lr
 8009288:	20000170 	.word	0x20000170

0800928c <_close_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	2300      	movs	r3, #0
 8009290:	4d05      	ldr	r5, [pc, #20]	@ (80092a8 <_close_r+0x1c>)
 8009292:	4604      	mov	r4, r0
 8009294:	4608      	mov	r0, r1
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	f7f8 fffb 	bl	8002292 <_close>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_close_r+0x1a>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_close_r+0x1a>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	2000274c 	.word	0x2000274c

080092ac <_lseek_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4604      	mov	r4, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	2200      	movs	r2, #0
 80092b6:	4d05      	ldr	r5, [pc, #20]	@ (80092cc <_lseek_r+0x20>)
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7f9 f80d 	bl	80022da <_lseek>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_lseek_r+0x1e>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_lseek_r+0x1e>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	2000274c 	.word	0x2000274c

080092d0 <_read_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4604      	mov	r4, r0
 80092d4:	4608      	mov	r0, r1
 80092d6:	4611      	mov	r1, r2
 80092d8:	2200      	movs	r2, #0
 80092da:	4d05      	ldr	r5, [pc, #20]	@ (80092f0 <_read_r+0x20>)
 80092dc:	602a      	str	r2, [r5, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	f7f8 ff9e 	bl	8002220 <_read>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_read_r+0x1e>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_read_r+0x1e>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	2000274c 	.word	0x2000274c

080092f4 <_write_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	4611      	mov	r1, r2
 80092fc:	2200      	movs	r2, #0
 80092fe:	4d05      	ldr	r5, [pc, #20]	@ (8009314 <_write_r+0x20>)
 8009300:	602a      	str	r2, [r5, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	f7f8 ffa9 	bl	800225a <_write>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_write_r+0x1e>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_write_r+0x1e>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	2000274c 	.word	0x2000274c

08009318 <__errno>:
 8009318:	4b01      	ldr	r3, [pc, #4]	@ (8009320 <__errno+0x8>)
 800931a:	6818      	ldr	r0, [r3, #0]
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20000030 	.word	0x20000030

08009324 <__libc_init_array>:
 8009324:	b570      	push	{r4, r5, r6, lr}
 8009326:	2600      	movs	r6, #0
 8009328:	4d0c      	ldr	r5, [pc, #48]	@ (800935c <__libc_init_array+0x38>)
 800932a:	4c0d      	ldr	r4, [pc, #52]	@ (8009360 <__libc_init_array+0x3c>)
 800932c:	1b64      	subs	r4, r4, r5
 800932e:	10a4      	asrs	r4, r4, #2
 8009330:	42a6      	cmp	r6, r4
 8009332:	d109      	bne.n	8009348 <__libc_init_array+0x24>
 8009334:	f002 f892 	bl	800b45c <_init>
 8009338:	2600      	movs	r6, #0
 800933a:	4d0a      	ldr	r5, [pc, #40]	@ (8009364 <__libc_init_array+0x40>)
 800933c:	4c0a      	ldr	r4, [pc, #40]	@ (8009368 <__libc_init_array+0x44>)
 800933e:	1b64      	subs	r4, r4, r5
 8009340:	10a4      	asrs	r4, r4, #2
 8009342:	42a6      	cmp	r6, r4
 8009344:	d105      	bne.n	8009352 <__libc_init_array+0x2e>
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	f855 3b04 	ldr.w	r3, [r5], #4
 800934c:	4798      	blx	r3
 800934e:	3601      	adds	r6, #1
 8009350:	e7ee      	b.n	8009330 <__libc_init_array+0xc>
 8009352:	f855 3b04 	ldr.w	r3, [r5], #4
 8009356:	4798      	blx	r3
 8009358:	3601      	adds	r6, #1
 800935a:	e7f2      	b.n	8009342 <__libc_init_array+0x1e>
 800935c:	0800bde0 	.word	0x0800bde0
 8009360:	0800bde0 	.word	0x0800bde0
 8009364:	0800bde0 	.word	0x0800bde0
 8009368:	0800bde4 	.word	0x0800bde4

0800936c <__retarget_lock_init_recursive>:
 800936c:	4770      	bx	lr

0800936e <__retarget_lock_acquire_recursive>:
 800936e:	4770      	bx	lr

08009370 <__retarget_lock_release_recursive>:
 8009370:	4770      	bx	lr

08009372 <memchr>:
 8009372:	4603      	mov	r3, r0
 8009374:	b510      	push	{r4, lr}
 8009376:	b2c9      	uxtb	r1, r1
 8009378:	4402      	add	r2, r0
 800937a:	4293      	cmp	r3, r2
 800937c:	4618      	mov	r0, r3
 800937e:	d101      	bne.n	8009384 <memchr+0x12>
 8009380:	2000      	movs	r0, #0
 8009382:	e003      	b.n	800938c <memchr+0x1a>
 8009384:	7804      	ldrb	r4, [r0, #0]
 8009386:	3301      	adds	r3, #1
 8009388:	428c      	cmp	r4, r1
 800938a:	d1f6      	bne.n	800937a <memchr+0x8>
 800938c:	bd10      	pop	{r4, pc}

0800938e <quorem>:
 800938e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009392:	6903      	ldr	r3, [r0, #16]
 8009394:	690c      	ldr	r4, [r1, #16]
 8009396:	4607      	mov	r7, r0
 8009398:	42a3      	cmp	r3, r4
 800939a:	db7e      	blt.n	800949a <quorem+0x10c>
 800939c:	3c01      	subs	r4, #1
 800939e:	00a3      	lsls	r3, r4, #2
 80093a0:	f100 0514 	add.w	r5, r0, #20
 80093a4:	f101 0814 	add.w	r8, r1, #20
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ae:	9301      	str	r3, [sp, #4]
 80093b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093b8:	3301      	adds	r3, #1
 80093ba:	429a      	cmp	r2, r3
 80093bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80093c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093c4:	d32e      	bcc.n	8009424 <quorem+0x96>
 80093c6:	f04f 0a00 	mov.w	sl, #0
 80093ca:	46c4      	mov	ip, r8
 80093cc:	46ae      	mov	lr, r5
 80093ce:	46d3      	mov	fp, sl
 80093d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093d4:	b298      	uxth	r0, r3
 80093d6:	fb06 a000 	mla	r0, r6, r0, sl
 80093da:	0c1b      	lsrs	r3, r3, #16
 80093dc:	0c02      	lsrs	r2, r0, #16
 80093de:	fb06 2303 	mla	r3, r6, r3, r2
 80093e2:	f8de 2000 	ldr.w	r2, [lr]
 80093e6:	b280      	uxth	r0, r0
 80093e8:	b292      	uxth	r2, r2
 80093ea:	1a12      	subs	r2, r2, r0
 80093ec:	445a      	add	r2, fp
 80093ee:	f8de 0000 	ldr.w	r0, [lr]
 80093f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009400:	b292      	uxth	r2, r2
 8009402:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009406:	45e1      	cmp	r9, ip
 8009408:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800940c:	f84e 2b04 	str.w	r2, [lr], #4
 8009410:	d2de      	bcs.n	80093d0 <quorem+0x42>
 8009412:	9b00      	ldr	r3, [sp, #0]
 8009414:	58eb      	ldr	r3, [r5, r3]
 8009416:	b92b      	cbnz	r3, 8009424 <quorem+0x96>
 8009418:	9b01      	ldr	r3, [sp, #4]
 800941a:	3b04      	subs	r3, #4
 800941c:	429d      	cmp	r5, r3
 800941e:	461a      	mov	r2, r3
 8009420:	d32f      	bcc.n	8009482 <quorem+0xf4>
 8009422:	613c      	str	r4, [r7, #16]
 8009424:	4638      	mov	r0, r7
 8009426:	f001 f979 	bl	800a71c <__mcmp>
 800942a:	2800      	cmp	r0, #0
 800942c:	db25      	blt.n	800947a <quorem+0xec>
 800942e:	4629      	mov	r1, r5
 8009430:	2000      	movs	r0, #0
 8009432:	f858 2b04 	ldr.w	r2, [r8], #4
 8009436:	f8d1 c000 	ldr.w	ip, [r1]
 800943a:	fa1f fe82 	uxth.w	lr, r2
 800943e:	fa1f f38c 	uxth.w	r3, ip
 8009442:	eba3 030e 	sub.w	r3, r3, lr
 8009446:	4403      	add	r3, r0
 8009448:	0c12      	lsrs	r2, r2, #16
 800944a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800944e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009452:	b29b      	uxth	r3, r3
 8009454:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009458:	45c1      	cmp	r9, r8
 800945a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800945e:	f841 3b04 	str.w	r3, [r1], #4
 8009462:	d2e6      	bcs.n	8009432 <quorem+0xa4>
 8009464:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009468:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800946c:	b922      	cbnz	r2, 8009478 <quorem+0xea>
 800946e:	3b04      	subs	r3, #4
 8009470:	429d      	cmp	r5, r3
 8009472:	461a      	mov	r2, r3
 8009474:	d30b      	bcc.n	800948e <quorem+0x100>
 8009476:	613c      	str	r4, [r7, #16]
 8009478:	3601      	adds	r6, #1
 800947a:	4630      	mov	r0, r6
 800947c:	b003      	add	sp, #12
 800947e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009482:	6812      	ldr	r2, [r2, #0]
 8009484:	3b04      	subs	r3, #4
 8009486:	2a00      	cmp	r2, #0
 8009488:	d1cb      	bne.n	8009422 <quorem+0x94>
 800948a:	3c01      	subs	r4, #1
 800948c:	e7c6      	b.n	800941c <quorem+0x8e>
 800948e:	6812      	ldr	r2, [r2, #0]
 8009490:	3b04      	subs	r3, #4
 8009492:	2a00      	cmp	r2, #0
 8009494:	d1ef      	bne.n	8009476 <quorem+0xe8>
 8009496:	3c01      	subs	r4, #1
 8009498:	e7ea      	b.n	8009470 <quorem+0xe2>
 800949a:	2000      	movs	r0, #0
 800949c:	e7ee      	b.n	800947c <quorem+0xee>
	...

080094a0 <_dtoa_r>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	4614      	mov	r4, r2
 80094a6:	461d      	mov	r5, r3
 80094a8:	69c7      	ldr	r7, [r0, #28]
 80094aa:	b097      	sub	sp, #92	@ 0x5c
 80094ac:	4683      	mov	fp, r0
 80094ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80094b2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80094b4:	b97f      	cbnz	r7, 80094d6 <_dtoa_r+0x36>
 80094b6:	2010      	movs	r0, #16
 80094b8:	f000 fe02 	bl	800a0c0 <malloc>
 80094bc:	4602      	mov	r2, r0
 80094be:	f8cb 001c 	str.w	r0, [fp, #28]
 80094c2:	b920      	cbnz	r0, 80094ce <_dtoa_r+0x2e>
 80094c4:	21ef      	movs	r1, #239	@ 0xef
 80094c6:	4ba8      	ldr	r3, [pc, #672]	@ (8009768 <_dtoa_r+0x2c8>)
 80094c8:	48a8      	ldr	r0, [pc, #672]	@ (800976c <_dtoa_r+0x2cc>)
 80094ca:	f001 fc67 	bl	800ad9c <__assert_func>
 80094ce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80094d2:	6007      	str	r7, [r0, #0]
 80094d4:	60c7      	str	r7, [r0, #12]
 80094d6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094da:	6819      	ldr	r1, [r3, #0]
 80094dc:	b159      	cbz	r1, 80094f6 <_dtoa_r+0x56>
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	2301      	movs	r3, #1
 80094e2:	4093      	lsls	r3, r2
 80094e4:	604a      	str	r2, [r1, #4]
 80094e6:	608b      	str	r3, [r1, #8]
 80094e8:	4658      	mov	r0, fp
 80094ea:	f000 fedf 	bl	800a2ac <_Bfree>
 80094ee:	2200      	movs	r2, #0
 80094f0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	1e2b      	subs	r3, r5, #0
 80094f8:	bfaf      	iteee	ge
 80094fa:	2300      	movge	r3, #0
 80094fc:	2201      	movlt	r2, #1
 80094fe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009502:	9303      	strlt	r3, [sp, #12]
 8009504:	bfa8      	it	ge
 8009506:	6033      	strge	r3, [r6, #0]
 8009508:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800950c:	4b98      	ldr	r3, [pc, #608]	@ (8009770 <_dtoa_r+0x2d0>)
 800950e:	bfb8      	it	lt
 8009510:	6032      	strlt	r2, [r6, #0]
 8009512:	ea33 0308 	bics.w	r3, r3, r8
 8009516:	d112      	bne.n	800953e <_dtoa_r+0x9e>
 8009518:	f242 730f 	movw	r3, #9999	@ 0x270f
 800951c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009524:	4323      	orrs	r3, r4
 8009526:	f000 8550 	beq.w	8009fca <_dtoa_r+0xb2a>
 800952a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800952c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009774 <_dtoa_r+0x2d4>
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 8552 	beq.w	8009fda <_dtoa_r+0xb3a>
 8009536:	f10a 0303 	add.w	r3, sl, #3
 800953a:	f000 bd4c 	b.w	8009fd6 <_dtoa_r+0xb36>
 800953e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009542:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009546:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800954a:	2200      	movs	r2, #0
 800954c:	2300      	movs	r3, #0
 800954e:	f7f7 fa2b 	bl	80009a8 <__aeabi_dcmpeq>
 8009552:	4607      	mov	r7, r0
 8009554:	b158      	cbz	r0, 800956e <_dtoa_r+0xce>
 8009556:	2301      	movs	r3, #1
 8009558:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800955e:	b113      	cbz	r3, 8009566 <_dtoa_r+0xc6>
 8009560:	4b85      	ldr	r3, [pc, #532]	@ (8009778 <_dtoa_r+0x2d8>)
 8009562:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800977c <_dtoa_r+0x2dc>
 800956a:	f000 bd36 	b.w	8009fda <_dtoa_r+0xb3a>
 800956e:	ab14      	add	r3, sp, #80	@ 0x50
 8009570:	9301      	str	r3, [sp, #4]
 8009572:	ab15      	add	r3, sp, #84	@ 0x54
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	4658      	mov	r0, fp
 8009578:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800957c:	f001 f97e 	bl	800a87c <__d2b>
 8009580:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009584:	4681      	mov	r9, r0
 8009586:	2e00      	cmp	r6, #0
 8009588:	d077      	beq.n	800967a <_dtoa_r+0x1da>
 800958a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800958e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009590:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009598:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800959c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80095a0:	9712      	str	r7, [sp, #72]	@ 0x48
 80095a2:	4619      	mov	r1, r3
 80095a4:	2200      	movs	r2, #0
 80095a6:	4b76      	ldr	r3, [pc, #472]	@ (8009780 <_dtoa_r+0x2e0>)
 80095a8:	f7f6 fdde 	bl	8000168 <__aeabi_dsub>
 80095ac:	a368      	add	r3, pc, #416	@ (adr r3, 8009750 <_dtoa_r+0x2b0>)
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	f7f6 ff91 	bl	80004d8 <__aeabi_dmul>
 80095b6:	a368      	add	r3, pc, #416	@ (adr r3, 8009758 <_dtoa_r+0x2b8>)
 80095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095bc:	f7f6 fdd6 	bl	800016c <__adddf3>
 80095c0:	4604      	mov	r4, r0
 80095c2:	4630      	mov	r0, r6
 80095c4:	460d      	mov	r5, r1
 80095c6:	f7f6 ff1d 	bl	8000404 <__aeabi_i2d>
 80095ca:	a365      	add	r3, pc, #404	@ (adr r3, 8009760 <_dtoa_r+0x2c0>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f7f6 ff82 	bl	80004d8 <__aeabi_dmul>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	4620      	mov	r0, r4
 80095da:	4629      	mov	r1, r5
 80095dc:	f7f6 fdc6 	bl	800016c <__adddf3>
 80095e0:	4604      	mov	r4, r0
 80095e2:	460d      	mov	r5, r1
 80095e4:	f7f7 fa28 	bl	8000a38 <__aeabi_d2iz>
 80095e8:	2200      	movs	r2, #0
 80095ea:	4607      	mov	r7, r0
 80095ec:	2300      	movs	r3, #0
 80095ee:	4620      	mov	r0, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	f7f7 f9e3 	bl	80009bc <__aeabi_dcmplt>
 80095f6:	b140      	cbz	r0, 800960a <_dtoa_r+0x16a>
 80095f8:	4638      	mov	r0, r7
 80095fa:	f7f6 ff03 	bl	8000404 <__aeabi_i2d>
 80095fe:	4622      	mov	r2, r4
 8009600:	462b      	mov	r3, r5
 8009602:	f7f7 f9d1 	bl	80009a8 <__aeabi_dcmpeq>
 8009606:	b900      	cbnz	r0, 800960a <_dtoa_r+0x16a>
 8009608:	3f01      	subs	r7, #1
 800960a:	2f16      	cmp	r7, #22
 800960c:	d853      	bhi.n	80096b6 <_dtoa_r+0x216>
 800960e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009612:	4b5c      	ldr	r3, [pc, #368]	@ (8009784 <_dtoa_r+0x2e4>)
 8009614:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	f7f7 f9ce 	bl	80009bc <__aeabi_dcmplt>
 8009620:	2800      	cmp	r0, #0
 8009622:	d04a      	beq.n	80096ba <_dtoa_r+0x21a>
 8009624:	2300      	movs	r3, #0
 8009626:	3f01      	subs	r7, #1
 8009628:	930f      	str	r3, [sp, #60]	@ 0x3c
 800962a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800962c:	1b9b      	subs	r3, r3, r6
 800962e:	1e5a      	subs	r2, r3, #1
 8009630:	bf46      	itte	mi
 8009632:	f1c3 0801 	rsbmi	r8, r3, #1
 8009636:	2300      	movmi	r3, #0
 8009638:	f04f 0800 	movpl.w	r8, #0
 800963c:	9209      	str	r2, [sp, #36]	@ 0x24
 800963e:	bf48      	it	mi
 8009640:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009642:	2f00      	cmp	r7, #0
 8009644:	db3b      	blt.n	80096be <_dtoa_r+0x21e>
 8009646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009648:	970e      	str	r7, [sp, #56]	@ 0x38
 800964a:	443b      	add	r3, r7
 800964c:	9309      	str	r3, [sp, #36]	@ 0x24
 800964e:	2300      	movs	r3, #0
 8009650:	930a      	str	r3, [sp, #40]	@ 0x28
 8009652:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009654:	2b09      	cmp	r3, #9
 8009656:	d866      	bhi.n	8009726 <_dtoa_r+0x286>
 8009658:	2b05      	cmp	r3, #5
 800965a:	bfc4      	itt	gt
 800965c:	3b04      	subgt	r3, #4
 800965e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009660:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009662:	bfc8      	it	gt
 8009664:	2400      	movgt	r4, #0
 8009666:	f1a3 0302 	sub.w	r3, r3, #2
 800966a:	bfd8      	it	le
 800966c:	2401      	movle	r4, #1
 800966e:	2b03      	cmp	r3, #3
 8009670:	d864      	bhi.n	800973c <_dtoa_r+0x29c>
 8009672:	e8df f003 	tbb	[pc, r3]
 8009676:	382b      	.short	0x382b
 8009678:	5636      	.short	0x5636
 800967a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800967e:	441e      	add	r6, r3
 8009680:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009684:	2b20      	cmp	r3, #32
 8009686:	bfc1      	itttt	gt
 8009688:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800968c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009690:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009694:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009698:	bfd6      	itet	le
 800969a:	f1c3 0320 	rsble	r3, r3, #32
 800969e:	ea48 0003 	orrgt.w	r0, r8, r3
 80096a2:	fa04 f003 	lslle.w	r0, r4, r3
 80096a6:	f7f6 fe9d 	bl	80003e4 <__aeabi_ui2d>
 80096aa:	2201      	movs	r2, #1
 80096ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80096b0:	3e01      	subs	r6, #1
 80096b2:	9212      	str	r2, [sp, #72]	@ 0x48
 80096b4:	e775      	b.n	80095a2 <_dtoa_r+0x102>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e7b6      	b.n	8009628 <_dtoa_r+0x188>
 80096ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80096bc:	e7b5      	b.n	800962a <_dtoa_r+0x18a>
 80096be:	427b      	negs	r3, r7
 80096c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80096c2:	2300      	movs	r3, #0
 80096c4:	eba8 0807 	sub.w	r8, r8, r7
 80096c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80096ca:	e7c2      	b.n	8009652 <_dtoa_r+0x1b2>
 80096cc:	2300      	movs	r3, #0
 80096ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	dc35      	bgt.n	8009742 <_dtoa_r+0x2a2>
 80096d6:	2301      	movs	r3, #1
 80096d8:	461a      	mov	r2, r3
 80096da:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80096de:	9221      	str	r2, [sp, #132]	@ 0x84
 80096e0:	e00b      	b.n	80096fa <_dtoa_r+0x25a>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e7f3      	b.n	80096ce <_dtoa_r+0x22e>
 80096e6:	2300      	movs	r3, #0
 80096e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	9308      	str	r3, [sp, #32]
 80096f0:	3301      	adds	r3, #1
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	9307      	str	r3, [sp, #28]
 80096f6:	bfb8      	it	lt
 80096f8:	2301      	movlt	r3, #1
 80096fa:	2100      	movs	r1, #0
 80096fc:	2204      	movs	r2, #4
 80096fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009702:	f102 0514 	add.w	r5, r2, #20
 8009706:	429d      	cmp	r5, r3
 8009708:	d91f      	bls.n	800974a <_dtoa_r+0x2aa>
 800970a:	6041      	str	r1, [r0, #4]
 800970c:	4658      	mov	r0, fp
 800970e:	f000 fd8d 	bl	800a22c <_Balloc>
 8009712:	4682      	mov	sl, r0
 8009714:	2800      	cmp	r0, #0
 8009716:	d139      	bne.n	800978c <_dtoa_r+0x2ec>
 8009718:	4602      	mov	r2, r0
 800971a:	f240 11af 	movw	r1, #431	@ 0x1af
 800971e:	4b1a      	ldr	r3, [pc, #104]	@ (8009788 <_dtoa_r+0x2e8>)
 8009720:	e6d2      	b.n	80094c8 <_dtoa_r+0x28>
 8009722:	2301      	movs	r3, #1
 8009724:	e7e0      	b.n	80096e8 <_dtoa_r+0x248>
 8009726:	2401      	movs	r4, #1
 8009728:	2300      	movs	r3, #0
 800972a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800972c:	9320      	str	r3, [sp, #128]	@ 0x80
 800972e:	f04f 33ff 	mov.w	r3, #4294967295
 8009732:	2200      	movs	r2, #0
 8009734:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009738:	2312      	movs	r3, #18
 800973a:	e7d0      	b.n	80096de <_dtoa_r+0x23e>
 800973c:	2301      	movs	r3, #1
 800973e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009740:	e7f5      	b.n	800972e <_dtoa_r+0x28e>
 8009742:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009744:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009748:	e7d7      	b.n	80096fa <_dtoa_r+0x25a>
 800974a:	3101      	adds	r1, #1
 800974c:	0052      	lsls	r2, r2, #1
 800974e:	e7d8      	b.n	8009702 <_dtoa_r+0x262>
 8009750:	636f4361 	.word	0x636f4361
 8009754:	3fd287a7 	.word	0x3fd287a7
 8009758:	8b60c8b3 	.word	0x8b60c8b3
 800975c:	3fc68a28 	.word	0x3fc68a28
 8009760:	509f79fb 	.word	0x509f79fb
 8009764:	3fd34413 	.word	0x3fd34413
 8009768:	0800baa9 	.word	0x0800baa9
 800976c:	0800bac0 	.word	0x0800bac0
 8009770:	7ff00000 	.word	0x7ff00000
 8009774:	0800baa5 	.word	0x0800baa5
 8009778:	0800ba79 	.word	0x0800ba79
 800977c:	0800ba78 	.word	0x0800ba78
 8009780:	3ff80000 	.word	0x3ff80000
 8009784:	0800bbb8 	.word	0x0800bbb8
 8009788:	0800bb18 	.word	0x0800bb18
 800978c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009790:	6018      	str	r0, [r3, #0]
 8009792:	9b07      	ldr	r3, [sp, #28]
 8009794:	2b0e      	cmp	r3, #14
 8009796:	f200 80a4 	bhi.w	80098e2 <_dtoa_r+0x442>
 800979a:	2c00      	cmp	r4, #0
 800979c:	f000 80a1 	beq.w	80098e2 <_dtoa_r+0x442>
 80097a0:	2f00      	cmp	r7, #0
 80097a2:	dd33      	ble.n	800980c <_dtoa_r+0x36c>
 80097a4:	4b86      	ldr	r3, [pc, #536]	@ (80099c0 <_dtoa_r+0x520>)
 80097a6:	f007 020f 	and.w	r2, r7, #15
 80097aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ae:	05f8      	lsls	r0, r7, #23
 80097b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80097bc:	d516      	bpl.n	80097ec <_dtoa_r+0x34c>
 80097be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097c2:	4b80      	ldr	r3, [pc, #512]	@ (80099c4 <_dtoa_r+0x524>)
 80097c4:	2603      	movs	r6, #3
 80097c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097ca:	f7f6 ffaf 	bl	800072c <__aeabi_ddiv>
 80097ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097d2:	f004 040f 	and.w	r4, r4, #15
 80097d6:	4d7b      	ldr	r5, [pc, #492]	@ (80099c4 <_dtoa_r+0x524>)
 80097d8:	b954      	cbnz	r4, 80097f0 <_dtoa_r+0x350>
 80097da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097e2:	f7f6 ffa3 	bl	800072c <__aeabi_ddiv>
 80097e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ea:	e028      	b.n	800983e <_dtoa_r+0x39e>
 80097ec:	2602      	movs	r6, #2
 80097ee:	e7f2      	b.n	80097d6 <_dtoa_r+0x336>
 80097f0:	07e1      	lsls	r1, r4, #31
 80097f2:	d508      	bpl.n	8009806 <_dtoa_r+0x366>
 80097f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097fc:	f7f6 fe6c 	bl	80004d8 <__aeabi_dmul>
 8009800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009804:	3601      	adds	r6, #1
 8009806:	1064      	asrs	r4, r4, #1
 8009808:	3508      	adds	r5, #8
 800980a:	e7e5      	b.n	80097d8 <_dtoa_r+0x338>
 800980c:	f000 80d2 	beq.w	80099b4 <_dtoa_r+0x514>
 8009810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009814:	427c      	negs	r4, r7
 8009816:	4b6a      	ldr	r3, [pc, #424]	@ (80099c0 <_dtoa_r+0x520>)
 8009818:	f004 020f 	and.w	r2, r4, #15
 800981c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	f7f6 fe58 	bl	80004d8 <__aeabi_dmul>
 8009828:	2602      	movs	r6, #2
 800982a:	2300      	movs	r3, #0
 800982c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009830:	4d64      	ldr	r5, [pc, #400]	@ (80099c4 <_dtoa_r+0x524>)
 8009832:	1124      	asrs	r4, r4, #4
 8009834:	2c00      	cmp	r4, #0
 8009836:	f040 80b2 	bne.w	800999e <_dtoa_r+0x4fe>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1d3      	bne.n	80097e6 <_dtoa_r+0x346>
 800983e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009842:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 80b7 	beq.w	80099b8 <_dtoa_r+0x518>
 800984a:	2200      	movs	r2, #0
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	4b5d      	ldr	r3, [pc, #372]	@ (80099c8 <_dtoa_r+0x528>)
 8009852:	f7f7 f8b3 	bl	80009bc <__aeabi_dcmplt>
 8009856:	2800      	cmp	r0, #0
 8009858:	f000 80ae 	beq.w	80099b8 <_dtoa_r+0x518>
 800985c:	9b07      	ldr	r3, [sp, #28]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 80aa 	beq.w	80099b8 <_dtoa_r+0x518>
 8009864:	9b08      	ldr	r3, [sp, #32]
 8009866:	2b00      	cmp	r3, #0
 8009868:	dd37      	ble.n	80098da <_dtoa_r+0x43a>
 800986a:	1e7b      	subs	r3, r7, #1
 800986c:	4620      	mov	r0, r4
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	2200      	movs	r2, #0
 8009872:	4629      	mov	r1, r5
 8009874:	4b55      	ldr	r3, [pc, #340]	@ (80099cc <_dtoa_r+0x52c>)
 8009876:	f7f6 fe2f 	bl	80004d8 <__aeabi_dmul>
 800987a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800987e:	9c08      	ldr	r4, [sp, #32]
 8009880:	3601      	adds	r6, #1
 8009882:	4630      	mov	r0, r6
 8009884:	f7f6 fdbe 	bl	8000404 <__aeabi_i2d>
 8009888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800988c:	f7f6 fe24 	bl	80004d8 <__aeabi_dmul>
 8009890:	2200      	movs	r2, #0
 8009892:	4b4f      	ldr	r3, [pc, #316]	@ (80099d0 <_dtoa_r+0x530>)
 8009894:	f7f6 fc6a 	bl	800016c <__adddf3>
 8009898:	4605      	mov	r5, r0
 800989a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800989e:	2c00      	cmp	r4, #0
 80098a0:	f040 809a 	bne.w	80099d8 <_dtoa_r+0x538>
 80098a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a8:	2200      	movs	r2, #0
 80098aa:	4b4a      	ldr	r3, [pc, #296]	@ (80099d4 <_dtoa_r+0x534>)
 80098ac:	f7f6 fc5c 	bl	8000168 <__aeabi_dsub>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098b8:	462a      	mov	r2, r5
 80098ba:	4633      	mov	r3, r6
 80098bc:	f7f7 f89c 	bl	80009f8 <__aeabi_dcmpgt>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	f040 828e 	bne.w	8009de2 <_dtoa_r+0x942>
 80098c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ca:	462a      	mov	r2, r5
 80098cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098d0:	f7f7 f874 	bl	80009bc <__aeabi_dcmplt>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f040 8127 	bne.w	8009b28 <_dtoa_r+0x688>
 80098da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80098de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80098e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f2c0 8163 	blt.w	8009bb0 <_dtoa_r+0x710>
 80098ea:	2f0e      	cmp	r7, #14
 80098ec:	f300 8160 	bgt.w	8009bb0 <_dtoa_r+0x710>
 80098f0:	4b33      	ldr	r3, [pc, #204]	@ (80099c0 <_dtoa_r+0x520>)
 80098f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80098fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009900:	2b00      	cmp	r3, #0
 8009902:	da03      	bge.n	800990c <_dtoa_r+0x46c>
 8009904:	9b07      	ldr	r3, [sp, #28]
 8009906:	2b00      	cmp	r3, #0
 8009908:	f340 8100 	ble.w	8009b0c <_dtoa_r+0x66c>
 800990c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009910:	4656      	mov	r6, sl
 8009912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009916:	4620      	mov	r0, r4
 8009918:	4629      	mov	r1, r5
 800991a:	f7f6 ff07 	bl	800072c <__aeabi_ddiv>
 800991e:	f7f7 f88b 	bl	8000a38 <__aeabi_d2iz>
 8009922:	4680      	mov	r8, r0
 8009924:	f7f6 fd6e 	bl	8000404 <__aeabi_i2d>
 8009928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800992c:	f7f6 fdd4 	bl	80004d8 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4620      	mov	r0, r4
 8009936:	4629      	mov	r1, r5
 8009938:	f7f6 fc16 	bl	8000168 <__aeabi_dsub>
 800993c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009940:	9d07      	ldr	r5, [sp, #28]
 8009942:	f806 4b01 	strb.w	r4, [r6], #1
 8009946:	eba6 040a 	sub.w	r4, r6, sl
 800994a:	42a5      	cmp	r5, r4
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	f040 8116 	bne.w	8009b80 <_dtoa_r+0x6e0>
 8009954:	f7f6 fc0a 	bl	800016c <__adddf3>
 8009958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800995c:	4604      	mov	r4, r0
 800995e:	460d      	mov	r5, r1
 8009960:	f7f7 f84a 	bl	80009f8 <__aeabi_dcmpgt>
 8009964:	2800      	cmp	r0, #0
 8009966:	f040 80f8 	bne.w	8009b5a <_dtoa_r+0x6ba>
 800996a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f7 f819 	bl	80009a8 <__aeabi_dcmpeq>
 8009976:	b118      	cbz	r0, 8009980 <_dtoa_r+0x4e0>
 8009978:	f018 0f01 	tst.w	r8, #1
 800997c:	f040 80ed 	bne.w	8009b5a <_dtoa_r+0x6ba>
 8009980:	4649      	mov	r1, r9
 8009982:	4658      	mov	r0, fp
 8009984:	f000 fc92 	bl	800a2ac <_Bfree>
 8009988:	2300      	movs	r3, #0
 800998a:	7033      	strb	r3, [r6, #0]
 800998c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800998e:	3701      	adds	r7, #1
 8009990:	601f      	str	r7, [r3, #0]
 8009992:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 8320 	beq.w	8009fda <_dtoa_r+0xb3a>
 800999a:	601e      	str	r6, [r3, #0]
 800999c:	e31d      	b.n	8009fda <_dtoa_r+0xb3a>
 800999e:	07e2      	lsls	r2, r4, #31
 80099a0:	d505      	bpl.n	80099ae <_dtoa_r+0x50e>
 80099a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099a6:	f7f6 fd97 	bl	80004d8 <__aeabi_dmul>
 80099aa:	2301      	movs	r3, #1
 80099ac:	3601      	adds	r6, #1
 80099ae:	1064      	asrs	r4, r4, #1
 80099b0:	3508      	adds	r5, #8
 80099b2:	e73f      	b.n	8009834 <_dtoa_r+0x394>
 80099b4:	2602      	movs	r6, #2
 80099b6:	e742      	b.n	800983e <_dtoa_r+0x39e>
 80099b8:	9c07      	ldr	r4, [sp, #28]
 80099ba:	9704      	str	r7, [sp, #16]
 80099bc:	e761      	b.n	8009882 <_dtoa_r+0x3e2>
 80099be:	bf00      	nop
 80099c0:	0800bbb8 	.word	0x0800bbb8
 80099c4:	0800bb90 	.word	0x0800bb90
 80099c8:	3ff00000 	.word	0x3ff00000
 80099cc:	40240000 	.word	0x40240000
 80099d0:	401c0000 	.word	0x401c0000
 80099d4:	40140000 	.word	0x40140000
 80099d8:	4b70      	ldr	r3, [pc, #448]	@ (8009b9c <_dtoa_r+0x6fc>)
 80099da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099e4:	4454      	add	r4, sl
 80099e6:	2900      	cmp	r1, #0
 80099e8:	d045      	beq.n	8009a76 <_dtoa_r+0x5d6>
 80099ea:	2000      	movs	r0, #0
 80099ec:	496c      	ldr	r1, [pc, #432]	@ (8009ba0 <_dtoa_r+0x700>)
 80099ee:	f7f6 fe9d 	bl	800072c <__aeabi_ddiv>
 80099f2:	4633      	mov	r3, r6
 80099f4:	462a      	mov	r2, r5
 80099f6:	f7f6 fbb7 	bl	8000168 <__aeabi_dsub>
 80099fa:	4656      	mov	r6, sl
 80099fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a04:	f7f7 f818 	bl	8000a38 <__aeabi_d2iz>
 8009a08:	4605      	mov	r5, r0
 8009a0a:	f7f6 fcfb 	bl	8000404 <__aeabi_i2d>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a16:	f7f6 fba7 	bl	8000168 <__aeabi_dsub>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	3530      	adds	r5, #48	@ 0x30
 8009a20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a28:	f806 5b01 	strb.w	r5, [r6], #1
 8009a2c:	f7f6 ffc6 	bl	80009bc <__aeabi_dcmplt>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d163      	bne.n	8009afc <_dtoa_r+0x65c>
 8009a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a38:	2000      	movs	r0, #0
 8009a3a:	495a      	ldr	r1, [pc, #360]	@ (8009ba4 <_dtoa_r+0x704>)
 8009a3c:	f7f6 fb94 	bl	8000168 <__aeabi_dsub>
 8009a40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a44:	f7f6 ffba 	bl	80009bc <__aeabi_dcmplt>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	f040 8087 	bne.w	8009b5c <_dtoa_r+0x6bc>
 8009a4e:	42a6      	cmp	r6, r4
 8009a50:	f43f af43 	beq.w	80098da <_dtoa_r+0x43a>
 8009a54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a58:	2200      	movs	r2, #0
 8009a5a:	4b53      	ldr	r3, [pc, #332]	@ (8009ba8 <_dtoa_r+0x708>)
 8009a5c:	f7f6 fd3c 	bl	80004d8 <__aeabi_dmul>
 8009a60:	2200      	movs	r2, #0
 8009a62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8009ba8 <_dtoa_r+0x708>)
 8009a6c:	f7f6 fd34 	bl	80004d8 <__aeabi_dmul>
 8009a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a74:	e7c4      	b.n	8009a00 <_dtoa_r+0x560>
 8009a76:	4631      	mov	r1, r6
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f7f6 fd2d 	bl	80004d8 <__aeabi_dmul>
 8009a7e:	4656      	mov	r6, sl
 8009a80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a84:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a8a:	f7f6 ffd5 	bl	8000a38 <__aeabi_d2iz>
 8009a8e:	4605      	mov	r5, r0
 8009a90:	f7f6 fcb8 	bl	8000404 <__aeabi_i2d>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a9c:	f7f6 fb64 	bl	8000168 <__aeabi_dsub>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	3530      	adds	r5, #48	@ 0x30
 8009aa6:	f806 5b01 	strb.w	r5, [r6], #1
 8009aaa:	42a6      	cmp	r6, r4
 8009aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ab0:	f04f 0200 	mov.w	r2, #0
 8009ab4:	d124      	bne.n	8009b00 <_dtoa_r+0x660>
 8009ab6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009aba:	4b39      	ldr	r3, [pc, #228]	@ (8009ba0 <_dtoa_r+0x700>)
 8009abc:	f7f6 fb56 	bl	800016c <__adddf3>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ac8:	f7f6 ff96 	bl	80009f8 <__aeabi_dcmpgt>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d145      	bne.n	8009b5c <_dtoa_r+0x6bc>
 8009ad0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	4932      	ldr	r1, [pc, #200]	@ (8009ba0 <_dtoa_r+0x700>)
 8009ad8:	f7f6 fb46 	bl	8000168 <__aeabi_dsub>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ae4:	f7f6 ff6a 	bl	80009bc <__aeabi_dcmplt>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	f43f aef6 	beq.w	80098da <_dtoa_r+0x43a>
 8009aee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009af0:	1e73      	subs	r3, r6, #1
 8009af2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009af4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009af8:	2b30      	cmp	r3, #48	@ 0x30
 8009afa:	d0f8      	beq.n	8009aee <_dtoa_r+0x64e>
 8009afc:	9f04      	ldr	r7, [sp, #16]
 8009afe:	e73f      	b.n	8009980 <_dtoa_r+0x4e0>
 8009b00:	4b29      	ldr	r3, [pc, #164]	@ (8009ba8 <_dtoa_r+0x708>)
 8009b02:	f7f6 fce9 	bl	80004d8 <__aeabi_dmul>
 8009b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b0a:	e7bc      	b.n	8009a86 <_dtoa_r+0x5e6>
 8009b0c:	d10c      	bne.n	8009b28 <_dtoa_r+0x688>
 8009b0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b12:	2200      	movs	r2, #0
 8009b14:	4b25      	ldr	r3, [pc, #148]	@ (8009bac <_dtoa_r+0x70c>)
 8009b16:	f7f6 fcdf 	bl	80004d8 <__aeabi_dmul>
 8009b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b1e:	f7f6 ff61 	bl	80009e4 <__aeabi_dcmpge>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	f000 815b 	beq.w	8009dde <_dtoa_r+0x93e>
 8009b28:	2400      	movs	r4, #0
 8009b2a:	4625      	mov	r5, r4
 8009b2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b2e:	4656      	mov	r6, sl
 8009b30:	43db      	mvns	r3, r3
 8009b32:	9304      	str	r3, [sp, #16]
 8009b34:	2700      	movs	r7, #0
 8009b36:	4621      	mov	r1, r4
 8009b38:	4658      	mov	r0, fp
 8009b3a:	f000 fbb7 	bl	800a2ac <_Bfree>
 8009b3e:	2d00      	cmp	r5, #0
 8009b40:	d0dc      	beq.n	8009afc <_dtoa_r+0x65c>
 8009b42:	b12f      	cbz	r7, 8009b50 <_dtoa_r+0x6b0>
 8009b44:	42af      	cmp	r7, r5
 8009b46:	d003      	beq.n	8009b50 <_dtoa_r+0x6b0>
 8009b48:	4639      	mov	r1, r7
 8009b4a:	4658      	mov	r0, fp
 8009b4c:	f000 fbae 	bl	800a2ac <_Bfree>
 8009b50:	4629      	mov	r1, r5
 8009b52:	4658      	mov	r0, fp
 8009b54:	f000 fbaa 	bl	800a2ac <_Bfree>
 8009b58:	e7d0      	b.n	8009afc <_dtoa_r+0x65c>
 8009b5a:	9704      	str	r7, [sp, #16]
 8009b5c:	4633      	mov	r3, r6
 8009b5e:	461e      	mov	r6, r3
 8009b60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b64:	2a39      	cmp	r2, #57	@ 0x39
 8009b66:	d107      	bne.n	8009b78 <_dtoa_r+0x6d8>
 8009b68:	459a      	cmp	sl, r3
 8009b6a:	d1f8      	bne.n	8009b5e <_dtoa_r+0x6be>
 8009b6c:	9a04      	ldr	r2, [sp, #16]
 8009b6e:	3201      	adds	r2, #1
 8009b70:	9204      	str	r2, [sp, #16]
 8009b72:	2230      	movs	r2, #48	@ 0x30
 8009b74:	f88a 2000 	strb.w	r2, [sl]
 8009b78:	781a      	ldrb	r2, [r3, #0]
 8009b7a:	3201      	adds	r2, #1
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	e7bd      	b.n	8009afc <_dtoa_r+0x65c>
 8009b80:	2200      	movs	r2, #0
 8009b82:	4b09      	ldr	r3, [pc, #36]	@ (8009ba8 <_dtoa_r+0x708>)
 8009b84:	f7f6 fca8 	bl	80004d8 <__aeabi_dmul>
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	460d      	mov	r5, r1
 8009b90:	f7f6 ff0a 	bl	80009a8 <__aeabi_dcmpeq>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	f43f aebc 	beq.w	8009912 <_dtoa_r+0x472>
 8009b9a:	e6f1      	b.n	8009980 <_dtoa_r+0x4e0>
 8009b9c:	0800bbb8 	.word	0x0800bbb8
 8009ba0:	3fe00000 	.word	0x3fe00000
 8009ba4:	3ff00000 	.word	0x3ff00000
 8009ba8:	40240000 	.word	0x40240000
 8009bac:	40140000 	.word	0x40140000
 8009bb0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009bb2:	2a00      	cmp	r2, #0
 8009bb4:	f000 80db 	beq.w	8009d6e <_dtoa_r+0x8ce>
 8009bb8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009bba:	2a01      	cmp	r2, #1
 8009bbc:	f300 80bf 	bgt.w	8009d3e <_dtoa_r+0x89e>
 8009bc0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009bc2:	2a00      	cmp	r2, #0
 8009bc4:	f000 80b7 	beq.w	8009d36 <_dtoa_r+0x896>
 8009bc8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009bcc:	4646      	mov	r6, r8
 8009bce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	441a      	add	r2, r3
 8009bd6:	4658      	mov	r0, fp
 8009bd8:	4498      	add	r8, r3
 8009bda:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bdc:	f000 fc1a 	bl	800a414 <__i2b>
 8009be0:	4605      	mov	r5, r0
 8009be2:	b15e      	cbz	r6, 8009bfc <_dtoa_r+0x75c>
 8009be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	dd08      	ble.n	8009bfc <_dtoa_r+0x75c>
 8009bea:	42b3      	cmp	r3, r6
 8009bec:	bfa8      	it	ge
 8009bee:	4633      	movge	r3, r6
 8009bf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bf2:	eba8 0803 	sub.w	r8, r8, r3
 8009bf6:	1af6      	subs	r6, r6, r3
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bfe:	b1f3      	cbz	r3, 8009c3e <_dtoa_r+0x79e>
 8009c00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 80b7 	beq.w	8009d76 <_dtoa_r+0x8d6>
 8009c08:	b18c      	cbz	r4, 8009c2e <_dtoa_r+0x78e>
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	4658      	mov	r0, fp
 8009c10:	f000 fcbe 	bl	800a590 <__pow5mult>
 8009c14:	464a      	mov	r2, r9
 8009c16:	4601      	mov	r1, r0
 8009c18:	4605      	mov	r5, r0
 8009c1a:	4658      	mov	r0, fp
 8009c1c:	f000 fc10 	bl	800a440 <__multiply>
 8009c20:	4649      	mov	r1, r9
 8009c22:	9004      	str	r0, [sp, #16]
 8009c24:	4658      	mov	r0, fp
 8009c26:	f000 fb41 	bl	800a2ac <_Bfree>
 8009c2a:	9b04      	ldr	r3, [sp, #16]
 8009c2c:	4699      	mov	r9, r3
 8009c2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c30:	1b1a      	subs	r2, r3, r4
 8009c32:	d004      	beq.n	8009c3e <_dtoa_r+0x79e>
 8009c34:	4649      	mov	r1, r9
 8009c36:	4658      	mov	r0, fp
 8009c38:	f000 fcaa 	bl	800a590 <__pow5mult>
 8009c3c:	4681      	mov	r9, r0
 8009c3e:	2101      	movs	r1, #1
 8009c40:	4658      	mov	r0, fp
 8009c42:	f000 fbe7 	bl	800a414 <__i2b>
 8009c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c48:	4604      	mov	r4, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f000 81c9 	beq.w	8009fe2 <_dtoa_r+0xb42>
 8009c50:	461a      	mov	r2, r3
 8009c52:	4601      	mov	r1, r0
 8009c54:	4658      	mov	r0, fp
 8009c56:	f000 fc9b 	bl	800a590 <__pow5mult>
 8009c5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	f300 808f 	bgt.w	8009d82 <_dtoa_r+0x8e2>
 8009c64:	9b02      	ldr	r3, [sp, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f040 8087 	bne.w	8009d7a <_dtoa_r+0x8da>
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f040 8083 	bne.w	8009d7e <_dtoa_r+0x8de>
 8009c78:	9b03      	ldr	r3, [sp, #12]
 8009c7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c7e:	0d1b      	lsrs	r3, r3, #20
 8009c80:	051b      	lsls	r3, r3, #20
 8009c82:	b12b      	cbz	r3, 8009c90 <_dtoa_r+0x7f0>
 8009c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c86:	f108 0801 	add.w	r8, r8, #1
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c8e:	2301      	movs	r3, #1
 8009c90:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 81aa 	beq.w	8009fee <_dtoa_r+0xb4e>
 8009c9a:	6923      	ldr	r3, [r4, #16]
 8009c9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ca0:	6918      	ldr	r0, [r3, #16]
 8009ca2:	f000 fb6b 	bl	800a37c <__hi0bits>
 8009ca6:	f1c0 0020 	rsb	r0, r0, #32
 8009caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cac:	4418      	add	r0, r3
 8009cae:	f010 001f 	ands.w	r0, r0, #31
 8009cb2:	d071      	beq.n	8009d98 <_dtoa_r+0x8f8>
 8009cb4:	f1c0 0320 	rsb	r3, r0, #32
 8009cb8:	2b04      	cmp	r3, #4
 8009cba:	dd65      	ble.n	8009d88 <_dtoa_r+0x8e8>
 8009cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cbe:	f1c0 001c 	rsb	r0, r0, #28
 8009cc2:	4403      	add	r3, r0
 8009cc4:	4480      	add	r8, r0
 8009cc6:	4406      	add	r6, r0
 8009cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cca:	f1b8 0f00 	cmp.w	r8, #0
 8009cce:	dd05      	ble.n	8009cdc <_dtoa_r+0x83c>
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	4642      	mov	r2, r8
 8009cd4:	4658      	mov	r0, fp
 8009cd6:	f000 fcb5 	bl	800a644 <__lshift>
 8009cda:	4681      	mov	r9, r0
 8009cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	dd05      	ble.n	8009cee <_dtoa_r+0x84e>
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	4658      	mov	r0, fp
 8009ce8:	f000 fcac 	bl	800a644 <__lshift>
 8009cec:	4604      	mov	r4, r0
 8009cee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d053      	beq.n	8009d9c <_dtoa_r+0x8fc>
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	4648      	mov	r0, r9
 8009cf8:	f000 fd10 	bl	800a71c <__mcmp>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	da4d      	bge.n	8009d9c <_dtoa_r+0x8fc>
 8009d00:	1e7b      	subs	r3, r7, #1
 8009d02:	4649      	mov	r1, r9
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	220a      	movs	r2, #10
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4658      	mov	r0, fp
 8009d0c:	f000 faf0 	bl	800a2f0 <__multadd>
 8009d10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d12:	4681      	mov	r9, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 816c 	beq.w	8009ff2 <_dtoa_r+0xb52>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	220a      	movs	r2, #10
 8009d20:	4658      	mov	r0, fp
 8009d22:	f000 fae5 	bl	800a2f0 <__multadd>
 8009d26:	9b08      	ldr	r3, [sp, #32]
 8009d28:	4605      	mov	r5, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dc61      	bgt.n	8009df2 <_dtoa_r+0x952>
 8009d2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	dc3b      	bgt.n	8009dac <_dtoa_r+0x90c>
 8009d34:	e05d      	b.n	8009df2 <_dtoa_r+0x952>
 8009d36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d38:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d3c:	e746      	b.n	8009bcc <_dtoa_r+0x72c>
 8009d3e:	9b07      	ldr	r3, [sp, #28]
 8009d40:	1e5c      	subs	r4, r3, #1
 8009d42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d44:	42a3      	cmp	r3, r4
 8009d46:	bfbf      	itttt	lt
 8009d48:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009d4a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009d4c:	1ae3      	sublt	r3, r4, r3
 8009d4e:	18d2      	addlt	r2, r2, r3
 8009d50:	bfa8      	it	ge
 8009d52:	1b1c      	subge	r4, r3, r4
 8009d54:	9b07      	ldr	r3, [sp, #28]
 8009d56:	bfbe      	ittt	lt
 8009d58:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009d5a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009d5c:	2400      	movlt	r4, #0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	bfb5      	itete	lt
 8009d62:	eba8 0603 	sublt.w	r6, r8, r3
 8009d66:	4646      	movge	r6, r8
 8009d68:	2300      	movlt	r3, #0
 8009d6a:	9b07      	ldrge	r3, [sp, #28]
 8009d6c:	e730      	b.n	8009bd0 <_dtoa_r+0x730>
 8009d6e:	4646      	mov	r6, r8
 8009d70:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d72:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d74:	e735      	b.n	8009be2 <_dtoa_r+0x742>
 8009d76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d78:	e75c      	b.n	8009c34 <_dtoa_r+0x794>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e788      	b.n	8009c90 <_dtoa_r+0x7f0>
 8009d7e:	9b02      	ldr	r3, [sp, #8]
 8009d80:	e786      	b.n	8009c90 <_dtoa_r+0x7f0>
 8009d82:	2300      	movs	r3, #0
 8009d84:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d86:	e788      	b.n	8009c9a <_dtoa_r+0x7fa>
 8009d88:	d09f      	beq.n	8009cca <_dtoa_r+0x82a>
 8009d8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d8c:	331c      	adds	r3, #28
 8009d8e:	441a      	add	r2, r3
 8009d90:	4498      	add	r8, r3
 8009d92:	441e      	add	r6, r3
 8009d94:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d96:	e798      	b.n	8009cca <_dtoa_r+0x82a>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	e7f6      	b.n	8009d8a <_dtoa_r+0x8ea>
 8009d9c:	9b07      	ldr	r3, [sp, #28]
 8009d9e:	9704      	str	r7, [sp, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	dc20      	bgt.n	8009de6 <_dtoa_r+0x946>
 8009da4:	9308      	str	r3, [sp, #32]
 8009da6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	dd1e      	ble.n	8009dea <_dtoa_r+0x94a>
 8009dac:	9b08      	ldr	r3, [sp, #32]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f47f aebc 	bne.w	8009b2c <_dtoa_r+0x68c>
 8009db4:	4621      	mov	r1, r4
 8009db6:	2205      	movs	r2, #5
 8009db8:	4658      	mov	r0, fp
 8009dba:	f000 fa99 	bl	800a2f0 <__multadd>
 8009dbe:	4601      	mov	r1, r0
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	4648      	mov	r0, r9
 8009dc4:	f000 fcaa 	bl	800a71c <__mcmp>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	f77f aeaf 	ble.w	8009b2c <_dtoa_r+0x68c>
 8009dce:	2331      	movs	r3, #49	@ 0x31
 8009dd0:	4656      	mov	r6, sl
 8009dd2:	f806 3b01 	strb.w	r3, [r6], #1
 8009dd6:	9b04      	ldr	r3, [sp, #16]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	9304      	str	r3, [sp, #16]
 8009ddc:	e6aa      	b.n	8009b34 <_dtoa_r+0x694>
 8009dde:	9c07      	ldr	r4, [sp, #28]
 8009de0:	9704      	str	r7, [sp, #16]
 8009de2:	4625      	mov	r5, r4
 8009de4:	e7f3      	b.n	8009dce <_dtoa_r+0x92e>
 8009de6:	9b07      	ldr	r3, [sp, #28]
 8009de8:	9308      	str	r3, [sp, #32]
 8009dea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8104 	beq.w	8009ffa <_dtoa_r+0xb5a>
 8009df2:	2e00      	cmp	r6, #0
 8009df4:	dd05      	ble.n	8009e02 <_dtoa_r+0x962>
 8009df6:	4629      	mov	r1, r5
 8009df8:	4632      	mov	r2, r6
 8009dfa:	4658      	mov	r0, fp
 8009dfc:	f000 fc22 	bl	800a644 <__lshift>
 8009e00:	4605      	mov	r5, r0
 8009e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d05a      	beq.n	8009ebe <_dtoa_r+0xa1e>
 8009e08:	4658      	mov	r0, fp
 8009e0a:	6869      	ldr	r1, [r5, #4]
 8009e0c:	f000 fa0e 	bl	800a22c <_Balloc>
 8009e10:	4606      	mov	r6, r0
 8009e12:	b928      	cbnz	r0, 8009e20 <_dtoa_r+0x980>
 8009e14:	4602      	mov	r2, r0
 8009e16:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e1a:	4b83      	ldr	r3, [pc, #524]	@ (800a028 <_dtoa_r+0xb88>)
 8009e1c:	f7ff bb54 	b.w	80094c8 <_dtoa_r+0x28>
 8009e20:	692a      	ldr	r2, [r5, #16]
 8009e22:	f105 010c 	add.w	r1, r5, #12
 8009e26:	3202      	adds	r2, #2
 8009e28:	0092      	lsls	r2, r2, #2
 8009e2a:	300c      	adds	r0, #12
 8009e2c:	f000 ffa8 	bl	800ad80 <memcpy>
 8009e30:	2201      	movs	r2, #1
 8009e32:	4631      	mov	r1, r6
 8009e34:	4658      	mov	r0, fp
 8009e36:	f000 fc05 	bl	800a644 <__lshift>
 8009e3a:	462f      	mov	r7, r5
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	f10a 0301 	add.w	r3, sl, #1
 8009e42:	9307      	str	r3, [sp, #28]
 8009e44:	9b08      	ldr	r3, [sp, #32]
 8009e46:	4453      	add	r3, sl
 8009e48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e4a:	9b02      	ldr	r3, [sp, #8]
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e52:	9b07      	ldr	r3, [sp, #28]
 8009e54:	4621      	mov	r1, r4
 8009e56:	3b01      	subs	r3, #1
 8009e58:	4648      	mov	r0, r9
 8009e5a:	9302      	str	r3, [sp, #8]
 8009e5c:	f7ff fa97 	bl	800938e <quorem>
 8009e60:	4639      	mov	r1, r7
 8009e62:	9008      	str	r0, [sp, #32]
 8009e64:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e68:	4648      	mov	r0, r9
 8009e6a:	f000 fc57 	bl	800a71c <__mcmp>
 8009e6e:	462a      	mov	r2, r5
 8009e70:	9009      	str	r0, [sp, #36]	@ 0x24
 8009e72:	4621      	mov	r1, r4
 8009e74:	4658      	mov	r0, fp
 8009e76:	f000 fc6d 	bl	800a754 <__mdiff>
 8009e7a:	68c2      	ldr	r2, [r0, #12]
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	bb02      	cbnz	r2, 8009ec2 <_dtoa_r+0xa22>
 8009e80:	4601      	mov	r1, r0
 8009e82:	4648      	mov	r0, r9
 8009e84:	f000 fc4a 	bl	800a71c <__mcmp>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	4658      	mov	r0, fp
 8009e8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e90:	f000 fa0c 	bl	800a2ac <_Bfree>
 8009e94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e96:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e98:	9e07      	ldr	r6, [sp, #28]
 8009e9a:	ea43 0102 	orr.w	r1, r3, r2
 8009e9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ea0:	4319      	orrs	r1, r3
 8009ea2:	d110      	bne.n	8009ec6 <_dtoa_r+0xa26>
 8009ea4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ea8:	d029      	beq.n	8009efe <_dtoa_r+0xa5e>
 8009eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	dd02      	ble.n	8009eb6 <_dtoa_r+0xa16>
 8009eb0:	9b08      	ldr	r3, [sp, #32]
 8009eb2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009eb6:	9b02      	ldr	r3, [sp, #8]
 8009eb8:	f883 8000 	strb.w	r8, [r3]
 8009ebc:	e63b      	b.n	8009b36 <_dtoa_r+0x696>
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	e7bb      	b.n	8009e3a <_dtoa_r+0x99a>
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	e7e1      	b.n	8009e8a <_dtoa_r+0x9ea>
 8009ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	db04      	blt.n	8009ed6 <_dtoa_r+0xa36>
 8009ecc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009ece:	430b      	orrs	r3, r1
 8009ed0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	d120      	bne.n	8009f18 <_dtoa_r+0xa78>
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	dded      	ble.n	8009eb6 <_dtoa_r+0xa16>
 8009eda:	4649      	mov	r1, r9
 8009edc:	2201      	movs	r2, #1
 8009ede:	4658      	mov	r0, fp
 8009ee0:	f000 fbb0 	bl	800a644 <__lshift>
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	4681      	mov	r9, r0
 8009ee8:	f000 fc18 	bl	800a71c <__mcmp>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	dc03      	bgt.n	8009ef8 <_dtoa_r+0xa58>
 8009ef0:	d1e1      	bne.n	8009eb6 <_dtoa_r+0xa16>
 8009ef2:	f018 0f01 	tst.w	r8, #1
 8009ef6:	d0de      	beq.n	8009eb6 <_dtoa_r+0xa16>
 8009ef8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009efc:	d1d8      	bne.n	8009eb0 <_dtoa_r+0xa10>
 8009efe:	2339      	movs	r3, #57	@ 0x39
 8009f00:	9a02      	ldr	r2, [sp, #8]
 8009f02:	7013      	strb	r3, [r2, #0]
 8009f04:	4633      	mov	r3, r6
 8009f06:	461e      	mov	r6, r3
 8009f08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	2a39      	cmp	r2, #57	@ 0x39
 8009f10:	d052      	beq.n	8009fb8 <_dtoa_r+0xb18>
 8009f12:	3201      	adds	r2, #1
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	e60e      	b.n	8009b36 <_dtoa_r+0x696>
 8009f18:	2a00      	cmp	r2, #0
 8009f1a:	dd07      	ble.n	8009f2c <_dtoa_r+0xa8c>
 8009f1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f20:	d0ed      	beq.n	8009efe <_dtoa_r+0xa5e>
 8009f22:	9a02      	ldr	r2, [sp, #8]
 8009f24:	f108 0301 	add.w	r3, r8, #1
 8009f28:	7013      	strb	r3, [r2, #0]
 8009f2a:	e604      	b.n	8009b36 <_dtoa_r+0x696>
 8009f2c:	9b07      	ldr	r3, [sp, #28]
 8009f2e:	9a07      	ldr	r2, [sp, #28]
 8009f30:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009f34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d028      	beq.n	8009f8c <_dtoa_r+0xaec>
 8009f3a:	4649      	mov	r1, r9
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	220a      	movs	r2, #10
 8009f40:	4658      	mov	r0, fp
 8009f42:	f000 f9d5 	bl	800a2f0 <__multadd>
 8009f46:	42af      	cmp	r7, r5
 8009f48:	4681      	mov	r9, r0
 8009f4a:	f04f 0300 	mov.w	r3, #0
 8009f4e:	f04f 020a 	mov.w	r2, #10
 8009f52:	4639      	mov	r1, r7
 8009f54:	4658      	mov	r0, fp
 8009f56:	d107      	bne.n	8009f68 <_dtoa_r+0xac8>
 8009f58:	f000 f9ca 	bl	800a2f0 <__multadd>
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	4605      	mov	r5, r0
 8009f60:	9b07      	ldr	r3, [sp, #28]
 8009f62:	3301      	adds	r3, #1
 8009f64:	9307      	str	r3, [sp, #28]
 8009f66:	e774      	b.n	8009e52 <_dtoa_r+0x9b2>
 8009f68:	f000 f9c2 	bl	800a2f0 <__multadd>
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	4607      	mov	r7, r0
 8009f70:	2300      	movs	r3, #0
 8009f72:	220a      	movs	r2, #10
 8009f74:	4658      	mov	r0, fp
 8009f76:	f000 f9bb 	bl	800a2f0 <__multadd>
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	e7f0      	b.n	8009f60 <_dtoa_r+0xac0>
 8009f7e:	9b08      	ldr	r3, [sp, #32]
 8009f80:	2700      	movs	r7, #0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	bfcc      	ite	gt
 8009f86:	461e      	movgt	r6, r3
 8009f88:	2601      	movle	r6, #1
 8009f8a:	4456      	add	r6, sl
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	2201      	movs	r2, #1
 8009f90:	4658      	mov	r0, fp
 8009f92:	f000 fb57 	bl	800a644 <__lshift>
 8009f96:	4621      	mov	r1, r4
 8009f98:	4681      	mov	r9, r0
 8009f9a:	f000 fbbf 	bl	800a71c <__mcmp>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	dcb0      	bgt.n	8009f04 <_dtoa_r+0xa64>
 8009fa2:	d102      	bne.n	8009faa <_dtoa_r+0xb0a>
 8009fa4:	f018 0f01 	tst.w	r8, #1
 8009fa8:	d1ac      	bne.n	8009f04 <_dtoa_r+0xa64>
 8009faa:	4633      	mov	r3, r6
 8009fac:	461e      	mov	r6, r3
 8009fae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fb2:	2a30      	cmp	r2, #48	@ 0x30
 8009fb4:	d0fa      	beq.n	8009fac <_dtoa_r+0xb0c>
 8009fb6:	e5be      	b.n	8009b36 <_dtoa_r+0x696>
 8009fb8:	459a      	cmp	sl, r3
 8009fba:	d1a4      	bne.n	8009f06 <_dtoa_r+0xa66>
 8009fbc:	9b04      	ldr	r3, [sp, #16]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	2331      	movs	r3, #49	@ 0x31
 8009fc4:	f88a 3000 	strb.w	r3, [sl]
 8009fc8:	e5b5      	b.n	8009b36 <_dtoa_r+0x696>
 8009fca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009fcc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a02c <_dtoa_r+0xb8c>
 8009fd0:	b11b      	cbz	r3, 8009fda <_dtoa_r+0xb3a>
 8009fd2:	f10a 0308 	add.w	r3, sl, #8
 8009fd6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	4650      	mov	r0, sl
 8009fdc:	b017      	add	sp, #92	@ 0x5c
 8009fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	f77f ae3d 	ble.w	8009c64 <_dtoa_r+0x7c4>
 8009fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fec:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fee:	2001      	movs	r0, #1
 8009ff0:	e65b      	b.n	8009caa <_dtoa_r+0x80a>
 8009ff2:	9b08      	ldr	r3, [sp, #32]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f77f aed6 	ble.w	8009da6 <_dtoa_r+0x906>
 8009ffa:	4656      	mov	r6, sl
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4648      	mov	r0, r9
 800a000:	f7ff f9c5 	bl	800938e <quorem>
 800a004:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a008:	9b08      	ldr	r3, [sp, #32]
 800a00a:	f806 8b01 	strb.w	r8, [r6], #1
 800a00e:	eba6 020a 	sub.w	r2, r6, sl
 800a012:	4293      	cmp	r3, r2
 800a014:	ddb3      	ble.n	8009f7e <_dtoa_r+0xade>
 800a016:	4649      	mov	r1, r9
 800a018:	2300      	movs	r3, #0
 800a01a:	220a      	movs	r2, #10
 800a01c:	4658      	mov	r0, fp
 800a01e:	f000 f967 	bl	800a2f0 <__multadd>
 800a022:	4681      	mov	r9, r0
 800a024:	e7ea      	b.n	8009ffc <_dtoa_r+0xb5c>
 800a026:	bf00      	nop
 800a028:	0800bb18 	.word	0x0800bb18
 800a02c:	0800ba9c 	.word	0x0800ba9c

0800a030 <_free_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4605      	mov	r5, r0
 800a034:	2900      	cmp	r1, #0
 800a036:	d040      	beq.n	800a0ba <_free_r+0x8a>
 800a038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a03c:	1f0c      	subs	r4, r1, #4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bfb8      	it	lt
 800a042:	18e4      	addlt	r4, r4, r3
 800a044:	f000 f8e6 	bl	800a214 <__malloc_lock>
 800a048:	4a1c      	ldr	r2, [pc, #112]	@ (800a0bc <_free_r+0x8c>)
 800a04a:	6813      	ldr	r3, [r2, #0]
 800a04c:	b933      	cbnz	r3, 800a05c <_free_r+0x2c>
 800a04e:	6063      	str	r3, [r4, #4]
 800a050:	6014      	str	r4, [r2, #0]
 800a052:	4628      	mov	r0, r5
 800a054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a058:	f000 b8e2 	b.w	800a220 <__malloc_unlock>
 800a05c:	42a3      	cmp	r3, r4
 800a05e:	d908      	bls.n	800a072 <_free_r+0x42>
 800a060:	6820      	ldr	r0, [r4, #0]
 800a062:	1821      	adds	r1, r4, r0
 800a064:	428b      	cmp	r3, r1
 800a066:	bf01      	itttt	eq
 800a068:	6819      	ldreq	r1, [r3, #0]
 800a06a:	685b      	ldreq	r3, [r3, #4]
 800a06c:	1809      	addeq	r1, r1, r0
 800a06e:	6021      	streq	r1, [r4, #0]
 800a070:	e7ed      	b.n	800a04e <_free_r+0x1e>
 800a072:	461a      	mov	r2, r3
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	b10b      	cbz	r3, 800a07c <_free_r+0x4c>
 800a078:	42a3      	cmp	r3, r4
 800a07a:	d9fa      	bls.n	800a072 <_free_r+0x42>
 800a07c:	6811      	ldr	r1, [r2, #0]
 800a07e:	1850      	adds	r0, r2, r1
 800a080:	42a0      	cmp	r0, r4
 800a082:	d10b      	bne.n	800a09c <_free_r+0x6c>
 800a084:	6820      	ldr	r0, [r4, #0]
 800a086:	4401      	add	r1, r0
 800a088:	1850      	adds	r0, r2, r1
 800a08a:	4283      	cmp	r3, r0
 800a08c:	6011      	str	r1, [r2, #0]
 800a08e:	d1e0      	bne.n	800a052 <_free_r+0x22>
 800a090:	6818      	ldr	r0, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	4408      	add	r0, r1
 800a096:	6010      	str	r0, [r2, #0]
 800a098:	6053      	str	r3, [r2, #4]
 800a09a:	e7da      	b.n	800a052 <_free_r+0x22>
 800a09c:	d902      	bls.n	800a0a4 <_free_r+0x74>
 800a09e:	230c      	movs	r3, #12
 800a0a0:	602b      	str	r3, [r5, #0]
 800a0a2:	e7d6      	b.n	800a052 <_free_r+0x22>
 800a0a4:	6820      	ldr	r0, [r4, #0]
 800a0a6:	1821      	adds	r1, r4, r0
 800a0a8:	428b      	cmp	r3, r1
 800a0aa:	bf01      	itttt	eq
 800a0ac:	6819      	ldreq	r1, [r3, #0]
 800a0ae:	685b      	ldreq	r3, [r3, #4]
 800a0b0:	1809      	addeq	r1, r1, r0
 800a0b2:	6021      	streq	r1, [r4, #0]
 800a0b4:	6063      	str	r3, [r4, #4]
 800a0b6:	6054      	str	r4, [r2, #4]
 800a0b8:	e7cb      	b.n	800a052 <_free_r+0x22>
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20002758 	.word	0x20002758

0800a0c0 <malloc>:
 800a0c0:	4b02      	ldr	r3, [pc, #8]	@ (800a0cc <malloc+0xc>)
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	f000 b825 	b.w	800a114 <_malloc_r>
 800a0ca:	bf00      	nop
 800a0cc:	20000030 	.word	0x20000030

0800a0d0 <sbrk_aligned>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	4e0f      	ldr	r6, [pc, #60]	@ (800a110 <sbrk_aligned+0x40>)
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	6831      	ldr	r1, [r6, #0]
 800a0d8:	4605      	mov	r5, r0
 800a0da:	b911      	cbnz	r1, 800a0e2 <sbrk_aligned+0x12>
 800a0dc:	f000 fe40 	bl	800ad60 <_sbrk_r>
 800a0e0:	6030      	str	r0, [r6, #0]
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	f000 fe3b 	bl	800ad60 <_sbrk_r>
 800a0ea:	1c43      	adds	r3, r0, #1
 800a0ec:	d103      	bne.n	800a0f6 <sbrk_aligned+0x26>
 800a0ee:	f04f 34ff 	mov.w	r4, #4294967295
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	bd70      	pop	{r4, r5, r6, pc}
 800a0f6:	1cc4      	adds	r4, r0, #3
 800a0f8:	f024 0403 	bic.w	r4, r4, #3
 800a0fc:	42a0      	cmp	r0, r4
 800a0fe:	d0f8      	beq.n	800a0f2 <sbrk_aligned+0x22>
 800a100:	1a21      	subs	r1, r4, r0
 800a102:	4628      	mov	r0, r5
 800a104:	f000 fe2c 	bl	800ad60 <_sbrk_r>
 800a108:	3001      	adds	r0, #1
 800a10a:	d1f2      	bne.n	800a0f2 <sbrk_aligned+0x22>
 800a10c:	e7ef      	b.n	800a0ee <sbrk_aligned+0x1e>
 800a10e:	bf00      	nop
 800a110:	20002754 	.word	0x20002754

0800a114 <_malloc_r>:
 800a114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a118:	1ccd      	adds	r5, r1, #3
 800a11a:	f025 0503 	bic.w	r5, r5, #3
 800a11e:	3508      	adds	r5, #8
 800a120:	2d0c      	cmp	r5, #12
 800a122:	bf38      	it	cc
 800a124:	250c      	movcc	r5, #12
 800a126:	2d00      	cmp	r5, #0
 800a128:	4606      	mov	r6, r0
 800a12a:	db01      	blt.n	800a130 <_malloc_r+0x1c>
 800a12c:	42a9      	cmp	r1, r5
 800a12e:	d904      	bls.n	800a13a <_malloc_r+0x26>
 800a130:	230c      	movs	r3, #12
 800a132:	6033      	str	r3, [r6, #0]
 800a134:	2000      	movs	r0, #0
 800a136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a13a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a210 <_malloc_r+0xfc>
 800a13e:	f000 f869 	bl	800a214 <__malloc_lock>
 800a142:	f8d8 3000 	ldr.w	r3, [r8]
 800a146:	461c      	mov	r4, r3
 800a148:	bb44      	cbnz	r4, 800a19c <_malloc_r+0x88>
 800a14a:	4629      	mov	r1, r5
 800a14c:	4630      	mov	r0, r6
 800a14e:	f7ff ffbf 	bl	800a0d0 <sbrk_aligned>
 800a152:	1c43      	adds	r3, r0, #1
 800a154:	4604      	mov	r4, r0
 800a156:	d158      	bne.n	800a20a <_malloc_r+0xf6>
 800a158:	f8d8 4000 	ldr.w	r4, [r8]
 800a15c:	4627      	mov	r7, r4
 800a15e:	2f00      	cmp	r7, #0
 800a160:	d143      	bne.n	800a1ea <_malloc_r+0xd6>
 800a162:	2c00      	cmp	r4, #0
 800a164:	d04b      	beq.n	800a1fe <_malloc_r+0xea>
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	4639      	mov	r1, r7
 800a16a:	4630      	mov	r0, r6
 800a16c:	eb04 0903 	add.w	r9, r4, r3
 800a170:	f000 fdf6 	bl	800ad60 <_sbrk_r>
 800a174:	4581      	cmp	r9, r0
 800a176:	d142      	bne.n	800a1fe <_malloc_r+0xea>
 800a178:	6821      	ldr	r1, [r4, #0]
 800a17a:	4630      	mov	r0, r6
 800a17c:	1a6d      	subs	r5, r5, r1
 800a17e:	4629      	mov	r1, r5
 800a180:	f7ff ffa6 	bl	800a0d0 <sbrk_aligned>
 800a184:	3001      	adds	r0, #1
 800a186:	d03a      	beq.n	800a1fe <_malloc_r+0xea>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	442b      	add	r3, r5
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	f8d8 3000 	ldr.w	r3, [r8]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	bb62      	cbnz	r2, 800a1f0 <_malloc_r+0xdc>
 800a196:	f8c8 7000 	str.w	r7, [r8]
 800a19a:	e00f      	b.n	800a1bc <_malloc_r+0xa8>
 800a19c:	6822      	ldr	r2, [r4, #0]
 800a19e:	1b52      	subs	r2, r2, r5
 800a1a0:	d420      	bmi.n	800a1e4 <_malloc_r+0xd0>
 800a1a2:	2a0b      	cmp	r2, #11
 800a1a4:	d917      	bls.n	800a1d6 <_malloc_r+0xc2>
 800a1a6:	1961      	adds	r1, r4, r5
 800a1a8:	42a3      	cmp	r3, r4
 800a1aa:	6025      	str	r5, [r4, #0]
 800a1ac:	bf18      	it	ne
 800a1ae:	6059      	strne	r1, [r3, #4]
 800a1b0:	6863      	ldr	r3, [r4, #4]
 800a1b2:	bf08      	it	eq
 800a1b4:	f8c8 1000 	streq.w	r1, [r8]
 800a1b8:	5162      	str	r2, [r4, r5]
 800a1ba:	604b      	str	r3, [r1, #4]
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f000 f82f 	bl	800a220 <__malloc_unlock>
 800a1c2:	f104 000b 	add.w	r0, r4, #11
 800a1c6:	1d23      	adds	r3, r4, #4
 800a1c8:	f020 0007 	bic.w	r0, r0, #7
 800a1cc:	1ac2      	subs	r2, r0, r3
 800a1ce:	bf1c      	itt	ne
 800a1d0:	1a1b      	subne	r3, r3, r0
 800a1d2:	50a3      	strne	r3, [r4, r2]
 800a1d4:	e7af      	b.n	800a136 <_malloc_r+0x22>
 800a1d6:	6862      	ldr	r2, [r4, #4]
 800a1d8:	42a3      	cmp	r3, r4
 800a1da:	bf0c      	ite	eq
 800a1dc:	f8c8 2000 	streq.w	r2, [r8]
 800a1e0:	605a      	strne	r2, [r3, #4]
 800a1e2:	e7eb      	b.n	800a1bc <_malloc_r+0xa8>
 800a1e4:	4623      	mov	r3, r4
 800a1e6:	6864      	ldr	r4, [r4, #4]
 800a1e8:	e7ae      	b.n	800a148 <_malloc_r+0x34>
 800a1ea:	463c      	mov	r4, r7
 800a1ec:	687f      	ldr	r7, [r7, #4]
 800a1ee:	e7b6      	b.n	800a15e <_malloc_r+0x4a>
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	d1fb      	bne.n	800a1f0 <_malloc_r+0xdc>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	6053      	str	r3, [r2, #4]
 800a1fc:	e7de      	b.n	800a1bc <_malloc_r+0xa8>
 800a1fe:	230c      	movs	r3, #12
 800a200:	4630      	mov	r0, r6
 800a202:	6033      	str	r3, [r6, #0]
 800a204:	f000 f80c 	bl	800a220 <__malloc_unlock>
 800a208:	e794      	b.n	800a134 <_malloc_r+0x20>
 800a20a:	6005      	str	r5, [r0, #0]
 800a20c:	e7d6      	b.n	800a1bc <_malloc_r+0xa8>
 800a20e:	bf00      	nop
 800a210:	20002758 	.word	0x20002758

0800a214 <__malloc_lock>:
 800a214:	4801      	ldr	r0, [pc, #4]	@ (800a21c <__malloc_lock+0x8>)
 800a216:	f7ff b8aa 	b.w	800936e <__retarget_lock_acquire_recursive>
 800a21a:	bf00      	nop
 800a21c:	20002750 	.word	0x20002750

0800a220 <__malloc_unlock>:
 800a220:	4801      	ldr	r0, [pc, #4]	@ (800a228 <__malloc_unlock+0x8>)
 800a222:	f7ff b8a5 	b.w	8009370 <__retarget_lock_release_recursive>
 800a226:	bf00      	nop
 800a228:	20002750 	.word	0x20002750

0800a22c <_Balloc>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	69c6      	ldr	r6, [r0, #28]
 800a230:	4604      	mov	r4, r0
 800a232:	460d      	mov	r5, r1
 800a234:	b976      	cbnz	r6, 800a254 <_Balloc+0x28>
 800a236:	2010      	movs	r0, #16
 800a238:	f7ff ff42 	bl	800a0c0 <malloc>
 800a23c:	4602      	mov	r2, r0
 800a23e:	61e0      	str	r0, [r4, #28]
 800a240:	b920      	cbnz	r0, 800a24c <_Balloc+0x20>
 800a242:	216b      	movs	r1, #107	@ 0x6b
 800a244:	4b17      	ldr	r3, [pc, #92]	@ (800a2a4 <_Balloc+0x78>)
 800a246:	4818      	ldr	r0, [pc, #96]	@ (800a2a8 <_Balloc+0x7c>)
 800a248:	f000 fda8 	bl	800ad9c <__assert_func>
 800a24c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a250:	6006      	str	r6, [r0, #0]
 800a252:	60c6      	str	r6, [r0, #12]
 800a254:	69e6      	ldr	r6, [r4, #28]
 800a256:	68f3      	ldr	r3, [r6, #12]
 800a258:	b183      	cbz	r3, 800a27c <_Balloc+0x50>
 800a25a:	69e3      	ldr	r3, [r4, #28]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a262:	b9b8      	cbnz	r0, 800a294 <_Balloc+0x68>
 800a264:	2101      	movs	r1, #1
 800a266:	fa01 f605 	lsl.w	r6, r1, r5
 800a26a:	1d72      	adds	r2, r6, #5
 800a26c:	4620      	mov	r0, r4
 800a26e:	0092      	lsls	r2, r2, #2
 800a270:	f000 fdb2 	bl	800add8 <_calloc_r>
 800a274:	b160      	cbz	r0, 800a290 <_Balloc+0x64>
 800a276:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a27a:	e00e      	b.n	800a29a <_Balloc+0x6e>
 800a27c:	2221      	movs	r2, #33	@ 0x21
 800a27e:	2104      	movs	r1, #4
 800a280:	4620      	mov	r0, r4
 800a282:	f000 fda9 	bl	800add8 <_calloc_r>
 800a286:	69e3      	ldr	r3, [r4, #28]
 800a288:	60f0      	str	r0, [r6, #12]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e4      	bne.n	800a25a <_Balloc+0x2e>
 800a290:	2000      	movs	r0, #0
 800a292:	bd70      	pop	{r4, r5, r6, pc}
 800a294:	6802      	ldr	r2, [r0, #0]
 800a296:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a29a:	2300      	movs	r3, #0
 800a29c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2a0:	e7f7      	b.n	800a292 <_Balloc+0x66>
 800a2a2:	bf00      	nop
 800a2a4:	0800baa9 	.word	0x0800baa9
 800a2a8:	0800bb29 	.word	0x0800bb29

0800a2ac <_Bfree>:
 800a2ac:	b570      	push	{r4, r5, r6, lr}
 800a2ae:	69c6      	ldr	r6, [r0, #28]
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	b976      	cbnz	r6, 800a2d4 <_Bfree+0x28>
 800a2b6:	2010      	movs	r0, #16
 800a2b8:	f7ff ff02 	bl	800a0c0 <malloc>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	61e8      	str	r0, [r5, #28]
 800a2c0:	b920      	cbnz	r0, 800a2cc <_Bfree+0x20>
 800a2c2:	218f      	movs	r1, #143	@ 0x8f
 800a2c4:	4b08      	ldr	r3, [pc, #32]	@ (800a2e8 <_Bfree+0x3c>)
 800a2c6:	4809      	ldr	r0, [pc, #36]	@ (800a2ec <_Bfree+0x40>)
 800a2c8:	f000 fd68 	bl	800ad9c <__assert_func>
 800a2cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2d0:	6006      	str	r6, [r0, #0]
 800a2d2:	60c6      	str	r6, [r0, #12]
 800a2d4:	b13c      	cbz	r4, 800a2e6 <_Bfree+0x3a>
 800a2d6:	69eb      	ldr	r3, [r5, #28]
 800a2d8:	6862      	ldr	r2, [r4, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2e0:	6021      	str	r1, [r4, #0]
 800a2e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	0800baa9 	.word	0x0800baa9
 800a2ec:	0800bb29 	.word	0x0800bb29

0800a2f0 <__multadd>:
 800a2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	461e      	mov	r6, r3
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	690d      	ldr	r5, [r1, #16]
 800a2fe:	f101 0c14 	add.w	ip, r1, #20
 800a302:	f8dc 3000 	ldr.w	r3, [ip]
 800a306:	3001      	adds	r0, #1
 800a308:	b299      	uxth	r1, r3
 800a30a:	fb02 6101 	mla	r1, r2, r1, r6
 800a30e:	0c1e      	lsrs	r6, r3, #16
 800a310:	0c0b      	lsrs	r3, r1, #16
 800a312:	fb02 3306 	mla	r3, r2, r6, r3
 800a316:	b289      	uxth	r1, r1
 800a318:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a31c:	4285      	cmp	r5, r0
 800a31e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a322:	f84c 1b04 	str.w	r1, [ip], #4
 800a326:	dcec      	bgt.n	800a302 <__multadd+0x12>
 800a328:	b30e      	cbz	r6, 800a36e <__multadd+0x7e>
 800a32a:	68a3      	ldr	r3, [r4, #8]
 800a32c:	42ab      	cmp	r3, r5
 800a32e:	dc19      	bgt.n	800a364 <__multadd+0x74>
 800a330:	6861      	ldr	r1, [r4, #4]
 800a332:	4638      	mov	r0, r7
 800a334:	3101      	adds	r1, #1
 800a336:	f7ff ff79 	bl	800a22c <_Balloc>
 800a33a:	4680      	mov	r8, r0
 800a33c:	b928      	cbnz	r0, 800a34a <__multadd+0x5a>
 800a33e:	4602      	mov	r2, r0
 800a340:	21ba      	movs	r1, #186	@ 0xba
 800a342:	4b0c      	ldr	r3, [pc, #48]	@ (800a374 <__multadd+0x84>)
 800a344:	480c      	ldr	r0, [pc, #48]	@ (800a378 <__multadd+0x88>)
 800a346:	f000 fd29 	bl	800ad9c <__assert_func>
 800a34a:	6922      	ldr	r2, [r4, #16]
 800a34c:	f104 010c 	add.w	r1, r4, #12
 800a350:	3202      	adds	r2, #2
 800a352:	0092      	lsls	r2, r2, #2
 800a354:	300c      	adds	r0, #12
 800a356:	f000 fd13 	bl	800ad80 <memcpy>
 800a35a:	4621      	mov	r1, r4
 800a35c:	4638      	mov	r0, r7
 800a35e:	f7ff ffa5 	bl	800a2ac <_Bfree>
 800a362:	4644      	mov	r4, r8
 800a364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a368:	3501      	adds	r5, #1
 800a36a:	615e      	str	r6, [r3, #20]
 800a36c:	6125      	str	r5, [r4, #16]
 800a36e:	4620      	mov	r0, r4
 800a370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a374:	0800bb18 	.word	0x0800bb18
 800a378:	0800bb29 	.word	0x0800bb29

0800a37c <__hi0bits>:
 800a37c:	4603      	mov	r3, r0
 800a37e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a382:	bf3a      	itte	cc
 800a384:	0403      	lslcc	r3, r0, #16
 800a386:	2010      	movcc	r0, #16
 800a388:	2000      	movcs	r0, #0
 800a38a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a38e:	bf3c      	itt	cc
 800a390:	021b      	lslcc	r3, r3, #8
 800a392:	3008      	addcc	r0, #8
 800a394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a398:	bf3c      	itt	cc
 800a39a:	011b      	lslcc	r3, r3, #4
 800a39c:	3004      	addcc	r0, #4
 800a39e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3a2:	bf3c      	itt	cc
 800a3a4:	009b      	lslcc	r3, r3, #2
 800a3a6:	3002      	addcc	r0, #2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	db05      	blt.n	800a3b8 <__hi0bits+0x3c>
 800a3ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a3b0:	f100 0001 	add.w	r0, r0, #1
 800a3b4:	bf08      	it	eq
 800a3b6:	2020      	moveq	r0, #32
 800a3b8:	4770      	bx	lr

0800a3ba <__lo0bits>:
 800a3ba:	6803      	ldr	r3, [r0, #0]
 800a3bc:	4602      	mov	r2, r0
 800a3be:	f013 0007 	ands.w	r0, r3, #7
 800a3c2:	d00b      	beq.n	800a3dc <__lo0bits+0x22>
 800a3c4:	07d9      	lsls	r1, r3, #31
 800a3c6:	d421      	bmi.n	800a40c <__lo0bits+0x52>
 800a3c8:	0798      	lsls	r0, r3, #30
 800a3ca:	bf49      	itett	mi
 800a3cc:	085b      	lsrmi	r3, r3, #1
 800a3ce:	089b      	lsrpl	r3, r3, #2
 800a3d0:	2001      	movmi	r0, #1
 800a3d2:	6013      	strmi	r3, [r2, #0]
 800a3d4:	bf5c      	itt	pl
 800a3d6:	2002      	movpl	r0, #2
 800a3d8:	6013      	strpl	r3, [r2, #0]
 800a3da:	4770      	bx	lr
 800a3dc:	b299      	uxth	r1, r3
 800a3de:	b909      	cbnz	r1, 800a3e4 <__lo0bits+0x2a>
 800a3e0:	2010      	movs	r0, #16
 800a3e2:	0c1b      	lsrs	r3, r3, #16
 800a3e4:	b2d9      	uxtb	r1, r3
 800a3e6:	b909      	cbnz	r1, 800a3ec <__lo0bits+0x32>
 800a3e8:	3008      	adds	r0, #8
 800a3ea:	0a1b      	lsrs	r3, r3, #8
 800a3ec:	0719      	lsls	r1, r3, #28
 800a3ee:	bf04      	itt	eq
 800a3f0:	091b      	lsreq	r3, r3, #4
 800a3f2:	3004      	addeq	r0, #4
 800a3f4:	0799      	lsls	r1, r3, #30
 800a3f6:	bf04      	itt	eq
 800a3f8:	089b      	lsreq	r3, r3, #2
 800a3fa:	3002      	addeq	r0, #2
 800a3fc:	07d9      	lsls	r1, r3, #31
 800a3fe:	d403      	bmi.n	800a408 <__lo0bits+0x4e>
 800a400:	085b      	lsrs	r3, r3, #1
 800a402:	f100 0001 	add.w	r0, r0, #1
 800a406:	d003      	beq.n	800a410 <__lo0bits+0x56>
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	4770      	bx	lr
 800a40c:	2000      	movs	r0, #0
 800a40e:	4770      	bx	lr
 800a410:	2020      	movs	r0, #32
 800a412:	4770      	bx	lr

0800a414 <__i2b>:
 800a414:	b510      	push	{r4, lr}
 800a416:	460c      	mov	r4, r1
 800a418:	2101      	movs	r1, #1
 800a41a:	f7ff ff07 	bl	800a22c <_Balloc>
 800a41e:	4602      	mov	r2, r0
 800a420:	b928      	cbnz	r0, 800a42e <__i2b+0x1a>
 800a422:	f240 1145 	movw	r1, #325	@ 0x145
 800a426:	4b04      	ldr	r3, [pc, #16]	@ (800a438 <__i2b+0x24>)
 800a428:	4804      	ldr	r0, [pc, #16]	@ (800a43c <__i2b+0x28>)
 800a42a:	f000 fcb7 	bl	800ad9c <__assert_func>
 800a42e:	2301      	movs	r3, #1
 800a430:	6144      	str	r4, [r0, #20]
 800a432:	6103      	str	r3, [r0, #16]
 800a434:	bd10      	pop	{r4, pc}
 800a436:	bf00      	nop
 800a438:	0800bb18 	.word	0x0800bb18
 800a43c:	0800bb29 	.word	0x0800bb29

0800a440 <__multiply>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	4614      	mov	r4, r2
 800a446:	690a      	ldr	r2, [r1, #16]
 800a448:	6923      	ldr	r3, [r4, #16]
 800a44a:	460f      	mov	r7, r1
 800a44c:	429a      	cmp	r2, r3
 800a44e:	bfa2      	ittt	ge
 800a450:	4623      	movge	r3, r4
 800a452:	460c      	movge	r4, r1
 800a454:	461f      	movge	r7, r3
 800a456:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a45a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a45e:	68a3      	ldr	r3, [r4, #8]
 800a460:	6861      	ldr	r1, [r4, #4]
 800a462:	eb0a 0609 	add.w	r6, sl, r9
 800a466:	42b3      	cmp	r3, r6
 800a468:	b085      	sub	sp, #20
 800a46a:	bfb8      	it	lt
 800a46c:	3101      	addlt	r1, #1
 800a46e:	f7ff fedd 	bl	800a22c <_Balloc>
 800a472:	b930      	cbnz	r0, 800a482 <__multiply+0x42>
 800a474:	4602      	mov	r2, r0
 800a476:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a47a:	4b43      	ldr	r3, [pc, #268]	@ (800a588 <__multiply+0x148>)
 800a47c:	4843      	ldr	r0, [pc, #268]	@ (800a58c <__multiply+0x14c>)
 800a47e:	f000 fc8d 	bl	800ad9c <__assert_func>
 800a482:	f100 0514 	add.w	r5, r0, #20
 800a486:	462b      	mov	r3, r5
 800a488:	2200      	movs	r2, #0
 800a48a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a48e:	4543      	cmp	r3, r8
 800a490:	d321      	bcc.n	800a4d6 <__multiply+0x96>
 800a492:	f107 0114 	add.w	r1, r7, #20
 800a496:	f104 0214 	add.w	r2, r4, #20
 800a49a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a49e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a4a2:	9302      	str	r3, [sp, #8]
 800a4a4:	1b13      	subs	r3, r2, r4
 800a4a6:	3b15      	subs	r3, #21
 800a4a8:	f023 0303 	bic.w	r3, r3, #3
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	f104 0715 	add.w	r7, r4, #21
 800a4b2:	42ba      	cmp	r2, r7
 800a4b4:	bf38      	it	cc
 800a4b6:	2304      	movcc	r3, #4
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	9b02      	ldr	r3, [sp, #8]
 800a4bc:	9103      	str	r1, [sp, #12]
 800a4be:	428b      	cmp	r3, r1
 800a4c0:	d80c      	bhi.n	800a4dc <__multiply+0x9c>
 800a4c2:	2e00      	cmp	r6, #0
 800a4c4:	dd03      	ble.n	800a4ce <__multiply+0x8e>
 800a4c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d05a      	beq.n	800a584 <__multiply+0x144>
 800a4ce:	6106      	str	r6, [r0, #16]
 800a4d0:	b005      	add	sp, #20
 800a4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d6:	f843 2b04 	str.w	r2, [r3], #4
 800a4da:	e7d8      	b.n	800a48e <__multiply+0x4e>
 800a4dc:	f8b1 a000 	ldrh.w	sl, [r1]
 800a4e0:	f1ba 0f00 	cmp.w	sl, #0
 800a4e4:	d023      	beq.n	800a52e <__multiply+0xee>
 800a4e6:	46a9      	mov	r9, r5
 800a4e8:	f04f 0c00 	mov.w	ip, #0
 800a4ec:	f104 0e14 	add.w	lr, r4, #20
 800a4f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4f4:	f8d9 3000 	ldr.w	r3, [r9]
 800a4f8:	fa1f fb87 	uxth.w	fp, r7
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	fb0a 330b 	mla	r3, sl, fp, r3
 800a502:	4463      	add	r3, ip
 800a504:	f8d9 c000 	ldr.w	ip, [r9]
 800a508:	0c3f      	lsrs	r7, r7, #16
 800a50a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a50e:	fb0a c707 	mla	r7, sl, r7, ip
 800a512:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a516:	b29b      	uxth	r3, r3
 800a518:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a51c:	4572      	cmp	r2, lr
 800a51e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a522:	f849 3b04 	str.w	r3, [r9], #4
 800a526:	d8e3      	bhi.n	800a4f0 <__multiply+0xb0>
 800a528:	9b01      	ldr	r3, [sp, #4]
 800a52a:	f845 c003 	str.w	ip, [r5, r3]
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	3104      	adds	r1, #4
 800a532:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a536:	f1b9 0f00 	cmp.w	r9, #0
 800a53a:	d021      	beq.n	800a580 <__multiply+0x140>
 800a53c:	46ae      	mov	lr, r5
 800a53e:	f04f 0a00 	mov.w	sl, #0
 800a542:	682b      	ldr	r3, [r5, #0]
 800a544:	f104 0c14 	add.w	ip, r4, #20
 800a548:	f8bc b000 	ldrh.w	fp, [ip]
 800a54c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a550:	b29b      	uxth	r3, r3
 800a552:	fb09 770b 	mla	r7, r9, fp, r7
 800a556:	4457      	add	r7, sl
 800a558:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a55c:	f84e 3b04 	str.w	r3, [lr], #4
 800a560:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a564:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a568:	f8be 3000 	ldrh.w	r3, [lr]
 800a56c:	4562      	cmp	r2, ip
 800a56e:	fb09 330a 	mla	r3, r9, sl, r3
 800a572:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a576:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a57a:	d8e5      	bhi.n	800a548 <__multiply+0x108>
 800a57c:	9f01      	ldr	r7, [sp, #4]
 800a57e:	51eb      	str	r3, [r5, r7]
 800a580:	3504      	adds	r5, #4
 800a582:	e79a      	b.n	800a4ba <__multiply+0x7a>
 800a584:	3e01      	subs	r6, #1
 800a586:	e79c      	b.n	800a4c2 <__multiply+0x82>
 800a588:	0800bb18 	.word	0x0800bb18
 800a58c:	0800bb29 	.word	0x0800bb29

0800a590 <__pow5mult>:
 800a590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a594:	4615      	mov	r5, r2
 800a596:	f012 0203 	ands.w	r2, r2, #3
 800a59a:	4607      	mov	r7, r0
 800a59c:	460e      	mov	r6, r1
 800a59e:	d007      	beq.n	800a5b0 <__pow5mult+0x20>
 800a5a0:	4c25      	ldr	r4, [pc, #148]	@ (800a638 <__pow5mult+0xa8>)
 800a5a2:	3a01      	subs	r2, #1
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5aa:	f7ff fea1 	bl	800a2f0 <__multadd>
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	10ad      	asrs	r5, r5, #2
 800a5b2:	d03d      	beq.n	800a630 <__pow5mult+0xa0>
 800a5b4:	69fc      	ldr	r4, [r7, #28]
 800a5b6:	b97c      	cbnz	r4, 800a5d8 <__pow5mult+0x48>
 800a5b8:	2010      	movs	r0, #16
 800a5ba:	f7ff fd81 	bl	800a0c0 <malloc>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	61f8      	str	r0, [r7, #28]
 800a5c2:	b928      	cbnz	r0, 800a5d0 <__pow5mult+0x40>
 800a5c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a5c8:	4b1c      	ldr	r3, [pc, #112]	@ (800a63c <__pow5mult+0xac>)
 800a5ca:	481d      	ldr	r0, [pc, #116]	@ (800a640 <__pow5mult+0xb0>)
 800a5cc:	f000 fbe6 	bl	800ad9c <__assert_func>
 800a5d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5d4:	6004      	str	r4, [r0, #0]
 800a5d6:	60c4      	str	r4, [r0, #12]
 800a5d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a5dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5e0:	b94c      	cbnz	r4, 800a5f6 <__pow5mult+0x66>
 800a5e2:	f240 2171 	movw	r1, #625	@ 0x271
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f7ff ff14 	bl	800a414 <__i2b>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5f4:	6003      	str	r3, [r0, #0]
 800a5f6:	f04f 0900 	mov.w	r9, #0
 800a5fa:	07eb      	lsls	r3, r5, #31
 800a5fc:	d50a      	bpl.n	800a614 <__pow5mult+0x84>
 800a5fe:	4631      	mov	r1, r6
 800a600:	4622      	mov	r2, r4
 800a602:	4638      	mov	r0, r7
 800a604:	f7ff ff1c 	bl	800a440 <__multiply>
 800a608:	4680      	mov	r8, r0
 800a60a:	4631      	mov	r1, r6
 800a60c:	4638      	mov	r0, r7
 800a60e:	f7ff fe4d 	bl	800a2ac <_Bfree>
 800a612:	4646      	mov	r6, r8
 800a614:	106d      	asrs	r5, r5, #1
 800a616:	d00b      	beq.n	800a630 <__pow5mult+0xa0>
 800a618:	6820      	ldr	r0, [r4, #0]
 800a61a:	b938      	cbnz	r0, 800a62c <__pow5mult+0x9c>
 800a61c:	4622      	mov	r2, r4
 800a61e:	4621      	mov	r1, r4
 800a620:	4638      	mov	r0, r7
 800a622:	f7ff ff0d 	bl	800a440 <__multiply>
 800a626:	6020      	str	r0, [r4, #0]
 800a628:	f8c0 9000 	str.w	r9, [r0]
 800a62c:	4604      	mov	r4, r0
 800a62e:	e7e4      	b.n	800a5fa <__pow5mult+0x6a>
 800a630:	4630      	mov	r0, r6
 800a632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a636:	bf00      	nop
 800a638:	0800bb84 	.word	0x0800bb84
 800a63c:	0800baa9 	.word	0x0800baa9
 800a640:	0800bb29 	.word	0x0800bb29

0800a644 <__lshift>:
 800a644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a648:	460c      	mov	r4, r1
 800a64a:	4607      	mov	r7, r0
 800a64c:	4691      	mov	r9, r2
 800a64e:	6923      	ldr	r3, [r4, #16]
 800a650:	6849      	ldr	r1, [r1, #4]
 800a652:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a656:	68a3      	ldr	r3, [r4, #8]
 800a658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a65c:	f108 0601 	add.w	r6, r8, #1
 800a660:	42b3      	cmp	r3, r6
 800a662:	db0b      	blt.n	800a67c <__lshift+0x38>
 800a664:	4638      	mov	r0, r7
 800a666:	f7ff fde1 	bl	800a22c <_Balloc>
 800a66a:	4605      	mov	r5, r0
 800a66c:	b948      	cbnz	r0, 800a682 <__lshift+0x3e>
 800a66e:	4602      	mov	r2, r0
 800a670:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a674:	4b27      	ldr	r3, [pc, #156]	@ (800a714 <__lshift+0xd0>)
 800a676:	4828      	ldr	r0, [pc, #160]	@ (800a718 <__lshift+0xd4>)
 800a678:	f000 fb90 	bl	800ad9c <__assert_func>
 800a67c:	3101      	adds	r1, #1
 800a67e:	005b      	lsls	r3, r3, #1
 800a680:	e7ee      	b.n	800a660 <__lshift+0x1c>
 800a682:	2300      	movs	r3, #0
 800a684:	f100 0114 	add.w	r1, r0, #20
 800a688:	f100 0210 	add.w	r2, r0, #16
 800a68c:	4618      	mov	r0, r3
 800a68e:	4553      	cmp	r3, sl
 800a690:	db33      	blt.n	800a6fa <__lshift+0xb6>
 800a692:	6920      	ldr	r0, [r4, #16]
 800a694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a698:	f104 0314 	add.w	r3, r4, #20
 800a69c:	f019 091f 	ands.w	r9, r9, #31
 800a6a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6a8:	d02b      	beq.n	800a702 <__lshift+0xbe>
 800a6aa:	468a      	mov	sl, r1
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f1c9 0e20 	rsb	lr, r9, #32
 800a6b2:	6818      	ldr	r0, [r3, #0]
 800a6b4:	fa00 f009 	lsl.w	r0, r0, r9
 800a6b8:	4310      	orrs	r0, r2
 800a6ba:	f84a 0b04 	str.w	r0, [sl], #4
 800a6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6c2:	459c      	cmp	ip, r3
 800a6c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6c8:	d8f3      	bhi.n	800a6b2 <__lshift+0x6e>
 800a6ca:	ebac 0304 	sub.w	r3, ip, r4
 800a6ce:	3b15      	subs	r3, #21
 800a6d0:	f023 0303 	bic.w	r3, r3, #3
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	f104 0015 	add.w	r0, r4, #21
 800a6da:	4584      	cmp	ip, r0
 800a6dc:	bf38      	it	cc
 800a6de:	2304      	movcc	r3, #4
 800a6e0:	50ca      	str	r2, [r1, r3]
 800a6e2:	b10a      	cbz	r2, 800a6e8 <__lshift+0xa4>
 800a6e4:	f108 0602 	add.w	r6, r8, #2
 800a6e8:	3e01      	subs	r6, #1
 800a6ea:	4638      	mov	r0, r7
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	612e      	str	r6, [r5, #16]
 800a6f0:	f7ff fddc 	bl	800a2ac <_Bfree>
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6fe:	3301      	adds	r3, #1
 800a700:	e7c5      	b.n	800a68e <__lshift+0x4a>
 800a702:	3904      	subs	r1, #4
 800a704:	f853 2b04 	ldr.w	r2, [r3], #4
 800a708:	459c      	cmp	ip, r3
 800a70a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a70e:	d8f9      	bhi.n	800a704 <__lshift+0xc0>
 800a710:	e7ea      	b.n	800a6e8 <__lshift+0xa4>
 800a712:	bf00      	nop
 800a714:	0800bb18 	.word	0x0800bb18
 800a718:	0800bb29 	.word	0x0800bb29

0800a71c <__mcmp>:
 800a71c:	4603      	mov	r3, r0
 800a71e:	690a      	ldr	r2, [r1, #16]
 800a720:	6900      	ldr	r0, [r0, #16]
 800a722:	b530      	push	{r4, r5, lr}
 800a724:	1a80      	subs	r0, r0, r2
 800a726:	d10e      	bne.n	800a746 <__mcmp+0x2a>
 800a728:	3314      	adds	r3, #20
 800a72a:	3114      	adds	r1, #20
 800a72c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a730:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a734:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a738:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a73c:	4295      	cmp	r5, r2
 800a73e:	d003      	beq.n	800a748 <__mcmp+0x2c>
 800a740:	d205      	bcs.n	800a74e <__mcmp+0x32>
 800a742:	f04f 30ff 	mov.w	r0, #4294967295
 800a746:	bd30      	pop	{r4, r5, pc}
 800a748:	42a3      	cmp	r3, r4
 800a74a:	d3f3      	bcc.n	800a734 <__mcmp+0x18>
 800a74c:	e7fb      	b.n	800a746 <__mcmp+0x2a>
 800a74e:	2001      	movs	r0, #1
 800a750:	e7f9      	b.n	800a746 <__mcmp+0x2a>
	...

0800a754 <__mdiff>:
 800a754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a758:	4689      	mov	r9, r1
 800a75a:	4606      	mov	r6, r0
 800a75c:	4611      	mov	r1, r2
 800a75e:	4648      	mov	r0, r9
 800a760:	4614      	mov	r4, r2
 800a762:	f7ff ffdb 	bl	800a71c <__mcmp>
 800a766:	1e05      	subs	r5, r0, #0
 800a768:	d112      	bne.n	800a790 <__mdiff+0x3c>
 800a76a:	4629      	mov	r1, r5
 800a76c:	4630      	mov	r0, r6
 800a76e:	f7ff fd5d 	bl	800a22c <_Balloc>
 800a772:	4602      	mov	r2, r0
 800a774:	b928      	cbnz	r0, 800a782 <__mdiff+0x2e>
 800a776:	f240 2137 	movw	r1, #567	@ 0x237
 800a77a:	4b3e      	ldr	r3, [pc, #248]	@ (800a874 <__mdiff+0x120>)
 800a77c:	483e      	ldr	r0, [pc, #248]	@ (800a878 <__mdiff+0x124>)
 800a77e:	f000 fb0d 	bl	800ad9c <__assert_func>
 800a782:	2301      	movs	r3, #1
 800a784:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a788:	4610      	mov	r0, r2
 800a78a:	b003      	add	sp, #12
 800a78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a790:	bfbc      	itt	lt
 800a792:	464b      	movlt	r3, r9
 800a794:	46a1      	movlt	r9, r4
 800a796:	4630      	mov	r0, r6
 800a798:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a79c:	bfba      	itte	lt
 800a79e:	461c      	movlt	r4, r3
 800a7a0:	2501      	movlt	r5, #1
 800a7a2:	2500      	movge	r5, #0
 800a7a4:	f7ff fd42 	bl	800a22c <_Balloc>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	b918      	cbnz	r0, 800a7b4 <__mdiff+0x60>
 800a7ac:	f240 2145 	movw	r1, #581	@ 0x245
 800a7b0:	4b30      	ldr	r3, [pc, #192]	@ (800a874 <__mdiff+0x120>)
 800a7b2:	e7e3      	b.n	800a77c <__mdiff+0x28>
 800a7b4:	f100 0b14 	add.w	fp, r0, #20
 800a7b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7bc:	f109 0310 	add.w	r3, r9, #16
 800a7c0:	60c5      	str	r5, [r0, #12]
 800a7c2:	f04f 0c00 	mov.w	ip, #0
 800a7c6:	f109 0514 	add.w	r5, r9, #20
 800a7ca:	46d9      	mov	r9, fp
 800a7cc:	6926      	ldr	r6, [r4, #16]
 800a7ce:	f104 0e14 	add.w	lr, r4, #20
 800a7d2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a7d6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	9b01      	ldr	r3, [sp, #4]
 800a7de:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a7e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a7e6:	b281      	uxth	r1, r0
 800a7e8:	9301      	str	r3, [sp, #4]
 800a7ea:	fa1f f38a 	uxth.w	r3, sl
 800a7ee:	1a5b      	subs	r3, r3, r1
 800a7f0:	0c00      	lsrs	r0, r0, #16
 800a7f2:	4463      	add	r3, ip
 800a7f4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a7f8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a802:	4576      	cmp	r6, lr
 800a804:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a808:	f849 3b04 	str.w	r3, [r9], #4
 800a80c:	d8e6      	bhi.n	800a7dc <__mdiff+0x88>
 800a80e:	1b33      	subs	r3, r6, r4
 800a810:	3b15      	subs	r3, #21
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	3415      	adds	r4, #21
 800a818:	3304      	adds	r3, #4
 800a81a:	42a6      	cmp	r6, r4
 800a81c:	bf38      	it	cc
 800a81e:	2304      	movcc	r3, #4
 800a820:	441d      	add	r5, r3
 800a822:	445b      	add	r3, fp
 800a824:	461e      	mov	r6, r3
 800a826:	462c      	mov	r4, r5
 800a828:	4544      	cmp	r4, r8
 800a82a:	d30e      	bcc.n	800a84a <__mdiff+0xf6>
 800a82c:	f108 0103 	add.w	r1, r8, #3
 800a830:	1b49      	subs	r1, r1, r5
 800a832:	f021 0103 	bic.w	r1, r1, #3
 800a836:	3d03      	subs	r5, #3
 800a838:	45a8      	cmp	r8, r5
 800a83a:	bf38      	it	cc
 800a83c:	2100      	movcc	r1, #0
 800a83e:	440b      	add	r3, r1
 800a840:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a844:	b199      	cbz	r1, 800a86e <__mdiff+0x11a>
 800a846:	6117      	str	r7, [r2, #16]
 800a848:	e79e      	b.n	800a788 <__mdiff+0x34>
 800a84a:	46e6      	mov	lr, ip
 800a84c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a850:	fa1f fc81 	uxth.w	ip, r1
 800a854:	44f4      	add	ip, lr
 800a856:	0c08      	lsrs	r0, r1, #16
 800a858:	4471      	add	r1, lr
 800a85a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a85e:	b289      	uxth	r1, r1
 800a860:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a864:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a868:	f846 1b04 	str.w	r1, [r6], #4
 800a86c:	e7dc      	b.n	800a828 <__mdiff+0xd4>
 800a86e:	3f01      	subs	r7, #1
 800a870:	e7e6      	b.n	800a840 <__mdiff+0xec>
 800a872:	bf00      	nop
 800a874:	0800bb18 	.word	0x0800bb18
 800a878:	0800bb29 	.word	0x0800bb29

0800a87c <__d2b>:
 800a87c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a880:	2101      	movs	r1, #1
 800a882:	4690      	mov	r8, r2
 800a884:	4699      	mov	r9, r3
 800a886:	9e08      	ldr	r6, [sp, #32]
 800a888:	f7ff fcd0 	bl	800a22c <_Balloc>
 800a88c:	4604      	mov	r4, r0
 800a88e:	b930      	cbnz	r0, 800a89e <__d2b+0x22>
 800a890:	4602      	mov	r2, r0
 800a892:	f240 310f 	movw	r1, #783	@ 0x30f
 800a896:	4b23      	ldr	r3, [pc, #140]	@ (800a924 <__d2b+0xa8>)
 800a898:	4823      	ldr	r0, [pc, #140]	@ (800a928 <__d2b+0xac>)
 800a89a:	f000 fa7f 	bl	800ad9c <__assert_func>
 800a89e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8a6:	b10d      	cbz	r5, 800a8ac <__d2b+0x30>
 800a8a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	f1b8 0300 	subs.w	r3, r8, #0
 800a8b2:	d024      	beq.n	800a8fe <__d2b+0x82>
 800a8b4:	4668      	mov	r0, sp
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	f7ff fd7f 	bl	800a3ba <__lo0bits>
 800a8bc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8c0:	b1d8      	cbz	r0, 800a8fa <__d2b+0x7e>
 800a8c2:	f1c0 0320 	rsb	r3, r0, #32
 800a8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ca:	430b      	orrs	r3, r1
 800a8cc:	40c2      	lsrs	r2, r0
 800a8ce:	6163      	str	r3, [r4, #20]
 800a8d0:	9201      	str	r2, [sp, #4]
 800a8d2:	9b01      	ldr	r3, [sp, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	bf0c      	ite	eq
 800a8d8:	2201      	moveq	r2, #1
 800a8da:	2202      	movne	r2, #2
 800a8dc:	61a3      	str	r3, [r4, #24]
 800a8de:	6122      	str	r2, [r4, #16]
 800a8e0:	b1ad      	cbz	r5, 800a90e <__d2b+0x92>
 800a8e2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a8e6:	4405      	add	r5, r0
 800a8e8:	6035      	str	r5, [r6, #0]
 800a8ea:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f0:	6018      	str	r0, [r3, #0]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	b002      	add	sp, #8
 800a8f6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a8fa:	6161      	str	r1, [r4, #20]
 800a8fc:	e7e9      	b.n	800a8d2 <__d2b+0x56>
 800a8fe:	a801      	add	r0, sp, #4
 800a900:	f7ff fd5b 	bl	800a3ba <__lo0bits>
 800a904:	9b01      	ldr	r3, [sp, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	6163      	str	r3, [r4, #20]
 800a90a:	3020      	adds	r0, #32
 800a90c:	e7e7      	b.n	800a8de <__d2b+0x62>
 800a90e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a912:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a916:	6030      	str	r0, [r6, #0]
 800a918:	6918      	ldr	r0, [r3, #16]
 800a91a:	f7ff fd2f 	bl	800a37c <__hi0bits>
 800a91e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a922:	e7e4      	b.n	800a8ee <__d2b+0x72>
 800a924:	0800bb18 	.word	0x0800bb18
 800a928:	0800bb29 	.word	0x0800bb29

0800a92c <__ssputs_r>:
 800a92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a930:	461f      	mov	r7, r3
 800a932:	688e      	ldr	r6, [r1, #8]
 800a934:	4682      	mov	sl, r0
 800a936:	42be      	cmp	r6, r7
 800a938:	460c      	mov	r4, r1
 800a93a:	4690      	mov	r8, r2
 800a93c:	680b      	ldr	r3, [r1, #0]
 800a93e:	d82d      	bhi.n	800a99c <__ssputs_r+0x70>
 800a940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a948:	d026      	beq.n	800a998 <__ssputs_r+0x6c>
 800a94a:	6965      	ldr	r5, [r4, #20]
 800a94c:	6909      	ldr	r1, [r1, #16]
 800a94e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a952:	eba3 0901 	sub.w	r9, r3, r1
 800a956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a95a:	1c7b      	adds	r3, r7, #1
 800a95c:	444b      	add	r3, r9
 800a95e:	106d      	asrs	r5, r5, #1
 800a960:	429d      	cmp	r5, r3
 800a962:	bf38      	it	cc
 800a964:	461d      	movcc	r5, r3
 800a966:	0553      	lsls	r3, r2, #21
 800a968:	d527      	bpl.n	800a9ba <__ssputs_r+0x8e>
 800a96a:	4629      	mov	r1, r5
 800a96c:	f7ff fbd2 	bl	800a114 <_malloc_r>
 800a970:	4606      	mov	r6, r0
 800a972:	b360      	cbz	r0, 800a9ce <__ssputs_r+0xa2>
 800a974:	464a      	mov	r2, r9
 800a976:	6921      	ldr	r1, [r4, #16]
 800a978:	f000 fa02 	bl	800ad80 <memcpy>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	6126      	str	r6, [r4, #16]
 800a98a:	444e      	add	r6, r9
 800a98c:	6026      	str	r6, [r4, #0]
 800a98e:	463e      	mov	r6, r7
 800a990:	6165      	str	r5, [r4, #20]
 800a992:	eba5 0509 	sub.w	r5, r5, r9
 800a996:	60a5      	str	r5, [r4, #8]
 800a998:	42be      	cmp	r6, r7
 800a99a:	d900      	bls.n	800a99e <__ssputs_r+0x72>
 800a99c:	463e      	mov	r6, r7
 800a99e:	4632      	mov	r2, r6
 800a9a0:	4641      	mov	r1, r8
 800a9a2:	6820      	ldr	r0, [r4, #0]
 800a9a4:	f000 f9c2 	bl	800ad2c <memmove>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	68a3      	ldr	r3, [r4, #8]
 800a9ac:	1b9b      	subs	r3, r3, r6
 800a9ae:	60a3      	str	r3, [r4, #8]
 800a9b0:	6823      	ldr	r3, [r4, #0]
 800a9b2:	4433      	add	r3, r6
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ba:	462a      	mov	r2, r5
 800a9bc:	f000 fa32 	bl	800ae24 <_realloc_r>
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d1e0      	bne.n	800a988 <__ssputs_r+0x5c>
 800a9c6:	4650      	mov	r0, sl
 800a9c8:	6921      	ldr	r1, [r4, #16]
 800a9ca:	f7ff fb31 	bl	800a030 <_free_r>
 800a9ce:	230c      	movs	r3, #12
 800a9d0:	f8ca 3000 	str.w	r3, [sl]
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9de:	81a3      	strh	r3, [r4, #12]
 800a9e0:	e7e9      	b.n	800a9b6 <__ssputs_r+0x8a>
	...

0800a9e4 <_svfiprintf_r>:
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	4698      	mov	r8, r3
 800a9ea:	898b      	ldrh	r3, [r1, #12]
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	061b      	lsls	r3, r3, #24
 800a9f0:	460d      	mov	r5, r1
 800a9f2:	4614      	mov	r4, r2
 800a9f4:	b09d      	sub	sp, #116	@ 0x74
 800a9f6:	d510      	bpl.n	800aa1a <_svfiprintf_r+0x36>
 800a9f8:	690b      	ldr	r3, [r1, #16]
 800a9fa:	b973      	cbnz	r3, 800aa1a <_svfiprintf_r+0x36>
 800a9fc:	2140      	movs	r1, #64	@ 0x40
 800a9fe:	f7ff fb89 	bl	800a114 <_malloc_r>
 800aa02:	6028      	str	r0, [r5, #0]
 800aa04:	6128      	str	r0, [r5, #16]
 800aa06:	b930      	cbnz	r0, 800aa16 <_svfiprintf_r+0x32>
 800aa08:	230c      	movs	r3, #12
 800aa0a:	603b      	str	r3, [r7, #0]
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	b01d      	add	sp, #116	@ 0x74
 800aa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa16:	2340      	movs	r3, #64	@ 0x40
 800aa18:	616b      	str	r3, [r5, #20]
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa1e:	2320      	movs	r3, #32
 800aa20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa24:	2330      	movs	r3, #48	@ 0x30
 800aa26:	f04f 0901 	mov.w	r9, #1
 800aa2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800abc8 <_svfiprintf_r+0x1e4>
 800aa32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa36:	4623      	mov	r3, r4
 800aa38:	469a      	mov	sl, r3
 800aa3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa3e:	b10a      	cbz	r2, 800aa44 <_svfiprintf_r+0x60>
 800aa40:	2a25      	cmp	r2, #37	@ 0x25
 800aa42:	d1f9      	bne.n	800aa38 <_svfiprintf_r+0x54>
 800aa44:	ebba 0b04 	subs.w	fp, sl, r4
 800aa48:	d00b      	beq.n	800aa62 <_svfiprintf_r+0x7e>
 800aa4a:	465b      	mov	r3, fp
 800aa4c:	4622      	mov	r2, r4
 800aa4e:	4629      	mov	r1, r5
 800aa50:	4638      	mov	r0, r7
 800aa52:	f7ff ff6b 	bl	800a92c <__ssputs_r>
 800aa56:	3001      	adds	r0, #1
 800aa58:	f000 80a7 	beq.w	800abaa <_svfiprintf_r+0x1c6>
 800aa5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa5e:	445a      	add	r2, fp
 800aa60:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa62:	f89a 3000 	ldrb.w	r3, [sl]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f000 809f 	beq.w	800abaa <_svfiprintf_r+0x1c6>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa76:	f10a 0a01 	add.w	sl, sl, #1
 800aa7a:	9304      	str	r3, [sp, #16]
 800aa7c:	9307      	str	r3, [sp, #28]
 800aa7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa82:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa84:	4654      	mov	r4, sl
 800aa86:	2205      	movs	r2, #5
 800aa88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8c:	484e      	ldr	r0, [pc, #312]	@ (800abc8 <_svfiprintf_r+0x1e4>)
 800aa8e:	f7fe fc70 	bl	8009372 <memchr>
 800aa92:	9a04      	ldr	r2, [sp, #16]
 800aa94:	b9d8      	cbnz	r0, 800aace <_svfiprintf_r+0xea>
 800aa96:	06d0      	lsls	r0, r2, #27
 800aa98:	bf44      	itt	mi
 800aa9a:	2320      	movmi	r3, #32
 800aa9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaa0:	0711      	lsls	r1, r2, #28
 800aaa2:	bf44      	itt	mi
 800aaa4:	232b      	movmi	r3, #43	@ 0x2b
 800aaa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaaa:	f89a 3000 	ldrb.w	r3, [sl]
 800aaae:	2b2a      	cmp	r3, #42	@ 0x2a
 800aab0:	d015      	beq.n	800aade <_svfiprintf_r+0xfa>
 800aab2:	4654      	mov	r4, sl
 800aab4:	2000      	movs	r0, #0
 800aab6:	f04f 0c0a 	mov.w	ip, #10
 800aaba:	9a07      	ldr	r2, [sp, #28]
 800aabc:	4621      	mov	r1, r4
 800aabe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aac2:	3b30      	subs	r3, #48	@ 0x30
 800aac4:	2b09      	cmp	r3, #9
 800aac6:	d94b      	bls.n	800ab60 <_svfiprintf_r+0x17c>
 800aac8:	b1b0      	cbz	r0, 800aaf8 <_svfiprintf_r+0x114>
 800aaca:	9207      	str	r2, [sp, #28]
 800aacc:	e014      	b.n	800aaf8 <_svfiprintf_r+0x114>
 800aace:	eba0 0308 	sub.w	r3, r0, r8
 800aad2:	fa09 f303 	lsl.w	r3, r9, r3
 800aad6:	4313      	orrs	r3, r2
 800aad8:	46a2      	mov	sl, r4
 800aada:	9304      	str	r3, [sp, #16]
 800aadc:	e7d2      	b.n	800aa84 <_svfiprintf_r+0xa0>
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	1d19      	adds	r1, r3, #4
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	9103      	str	r1, [sp, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	bfbb      	ittet	lt
 800aaea:	425b      	neglt	r3, r3
 800aaec:	f042 0202 	orrlt.w	r2, r2, #2
 800aaf0:	9307      	strge	r3, [sp, #28]
 800aaf2:	9307      	strlt	r3, [sp, #28]
 800aaf4:	bfb8      	it	lt
 800aaf6:	9204      	strlt	r2, [sp, #16]
 800aaf8:	7823      	ldrb	r3, [r4, #0]
 800aafa:	2b2e      	cmp	r3, #46	@ 0x2e
 800aafc:	d10a      	bne.n	800ab14 <_svfiprintf_r+0x130>
 800aafe:	7863      	ldrb	r3, [r4, #1]
 800ab00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab02:	d132      	bne.n	800ab6a <_svfiprintf_r+0x186>
 800ab04:	9b03      	ldr	r3, [sp, #12]
 800ab06:	3402      	adds	r4, #2
 800ab08:	1d1a      	adds	r2, r3, #4
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	9203      	str	r2, [sp, #12]
 800ab0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab12:	9305      	str	r3, [sp, #20]
 800ab14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800abcc <_svfiprintf_r+0x1e8>
 800ab18:	2203      	movs	r2, #3
 800ab1a:	4650      	mov	r0, sl
 800ab1c:	7821      	ldrb	r1, [r4, #0]
 800ab1e:	f7fe fc28 	bl	8009372 <memchr>
 800ab22:	b138      	cbz	r0, 800ab34 <_svfiprintf_r+0x150>
 800ab24:	2240      	movs	r2, #64	@ 0x40
 800ab26:	9b04      	ldr	r3, [sp, #16]
 800ab28:	eba0 000a 	sub.w	r0, r0, sl
 800ab2c:	4082      	lsls	r2, r0
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	3401      	adds	r4, #1
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab38:	2206      	movs	r2, #6
 800ab3a:	4825      	ldr	r0, [pc, #148]	@ (800abd0 <_svfiprintf_r+0x1ec>)
 800ab3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab40:	f7fe fc17 	bl	8009372 <memchr>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d036      	beq.n	800abb6 <_svfiprintf_r+0x1d2>
 800ab48:	4b22      	ldr	r3, [pc, #136]	@ (800abd4 <_svfiprintf_r+0x1f0>)
 800ab4a:	bb1b      	cbnz	r3, 800ab94 <_svfiprintf_r+0x1b0>
 800ab4c:	9b03      	ldr	r3, [sp, #12]
 800ab4e:	3307      	adds	r3, #7
 800ab50:	f023 0307 	bic.w	r3, r3, #7
 800ab54:	3308      	adds	r3, #8
 800ab56:	9303      	str	r3, [sp, #12]
 800ab58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab5a:	4433      	add	r3, r6
 800ab5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab5e:	e76a      	b.n	800aa36 <_svfiprintf_r+0x52>
 800ab60:	460c      	mov	r4, r1
 800ab62:	2001      	movs	r0, #1
 800ab64:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab68:	e7a8      	b.n	800aabc <_svfiprintf_r+0xd8>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f04f 0c0a 	mov.w	ip, #10
 800ab70:	4619      	mov	r1, r3
 800ab72:	3401      	adds	r4, #1
 800ab74:	9305      	str	r3, [sp, #20]
 800ab76:	4620      	mov	r0, r4
 800ab78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab7c:	3a30      	subs	r2, #48	@ 0x30
 800ab7e:	2a09      	cmp	r2, #9
 800ab80:	d903      	bls.n	800ab8a <_svfiprintf_r+0x1a6>
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0c6      	beq.n	800ab14 <_svfiprintf_r+0x130>
 800ab86:	9105      	str	r1, [sp, #20]
 800ab88:	e7c4      	b.n	800ab14 <_svfiprintf_r+0x130>
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab92:	e7f0      	b.n	800ab76 <_svfiprintf_r+0x192>
 800ab94:	ab03      	add	r3, sp, #12
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	462a      	mov	r2, r5
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	4b0e      	ldr	r3, [pc, #56]	@ (800abd8 <_svfiprintf_r+0x1f4>)
 800ab9e:	a904      	add	r1, sp, #16
 800aba0:	f7fd fe84 	bl	80088ac <_printf_float>
 800aba4:	1c42      	adds	r2, r0, #1
 800aba6:	4606      	mov	r6, r0
 800aba8:	d1d6      	bne.n	800ab58 <_svfiprintf_r+0x174>
 800abaa:	89ab      	ldrh	r3, [r5, #12]
 800abac:	065b      	lsls	r3, r3, #25
 800abae:	f53f af2d 	bmi.w	800aa0c <_svfiprintf_r+0x28>
 800abb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abb4:	e72c      	b.n	800aa10 <_svfiprintf_r+0x2c>
 800abb6:	ab03      	add	r3, sp, #12
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	462a      	mov	r2, r5
 800abbc:	4638      	mov	r0, r7
 800abbe:	4b06      	ldr	r3, [pc, #24]	@ (800abd8 <_svfiprintf_r+0x1f4>)
 800abc0:	a904      	add	r1, sp, #16
 800abc2:	f7fe f911 	bl	8008de8 <_printf_i>
 800abc6:	e7ed      	b.n	800aba4 <_svfiprintf_r+0x1c0>
 800abc8:	0800bc80 	.word	0x0800bc80
 800abcc:	0800bc86 	.word	0x0800bc86
 800abd0:	0800bc8a 	.word	0x0800bc8a
 800abd4:	080088ad 	.word	0x080088ad
 800abd8:	0800a92d 	.word	0x0800a92d

0800abdc <__sflush_r>:
 800abdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe2:	0716      	lsls	r6, r2, #28
 800abe4:	4605      	mov	r5, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	d454      	bmi.n	800ac94 <__sflush_r+0xb8>
 800abea:	684b      	ldr	r3, [r1, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	dc02      	bgt.n	800abf6 <__sflush_r+0x1a>
 800abf0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	dd48      	ble.n	800ac88 <__sflush_r+0xac>
 800abf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abf8:	2e00      	cmp	r6, #0
 800abfa:	d045      	beq.n	800ac88 <__sflush_r+0xac>
 800abfc:	2300      	movs	r3, #0
 800abfe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac02:	682f      	ldr	r7, [r5, #0]
 800ac04:	6a21      	ldr	r1, [r4, #32]
 800ac06:	602b      	str	r3, [r5, #0]
 800ac08:	d030      	beq.n	800ac6c <__sflush_r+0x90>
 800ac0a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	0759      	lsls	r1, r3, #29
 800ac10:	d505      	bpl.n	800ac1e <__sflush_r+0x42>
 800ac12:	6863      	ldr	r3, [r4, #4]
 800ac14:	1ad2      	subs	r2, r2, r3
 800ac16:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac18:	b10b      	cbz	r3, 800ac1e <__sflush_r+0x42>
 800ac1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac1c:	1ad2      	subs	r2, r2, r3
 800ac1e:	2300      	movs	r3, #0
 800ac20:	4628      	mov	r0, r5
 800ac22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac24:	6a21      	ldr	r1, [r4, #32]
 800ac26:	47b0      	blx	r6
 800ac28:	1c43      	adds	r3, r0, #1
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	d106      	bne.n	800ac3c <__sflush_r+0x60>
 800ac2e:	6829      	ldr	r1, [r5, #0]
 800ac30:	291d      	cmp	r1, #29
 800ac32:	d82b      	bhi.n	800ac8c <__sflush_r+0xb0>
 800ac34:	4a28      	ldr	r2, [pc, #160]	@ (800acd8 <__sflush_r+0xfc>)
 800ac36:	410a      	asrs	r2, r1
 800ac38:	07d6      	lsls	r6, r2, #31
 800ac3a:	d427      	bmi.n	800ac8c <__sflush_r+0xb0>
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	6062      	str	r2, [r4, #4]
 800ac40:	6922      	ldr	r2, [r4, #16]
 800ac42:	04d9      	lsls	r1, r3, #19
 800ac44:	6022      	str	r2, [r4, #0]
 800ac46:	d504      	bpl.n	800ac52 <__sflush_r+0x76>
 800ac48:	1c42      	adds	r2, r0, #1
 800ac4a:	d101      	bne.n	800ac50 <__sflush_r+0x74>
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	b903      	cbnz	r3, 800ac52 <__sflush_r+0x76>
 800ac50:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac54:	602f      	str	r7, [r5, #0]
 800ac56:	b1b9      	cbz	r1, 800ac88 <__sflush_r+0xac>
 800ac58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac5c:	4299      	cmp	r1, r3
 800ac5e:	d002      	beq.n	800ac66 <__sflush_r+0x8a>
 800ac60:	4628      	mov	r0, r5
 800ac62:	f7ff f9e5 	bl	800a030 <_free_r>
 800ac66:	2300      	movs	r3, #0
 800ac68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac6a:	e00d      	b.n	800ac88 <__sflush_r+0xac>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	4628      	mov	r0, r5
 800ac70:	47b0      	blx	r6
 800ac72:	4602      	mov	r2, r0
 800ac74:	1c50      	adds	r0, r2, #1
 800ac76:	d1c9      	bne.n	800ac0c <__sflush_r+0x30>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0c6      	beq.n	800ac0c <__sflush_r+0x30>
 800ac7e:	2b1d      	cmp	r3, #29
 800ac80:	d001      	beq.n	800ac86 <__sflush_r+0xaa>
 800ac82:	2b16      	cmp	r3, #22
 800ac84:	d11d      	bne.n	800acc2 <__sflush_r+0xe6>
 800ac86:	602f      	str	r7, [r5, #0]
 800ac88:	2000      	movs	r0, #0
 800ac8a:	e021      	b.n	800acd0 <__sflush_r+0xf4>
 800ac8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac90:	b21b      	sxth	r3, r3
 800ac92:	e01a      	b.n	800acca <__sflush_r+0xee>
 800ac94:	690f      	ldr	r7, [r1, #16]
 800ac96:	2f00      	cmp	r7, #0
 800ac98:	d0f6      	beq.n	800ac88 <__sflush_r+0xac>
 800ac9a:	0793      	lsls	r3, r2, #30
 800ac9c:	bf18      	it	ne
 800ac9e:	2300      	movne	r3, #0
 800aca0:	680e      	ldr	r6, [r1, #0]
 800aca2:	bf08      	it	eq
 800aca4:	694b      	ldreq	r3, [r1, #20]
 800aca6:	1bf6      	subs	r6, r6, r7
 800aca8:	600f      	str	r7, [r1, #0]
 800acaa:	608b      	str	r3, [r1, #8]
 800acac:	2e00      	cmp	r6, #0
 800acae:	ddeb      	ble.n	800ac88 <__sflush_r+0xac>
 800acb0:	4633      	mov	r3, r6
 800acb2:	463a      	mov	r2, r7
 800acb4:	4628      	mov	r0, r5
 800acb6:	6a21      	ldr	r1, [r4, #32]
 800acb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800acbc:	47e0      	blx	ip
 800acbe:	2800      	cmp	r0, #0
 800acc0:	dc07      	bgt.n	800acd2 <__sflush_r+0xf6>
 800acc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acca:	f04f 30ff 	mov.w	r0, #4294967295
 800acce:	81a3      	strh	r3, [r4, #12]
 800acd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd2:	4407      	add	r7, r0
 800acd4:	1a36      	subs	r6, r6, r0
 800acd6:	e7e9      	b.n	800acac <__sflush_r+0xd0>
 800acd8:	dfbffffe 	.word	0xdfbffffe

0800acdc <_fflush_r>:
 800acdc:	b538      	push	{r3, r4, r5, lr}
 800acde:	690b      	ldr	r3, [r1, #16]
 800ace0:	4605      	mov	r5, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	b913      	cbnz	r3, 800acec <_fflush_r+0x10>
 800ace6:	2500      	movs	r5, #0
 800ace8:	4628      	mov	r0, r5
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	b118      	cbz	r0, 800acf6 <_fflush_r+0x1a>
 800acee:	6a03      	ldr	r3, [r0, #32]
 800acf0:	b90b      	cbnz	r3, 800acf6 <_fflush_r+0x1a>
 800acf2:	f7fe fa25 	bl	8009140 <__sinit>
 800acf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0f3      	beq.n	800ace6 <_fflush_r+0xa>
 800acfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad00:	07d0      	lsls	r0, r2, #31
 800ad02:	d404      	bmi.n	800ad0e <_fflush_r+0x32>
 800ad04:	0599      	lsls	r1, r3, #22
 800ad06:	d402      	bmi.n	800ad0e <_fflush_r+0x32>
 800ad08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad0a:	f7fe fb30 	bl	800936e <__retarget_lock_acquire_recursive>
 800ad0e:	4628      	mov	r0, r5
 800ad10:	4621      	mov	r1, r4
 800ad12:	f7ff ff63 	bl	800abdc <__sflush_r>
 800ad16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad18:	4605      	mov	r5, r0
 800ad1a:	07da      	lsls	r2, r3, #31
 800ad1c:	d4e4      	bmi.n	800ace8 <_fflush_r+0xc>
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	059b      	lsls	r3, r3, #22
 800ad22:	d4e1      	bmi.n	800ace8 <_fflush_r+0xc>
 800ad24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad26:	f7fe fb23 	bl	8009370 <__retarget_lock_release_recursive>
 800ad2a:	e7dd      	b.n	800ace8 <_fflush_r+0xc>

0800ad2c <memmove>:
 800ad2c:	4288      	cmp	r0, r1
 800ad2e:	b510      	push	{r4, lr}
 800ad30:	eb01 0402 	add.w	r4, r1, r2
 800ad34:	d902      	bls.n	800ad3c <memmove+0x10>
 800ad36:	4284      	cmp	r4, r0
 800ad38:	4623      	mov	r3, r4
 800ad3a:	d807      	bhi.n	800ad4c <memmove+0x20>
 800ad3c:	1e43      	subs	r3, r0, #1
 800ad3e:	42a1      	cmp	r1, r4
 800ad40:	d008      	beq.n	800ad54 <memmove+0x28>
 800ad42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad4a:	e7f8      	b.n	800ad3e <memmove+0x12>
 800ad4c:	4601      	mov	r1, r0
 800ad4e:	4402      	add	r2, r0
 800ad50:	428a      	cmp	r2, r1
 800ad52:	d100      	bne.n	800ad56 <memmove+0x2a>
 800ad54:	bd10      	pop	{r4, pc}
 800ad56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad5e:	e7f7      	b.n	800ad50 <memmove+0x24>

0800ad60 <_sbrk_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	2300      	movs	r3, #0
 800ad64:	4d05      	ldr	r5, [pc, #20]	@ (800ad7c <_sbrk_r+0x1c>)
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	f7f7 fac2 	bl	80022f4 <_sbrk>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_sbrk_r+0x1a>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_sbrk_r+0x1a>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	2000274c 	.word	0x2000274c

0800ad80 <memcpy>:
 800ad80:	440a      	add	r2, r1
 800ad82:	4291      	cmp	r1, r2
 800ad84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad88:	d100      	bne.n	800ad8c <memcpy+0xc>
 800ad8a:	4770      	bx	lr
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad92:	4291      	cmp	r1, r2
 800ad94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad98:	d1f9      	bne.n	800ad8e <memcpy+0xe>
 800ad9a:	bd10      	pop	{r4, pc}

0800ad9c <__assert_func>:
 800ad9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad9e:	4614      	mov	r4, r2
 800ada0:	461a      	mov	r2, r3
 800ada2:	4b09      	ldr	r3, [pc, #36]	@ (800adc8 <__assert_func+0x2c>)
 800ada4:	4605      	mov	r5, r0
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68d8      	ldr	r0, [r3, #12]
 800adaa:	b954      	cbnz	r4, 800adc2 <__assert_func+0x26>
 800adac:	4b07      	ldr	r3, [pc, #28]	@ (800adcc <__assert_func+0x30>)
 800adae:	461c      	mov	r4, r3
 800adb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adb4:	9100      	str	r1, [sp, #0]
 800adb6:	462b      	mov	r3, r5
 800adb8:	4905      	ldr	r1, [pc, #20]	@ (800add0 <__assert_func+0x34>)
 800adba:	f000 f86f 	bl	800ae9c <fiprintf>
 800adbe:	f000 f87f 	bl	800aec0 <abort>
 800adc2:	4b04      	ldr	r3, [pc, #16]	@ (800add4 <__assert_func+0x38>)
 800adc4:	e7f4      	b.n	800adb0 <__assert_func+0x14>
 800adc6:	bf00      	nop
 800adc8:	20000030 	.word	0x20000030
 800adcc:	0800bcd6 	.word	0x0800bcd6
 800add0:	0800bca8 	.word	0x0800bca8
 800add4:	0800bc9b 	.word	0x0800bc9b

0800add8 <_calloc_r>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	fba1 5402 	umull	r5, r4, r1, r2
 800adde:	b93c      	cbnz	r4, 800adf0 <_calloc_r+0x18>
 800ade0:	4629      	mov	r1, r5
 800ade2:	f7ff f997 	bl	800a114 <_malloc_r>
 800ade6:	4606      	mov	r6, r0
 800ade8:	b928      	cbnz	r0, 800adf6 <_calloc_r+0x1e>
 800adea:	2600      	movs	r6, #0
 800adec:	4630      	mov	r0, r6
 800adee:	bd70      	pop	{r4, r5, r6, pc}
 800adf0:	220c      	movs	r2, #12
 800adf2:	6002      	str	r2, [r0, #0]
 800adf4:	e7f9      	b.n	800adea <_calloc_r+0x12>
 800adf6:	462a      	mov	r2, r5
 800adf8:	4621      	mov	r1, r4
 800adfa:	f7fe fa3a 	bl	8009272 <memset>
 800adfe:	e7f5      	b.n	800adec <_calloc_r+0x14>

0800ae00 <__ascii_mbtowc>:
 800ae00:	b082      	sub	sp, #8
 800ae02:	b901      	cbnz	r1, 800ae06 <__ascii_mbtowc+0x6>
 800ae04:	a901      	add	r1, sp, #4
 800ae06:	b142      	cbz	r2, 800ae1a <__ascii_mbtowc+0x1a>
 800ae08:	b14b      	cbz	r3, 800ae1e <__ascii_mbtowc+0x1e>
 800ae0a:	7813      	ldrb	r3, [r2, #0]
 800ae0c:	600b      	str	r3, [r1, #0]
 800ae0e:	7812      	ldrb	r2, [r2, #0]
 800ae10:	1e10      	subs	r0, r2, #0
 800ae12:	bf18      	it	ne
 800ae14:	2001      	movne	r0, #1
 800ae16:	b002      	add	sp, #8
 800ae18:	4770      	bx	lr
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	e7fb      	b.n	800ae16 <__ascii_mbtowc+0x16>
 800ae1e:	f06f 0001 	mvn.w	r0, #1
 800ae22:	e7f8      	b.n	800ae16 <__ascii_mbtowc+0x16>

0800ae24 <_realloc_r>:
 800ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	4680      	mov	r8, r0
 800ae2a:	4615      	mov	r5, r2
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	b921      	cbnz	r1, 800ae3a <_realloc_r+0x16>
 800ae30:	4611      	mov	r1, r2
 800ae32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae36:	f7ff b96d 	b.w	800a114 <_malloc_r>
 800ae3a:	b92a      	cbnz	r2, 800ae48 <_realloc_r+0x24>
 800ae3c:	f7ff f8f8 	bl	800a030 <_free_r>
 800ae40:	2400      	movs	r4, #0
 800ae42:	4620      	mov	r0, r4
 800ae44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae48:	f000 f841 	bl	800aece <_malloc_usable_size_r>
 800ae4c:	4285      	cmp	r5, r0
 800ae4e:	4606      	mov	r6, r0
 800ae50:	d802      	bhi.n	800ae58 <_realloc_r+0x34>
 800ae52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ae56:	d8f4      	bhi.n	800ae42 <_realloc_r+0x1e>
 800ae58:	4629      	mov	r1, r5
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	f7ff f95a 	bl	800a114 <_malloc_r>
 800ae60:	4607      	mov	r7, r0
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d0ec      	beq.n	800ae40 <_realloc_r+0x1c>
 800ae66:	42b5      	cmp	r5, r6
 800ae68:	462a      	mov	r2, r5
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	bf28      	it	cs
 800ae6e:	4632      	movcs	r2, r6
 800ae70:	f7ff ff86 	bl	800ad80 <memcpy>
 800ae74:	4621      	mov	r1, r4
 800ae76:	4640      	mov	r0, r8
 800ae78:	f7ff f8da 	bl	800a030 <_free_r>
 800ae7c:	463c      	mov	r4, r7
 800ae7e:	e7e0      	b.n	800ae42 <_realloc_r+0x1e>

0800ae80 <__ascii_wctomb>:
 800ae80:	4603      	mov	r3, r0
 800ae82:	4608      	mov	r0, r1
 800ae84:	b141      	cbz	r1, 800ae98 <__ascii_wctomb+0x18>
 800ae86:	2aff      	cmp	r2, #255	@ 0xff
 800ae88:	d904      	bls.n	800ae94 <__ascii_wctomb+0x14>
 800ae8a:	228a      	movs	r2, #138	@ 0x8a
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	601a      	str	r2, [r3, #0]
 800ae92:	4770      	bx	lr
 800ae94:	2001      	movs	r0, #1
 800ae96:	700a      	strb	r2, [r1, #0]
 800ae98:	4770      	bx	lr
	...

0800ae9c <fiprintf>:
 800ae9c:	b40e      	push	{r1, r2, r3}
 800ae9e:	b503      	push	{r0, r1, lr}
 800aea0:	4601      	mov	r1, r0
 800aea2:	ab03      	add	r3, sp, #12
 800aea4:	4805      	ldr	r0, [pc, #20]	@ (800aebc <fiprintf+0x20>)
 800aea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeaa:	6800      	ldr	r0, [r0, #0]
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	f000 f83d 	bl	800af2c <_vfiprintf_r>
 800aeb2:	b002      	add	sp, #8
 800aeb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeb8:	b003      	add	sp, #12
 800aeba:	4770      	bx	lr
 800aebc:	20000030 	.word	0x20000030

0800aec0 <abort>:
 800aec0:	2006      	movs	r0, #6
 800aec2:	b508      	push	{r3, lr}
 800aec4:	f000 fa06 	bl	800b2d4 <raise>
 800aec8:	2001      	movs	r0, #1
 800aeca:	f7f7 f99e 	bl	800220a <_exit>

0800aece <_malloc_usable_size_r>:
 800aece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed2:	1f18      	subs	r0, r3, #4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	bfbc      	itt	lt
 800aed8:	580b      	ldrlt	r3, [r1, r0]
 800aeda:	18c0      	addlt	r0, r0, r3
 800aedc:	4770      	bx	lr

0800aede <__sfputc_r>:
 800aede:	6893      	ldr	r3, [r2, #8]
 800aee0:	b410      	push	{r4}
 800aee2:	3b01      	subs	r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	6093      	str	r3, [r2, #8]
 800aee8:	da07      	bge.n	800aefa <__sfputc_r+0x1c>
 800aeea:	6994      	ldr	r4, [r2, #24]
 800aeec:	42a3      	cmp	r3, r4
 800aeee:	db01      	blt.n	800aef4 <__sfputc_r+0x16>
 800aef0:	290a      	cmp	r1, #10
 800aef2:	d102      	bne.n	800aefa <__sfputc_r+0x1c>
 800aef4:	bc10      	pop	{r4}
 800aef6:	f000 b931 	b.w	800b15c <__swbuf_r>
 800aefa:	6813      	ldr	r3, [r2, #0]
 800aefc:	1c58      	adds	r0, r3, #1
 800aefe:	6010      	str	r0, [r2, #0]
 800af00:	7019      	strb	r1, [r3, #0]
 800af02:	4608      	mov	r0, r1
 800af04:	bc10      	pop	{r4}
 800af06:	4770      	bx	lr

0800af08 <__sfputs_r>:
 800af08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0a:	4606      	mov	r6, r0
 800af0c:	460f      	mov	r7, r1
 800af0e:	4614      	mov	r4, r2
 800af10:	18d5      	adds	r5, r2, r3
 800af12:	42ac      	cmp	r4, r5
 800af14:	d101      	bne.n	800af1a <__sfputs_r+0x12>
 800af16:	2000      	movs	r0, #0
 800af18:	e007      	b.n	800af2a <__sfputs_r+0x22>
 800af1a:	463a      	mov	r2, r7
 800af1c:	4630      	mov	r0, r6
 800af1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af22:	f7ff ffdc 	bl	800aede <__sfputc_r>
 800af26:	1c43      	adds	r3, r0, #1
 800af28:	d1f3      	bne.n	800af12 <__sfputs_r+0xa>
 800af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af2c <_vfiprintf_r>:
 800af2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af30:	460d      	mov	r5, r1
 800af32:	4614      	mov	r4, r2
 800af34:	4698      	mov	r8, r3
 800af36:	4606      	mov	r6, r0
 800af38:	b09d      	sub	sp, #116	@ 0x74
 800af3a:	b118      	cbz	r0, 800af44 <_vfiprintf_r+0x18>
 800af3c:	6a03      	ldr	r3, [r0, #32]
 800af3e:	b90b      	cbnz	r3, 800af44 <_vfiprintf_r+0x18>
 800af40:	f7fe f8fe 	bl	8009140 <__sinit>
 800af44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af46:	07d9      	lsls	r1, r3, #31
 800af48:	d405      	bmi.n	800af56 <_vfiprintf_r+0x2a>
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	059a      	lsls	r2, r3, #22
 800af4e:	d402      	bmi.n	800af56 <_vfiprintf_r+0x2a>
 800af50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af52:	f7fe fa0c 	bl	800936e <__retarget_lock_acquire_recursive>
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	071b      	lsls	r3, r3, #28
 800af5a:	d501      	bpl.n	800af60 <_vfiprintf_r+0x34>
 800af5c:	692b      	ldr	r3, [r5, #16]
 800af5e:	b99b      	cbnz	r3, 800af88 <_vfiprintf_r+0x5c>
 800af60:	4629      	mov	r1, r5
 800af62:	4630      	mov	r0, r6
 800af64:	f000 f938 	bl	800b1d8 <__swsetup_r>
 800af68:	b170      	cbz	r0, 800af88 <_vfiprintf_r+0x5c>
 800af6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af6c:	07dc      	lsls	r4, r3, #31
 800af6e:	d504      	bpl.n	800af7a <_vfiprintf_r+0x4e>
 800af70:	f04f 30ff 	mov.w	r0, #4294967295
 800af74:	b01d      	add	sp, #116	@ 0x74
 800af76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7a:	89ab      	ldrh	r3, [r5, #12]
 800af7c:	0598      	lsls	r0, r3, #22
 800af7e:	d4f7      	bmi.n	800af70 <_vfiprintf_r+0x44>
 800af80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af82:	f7fe f9f5 	bl	8009370 <__retarget_lock_release_recursive>
 800af86:	e7f3      	b.n	800af70 <_vfiprintf_r+0x44>
 800af88:	2300      	movs	r3, #0
 800af8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af8c:	2320      	movs	r3, #32
 800af8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af92:	2330      	movs	r3, #48	@ 0x30
 800af94:	f04f 0901 	mov.w	r9, #1
 800af98:	f8cd 800c 	str.w	r8, [sp, #12]
 800af9c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b148 <_vfiprintf_r+0x21c>
 800afa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afa4:	4623      	mov	r3, r4
 800afa6:	469a      	mov	sl, r3
 800afa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afac:	b10a      	cbz	r2, 800afb2 <_vfiprintf_r+0x86>
 800afae:	2a25      	cmp	r2, #37	@ 0x25
 800afb0:	d1f9      	bne.n	800afa6 <_vfiprintf_r+0x7a>
 800afb2:	ebba 0b04 	subs.w	fp, sl, r4
 800afb6:	d00b      	beq.n	800afd0 <_vfiprintf_r+0xa4>
 800afb8:	465b      	mov	r3, fp
 800afba:	4622      	mov	r2, r4
 800afbc:	4629      	mov	r1, r5
 800afbe:	4630      	mov	r0, r6
 800afc0:	f7ff ffa2 	bl	800af08 <__sfputs_r>
 800afc4:	3001      	adds	r0, #1
 800afc6:	f000 80a7 	beq.w	800b118 <_vfiprintf_r+0x1ec>
 800afca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afcc:	445a      	add	r2, fp
 800afce:	9209      	str	r2, [sp, #36]	@ 0x24
 800afd0:	f89a 3000 	ldrb.w	r3, [sl]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f000 809f 	beq.w	800b118 <_vfiprintf_r+0x1ec>
 800afda:	2300      	movs	r3, #0
 800afdc:	f04f 32ff 	mov.w	r2, #4294967295
 800afe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afe4:	f10a 0a01 	add.w	sl, sl, #1
 800afe8:	9304      	str	r3, [sp, #16]
 800afea:	9307      	str	r3, [sp, #28]
 800afec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aff0:	931a      	str	r3, [sp, #104]	@ 0x68
 800aff2:	4654      	mov	r4, sl
 800aff4:	2205      	movs	r2, #5
 800aff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800affa:	4853      	ldr	r0, [pc, #332]	@ (800b148 <_vfiprintf_r+0x21c>)
 800affc:	f7fe f9b9 	bl	8009372 <memchr>
 800b000:	9a04      	ldr	r2, [sp, #16]
 800b002:	b9d8      	cbnz	r0, 800b03c <_vfiprintf_r+0x110>
 800b004:	06d1      	lsls	r1, r2, #27
 800b006:	bf44      	itt	mi
 800b008:	2320      	movmi	r3, #32
 800b00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b00e:	0713      	lsls	r3, r2, #28
 800b010:	bf44      	itt	mi
 800b012:	232b      	movmi	r3, #43	@ 0x2b
 800b014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b018:	f89a 3000 	ldrb.w	r3, [sl]
 800b01c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b01e:	d015      	beq.n	800b04c <_vfiprintf_r+0x120>
 800b020:	4654      	mov	r4, sl
 800b022:	2000      	movs	r0, #0
 800b024:	f04f 0c0a 	mov.w	ip, #10
 800b028:	9a07      	ldr	r2, [sp, #28]
 800b02a:	4621      	mov	r1, r4
 800b02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b030:	3b30      	subs	r3, #48	@ 0x30
 800b032:	2b09      	cmp	r3, #9
 800b034:	d94b      	bls.n	800b0ce <_vfiprintf_r+0x1a2>
 800b036:	b1b0      	cbz	r0, 800b066 <_vfiprintf_r+0x13a>
 800b038:	9207      	str	r2, [sp, #28]
 800b03a:	e014      	b.n	800b066 <_vfiprintf_r+0x13a>
 800b03c:	eba0 0308 	sub.w	r3, r0, r8
 800b040:	fa09 f303 	lsl.w	r3, r9, r3
 800b044:	4313      	orrs	r3, r2
 800b046:	46a2      	mov	sl, r4
 800b048:	9304      	str	r3, [sp, #16]
 800b04a:	e7d2      	b.n	800aff2 <_vfiprintf_r+0xc6>
 800b04c:	9b03      	ldr	r3, [sp, #12]
 800b04e:	1d19      	adds	r1, r3, #4
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	9103      	str	r1, [sp, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	bfbb      	ittet	lt
 800b058:	425b      	neglt	r3, r3
 800b05a:	f042 0202 	orrlt.w	r2, r2, #2
 800b05e:	9307      	strge	r3, [sp, #28]
 800b060:	9307      	strlt	r3, [sp, #28]
 800b062:	bfb8      	it	lt
 800b064:	9204      	strlt	r2, [sp, #16]
 800b066:	7823      	ldrb	r3, [r4, #0]
 800b068:	2b2e      	cmp	r3, #46	@ 0x2e
 800b06a:	d10a      	bne.n	800b082 <_vfiprintf_r+0x156>
 800b06c:	7863      	ldrb	r3, [r4, #1]
 800b06e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b070:	d132      	bne.n	800b0d8 <_vfiprintf_r+0x1ac>
 800b072:	9b03      	ldr	r3, [sp, #12]
 800b074:	3402      	adds	r4, #2
 800b076:	1d1a      	adds	r2, r3, #4
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	9203      	str	r2, [sp, #12]
 800b07c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b080:	9305      	str	r3, [sp, #20]
 800b082:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b14c <_vfiprintf_r+0x220>
 800b086:	2203      	movs	r2, #3
 800b088:	4650      	mov	r0, sl
 800b08a:	7821      	ldrb	r1, [r4, #0]
 800b08c:	f7fe f971 	bl	8009372 <memchr>
 800b090:	b138      	cbz	r0, 800b0a2 <_vfiprintf_r+0x176>
 800b092:	2240      	movs	r2, #64	@ 0x40
 800b094:	9b04      	ldr	r3, [sp, #16]
 800b096:	eba0 000a 	sub.w	r0, r0, sl
 800b09a:	4082      	lsls	r2, r0
 800b09c:	4313      	orrs	r3, r2
 800b09e:	3401      	adds	r4, #1
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a6:	2206      	movs	r2, #6
 800b0a8:	4829      	ldr	r0, [pc, #164]	@ (800b150 <_vfiprintf_r+0x224>)
 800b0aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0ae:	f7fe f960 	bl	8009372 <memchr>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d03f      	beq.n	800b136 <_vfiprintf_r+0x20a>
 800b0b6:	4b27      	ldr	r3, [pc, #156]	@ (800b154 <_vfiprintf_r+0x228>)
 800b0b8:	bb1b      	cbnz	r3, 800b102 <_vfiprintf_r+0x1d6>
 800b0ba:	9b03      	ldr	r3, [sp, #12]
 800b0bc:	3307      	adds	r3, #7
 800b0be:	f023 0307 	bic.w	r3, r3, #7
 800b0c2:	3308      	adds	r3, #8
 800b0c4:	9303      	str	r3, [sp, #12]
 800b0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c8:	443b      	add	r3, r7
 800b0ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0cc:	e76a      	b.n	800afa4 <_vfiprintf_r+0x78>
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	2001      	movs	r0, #1
 800b0d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0d6:	e7a8      	b.n	800b02a <_vfiprintf_r+0xfe>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f04f 0c0a 	mov.w	ip, #10
 800b0de:	4619      	mov	r1, r3
 800b0e0:	3401      	adds	r4, #1
 800b0e2:	9305      	str	r3, [sp, #20]
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ea:	3a30      	subs	r2, #48	@ 0x30
 800b0ec:	2a09      	cmp	r2, #9
 800b0ee:	d903      	bls.n	800b0f8 <_vfiprintf_r+0x1cc>
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d0c6      	beq.n	800b082 <_vfiprintf_r+0x156>
 800b0f4:	9105      	str	r1, [sp, #20]
 800b0f6:	e7c4      	b.n	800b082 <_vfiprintf_r+0x156>
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b100:	e7f0      	b.n	800b0e4 <_vfiprintf_r+0x1b8>
 800b102:	ab03      	add	r3, sp, #12
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	462a      	mov	r2, r5
 800b108:	4630      	mov	r0, r6
 800b10a:	4b13      	ldr	r3, [pc, #76]	@ (800b158 <_vfiprintf_r+0x22c>)
 800b10c:	a904      	add	r1, sp, #16
 800b10e:	f7fd fbcd 	bl	80088ac <_printf_float>
 800b112:	4607      	mov	r7, r0
 800b114:	1c78      	adds	r0, r7, #1
 800b116:	d1d6      	bne.n	800b0c6 <_vfiprintf_r+0x19a>
 800b118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b11a:	07d9      	lsls	r1, r3, #31
 800b11c:	d405      	bmi.n	800b12a <_vfiprintf_r+0x1fe>
 800b11e:	89ab      	ldrh	r3, [r5, #12]
 800b120:	059a      	lsls	r2, r3, #22
 800b122:	d402      	bmi.n	800b12a <_vfiprintf_r+0x1fe>
 800b124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b126:	f7fe f923 	bl	8009370 <__retarget_lock_release_recursive>
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	065b      	lsls	r3, r3, #25
 800b12e:	f53f af1f 	bmi.w	800af70 <_vfiprintf_r+0x44>
 800b132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b134:	e71e      	b.n	800af74 <_vfiprintf_r+0x48>
 800b136:	ab03      	add	r3, sp, #12
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	462a      	mov	r2, r5
 800b13c:	4630      	mov	r0, r6
 800b13e:	4b06      	ldr	r3, [pc, #24]	@ (800b158 <_vfiprintf_r+0x22c>)
 800b140:	a904      	add	r1, sp, #16
 800b142:	f7fd fe51 	bl	8008de8 <_printf_i>
 800b146:	e7e4      	b.n	800b112 <_vfiprintf_r+0x1e6>
 800b148:	0800bc80 	.word	0x0800bc80
 800b14c:	0800bc86 	.word	0x0800bc86
 800b150:	0800bc8a 	.word	0x0800bc8a
 800b154:	080088ad 	.word	0x080088ad
 800b158:	0800af09 	.word	0x0800af09

0800b15c <__swbuf_r>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	460e      	mov	r6, r1
 800b160:	4614      	mov	r4, r2
 800b162:	4605      	mov	r5, r0
 800b164:	b118      	cbz	r0, 800b16e <__swbuf_r+0x12>
 800b166:	6a03      	ldr	r3, [r0, #32]
 800b168:	b90b      	cbnz	r3, 800b16e <__swbuf_r+0x12>
 800b16a:	f7fd ffe9 	bl	8009140 <__sinit>
 800b16e:	69a3      	ldr	r3, [r4, #24]
 800b170:	60a3      	str	r3, [r4, #8]
 800b172:	89a3      	ldrh	r3, [r4, #12]
 800b174:	071a      	lsls	r2, r3, #28
 800b176:	d501      	bpl.n	800b17c <__swbuf_r+0x20>
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	b943      	cbnz	r3, 800b18e <__swbuf_r+0x32>
 800b17c:	4621      	mov	r1, r4
 800b17e:	4628      	mov	r0, r5
 800b180:	f000 f82a 	bl	800b1d8 <__swsetup_r>
 800b184:	b118      	cbz	r0, 800b18e <__swbuf_r+0x32>
 800b186:	f04f 37ff 	mov.w	r7, #4294967295
 800b18a:	4638      	mov	r0, r7
 800b18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	6922      	ldr	r2, [r4, #16]
 800b192:	b2f6      	uxtb	r6, r6
 800b194:	1a98      	subs	r0, r3, r2
 800b196:	6963      	ldr	r3, [r4, #20]
 800b198:	4637      	mov	r7, r6
 800b19a:	4283      	cmp	r3, r0
 800b19c:	dc05      	bgt.n	800b1aa <__swbuf_r+0x4e>
 800b19e:	4621      	mov	r1, r4
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	f7ff fd9b 	bl	800acdc <_fflush_r>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d1ed      	bne.n	800b186 <__swbuf_r+0x2a>
 800b1aa:	68a3      	ldr	r3, [r4, #8]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	60a3      	str	r3, [r4, #8]
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	6022      	str	r2, [r4, #0]
 800b1b6:	701e      	strb	r6, [r3, #0]
 800b1b8:	6962      	ldr	r2, [r4, #20]
 800b1ba:	1c43      	adds	r3, r0, #1
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d004      	beq.n	800b1ca <__swbuf_r+0x6e>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	07db      	lsls	r3, r3, #31
 800b1c4:	d5e1      	bpl.n	800b18a <__swbuf_r+0x2e>
 800b1c6:	2e0a      	cmp	r6, #10
 800b1c8:	d1df      	bne.n	800b18a <__swbuf_r+0x2e>
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	f7ff fd85 	bl	800acdc <_fflush_r>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	d0d9      	beq.n	800b18a <__swbuf_r+0x2e>
 800b1d6:	e7d6      	b.n	800b186 <__swbuf_r+0x2a>

0800b1d8 <__swsetup_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4b29      	ldr	r3, [pc, #164]	@ (800b280 <__swsetup_r+0xa8>)
 800b1dc:	4605      	mov	r5, r0
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	460c      	mov	r4, r1
 800b1e2:	b118      	cbz	r0, 800b1ec <__swsetup_r+0x14>
 800b1e4:	6a03      	ldr	r3, [r0, #32]
 800b1e6:	b90b      	cbnz	r3, 800b1ec <__swsetup_r+0x14>
 800b1e8:	f7fd ffaa 	bl	8009140 <__sinit>
 800b1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1f0:	0719      	lsls	r1, r3, #28
 800b1f2:	d422      	bmi.n	800b23a <__swsetup_r+0x62>
 800b1f4:	06da      	lsls	r2, r3, #27
 800b1f6:	d407      	bmi.n	800b208 <__swsetup_r+0x30>
 800b1f8:	2209      	movs	r2, #9
 800b1fa:	602a      	str	r2, [r5, #0]
 800b1fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b200:	f04f 30ff 	mov.w	r0, #4294967295
 800b204:	81a3      	strh	r3, [r4, #12]
 800b206:	e033      	b.n	800b270 <__swsetup_r+0x98>
 800b208:	0758      	lsls	r0, r3, #29
 800b20a:	d512      	bpl.n	800b232 <__swsetup_r+0x5a>
 800b20c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b20e:	b141      	cbz	r1, 800b222 <__swsetup_r+0x4a>
 800b210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b214:	4299      	cmp	r1, r3
 800b216:	d002      	beq.n	800b21e <__swsetup_r+0x46>
 800b218:	4628      	mov	r0, r5
 800b21a:	f7fe ff09 	bl	800a030 <_free_r>
 800b21e:	2300      	movs	r3, #0
 800b220:	6363      	str	r3, [r4, #52]	@ 0x34
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	2300      	movs	r3, #0
 800b22c:	6063      	str	r3, [r4, #4]
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	f043 0308 	orr.w	r3, r3, #8
 800b238:	81a3      	strh	r3, [r4, #12]
 800b23a:	6923      	ldr	r3, [r4, #16]
 800b23c:	b94b      	cbnz	r3, 800b252 <__swsetup_r+0x7a>
 800b23e:	89a3      	ldrh	r3, [r4, #12]
 800b240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b248:	d003      	beq.n	800b252 <__swsetup_r+0x7a>
 800b24a:	4621      	mov	r1, r4
 800b24c:	4628      	mov	r0, r5
 800b24e:	f000 f882 	bl	800b356 <__smakebuf_r>
 800b252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b256:	f013 0201 	ands.w	r2, r3, #1
 800b25a:	d00a      	beq.n	800b272 <__swsetup_r+0x9a>
 800b25c:	2200      	movs	r2, #0
 800b25e:	60a2      	str	r2, [r4, #8]
 800b260:	6962      	ldr	r2, [r4, #20]
 800b262:	4252      	negs	r2, r2
 800b264:	61a2      	str	r2, [r4, #24]
 800b266:	6922      	ldr	r2, [r4, #16]
 800b268:	b942      	cbnz	r2, 800b27c <__swsetup_r+0xa4>
 800b26a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b26e:	d1c5      	bne.n	800b1fc <__swsetup_r+0x24>
 800b270:	bd38      	pop	{r3, r4, r5, pc}
 800b272:	0799      	lsls	r1, r3, #30
 800b274:	bf58      	it	pl
 800b276:	6962      	ldrpl	r2, [r4, #20]
 800b278:	60a2      	str	r2, [r4, #8]
 800b27a:	e7f4      	b.n	800b266 <__swsetup_r+0x8e>
 800b27c:	2000      	movs	r0, #0
 800b27e:	e7f7      	b.n	800b270 <__swsetup_r+0x98>
 800b280:	20000030 	.word	0x20000030

0800b284 <_raise_r>:
 800b284:	291f      	cmp	r1, #31
 800b286:	b538      	push	{r3, r4, r5, lr}
 800b288:	4605      	mov	r5, r0
 800b28a:	460c      	mov	r4, r1
 800b28c:	d904      	bls.n	800b298 <_raise_r+0x14>
 800b28e:	2316      	movs	r3, #22
 800b290:	6003      	str	r3, [r0, #0]
 800b292:	f04f 30ff 	mov.w	r0, #4294967295
 800b296:	bd38      	pop	{r3, r4, r5, pc}
 800b298:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b29a:	b112      	cbz	r2, 800b2a2 <_raise_r+0x1e>
 800b29c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2a0:	b94b      	cbnz	r3, 800b2b6 <_raise_r+0x32>
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f000 f830 	bl	800b308 <_getpid_r>
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2b2:	f000 b817 	b.w	800b2e4 <_kill_r>
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d00a      	beq.n	800b2d0 <_raise_r+0x4c>
 800b2ba:	1c59      	adds	r1, r3, #1
 800b2bc:	d103      	bne.n	800b2c6 <_raise_r+0x42>
 800b2be:	2316      	movs	r3, #22
 800b2c0:	6003      	str	r3, [r0, #0]
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	e7e7      	b.n	800b296 <_raise_r+0x12>
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b2ce:	4798      	blx	r3
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	e7e0      	b.n	800b296 <_raise_r+0x12>

0800b2d4 <raise>:
 800b2d4:	4b02      	ldr	r3, [pc, #8]	@ (800b2e0 <raise+0xc>)
 800b2d6:	4601      	mov	r1, r0
 800b2d8:	6818      	ldr	r0, [r3, #0]
 800b2da:	f7ff bfd3 	b.w	800b284 <_raise_r>
 800b2de:	bf00      	nop
 800b2e0:	20000030 	.word	0x20000030

0800b2e4 <_kill_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	4d06      	ldr	r5, [pc, #24]	@ (800b304 <_kill_r+0x20>)
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	4608      	mov	r0, r1
 800b2ee:	4611      	mov	r1, r2
 800b2f0:	602b      	str	r3, [r5, #0]
 800b2f2:	f7f6 ff7a 	bl	80021ea <_kill>
 800b2f6:	1c43      	adds	r3, r0, #1
 800b2f8:	d102      	bne.n	800b300 <_kill_r+0x1c>
 800b2fa:	682b      	ldr	r3, [r5, #0]
 800b2fc:	b103      	cbz	r3, 800b300 <_kill_r+0x1c>
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	bd38      	pop	{r3, r4, r5, pc}
 800b302:	bf00      	nop
 800b304:	2000274c 	.word	0x2000274c

0800b308 <_getpid_r>:
 800b308:	f7f6 bf68 	b.w	80021dc <_getpid>

0800b30c <__swhatbuf_r>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	460c      	mov	r4, r1
 800b310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b314:	4615      	mov	r5, r2
 800b316:	2900      	cmp	r1, #0
 800b318:	461e      	mov	r6, r3
 800b31a:	b096      	sub	sp, #88	@ 0x58
 800b31c:	da0c      	bge.n	800b338 <__swhatbuf_r+0x2c>
 800b31e:	89a3      	ldrh	r3, [r4, #12]
 800b320:	2100      	movs	r1, #0
 800b322:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b326:	bf14      	ite	ne
 800b328:	2340      	movne	r3, #64	@ 0x40
 800b32a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b32e:	2000      	movs	r0, #0
 800b330:	6031      	str	r1, [r6, #0]
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	b016      	add	sp, #88	@ 0x58
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	466a      	mov	r2, sp
 800b33a:	f000 f849 	bl	800b3d0 <_fstat_r>
 800b33e:	2800      	cmp	r0, #0
 800b340:	dbed      	blt.n	800b31e <__swhatbuf_r+0x12>
 800b342:	9901      	ldr	r1, [sp, #4]
 800b344:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b348:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b34c:	4259      	negs	r1, r3
 800b34e:	4159      	adcs	r1, r3
 800b350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b354:	e7eb      	b.n	800b32e <__swhatbuf_r+0x22>

0800b356 <__smakebuf_r>:
 800b356:	898b      	ldrh	r3, [r1, #12]
 800b358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b35a:	079d      	lsls	r5, r3, #30
 800b35c:	4606      	mov	r6, r0
 800b35e:	460c      	mov	r4, r1
 800b360:	d507      	bpl.n	800b372 <__smakebuf_r+0x1c>
 800b362:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b366:	6023      	str	r3, [r4, #0]
 800b368:	6123      	str	r3, [r4, #16]
 800b36a:	2301      	movs	r3, #1
 800b36c:	6163      	str	r3, [r4, #20]
 800b36e:	b003      	add	sp, #12
 800b370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b372:	466a      	mov	r2, sp
 800b374:	ab01      	add	r3, sp, #4
 800b376:	f7ff ffc9 	bl	800b30c <__swhatbuf_r>
 800b37a:	9f00      	ldr	r7, [sp, #0]
 800b37c:	4605      	mov	r5, r0
 800b37e:	4639      	mov	r1, r7
 800b380:	4630      	mov	r0, r6
 800b382:	f7fe fec7 	bl	800a114 <_malloc_r>
 800b386:	b948      	cbnz	r0, 800b39c <__smakebuf_r+0x46>
 800b388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b38c:	059a      	lsls	r2, r3, #22
 800b38e:	d4ee      	bmi.n	800b36e <__smakebuf_r+0x18>
 800b390:	f023 0303 	bic.w	r3, r3, #3
 800b394:	f043 0302 	orr.w	r3, r3, #2
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	e7e2      	b.n	800b362 <__smakebuf_r+0xc>
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	9b01      	ldr	r3, [sp, #4]
 800b3aa:	6020      	str	r0, [r4, #0]
 800b3ac:	b15b      	cbz	r3, 800b3c6 <__smakebuf_r+0x70>
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3b4:	f000 f81e 	bl	800b3f4 <_isatty_r>
 800b3b8:	b128      	cbz	r0, 800b3c6 <__smakebuf_r+0x70>
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	f023 0303 	bic.w	r3, r3, #3
 800b3c0:	f043 0301 	orr.w	r3, r3, #1
 800b3c4:	81a3      	strh	r3, [r4, #12]
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	431d      	orrs	r5, r3
 800b3ca:	81a5      	strh	r5, [r4, #12]
 800b3cc:	e7cf      	b.n	800b36e <__smakebuf_r+0x18>
	...

0800b3d0 <_fstat_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	4d06      	ldr	r5, [pc, #24]	@ (800b3f0 <_fstat_r+0x20>)
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4608      	mov	r0, r1
 800b3da:	4611      	mov	r1, r2
 800b3dc:	602b      	str	r3, [r5, #0]
 800b3de:	f7f6 ff63 	bl	80022a8 <_fstat>
 800b3e2:	1c43      	adds	r3, r0, #1
 800b3e4:	d102      	bne.n	800b3ec <_fstat_r+0x1c>
 800b3e6:	682b      	ldr	r3, [r5, #0]
 800b3e8:	b103      	cbz	r3, 800b3ec <_fstat_r+0x1c>
 800b3ea:	6023      	str	r3, [r4, #0]
 800b3ec:	bd38      	pop	{r3, r4, r5, pc}
 800b3ee:	bf00      	nop
 800b3f0:	2000274c 	.word	0x2000274c

0800b3f4 <_isatty_r>:
 800b3f4:	b538      	push	{r3, r4, r5, lr}
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	4d05      	ldr	r5, [pc, #20]	@ (800b410 <_isatty_r+0x1c>)
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	4608      	mov	r0, r1
 800b3fe:	602b      	str	r3, [r5, #0]
 800b400:	f7f6 ff61 	bl	80022c6 <_isatty>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	d102      	bne.n	800b40e <_isatty_r+0x1a>
 800b408:	682b      	ldr	r3, [r5, #0]
 800b40a:	b103      	cbz	r3, 800b40e <_isatty_r+0x1a>
 800b40c:	6023      	str	r3, [r4, #0]
 800b40e:	bd38      	pop	{r3, r4, r5, pc}
 800b410:	2000274c 	.word	0x2000274c

0800b414 <roundf>:
 800b414:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b418:	3b7f      	subs	r3, #127	@ 0x7f
 800b41a:	2b16      	cmp	r3, #22
 800b41c:	4601      	mov	r1, r0
 800b41e:	b510      	push	{r4, lr}
 800b420:	dc14      	bgt.n	800b44c <roundf+0x38>
 800b422:	2b00      	cmp	r3, #0
 800b424:	da07      	bge.n	800b436 <roundf+0x22>
 800b426:	3301      	adds	r3, #1
 800b428:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800b42c:	d101      	bne.n	800b432 <roundf+0x1e>
 800b42e:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 800b432:	4608      	mov	r0, r1
 800b434:	bd10      	pop	{r4, pc}
 800b436:	4a08      	ldr	r2, [pc, #32]	@ (800b458 <roundf+0x44>)
 800b438:	411a      	asrs	r2, r3
 800b43a:	4202      	tst	r2, r0
 800b43c:	d0f9      	beq.n	800b432 <roundf+0x1e>
 800b43e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b442:	4119      	asrs	r1, r3
 800b444:	4401      	add	r1, r0
 800b446:	ea21 0102 	bic.w	r1, r1, r2
 800b44a:	e7f2      	b.n	800b432 <roundf+0x1e>
 800b44c:	2b80      	cmp	r3, #128	@ 0x80
 800b44e:	d1f0      	bne.n	800b432 <roundf+0x1e>
 800b450:	f7f5 fb20 	bl	8000a94 <__addsf3>
 800b454:	4601      	mov	r1, r0
 800b456:	e7ec      	b.n	800b432 <roundf+0x1e>
 800b458:	007fffff 	.word	0x007fffff

0800b45c <_init>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	bf00      	nop
 800b460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b462:	bc08      	pop	{r3}
 800b464:	469e      	mov	lr, r3
 800b466:	4770      	bx	lr

0800b468 <_fini>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	bf00      	nop
 800b46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46e:	bc08      	pop	{r3}
 800b470:	469e      	mov	lr, r3
 800b472:	4770      	bx	lr
