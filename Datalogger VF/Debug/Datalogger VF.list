
Datalogger VF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004880  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004990  08004990  00005990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b4  080049b4  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080049b4  080049b4  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080049b4  080049b4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b4  080049b4  000059b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049b8  080049b8  000059b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080049bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000010  080049cc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080049cc  0000619c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcf6  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002048  00000000  00000000  00011d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00013d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d0  00000000  00000000  00014a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018651  00000000  00000000  00015408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e364  00000000  00000000  0002da59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb66  00000000  00000000  0003bdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003694  00000000  00000000  000cb968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000ceffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004978 	.word	0x08004978

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004978 	.word	0x08004978

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__aeabi_f2uiz>:
 8000e48:	0042      	lsls	r2, r0, #1
 8000e4a:	d20e      	bcs.n	8000e6a <__aeabi_f2uiz+0x22>
 8000e4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e50:	d30b      	bcc.n	8000e6a <__aeabi_f2uiz+0x22>
 8000e52:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5a:	d409      	bmi.n	8000e70 <__aeabi_f2uiz+0x28>
 8000e5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e64:	fa23 f002 	lsr.w	r0, r3, r2
 8000e68:	4770      	bx	lr
 8000e6a:	f04f 0000 	mov.w	r0, #0
 8000e6e:	4770      	bx	lr
 8000e70:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e74:	d101      	bne.n	8000e7a <__aeabi_f2uiz+0x32>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d102      	bne.n	8000e80 <__aeabi_f2uiz+0x38>
 8000e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7e:	4770      	bx	lr
 8000e80:	f04f 0000 	mov.w	r0, #0
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <ReadPosition>:
/* Includes ------------------------------------------------------------------*/
#include "Sensors.h"
#include "math.h"

/* Exported functions --------------------------------------------------------*/
float ReadPosition(float voltage){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	float position = (voltage / 3.3f)* 75.0f; // Converte Tensão em Milimetros
 8000e90:	4907      	ldr	r1, [pc, #28]	@ (8000eb0 <ReadPosition+0x28>)
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ff3c 	bl	8000d10 <__aeabi_fdiv>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4906      	ldr	r1, [pc, #24]	@ (8000eb4 <ReadPosition+0x2c>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fe83 	bl	8000ba8 <__aeabi_fmul>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	60fb      	str	r3, [r7, #12]
	return position;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40533333 	.word	0x40533333
 8000eb4:	42960000 	.word	0x42960000

08000eb8 <ReadVoltage>:

float ReadVoltage(uint16_t Analog_Val) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
    float voltage = (Analog_Val * 3.3f) / ((1 << 12) - 1.0f); // Converte um valor analogico para tensão
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe1b 	bl	8000b00 <__aeabi_i2f>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4907      	ldr	r1, [pc, #28]	@ (8000eec <ReadVoltage+0x34>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fe6a 	bl	8000ba8 <__aeabi_fmul>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4906      	ldr	r1, [pc, #24]	@ (8000ef0 <ReadVoltage+0x38>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff19 	bl	8000d10 <__aeabi_fdiv>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	60fb      	str	r3, [r7, #12]
    return voltage;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40533333 	.word	0x40533333
 8000ef0:	457ff000 	.word	0x457ff000

08000ef4 <ReadAngle>:
float ReadAngle(int Pedal_position){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	float interval = (ANGLE_MAX - ANGLE_MIN)/ 100.0;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <ReadAngle+0x34>)
 8000efe:	60fb      	str	r3, [r7, #12]
	float Angle = (interval*Pedal_position) + ANGLE_MIN;
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fdfd 	bl	8000b00 <__aeabi_i2f>
 8000f06:	4603      	mov	r3, r0
 8000f08:	68f9      	ldr	r1, [r7, #12]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fe4c 	bl	8000ba8 <__aeabi_fmul>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4906      	ldr	r1, [pc, #24]	@ (8000f2c <ReadAngle+0x38>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fd3f 	bl	8000998 <__addsf3>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	60bb      	str	r3, [r7, #8]
	return Angle;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	3f333333 	.word	0x3f333333
 8000f2c:	41a00000 	.word	0x41a00000

08000f30 <ReadAngleSTR>:
void CleanADC_VAL(float* ADC_VAL ){
	for (int i = 0; i < READSIZE; i++) {
	    ADC_VAL[i] = 0;
	}
}
float ReadAngleSTR(float voltage) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

    float str_angle = ((voltage - V_CENTER) / (V_MAX / 2)) * VOL_ANGLE_MAX;
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fa6d 	bl	8000418 <__aeabi_f2d>
 8000f3e:	a312      	add	r3, pc, #72	@ (adr r3, 8000f88 <ReadAngleSTR+0x58>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	f7ff f908 	bl	8000158 <__aeabi_dsub>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	a30d      	add	r3, pc, #52	@ (adr r3, 8000f88 <ReadAngleSTR+0x58>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff fbe1 	bl	800071c <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <ReadAngleSTR+0x60>)
 8000f68:	f7ff faae 	bl	80004c8 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fcba 	bl	80008ec <__aeabi_d2f>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60fb      	str	r3, [r7, #12]
    return str_angle;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	66666666 	.word	0x66666666
 8000f8c:	3ffa6666 	.word	0x3ffa6666
 8000f90:	40400000 	.word	0x40400000

08000f94 <ReadPressure>:
float ReadPressure(float voltage){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    return ((voltage / 3.3f) * 102.0f) * 14.5038f;
 8000f9c:	4909      	ldr	r1, [pc, #36]	@ (8000fc4 <ReadPressure+0x30>)
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff feb6 	bl	8000d10 <__aeabi_fdiv>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4908      	ldr	r1, [pc, #32]	@ (8000fc8 <ReadPressure+0x34>)
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fdfd 	bl	8000ba8 <__aeabi_fmul>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4906      	ldr	r1, [pc, #24]	@ (8000fcc <ReadPressure+0x38>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fdf8 	bl	8000ba8 <__aeabi_fmul>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40533333 	.word	0x40533333
 8000fc8:	42cc0000 	.word	0x42cc0000
 8000fcc:	41680f91 	.word	0x41680f91

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f000 fd21 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f8d9 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 fa83 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe2:	f000 fa63 	bl	80014ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000fe6:	f000 f92f 	bl	8001248 <MX_ADC1_Init>
  MX_CAN_Init();
 8000fea:	f000 f9c1 	bl	8001370 <MX_CAN_Init>
  MX_TIM4_Init();
 8000fee:	f000 fa0f 	bl	8001410 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000ff2:	4858      	ldr	r0, [pc, #352]	@ (8001154 <main+0x184>)
 8000ff4:	f003 f8f2 	bl	80041dc <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_VAL, READSIZE);
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	4957      	ldr	r1, [pc, #348]	@ (8001158 <main+0x188>)
 8000ffc:	4857      	ldr	r0, [pc, #348]	@ (800115c <main+0x18c>)
 8000ffe:	f000 fe47 	bl	8001c90 <HAL_ADC_Start_DMA>
  HAL_CAN_Start(&hcan);
 8001002:	4857      	ldr	r0, [pc, #348]	@ (8001160 <main+0x190>)
 8001004:	f001 faf1 	bl	80025ea <HAL_CAN_Start>
//  else
//  {
//      // CAN iniciado --> acende o led
//      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
//  }
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001008:	2102      	movs	r1, #2
 800100a:	4855      	ldr	r0, [pc, #340]	@ (8001160 <main+0x190>)
 800100c:	f001 fd21 	bl	8002a52 <HAL_CAN_ActivateNotification>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  send_angles();
 8001010:	f000 fb14 	bl	800163c <send_angles>
		  if(sendData == 1){
 8001014:	4b53      	ldr	r3, [pc, #332]	@ (8001164 <main+0x194>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d1f9      	bne.n	8001010 <main+0x40>
		  if(IsADCFinished == 1){
 800101c:	4b52      	ldr	r3, [pc, #328]	@ (8001168 <main+0x198>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	f040 8092 	bne.w	800114a <main+0x17a>
			  for(int i = 0; i < READSIZE; i++){
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	e07f      	b.n	800112c <main+0x15c>

			        switch (i) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b06      	cmp	r3, #6
 8001030:	d879      	bhi.n	8001126 <main+0x156>
 8001032:	a201      	add	r2, pc, #4	@ (adr r2, 8001038 <main+0x68>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	08001055 	.word	0x08001055
 800103c:	08001073 	.word	0x08001073
 8001040:	08001091 	.word	0x08001091
 8001044:	080010af 	.word	0x080010af
 8001048:	080010cd 	.word	0x080010cd
 800104c:	080010eb 	.word	0x080010eb
 8001050:	08001109 	.word	0x08001109
			            case 0:
			                BRK_Pressure_T = ReadPressure(ReadVoltage(ADC_VAL[i]));
 8001054:	4a40      	ldr	r2, [pc, #256]	@ (8001158 <main+0x188>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff2b 	bl	8000eb8 <ReadVoltage>
 8001062:	4603      	mov	r3, r0
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff95 	bl	8000f94 <ReadPressure>
 800106a:	4603      	mov	r3, r0
 800106c:	4a3f      	ldr	r2, [pc, #252]	@ (800116c <main+0x19c>)
 800106e:	6013      	str	r3, [r2, #0]
			                break;
 8001070:	e059      	b.n	8001126 <main+0x156>
			            case 1:
			                BRK_Pressure_F = ReadPressure(ReadVoltage(ADC_VAL[i]));
 8001072:	4a39      	ldr	r2, [pc, #228]	@ (8001158 <main+0x188>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff1c 	bl	8000eb8 <ReadVoltage>
 8001080:	4603      	mov	r3, r0
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff86 	bl	8000f94 <ReadPressure>
 8001088:	4603      	mov	r3, r0
 800108a:	4a39      	ldr	r2, [pc, #228]	@ (8001170 <main+0x1a0>)
 800108c:	6013      	str	r3, [r2, #0]
			                break;
 800108e:	e04a      	b.n	8001126 <main+0x156>
			            case 2:
			            	SUSP_TD = ReadPosition(ReadVoltage(ADC_VAL[i]));
 8001090:	4a31      	ldr	r2, [pc, #196]	@ (8001158 <main+0x188>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff0d 	bl	8000eb8 <ReadVoltage>
 800109e:	4603      	mov	r3, r0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fef1 	bl	8000e88 <ReadPosition>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a32      	ldr	r2, [pc, #200]	@ (8001174 <main+0x1a4>)
 80010aa:	6013      	str	r3, [r2, #0]
			                break;
 80010ac:	e03b      	b.n	8001126 <main+0x156>
			            case 3:
			            	SUSP_FE = ReadPosition(ReadVoltage(ADC_VAL[i]));
 80010ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001158 <main+0x188>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fefe 	bl	8000eb8 <ReadVoltage>
 80010bc:	4603      	mov	r3, r0
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fee2 	bl	8000e88 <ReadPosition>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001178 <main+0x1a8>)
 80010c8:	6013      	str	r3, [r2, #0]
			                break;
 80010ca:	e02c      	b.n	8001126 <main+0x156>
			            case 4:
			            	SUSP_FD = ReadPosition(ReadVoltage(ADC_VAL[i]));
 80010cc:	4a22      	ldr	r2, [pc, #136]	@ (8001158 <main+0x188>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff feef 	bl	8000eb8 <ReadVoltage>
 80010da:	4603      	mov	r3, r0
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fed3 	bl	8000e88 <ReadPosition>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a25      	ldr	r2, [pc, #148]	@ (800117c <main+0x1ac>)
 80010e6:	6013      	str	r3, [r2, #0]
			            	break;
 80010e8:	e01d      	b.n	8001126 <main+0x156>
			            case 5:
			            	SUSP_TE = ReadPosition(ReadVoltage(ADC_VAL[i]));
 80010ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001158 <main+0x188>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fee0 	bl	8000eb8 <ReadVoltage>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fec4 	bl	8000e88 <ReadPosition>
 8001100:	4603      	mov	r3, r0
 8001102:	4a1f      	ldr	r2, [pc, #124]	@ (8001180 <main+0x1b0>)
 8001104:	6013      	str	r3, [r2, #0]
			            	break;
 8001106:	e00e      	b.n	8001126 <main+0x156>
			            case 6:
			            	STR_ANG = ReadAngleSTR(ReadVoltage(ADC_VAL[i]));
 8001108:	4a13      	ldr	r2, [pc, #76]	@ (8001158 <main+0x188>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fed1 	bl	8000eb8 <ReadVoltage>
 8001116:	4603      	mov	r3, r0
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff09 	bl	8000f30 <ReadAngleSTR>
 800111e:	4603      	mov	r3, r0
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <main+0x1b4>)
 8001122:	6013      	str	r3, [r2, #0]
			            	break;
 8001124:	bf00      	nop
			  for(int i = 0; i < READSIZE; i++){
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3301      	adds	r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b06      	cmp	r3, #6
 8001130:	f77f af7c 	ble.w	800102c <main+0x5c>
			        }
			    }
			  PEDAL_ANG = ReadAngle(Pedal_position);
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <main+0x1b8>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fedb 	bl	8000ef4 <ReadAngle>
 800113e:	4603      	mov	r3, r0
 8001140:	4a12      	ldr	r2, [pc, #72]	@ (800118c <main+0x1bc>)
 8001142:	6013      	str	r3, [r2, #0]
			  IsADCFinished = 0;
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <main+0x198>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
		  }
		  sendData = 0;
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <main+0x194>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
	  	  send_angles();
 8001150:	e75e      	b.n	8001010 <main+0x40>
 8001152:	bf00      	nop
 8001154:	200000c8 	.word	0x200000c8
 8001158:	20000110 	.word	0x20000110
 800115c:	2000002c 	.word	0x2000002c
 8001160:	200000a0 	.word	0x200000a0
 8001164:	20000124 	.word	0x20000124
 8001168:	20000120 	.word	0x20000120
 800116c:	20000134 	.word	0x20000134
 8001170:	20000138 	.word	0x20000138
 8001174:	2000013c 	.word	0x2000013c
 8001178:	20000140 	.word	0x20000140
 800117c:	20000144 	.word	0x20000144
 8001180:	20000148 	.word	0x20000148
 8001184:	20000130 	.word	0x20000130
 8001188:	20000128 	.word	0x20000128
 800118c:	2000012c 	.word	0x2000012c

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	@ 0x50
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800119a:	2228      	movs	r2, #40	@ 0x28
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fbbe 	bl	8004920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ce:	2301      	movs	r3, #1
 80011d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011dc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 fb14 	bl	8003814 <HAL_RCC_OscConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011f2:	f000 fa6b 	bl	80016cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f6:	230f      	movs	r3, #15
 80011f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001206:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2102      	movs	r1, #2
 8001212:	4618      	mov	r0, r3
 8001214:	f002 fd80 	bl	8003d18 <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800121e:	f000 fa55 	bl	80016cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001222:	2302      	movs	r3, #2
 8001224:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800122a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4618      	mov	r0, r3
 8001230:	f002 fece 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800123a:	f000 fa47 	bl	80016cc <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3750      	adds	r7, #80	@ 0x50
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001258:	4b43      	ldr	r3, [pc, #268]	@ (8001368 <MX_ADC1_Init+0x120>)
 800125a:	4a44      	ldr	r2, [pc, #272]	@ (800136c <MX_ADC1_Init+0x124>)
 800125c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800125e:	4b42      	ldr	r3, [pc, #264]	@ (8001368 <MX_ADC1_Init+0x120>)
 8001260:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001264:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001266:	4b40      	ldr	r3, [pc, #256]	@ (8001368 <MX_ADC1_Init+0x120>)
 8001268:	2201      	movs	r2, #1
 800126a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126c:	4b3e      	ldr	r3, [pc, #248]	@ (8001368 <MX_ADC1_Init+0x120>)
 800126e:	2200      	movs	r2, #0
 8001270:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001272:	4b3d      	ldr	r3, [pc, #244]	@ (8001368 <MX_ADC1_Init+0x120>)
 8001274:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001278:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127a:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <MX_ADC1_Init+0x120>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8001280:	4b39      	ldr	r3, [pc, #228]	@ (8001368 <MX_ADC1_Init+0x120>)
 8001282:	2207      	movs	r2, #7
 8001284:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001286:	4838      	ldr	r0, [pc, #224]	@ (8001368 <MX_ADC1_Init+0x120>)
 8001288:	f000 fc2a 	bl	8001ae0 <HAL_ADC_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001292:	f000 fa1b 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001296:	2301      	movs	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800129a:	2301      	movs	r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800129e:	2307      	movs	r3, #7
 80012a0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4830      	ldr	r0, [pc, #192]	@ (8001368 <MX_ADC1_Init+0x120>)
 80012a8:	f000 fde2 	bl	8001e70 <HAL_ADC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012b2:	f000 fa0b 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4829      	ldr	r0, [pc, #164]	@ (8001368 <MX_ADC1_Init+0x120>)
 80012c4:	f000 fdd4 	bl	8001e70 <HAL_ADC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012ce:	f000 f9fd 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012d2:	2304      	movs	r3, #4
 80012d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012d6:	2303      	movs	r3, #3
 80012d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4822      	ldr	r0, [pc, #136]	@ (8001368 <MX_ADC1_Init+0x120>)
 80012e0:	f000 fdc6 	bl	8001e70 <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012ea:	f000 f9ef 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012ee:	2305      	movs	r3, #5
 80012f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012f2:	2304      	movs	r3, #4
 80012f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	481b      	ldr	r0, [pc, #108]	@ (8001368 <MX_ADC1_Init+0x120>)
 80012fc:	f000 fdb8 	bl	8001e70 <HAL_ADC_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001306:	f000 f9e1 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800130a:	2306      	movs	r3, #6
 800130c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800130e:	2305      	movs	r3, #5
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4814      	ldr	r0, [pc, #80]	@ (8001368 <MX_ADC1_Init+0x120>)
 8001318:	f000 fdaa 	bl	8001e70 <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001322:	f000 f9d3 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001326:	2307      	movs	r3, #7
 8001328:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800132a:	2306      	movs	r3, #6
 800132c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	480d      	ldr	r0, [pc, #52]	@ (8001368 <MX_ADC1_Init+0x120>)
 8001334:	f000 fd9c 	bl	8001e70 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800133e:	f000 f9c5 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001342:	2308      	movs	r3, #8
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001346:	2307      	movs	r3, #7
 8001348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	@ (8001368 <MX_ADC1_Init+0x120>)
 8001350:	f000 fd8e 	bl	8001e70 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800135a:	f000 f9b7 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000002c 	.word	0x2000002c
 800136c:	40012400 	.word	0x40012400

08001370 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001376:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <MX_CAN_Init+0x98>)
 8001378:	4a24      	ldr	r2, [pc, #144]	@ (800140c <MX_CAN_Init+0x9c>)
 800137a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <MX_CAN_Init+0x98>)
 800137e:	2212      	movs	r2, #18
 8001380:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <MX_CAN_Init+0x98>)
 8001384:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001388:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <MX_CAN_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <MX_CAN_Init+0x98>)
 8001392:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8001396:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MX_CAN_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_CAN_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <MX_CAN_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_CAN_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <MX_CAN_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_CAN_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_CAN_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013c2:	4811      	ldr	r0, [pc, #68]	@ (8001408 <MX_CAN_Init+0x98>)
 80013c4:	f000 ff4d 	bl	8002262 <HAL_CAN_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80013ce:	f000 f97d 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = ENABLE;
 80013d2:	2301      	movs	r3, #1
 80013d4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0000;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	4803      	ldr	r0, [pc, #12]	@ (8001408 <MX_CAN_Init+0x98>)
 80013fc:	f001 f82c 	bl	8002458 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	@ 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200000a0 	.word	0x200000a0
 800140c:	40006400 	.word	0x40006400

08001410 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <MX_TIM4_Init+0x94>)
 800142e:	4a1e      	ldr	r2, [pc, #120]	@ (80014a8 <MX_TIM4_Init+0x98>)
 8001430:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 8001432:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_TIM4_Init+0x94>)
 8001434:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001438:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_TIM4_Init+0x94>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MX_TIM4_Init+0x94>)
 8001442:	2264      	movs	r2, #100	@ 0x64
 8001444:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MX_TIM4_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MX_TIM4_Init+0x94>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001452:	4814      	ldr	r0, [pc, #80]	@ (80014a4 <MX_TIM4_Init+0x94>)
 8001454:	f002 fe72 	bl	800413c <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800145e:	f000 f935 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001462:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001466:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_TIM4_Init+0x94>)
 8001470:	f002 fff6 	bl	8004460 <HAL_TIM_ConfigClockSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800147a:	f000 f927 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <MX_TIM4_Init+0x94>)
 800148c:	f003 f9d8 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001496:	f000 f919 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200000c8 	.word	0x200000c8
 80014a8:	40000800 	.word	0x40000800

080014ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_DMA_Init+0x38>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <MX_DMA_Init+0x38>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6153      	str	r3, [r2, #20]
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_DMA_Init+0x38>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	200b      	movs	r0, #11
 80014d0:	f001 fddf 	bl	8003092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014d4:	200b      	movs	r0, #11
 80014d6:	f001 fdf8 	bl	80030ca <HAL_NVIC_EnableIRQ>

}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fc:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a2d      	ldr	r2, [pc, #180]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001514:	4b28      	ldr	r3, [pc, #160]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a27      	ldr	r2, [pc, #156]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 800151a:	f043 0320 	orr.w	r3, r3, #32
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a1b      	ldr	r2, [pc, #108]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <MX_GPIO_Init+0xd0>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001562:	4816      	ldr	r0, [pc, #88]	@ (80015bc <MX_GPIO_Init+0xd4>)
 8001564:	f002 f93e 	bl	80037e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800156e:	4814      	ldr	r0, [pc, #80]	@ (80015c0 <MX_GPIO_Init+0xd8>)
 8001570:	f002 f938 	bl	80037e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001574:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2302      	movs	r3, #2
 8001584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	4619      	mov	r1, r3
 800158c:	480b      	ldr	r0, [pc, #44]	@ (80015bc <MX_GPIO_Init+0xd4>)
 800158e:	f001 ffa5 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001592:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_GPIO_Init+0xd8>)
 80015ac:	f001 ff96 	bl	80034dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40011000 	.word	0x40011000
 80015c0:	40010c00 	.word	0x40010c00

080015c4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

	IsADCFinished = 1;
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <HAL_ADC_ConvCpltCallback+0x18>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000120 	.word	0x20000120

080015e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80015ea:	4a11      	ldr	r2, [pc, #68]	@ (8001630 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80015ec:	2100      	movs	r1, #0
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f001 f90e 	bl	8002810 <HAL_CAN_GetRxMessage>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d113      	bne.n	8001622 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	        switch (RxHeader.StdId) // Verifica o ID da mensagem
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d004      	beq.n	800160c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
 8001602:	f240 4251 	movw	r2, #1105	@ 0x451
 8001606:	4293      	cmp	r3, r2
 8001608:	d005      	beq.n	8001616 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
	                	Pedal_position = RxData[0];
	                break;
	            case 0x451:
	            	Teste_res = RxData[5];
	            	break;
}}}
 800160a:	e00a      	b.n	8001622 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	                	Pedal_position = RxData[0];
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800160e:	781a      	ldrb	r2, [r3, #0]
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001612:	701a      	strb	r2, [r3, #0]
	                break;
 8001614:	e005      	b.n	8001622 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	            	Teste_res = RxData[5];
 8001616:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001618:	795b      	ldrb	r3, [r3, #5]
 800161a:	461a      	mov	r2, r3
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800161e:	601a      	str	r2, [r3, #0]
	            	break;
 8001620:	bf00      	nop
}}}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000190 	.word	0x20000190
 8001630:	20000168 	.word	0x20000168
 8001634:	20000128 	.word	0x20000128
 8001638:	2000014c 	.word	0x2000014c

0800163c <send_angles>:
    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // Apaga o LED se o CAN falhar
        Error_Handler();
    }
}
void send_angles(void ){
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0

	  TxHeader.StdId = 0x451;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <send_angles+0x58>)
 8001642:	f240 4251 	movw	r2, #1105	@ 0x451
 8001646:	601a      	str	r2, [r3, #0]
	  TxHeader.ExtId = 0;
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <send_angles+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
	  TxHeader.IDE = CAN_ID_STD;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <send_angles+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <send_angles+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
	  TxHeader.DLC = 6;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <send_angles+0x58>)
 800165c:	2206      	movs	r2, #6
 800165e:	611a      	str	r2, [r3, #16]

	  memcpy(TxData, &STR_ANG, sizeof(float));
 8001660:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <send_angles+0x5c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	@ (800169c <send_angles+0x60>)
 8001666:	6013      	str	r3, [r2, #0]
	  TxData[4] = (uint8_t) PEDAL_ANG;
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <send_angles+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fbeb 	bl	8000e48 <__aeabi_f2uiz>
 8001672:	4603      	mov	r3, r0
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <send_angles+0x60>)
 8001678:	711a      	strb	r2, [r3, #4]
	  TxData[5] = Teste;
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <send_angles+0x68>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <send_angles+0x60>)
 8001682:	715a      	strb	r2, [r3, #5]
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <send_angles+0x6c>)
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <send_angles+0x60>)
 8001688:	4902      	ldr	r1, [pc, #8]	@ (8001694 <send_angles+0x58>)
 800168a:	4808      	ldr	r0, [pc, #32]	@ (80016ac <send_angles+0x70>)
 800168c:	f000 fff1 	bl	8002672 <HAL_CAN_AddTxMessage>
//	    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
//	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // Apaga o LED se o CAN falhar
//	        Error_Handler();
//	    }
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000150 	.word	0x20000150
 8001698:	20000130 	.word	0x20000130
 800169c:	20000188 	.word	0x20000188
 80016a0:	2000012c 	.word	0x2000012c
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000184 	.word	0x20000184
 80016ac:	200000a0 	.word	0x200000a0

080016b0 <HAL_TIM_PeriodElapsedCallback>:
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // Apaga o LED se o CAN falhar
	        Error_Handler();
	    }
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	sendData = 1;
 80016b8:	4b03      	ldr	r3, [pc, #12]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000124 	.word	0x20000124

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <Error_Handler+0x8>

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_MspInit+0x5c>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	4a14      	ldr	r2, [pc, #80]	@ (8001734 <HAL_MspInit+0x5c>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6193      	str	r3, [r2, #24]
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_MspInit+0x5c>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <HAL_MspInit+0x5c>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001734 <HAL_MspInit+0x5c>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_MspInit+0x5c>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_MspInit+0x60>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <HAL_MspInit+0x60>)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000

0800173c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0318 	add.w	r3, r7, #24
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a33      	ldr	r2, [pc, #204]	@ (8001824 <HAL_ADC_MspInit+0xe8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d15f      	bne.n	800181c <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800175c:	4b32      	ldr	r3, [pc, #200]	@ (8001828 <HAL_ADC_MspInit+0xec>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a31      	ldr	r2, [pc, #196]	@ (8001828 <HAL_ADC_MspInit+0xec>)
 8001762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <HAL_ADC_MspInit+0xec>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b2c      	ldr	r3, [pc, #176]	@ (8001828 <HAL_ADC_MspInit+0xec>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a2b      	ldr	r2, [pc, #172]	@ (8001828 <HAL_ADC_MspInit+0xec>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <HAL_ADC_MspInit+0xec>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178c:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <HAL_ADC_MspInit+0xec>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a25      	ldr	r2, [pc, #148]	@ (8001828 <HAL_ADC_MspInit+0xec>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <HAL_ADC_MspInit+0xec>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = EXTRA_2_Pin|BRK_PRESSURE_F_Pin|BRK_PRESSURE_T_Pin|EXTRA_3_Pin
 80017a4:	23ff      	movs	r3, #255	@ 0xff
 80017a6:	61bb      	str	r3, [r7, #24]
                          |SUSP_TD_Pin|SUSP_FE_Pin|SUSP_FD_Pin|SUSP_TE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a8:	2303      	movs	r3, #3
 80017aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	4619      	mov	r1, r3
 80017b2:	481e      	ldr	r0, [pc, #120]	@ (800182c <HAL_ADC_MspInit+0xf0>)
 80017b4:	f001 fe92 	bl	80034dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STR_ANG_Pin|EXTRA_1_Pin;
 80017b8:	2303      	movs	r3, #3
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017bc:	2303      	movs	r3, #3
 80017be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f107 0318 	add.w	r3, r7, #24
 80017c4:	4619      	mov	r1, r3
 80017c6:	481a      	ldr	r0, [pc, #104]	@ (8001830 <HAL_ADC_MspInit+0xf4>)
 80017c8:	f001 fe88 	bl	80034dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017cc:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 80017ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001838 <HAL_ADC_MspInit+0xfc>)
 80017d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 80017e0:	2280      	movs	r2, #128	@ 0x80
 80017e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017e4:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 80017e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 80017ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 80017f6:	2220      	movs	r2, #32
 80017f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001800:	480c      	ldr	r0, [pc, #48]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 8001802:	f001 fc7d 	bl	8003100 <HAL_DMA_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800180c:	f7ff ff5e 	bl	80016cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a08      	ldr	r2, [pc, #32]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 8001814:	621a      	str	r2, [r3, #32]
 8001816:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <HAL_ADC_MspInit+0xf8>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	@ 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40012400 	.word	0x40012400
 8001828:	40021000 	.word	0x40021000
 800182c:	40010800 	.word	0x40010800
 8001830:	40010c00 	.word	0x40010c00
 8001834:	2000005c 	.word	0x2000005c
 8001838:	40020008 	.word	0x40020008

0800183c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a20      	ldr	r2, [pc, #128]	@ (80018d8 <HAL_CAN_MspInit+0x9c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d139      	bne.n	80018d0 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800185c:	4b1f      	ldr	r3, [pc, #124]	@ (80018dc <HAL_CAN_MspInit+0xa0>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	4a1e      	ldr	r2, [pc, #120]	@ (80018dc <HAL_CAN_MspInit+0xa0>)
 8001862:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001866:	61d3      	str	r3, [r2, #28]
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <HAL_CAN_MspInit+0xa0>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_CAN_MspInit+0xa0>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a18      	ldr	r2, [pc, #96]	@ (80018dc <HAL_CAN_MspInit+0xa0>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <HAL_CAN_MspInit+0xa0>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800188c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001890:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	4619      	mov	r1, r3
 80018a0:	480f      	ldr	r0, [pc, #60]	@ (80018e0 <HAL_CAN_MspInit+0xa4>)
 80018a2:	f001 fe1b 	bl	80034dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <HAL_CAN_MspInit+0xa4>)
 80018bc:	f001 fe0e 	bl	80034dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	2014      	movs	r0, #20
 80018c6:	f001 fbe4 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80018ca:	2014      	movs	r0, #20
 80018cc:	f001 fbfd 	bl	80030ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80018d0:	bf00      	nop
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40006400 	.word	0x40006400
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010800 	.word	0x40010800

080018e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <HAL_TIM_Base_MspInit+0x44>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d113      	bne.n	800191e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_TIM_Base_MspInit+0x48>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <HAL_TIM_Base_MspInit+0x48>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	61d3      	str	r3, [r2, #28]
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_TIM_Base_MspInit+0x48>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	201e      	movs	r0, #30
 8001914:	f001 fbbd 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001918:	201e      	movs	r0, #30
 800191a:	f001 fbd6 	bl	80030ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40000800 	.word	0x40000800
 800192c:	40021000 	.word	0x40021000

08001930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <NMI_Handler+0x4>

08001938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <MemManage_Handler+0x4>

08001948 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <UsageFault_Handler+0x4>

08001958 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 f892 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <DMA1_Channel1_IRQHandler+0x10>)
 800198e:	f001 fc71 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000005c 	.word	0x2000005c

0800199c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019a2:	f001 f87b 	bl	8002a9c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200000a0 	.word	0x200000a0

080019b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <TIM4_IRQHandler+0x10>)
 80019b6:	f002 fc63 	bl	8004280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200000c8 	.word	0x200000c8

080019c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d0:	f7ff fff8 	bl	80019c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480b      	ldr	r0, [pc, #44]	@ (8001a04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019d6:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019d8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a0c <LoopFillZerobss+0x16>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a09      	ldr	r2, [pc, #36]	@ (8001a10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019ec:	4c09      	ldr	r4, [pc, #36]	@ (8001a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fa:	f002 ff99 	bl	8004930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019fe:	f7ff fae7 	bl	8000fd0 <main>
  bx lr
 8001a02:	4770      	bx	lr
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a0c:	080049bc 	.word	0x080049bc
  ldr r2, =_sbss
 8001a10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a14:	2000019c 	.word	0x2000019c

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <HAL_Init+0x28>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	@ (8001a44 <HAL_Init+0x28>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f001 fb25 	bl	800307c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fe4e 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 fb3d 	bl	80030e6 <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f001 fb05 	bl	8003092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	@ (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	2000000c 	.word	0x2000000c
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_IncTick+0x1c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_IncTick+0x20>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a03      	ldr	r2, [pc, #12]	@ (8001ac8 <HAL_IncTick+0x20>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	2000000c 	.word	0x2000000c
 8001ac8:	20000198 	.word	0x20000198

08001acc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b02      	ldr	r3, [pc, #8]	@ (8001adc <HAL_GetTick+0x10>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	20000198 	.word	0x20000198

08001ae0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0be      	b.n	8001c80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe0c 	bl	800173c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 faf5 	bl	8002114 <ADC_ConversionStop_Disable>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 8099 	bne.w	8001c6e <HAL_ADC_Init+0x18e>
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 8095 	bne.w	8001c6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b4c:	f023 0302 	bic.w	r3, r3, #2
 8001b50:	f043 0202 	orr.w	r2, r3, #2
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7b1b      	ldrb	r3, [r3, #12]
 8001b66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b78:	d003      	beq.n	8001b82 <HAL_ADC_Init+0xa2>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d102      	bne.n	8001b88 <HAL_ADC_Init+0xa8>
 8001b82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b86:	e000      	b.n	8001b8a <HAL_ADC_Init+0xaa>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7d1b      	ldrb	r3, [r3, #20]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d119      	bne.n	8001bcc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7b1b      	ldrb	r3, [r3, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	035a      	lsls	r2, r3, #13
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	e00b      	b.n	8001bcc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb8:	f043 0220 	orr.w	r2, r3, #32
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	f043 0201 	orr.w	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	4b28      	ldr	r3, [pc, #160]	@ (8001c88 <HAL_ADC_Init+0x1a8>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bfc:	d003      	beq.n	8001c06 <HAL_ADC_Init+0x126>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d104      	bne.n	8001c10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	051b      	lsls	r3, r3, #20
 8001c0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <HAL_ADC_Init+0x1ac>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10b      	bne.n	8001c4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3e:	f023 0303 	bic.w	r3, r3, #3
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c4a:	e018      	b.n	8001c7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c50:	f023 0312 	bic.w	r3, r3, #18
 8001c54:	f043 0210 	orr.w	r2, r3, #16
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c60:	f043 0201 	orr.w	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c6c:	e007      	b.n	8001c7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	ffe1f7fd 	.word	0xffe1f7fd
 8001c8c:	ff1f0efe 	.word	0xff1f0efe

08001c90 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a64      	ldr	r2, [pc, #400]	@ (8001e38 <HAL_ADC_Start_DMA+0x1a8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d004      	beq.n	8001cb4 <HAL_ADC_Start_DMA+0x24>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a63      	ldr	r2, [pc, #396]	@ (8001e3c <HAL_ADC_Start_DMA+0x1ac>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d106      	bne.n	8001cc2 <HAL_ADC_Start_DMA+0x32>
 8001cb4:	4b60      	ldr	r3, [pc, #384]	@ (8001e38 <HAL_ADC_Start_DMA+0x1a8>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f040 80b3 	bne.w	8001e28 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_Start_DMA+0x40>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e0ae      	b.n	8001e2e <HAL_ADC_Start_DMA+0x19e>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f9c1 	bl	8002060 <ADC_Enable>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 809a 	bne.w	8001e1e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a4e      	ldr	r2, [pc, #312]	@ (8001e3c <HAL_ADC_Start_DMA+0x1ac>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d105      	bne.n	8001d14 <HAL_ADC_Start_DMA+0x84>
 8001d08:	4b4b      	ldr	r3, [pc, #300]	@ (8001e38 <HAL_ADC_Start_DMA+0x1a8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d115      	bne.n	8001d40 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d026      	beq.n	8001d7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d3e:	e01d      	b.n	8001d7c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a39      	ldr	r2, [pc, #228]	@ (8001e38 <HAL_ADC_Start_DMA+0x1a8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_ADC_Start_DMA+0xd0>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a38      	ldr	r2, [pc, #224]	@ (8001e3c <HAL_ADC_Start_DMA+0x1ac>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d10d      	bne.n	8001d7c <HAL_ADC_Start_DMA+0xec>
 8001d60:	4b35      	ldr	r3, [pc, #212]	@ (8001e38 <HAL_ADC_Start_DMA+0x1a8>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d74:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8c:	f023 0206 	bic.w	r2, r3, #6
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d94:	e002      	b.n	8001d9c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a25      	ldr	r2, [pc, #148]	@ (8001e40 <HAL_ADC_Start_DMA+0x1b0>)
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a24      	ldr	r2, [pc, #144]	@ (8001e44 <HAL_ADC_Start_DMA+0x1b4>)
 8001db2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a23      	ldr	r2, [pc, #140]	@ (8001e48 <HAL_ADC_Start_DMA+0x1b8>)
 8001dba:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0202 	mvn.w	r2, #2
 8001dc4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dd4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a18      	ldr	r0, [r3, #32]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	334c      	adds	r3, #76	@ 0x4c
 8001de0:	4619      	mov	r1, r3
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f001 f9e5 	bl	80031b4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001df4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001df8:	d108      	bne.n	8001e0c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e08:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e0a:	e00f      	b.n	8001e2c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e1a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e1c:	e006      	b.n	8001e2c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001e26:	e001      	b.n	8001e2c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40012400 	.word	0x40012400
 8001e3c:	40012800 	.word	0x40012800
 8001e40:	08002197 	.word	0x08002197
 8001e44:	08002213 	.word	0x08002213
 8001e48:	0800222f 	.word	0x0800222f

08001e4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x20>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e0dc      	b.n	800204a <HAL_ADC_ConfigChannel+0x1da>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b06      	cmp	r3, #6
 8001e9e:	d81c      	bhi.n	8001eda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b05      	subs	r3, #5
 8001eb2:	221f      	movs	r2, #31
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4019      	ands	r1, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b05      	subs	r3, #5
 8001ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ed8:	e03c      	b.n	8001f54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	d81c      	bhi.n	8001f1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3b23      	subs	r3, #35	@ 0x23
 8001ef4:	221f      	movs	r2, #31
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	4019      	ands	r1, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b23      	subs	r3, #35	@ 0x23
 8001f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f1a:	e01b      	b.n	8001f54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b41      	subs	r3, #65	@ 0x41
 8001f2e:	221f      	movs	r2, #31
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4019      	ands	r1, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3b41      	subs	r3, #65	@ 0x41
 8001f48:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b09      	cmp	r3, #9
 8001f5a:	d91c      	bls.n	8001f96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68d9      	ldr	r1, [r3, #12]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b1e      	subs	r3, #30
 8001f6e:	2207      	movs	r2, #7
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4019      	ands	r1, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6898      	ldr	r0, [r3, #8]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	3b1e      	subs	r3, #30
 8001f88:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]
 8001f94:	e019      	b.n	8001fca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6919      	ldr	r1, [r3, #16]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4019      	ands	r1, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6898      	ldr	r0, [r3, #8]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d003      	beq.n	8001fda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fd6:	2b11      	cmp	r3, #17
 8001fd8:	d132      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d125      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d126      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002000:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b10      	cmp	r3, #16
 8002008:	d11a      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800200a:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <HAL_ADC_ConfigChannel+0x1e8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a13      	ldr	r2, [pc, #76]	@ (800205c <HAL_ADC_ConfigChannel+0x1ec>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	0c9a      	lsrs	r2, r3, #18
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002020:	e002      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3b01      	subs	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f9      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x1b2>
 800202e:	e007      	b.n	8002040 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	f043 0220 	orr.w	r2, r3, #32
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	40012400 	.word	0x40012400
 8002058:	20000004 	.word	0x20000004
 800205c:	431bde83 	.word	0x431bde83

08002060 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d040      	beq.n	8002100 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0201 	orr.w	r2, r2, #1
 800208c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800208e:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <ADC_Enable+0xac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1f      	ldr	r2, [pc, #124]	@ (8002110 <ADC_Enable+0xb0>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	0c9b      	lsrs	r3, r3, #18
 800209a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800209c:	e002      	b.n	80020a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f9      	bne.n	800209e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020aa:	f7ff fd0f 	bl	8001acc <HAL_GetTick>
 80020ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020b0:	e01f      	b.n	80020f2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020b2:	f7ff fd0b 	bl	8001acc <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d918      	bls.n	80020f2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d011      	beq.n	80020f2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e007      	b.n	8002102 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d1d8      	bne.n	80020b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000004 	.word	0x20000004
 8002110:	431bde83 	.word	0x431bde83

08002114 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d12e      	bne.n	800218c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800213e:	f7ff fcc5 	bl	8001acc <HAL_GetTick>
 8002142:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002144:	e01b      	b.n	800217e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002146:	f7ff fcc1 	bl	8001acc <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d914      	bls.n	800217e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10d      	bne.n	800217e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e007      	b.n	800218e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d0dc      	beq.n	8002146 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d127      	bne.n	8002200 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021ca:	d115      	bne.n	80021f8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d111      	bne.n	80021f8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f7ff f9e3 	bl	80015c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021fe:	e004      	b.n	800220a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7ff fe13 	bl	8001e4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fe02 	bl	8001e5e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0ed      	b.n	8002450 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fadb 	bl	800183c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002296:	f7ff fc19 	bl	8001acc <HAL_GetTick>
 800229a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800229c:	e012      	b.n	80022c4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800229e:	f7ff fc15 	bl	8001acc <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b0a      	cmp	r3, #10
 80022aa:	d90b      	bls.n	80022c4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2205      	movs	r2, #5
 80022bc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0c5      	b.n	8002450 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0e5      	beq.n	800229e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0202 	bic.w	r2, r2, #2
 80022e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022e2:	f7ff fbf3 	bl	8001acc <HAL_GetTick>
 80022e6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022e8:	e012      	b.n	8002310 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022ea:	f7ff fbef 	bl	8001acc <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b0a      	cmp	r3, #10
 80022f6:	d90b      	bls.n	8002310 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2205      	movs	r2, #5
 8002308:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e09f      	b.n	8002450 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1e5      	bne.n	80022ea <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7e1b      	ldrb	r3, [r3, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e007      	b.n	8002348 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7e5b      	ldrb	r3, [r3, #25]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e007      	b.n	8002372 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7e9b      	ldrb	r3, [r3, #26]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d108      	bne.n	800238c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0220 	orr.w	r2, r2, #32
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e007      	b.n	800239c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0220 	bic.w	r2, r2, #32
 800239a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7edb      	ldrb	r3, [r3, #27]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d108      	bne.n	80023b6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0210 	bic.w	r2, r2, #16
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e007      	b.n	80023c6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0210 	orr.w	r2, r2, #16
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7f1b      	ldrb	r3, [r3, #28]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d108      	bne.n	80023e0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0208 	orr.w	r2, r2, #8
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e007      	b.n	80023f0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0208 	bic.w	r2, r2, #8
 80023ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7f5b      	ldrb	r3, [r3, #29]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d108      	bne.n	800240a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0204 	orr.w	r2, r2, #4
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e007      	b.n	800241a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0204 	bic.w	r2, r2, #4
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	ea42 0103 	orr.w	r1, r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	1e5a      	subs	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800246e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d003      	beq.n	800247e <HAL_CAN_ConfigFilter+0x26>
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b02      	cmp	r3, #2
 800247a:	f040 80aa 	bne.w	80025d2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002484:	f043 0201 	orr.w	r2, r3, #1
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2201      	movs	r2, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	401a      	ands	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d123      	bne.n	8002500 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3248      	adds	r2, #72	@ 0x48
 80024e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024f6:	6979      	ldr	r1, [r7, #20]
 80024f8:	3348      	adds	r3, #72	@ 0x48
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d122      	bne.n	800254e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	431a      	orrs	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002528:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3248      	adds	r2, #72	@ 0x48
 800252e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002542:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002544:	6979      	ldr	r1, [r7, #20]
 8002546:	3348      	adds	r3, #72	@ 0x48
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	440b      	add	r3, r1
 800254c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	401a      	ands	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002568:	e007      	b.n	800257a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	431a      	orrs	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43db      	mvns	r3, r3
 800258c:	401a      	ands	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002594:	e007      	b.n	80025a6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	431a      	orrs	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80025c4:	f023 0201 	bic.w	r2, r3, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e006      	b.n	80025e0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d12e      	bne.n	800265c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002616:	f7ff fa59 	bl	8001acc <HAL_GetTick>
 800261a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800261c:	e012      	b.n	8002644 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800261e:	f7ff fa55 	bl	8001acc <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b0a      	cmp	r3, #10
 800262a:	d90b      	bls.n	8002644 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2205      	movs	r2, #5
 800263c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e012      	b.n	800266a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e5      	bne.n	800261e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	e006      	b.n	800266a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002672:	b480      	push	{r7}
 8002674:	b089      	sub	sp, #36	@ 0x24
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002686:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002690:	7ffb      	ldrb	r3, [r7, #31]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d003      	beq.n	800269e <HAL_CAN_AddTxMessage+0x2c>
 8002696:	7ffb      	ldrb	r3, [r7, #31]
 8002698:	2b02      	cmp	r3, #2
 800269a:	f040 80ad 	bne.w	80027f8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8095 	beq.w	80027e8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	0e1b      	lsrs	r3, r3, #24
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026c8:	2201      	movs	r2, #1
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	409a      	lsls	r2, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026e4:	68f9      	ldr	r1, [r7, #12]
 80026e6:	6809      	ldr	r1, [r1, #0]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3318      	adds	r3, #24
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	440b      	add	r3, r1
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e00f      	b.n	8002716 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002700:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002706:	68f9      	ldr	r1, [r7, #12]
 8002708:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800270a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	3318      	adds	r3, #24
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	440b      	add	r3, r1
 8002714:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3318      	adds	r3, #24
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	440b      	add	r3, r1
 8002726:	3304      	adds	r3, #4
 8002728:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	7d1b      	ldrb	r3, [r3, #20]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d111      	bne.n	8002756 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3318      	adds	r3, #24
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	4413      	add	r3, r2
 800273e:	3304      	adds	r3, #4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6811      	ldr	r1, [r2, #0]
 8002746:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3318      	adds	r3, #24
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	440b      	add	r3, r1
 8002752:	3304      	adds	r3, #4
 8002754:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3307      	adds	r3, #7
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	061a      	lsls	r2, r3, #24
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3306      	adds	r3, #6
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3305      	adds	r3, #5
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	4313      	orrs	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	3204      	adds	r2, #4
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	4610      	mov	r0, r2
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	6811      	ldr	r1, [r2, #0]
 800277e:	ea43 0200 	orr.w	r2, r3, r0
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	440b      	add	r3, r1
 8002788:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800278c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3303      	adds	r3, #3
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	061a      	lsls	r2, r3, #24
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3302      	adds	r3, #2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3301      	adds	r3, #1
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	4313      	orrs	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	4610      	mov	r0, r2
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	6811      	ldr	r1, [r2, #0]
 80027b4:	ea43 0200 	orr.w	r2, r3, r0
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	440b      	add	r3, r1
 80027be:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80027c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3318      	adds	r3, #24
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	4413      	add	r3, r2
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	6811      	ldr	r1, [r2, #0]
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3318      	adds	r3, #24
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	440b      	add	r3, r1
 80027e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e00e      	b.n	8002806 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e006      	b.n	8002806 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	@ 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002824:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d003      	beq.n	8002834 <HAL_CAN_GetRxMessage+0x24>
 800282c:	7dfb      	ldrb	r3, [r7, #23]
 800282e:	2b02      	cmp	r3, #2
 8002830:	f040 8103 	bne.w	8002a3a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10e      	bne.n	8002858 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d116      	bne.n	8002876 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0f7      	b.n	8002a48 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d107      	bne.n	8002876 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0e8      	b.n	8002a48 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	331b      	adds	r3, #27
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0204 	and.w	r2, r3, #4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10c      	bne.n	80028ae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	331b      	adds	r3, #27
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	4413      	add	r3, r2
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	0d5b      	lsrs	r3, r3, #21
 80028a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e00b      	b.n	80028c6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	331b      	adds	r3, #27
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	4413      	add	r3, r2
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	331b      	adds	r3, #27
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	4413      	add	r3, r2
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0202 	and.w	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	331b      	adds	r3, #27
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	4413      	add	r3, r2
 80028e8:	3304      	adds	r3, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2208      	movs	r2, #8
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	e00b      	b.n	8002914 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	331b      	adds	r3, #27
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	4413      	add	r3, r2
 8002908:	3304      	adds	r3, #4
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 020f 	and.w	r2, r3, #15
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	331b      	adds	r3, #27
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	4413      	add	r3, r2
 8002920:	3304      	adds	r3, #4
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	b2da      	uxtb	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	331b      	adds	r3, #27
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	4413      	add	r3, r2
 8002938:	3304      	adds	r3, #4
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	4413      	add	r3, r2
 800294e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	4413      	add	r3, r2
 8002964:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0a1a      	lsrs	r2, r3, #8
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	3301      	adds	r3, #1
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	4413      	add	r3, r2
 800297e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0c1a      	lsrs	r2, r3, #16
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3302      	adds	r3, #2
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0e1a      	lsrs	r2, r3, #24
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	3303      	adds	r3, #3
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	3304      	adds	r3, #4
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0a1a      	lsrs	r2, r3, #8
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	3305      	adds	r3, #5
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0c1a      	lsrs	r2, r3, #16
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	3306      	adds	r3, #6
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0e1a      	lsrs	r2, r3, #24
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	3307      	adds	r3, #7
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d108      	bne.n	8002a26 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	e007      	b.n	8002a36 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0220 	orr.w	r2, r2, #32
 8002a34:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e006      	b.n	8002a48 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
  }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a62:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d002      	beq.n	8002a70 <HAL_CAN_ActivateNotification+0x1e>
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d109      	bne.n	8002a84 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6959      	ldr	r1, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e006      	b.n	8002a92 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	@ 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d07c      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d023      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f983 	bl	8002e0a <HAL_CAN_TxMailbox0CompleteCallback>
 8002b04:	e016      	b.n	8002b34 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b18:	e00c      	b.n	8002b34 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d004      	beq.n	8002b2e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b2c:	e002      	b.n	8002b34 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f986 	bl	8002e40 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d024      	beq.n	8002b88 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f962 	bl	8002e1c <HAL_CAN_TxMailbox1CompleteCallback>
 8002b58:	e016      	b.n	8002b88 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6c:	e00c      	b.n	8002b88 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b80:	e002      	b.n	8002b88 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f965 	bl	8002e52 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d024      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b9a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f941 	bl	8002e2e <HAL_CAN_TxMailbox2CompleteCallback>
 8002bac:	e016      	b.n	8002bdc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc0:	e00c      	b.n	8002bdc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d004      	beq.n	8002bd6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd4:	e002      	b.n	8002bdc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f944 	bl	8002e64 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d006      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f92a 	bl	8002e76 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fcd0 	bl	80015e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00c      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2210      	movs	r2, #16
 8002c62:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f90a 	bl	8002e9a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8f2 	bl	8002e88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d006      	beq.n	8002cc6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f8f3 	bl	8002eac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d006      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2208      	movs	r2, #8
 8002ce0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8eb 	bl	8002ebe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d07b      	beq.n	8002dea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d072      	beq.n	8002de2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d043      	beq.n	8002de2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d03e      	beq.n	8002de2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d6a:	2b60      	cmp	r3, #96	@ 0x60
 8002d6c:	d02b      	beq.n	8002dc6 <HAL_CAN_IRQHandler+0x32a>
 8002d6e:	2b60      	cmp	r3, #96	@ 0x60
 8002d70:	d82e      	bhi.n	8002dd0 <HAL_CAN_IRQHandler+0x334>
 8002d72:	2b50      	cmp	r3, #80	@ 0x50
 8002d74:	d022      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x320>
 8002d76:	2b50      	cmp	r3, #80	@ 0x50
 8002d78:	d82a      	bhi.n	8002dd0 <HAL_CAN_IRQHandler+0x334>
 8002d7a:	2b40      	cmp	r3, #64	@ 0x40
 8002d7c:	d019      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x316>
 8002d7e:	2b40      	cmp	r3, #64	@ 0x40
 8002d80:	d826      	bhi.n	8002dd0 <HAL_CAN_IRQHandler+0x334>
 8002d82:	2b30      	cmp	r3, #48	@ 0x30
 8002d84:	d010      	beq.n	8002da8 <HAL_CAN_IRQHandler+0x30c>
 8002d86:	2b30      	cmp	r3, #48	@ 0x30
 8002d88:	d822      	bhi.n	8002dd0 <HAL_CAN_IRQHandler+0x334>
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d002      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x2f8>
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d005      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d92:	e01d      	b.n	8002dd0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	f043 0308 	orr.w	r3, r3, #8
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d9c:	e019      	b.n	8002dd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	f043 0310 	orr.w	r3, r3, #16
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002da6:	e014      	b.n	8002dd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	f043 0320 	orr.w	r3, r3, #32
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002db0:	e00f      	b.n	8002dd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dba:	e00a      	b.n	8002dd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dc4:	e005      	b.n	8002dd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dce:	e000      	b.n	8002dd2 <HAL_CAN_IRQHandler+0x336>
            break;
 8002dd0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699a      	ldr	r2, [r3, #24]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002de0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2204      	movs	r2, #4
 8002de8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f867 	bl	8002ed0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e02:	bf00      	nop
 8002e04:	3728      	adds	r7, #40	@ 0x28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
	...

08002ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	@ (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db0b      	blt.n	8002f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	4906      	ldr	r1, [pc, #24]	@ (8002f7c <__NVIC_EnableIRQ+0x34>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	@ (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
         );
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3b01      	subs	r3, #1
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003048:	d301      	bcc.n	800304e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304a:	2301      	movs	r3, #1
 800304c:	e00f      	b.n	800306e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304e:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <SysTick_Config+0x40>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003056:	210f      	movs	r1, #15
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f7ff ff90 	bl	8002f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <SysTick_Config+0x40>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003066:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <SysTick_Config+0x40>)
 8003068:	2207      	movs	r2, #7
 800306a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	e000e010 	.word	0xe000e010

0800307c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff2d 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a4:	f7ff ff42 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 80030a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	6978      	ldr	r0, [r7, #20]
 80030b0:	f7ff ff90 	bl	8002fd4 <NVIC_EncodePriority>
 80030b4:	4602      	mov	r2, r0
 80030b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff5f 	bl	8002f80 <__NVIC_SetPriority>
}
 80030c2:	bf00      	nop
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff35 	bl	8002f48 <__NVIC_EnableIRQ>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ffa2 	bl	8003038 <SysTick_Config>
 80030f4:	4603      	mov	r3, r0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e043      	b.n	800319e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	4b22      	ldr	r3, [pc, #136]	@ (80031a8 <HAL_DMA_Init+0xa8>)
 800311e:	4413      	add	r3, r2
 8003120:	4a22      	ldr	r2, [pc, #136]	@ (80031ac <HAL_DMA_Init+0xac>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	009a      	lsls	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1f      	ldr	r2, [pc, #124]	@ (80031b0 <HAL_DMA_Init+0xb0>)
 8003132:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800314a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800314e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	bffdfff8 	.word	0xbffdfff8
 80031ac:	cccccccd 	.word	0xcccccccd
 80031b0:	40020000 	.word	0x40020000

080031b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_DMA_Start_IT+0x20>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e04b      	b.n	800326c <HAL_DMA_Start_IT+0xb8>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d13a      	bne.n	800325e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f937 	bl	8003480 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 020e 	orr.w	r2, r2, #14
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e00f      	b.n	800324c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0204 	bic.w	r2, r2, #4
 800323a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 020a 	orr.w	r2, r2, #10
 800324a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e005      	b.n	800326a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003266:	2302      	movs	r3, #2
 8003268:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800326a:	7dfb      	ldrb	r3, [r7, #23]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	2204      	movs	r2, #4
 8003292:	409a      	lsls	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d04f      	beq.n	800333c <HAL_DMA_IRQHandler+0xc8>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d04a      	beq.n	800333c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d107      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a66      	ldr	r2, [pc, #408]	@ (8003464 <HAL_DMA_IRQHandler+0x1f0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d029      	beq.n	8003322 <HAL_DMA_IRQHandler+0xae>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a65      	ldr	r2, [pc, #404]	@ (8003468 <HAL_DMA_IRQHandler+0x1f4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_DMA_IRQHandler+0xaa>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a63      	ldr	r2, [pc, #396]	@ (800346c <HAL_DMA_IRQHandler+0x1f8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01a      	beq.n	8003318 <HAL_DMA_IRQHandler+0xa4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a62      	ldr	r2, [pc, #392]	@ (8003470 <HAL_DMA_IRQHandler+0x1fc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d012      	beq.n	8003312 <HAL_DMA_IRQHandler+0x9e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a60      	ldr	r2, [pc, #384]	@ (8003474 <HAL_DMA_IRQHandler+0x200>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00a      	beq.n	800330c <HAL_DMA_IRQHandler+0x98>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003478 <HAL_DMA_IRQHandler+0x204>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d102      	bne.n	8003306 <HAL_DMA_IRQHandler+0x92>
 8003300:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003304:	e00e      	b.n	8003324 <HAL_DMA_IRQHandler+0xb0>
 8003306:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800330a:	e00b      	b.n	8003324 <HAL_DMA_IRQHandler+0xb0>
 800330c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003310:	e008      	b.n	8003324 <HAL_DMA_IRQHandler+0xb0>
 8003312:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003316:	e005      	b.n	8003324 <HAL_DMA_IRQHandler+0xb0>
 8003318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800331c:	e002      	b.n	8003324 <HAL_DMA_IRQHandler+0xb0>
 800331e:	2340      	movs	r3, #64	@ 0x40
 8003320:	e000      	b.n	8003324 <HAL_DMA_IRQHandler+0xb0>
 8003322:	2304      	movs	r3, #4
 8003324:	4a55      	ldr	r2, [pc, #340]	@ (800347c <HAL_DMA_IRQHandler+0x208>)
 8003326:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8094 	beq.w	800345a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800333a:	e08e      	b.n	800345a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	2202      	movs	r2, #2
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d056      	beq.n	80033fa <HAL_DMA_IRQHandler+0x186>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d051      	beq.n	80033fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 020a 	bic.w	r2, r2, #10
 8003372:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a38      	ldr	r2, [pc, #224]	@ (8003464 <HAL_DMA_IRQHandler+0x1f0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d029      	beq.n	80033da <HAL_DMA_IRQHandler+0x166>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a37      	ldr	r2, [pc, #220]	@ (8003468 <HAL_DMA_IRQHandler+0x1f4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d022      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x162>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a35      	ldr	r2, [pc, #212]	@ (800346c <HAL_DMA_IRQHandler+0x1f8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01a      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x15c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a34      	ldr	r2, [pc, #208]	@ (8003470 <HAL_DMA_IRQHandler+0x1fc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d012      	beq.n	80033ca <HAL_DMA_IRQHandler+0x156>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a32      	ldr	r2, [pc, #200]	@ (8003474 <HAL_DMA_IRQHandler+0x200>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00a      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x150>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a31      	ldr	r2, [pc, #196]	@ (8003478 <HAL_DMA_IRQHandler+0x204>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d102      	bne.n	80033be <HAL_DMA_IRQHandler+0x14a>
 80033b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033bc:	e00e      	b.n	80033dc <HAL_DMA_IRQHandler+0x168>
 80033be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033c2:	e00b      	b.n	80033dc <HAL_DMA_IRQHandler+0x168>
 80033c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033c8:	e008      	b.n	80033dc <HAL_DMA_IRQHandler+0x168>
 80033ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033ce:	e005      	b.n	80033dc <HAL_DMA_IRQHandler+0x168>
 80033d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033d4:	e002      	b.n	80033dc <HAL_DMA_IRQHandler+0x168>
 80033d6:	2320      	movs	r3, #32
 80033d8:	e000      	b.n	80033dc <HAL_DMA_IRQHandler+0x168>
 80033da:	2302      	movs	r3, #2
 80033dc:	4a27      	ldr	r2, [pc, #156]	@ (800347c <HAL_DMA_IRQHandler+0x208>)
 80033de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d034      	beq.n	800345a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033f8:	e02f      	b.n	800345a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	2208      	movs	r2, #8
 8003400:	409a      	lsls	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d028      	beq.n	800345c <HAL_DMA_IRQHandler+0x1e8>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d023      	beq.n	800345c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 020e 	bic.w	r2, r2, #14
 8003422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	2b00      	cmp	r3, #0
 8003450:	d004      	beq.n	800345c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
    }
  }
  return;
 800345a:	bf00      	nop
 800345c:	bf00      	nop
}
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40020008 	.word	0x40020008
 8003468:	4002001c 	.word	0x4002001c
 800346c:	40020030 	.word	0x40020030
 8003470:	40020044 	.word	0x40020044
 8003474:	40020058 	.word	0x40020058
 8003478:	4002006c 	.word	0x4002006c
 800347c:	40020000 	.word	0x40020000

08003480 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003496:	2101      	movs	r1, #1
 8003498:	fa01 f202 	lsl.w	r2, r1, r2
 800349c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d108      	bne.n	80034c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034be:	e007      	b.n	80034d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034dc:	b480      	push	{r7}
 80034de:	b08b      	sub	sp, #44	@ 0x2c
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034ea:	2300      	movs	r3, #0
 80034ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ee:	e169      	b.n	80037c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034f0:	2201      	movs	r2, #1
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	429a      	cmp	r2, r3
 800350a:	f040 8158 	bne.w	80037be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4a9a      	ldr	r2, [pc, #616]	@ (800377c <HAL_GPIO_Init+0x2a0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d05e      	beq.n	80035d6 <HAL_GPIO_Init+0xfa>
 8003518:	4a98      	ldr	r2, [pc, #608]	@ (800377c <HAL_GPIO_Init+0x2a0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d875      	bhi.n	800360a <HAL_GPIO_Init+0x12e>
 800351e:	4a98      	ldr	r2, [pc, #608]	@ (8003780 <HAL_GPIO_Init+0x2a4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d058      	beq.n	80035d6 <HAL_GPIO_Init+0xfa>
 8003524:	4a96      	ldr	r2, [pc, #600]	@ (8003780 <HAL_GPIO_Init+0x2a4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d86f      	bhi.n	800360a <HAL_GPIO_Init+0x12e>
 800352a:	4a96      	ldr	r2, [pc, #600]	@ (8003784 <HAL_GPIO_Init+0x2a8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d052      	beq.n	80035d6 <HAL_GPIO_Init+0xfa>
 8003530:	4a94      	ldr	r2, [pc, #592]	@ (8003784 <HAL_GPIO_Init+0x2a8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d869      	bhi.n	800360a <HAL_GPIO_Init+0x12e>
 8003536:	4a94      	ldr	r2, [pc, #592]	@ (8003788 <HAL_GPIO_Init+0x2ac>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d04c      	beq.n	80035d6 <HAL_GPIO_Init+0xfa>
 800353c:	4a92      	ldr	r2, [pc, #584]	@ (8003788 <HAL_GPIO_Init+0x2ac>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d863      	bhi.n	800360a <HAL_GPIO_Init+0x12e>
 8003542:	4a92      	ldr	r2, [pc, #584]	@ (800378c <HAL_GPIO_Init+0x2b0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d046      	beq.n	80035d6 <HAL_GPIO_Init+0xfa>
 8003548:	4a90      	ldr	r2, [pc, #576]	@ (800378c <HAL_GPIO_Init+0x2b0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d85d      	bhi.n	800360a <HAL_GPIO_Init+0x12e>
 800354e:	2b12      	cmp	r3, #18
 8003550:	d82a      	bhi.n	80035a8 <HAL_GPIO_Init+0xcc>
 8003552:	2b12      	cmp	r3, #18
 8003554:	d859      	bhi.n	800360a <HAL_GPIO_Init+0x12e>
 8003556:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <HAL_GPIO_Init+0x80>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	080035d7 	.word	0x080035d7
 8003560:	080035b1 	.word	0x080035b1
 8003564:	080035c3 	.word	0x080035c3
 8003568:	08003605 	.word	0x08003605
 800356c:	0800360b 	.word	0x0800360b
 8003570:	0800360b 	.word	0x0800360b
 8003574:	0800360b 	.word	0x0800360b
 8003578:	0800360b 	.word	0x0800360b
 800357c:	0800360b 	.word	0x0800360b
 8003580:	0800360b 	.word	0x0800360b
 8003584:	0800360b 	.word	0x0800360b
 8003588:	0800360b 	.word	0x0800360b
 800358c:	0800360b 	.word	0x0800360b
 8003590:	0800360b 	.word	0x0800360b
 8003594:	0800360b 	.word	0x0800360b
 8003598:	0800360b 	.word	0x0800360b
 800359c:	0800360b 	.word	0x0800360b
 80035a0:	080035b9 	.word	0x080035b9
 80035a4:	080035cd 	.word	0x080035cd
 80035a8:	4a79      	ldr	r2, [pc, #484]	@ (8003790 <HAL_GPIO_Init+0x2b4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035ae:	e02c      	b.n	800360a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	623b      	str	r3, [r7, #32]
          break;
 80035b6:	e029      	b.n	800360c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	3304      	adds	r3, #4
 80035be:	623b      	str	r3, [r7, #32]
          break;
 80035c0:	e024      	b.n	800360c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	3308      	adds	r3, #8
 80035c8:	623b      	str	r3, [r7, #32]
          break;
 80035ca:	e01f      	b.n	800360c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	330c      	adds	r3, #12
 80035d2:	623b      	str	r3, [r7, #32]
          break;
 80035d4:	e01a      	b.n	800360c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035de:	2304      	movs	r3, #4
 80035e0:	623b      	str	r3, [r7, #32]
          break;
 80035e2:	e013      	b.n	800360c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d105      	bne.n	80035f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035ec:	2308      	movs	r3, #8
 80035ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	611a      	str	r2, [r3, #16]
          break;
 80035f6:	e009      	b.n	800360c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035f8:	2308      	movs	r3, #8
 80035fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	615a      	str	r2, [r3, #20]
          break;
 8003602:	e003      	b.n	800360c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003604:	2300      	movs	r3, #0
 8003606:	623b      	str	r3, [r7, #32]
          break;
 8003608:	e000      	b.n	800360c <HAL_GPIO_Init+0x130>
          break;
 800360a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2bff      	cmp	r3, #255	@ 0xff
 8003610:	d801      	bhi.n	8003616 <HAL_GPIO_Init+0x13a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	e001      	b.n	800361a <HAL_GPIO_Init+0x13e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2bff      	cmp	r3, #255	@ 0xff
 8003620:	d802      	bhi.n	8003628 <HAL_GPIO_Init+0x14c>
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	e002      	b.n	800362e <HAL_GPIO_Init+0x152>
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	3b08      	subs	r3, #8
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	210f      	movs	r1, #15
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	401a      	ands	r2, r3
 8003640:	6a39      	ldr	r1, [r7, #32]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	431a      	orrs	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80b1 	beq.w	80037be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800365c:	4b4d      	ldr	r3, [pc, #308]	@ (8003794 <HAL_GPIO_Init+0x2b8>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	4a4c      	ldr	r2, [pc, #304]	@ (8003794 <HAL_GPIO_Init+0x2b8>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6193      	str	r3, [r2, #24]
 8003668:	4b4a      	ldr	r3, [pc, #296]	@ (8003794 <HAL_GPIO_Init+0x2b8>)
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003674:	4a48      	ldr	r2, [pc, #288]	@ (8003798 <HAL_GPIO_Init+0x2bc>)
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	3302      	adds	r3, #2
 800367c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003680:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	220f      	movs	r2, #15
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4013      	ands	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a40      	ldr	r2, [pc, #256]	@ (800379c <HAL_GPIO_Init+0x2c0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <HAL_GPIO_Init+0x1ec>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3f      	ldr	r2, [pc, #252]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00d      	beq.n	80036c4 <HAL_GPIO_Init+0x1e8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a3e      	ldr	r2, [pc, #248]	@ (80037a4 <HAL_GPIO_Init+0x2c8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d007      	beq.n	80036c0 <HAL_GPIO_Init+0x1e4>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a3d      	ldr	r2, [pc, #244]	@ (80037a8 <HAL_GPIO_Init+0x2cc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d101      	bne.n	80036bc <HAL_GPIO_Init+0x1e0>
 80036b8:	2303      	movs	r3, #3
 80036ba:	e006      	b.n	80036ca <HAL_GPIO_Init+0x1ee>
 80036bc:	2304      	movs	r3, #4
 80036be:	e004      	b.n	80036ca <HAL_GPIO_Init+0x1ee>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e002      	b.n	80036ca <HAL_GPIO_Init+0x1ee>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <HAL_GPIO_Init+0x1ee>
 80036c8:	2300      	movs	r3, #0
 80036ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036cc:	f002 0203 	and.w	r2, r2, #3
 80036d0:	0092      	lsls	r2, r2, #2
 80036d2:	4093      	lsls	r3, r2
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036da:	492f      	ldr	r1, [pc, #188]	@ (8003798 <HAL_GPIO_Init+0x2bc>)
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	3302      	adds	r3, #2
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036f4:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	492c      	ldr	r1, [pc, #176]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]
 8003700:	e006      	b.n	8003710 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003702:	4b2a      	ldr	r3, [pc, #168]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	43db      	mvns	r3, r3
 800370a:	4928      	ldr	r1, [pc, #160]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 800370c:	4013      	ands	r3, r2
 800370e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d006      	beq.n	800372a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800371c:	4b23      	ldr	r3, [pc, #140]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	4922      	ldr	r1, [pc, #136]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	60cb      	str	r3, [r1, #12]
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800372a:	4b20      	ldr	r3, [pc, #128]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	43db      	mvns	r3, r3
 8003732:	491e      	ldr	r1, [pc, #120]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 8003734:	4013      	ands	r3, r2
 8003736:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d006      	beq.n	8003752 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003744:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	4918      	ldr	r1, [pc, #96]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
 8003750:	e006      	b.n	8003760 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003752:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	43db      	mvns	r3, r3
 800375a:	4914      	ldr	r1, [pc, #80]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 800375c:	4013      	ands	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d021      	beq.n	80037b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800376c:	4b0f      	ldr	r3, [pc, #60]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	490e      	ldr	r1, [pc, #56]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
 8003778:	e021      	b.n	80037be <HAL_GPIO_Init+0x2e2>
 800377a:	bf00      	nop
 800377c:	10320000 	.word	0x10320000
 8003780:	10310000 	.word	0x10310000
 8003784:	10220000 	.word	0x10220000
 8003788:	10210000 	.word	0x10210000
 800378c:	10120000 	.word	0x10120000
 8003790:	10110000 	.word	0x10110000
 8003794:	40021000 	.word	0x40021000
 8003798:	40010000 	.word	0x40010000
 800379c:	40010800 	.word	0x40010800
 80037a0:	40010c00 	.word	0x40010c00
 80037a4:	40011000 	.word	0x40011000
 80037a8:	40011400 	.word	0x40011400
 80037ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037b0:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <HAL_GPIO_Init+0x304>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	4909      	ldr	r1, [pc, #36]	@ (80037e0 <HAL_GPIO_Init+0x304>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	3301      	adds	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f47f ae8e 	bne.w	80034f0 <HAL_GPIO_Init+0x14>
  }
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	372c      	adds	r7, #44	@ 0x2c
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	40010400 	.word	0x40010400

080037e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
 80037f0:	4613      	mov	r3, r2
 80037f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037f4:	787b      	ldrb	r3, [r7, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003800:	e003      	b.n	800380a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	041a      	lsls	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e272      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8087 	beq.w	8003942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003834:	4b92      	ldr	r3, [pc, #584]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b04      	cmp	r3, #4
 800383e:	d00c      	beq.n	800385a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003840:	4b8f      	ldr	r3, [pc, #572]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d112      	bne.n	8003872 <HAL_RCC_OscConfig+0x5e>
 800384c:	4b8c      	ldr	r3, [pc, #560]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003858:	d10b      	bne.n	8003872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385a:	4b89      	ldr	r3, [pc, #548]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d06c      	beq.n	8003940 <HAL_RCC_OscConfig+0x12c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d168      	bne.n	8003940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e24c      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x76>
 800387c:	4b80      	ldr	r3, [pc, #512]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a7f      	ldr	r2, [pc, #508]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e02e      	b.n	80038e8 <HAL_RCC_OscConfig+0xd4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x98>
 8003892:	4b7b      	ldr	r3, [pc, #492]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7a      	ldr	r2, [pc, #488]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b78      	ldr	r3, [pc, #480]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a77      	ldr	r2, [pc, #476]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e01d      	b.n	80038e8 <HAL_RCC_OscConfig+0xd4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0xbc>
 80038b6:	4b72      	ldr	r3, [pc, #456]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a71      	ldr	r2, [pc, #452]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0xd4>
 80038d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b68      	ldr	r3, [pc, #416]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a67      	ldr	r2, [pc, #412]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe f8ec 	bl	8001acc <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe f8e8 	bl	8001acc <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	@ 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e200      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0xe4>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe f8d8 	bl	8001acc <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fe f8d4 	bl	8001acc <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	@ 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e1ec      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	4b53      	ldr	r3, [pc, #332]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x10c>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d063      	beq.n	8003a16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800394e:	4b4c      	ldr	r3, [pc, #304]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800395a:	4b49      	ldr	r3, [pc, #292]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b08      	cmp	r3, #8
 8003964:	d11c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x18c>
 8003966:	4b46      	ldr	r3, [pc, #280]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d116      	bne.n	80039a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	4b43      	ldr	r3, [pc, #268]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_RCC_OscConfig+0x176>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e1c0      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4939      	ldr	r1, [pc, #228]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	e03a      	b.n	8003a16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d020      	beq.n	80039ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a8:	4b36      	ldr	r3, [pc, #216]	@ (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fe f88d 	bl	8001acc <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fe f889 	bl	8001acc <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e1a1      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4927      	ldr	r1, [pc, #156]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
 80039e8:	e015      	b.n	8003a16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ea:	4b26      	ldr	r3, [pc, #152]	@ (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe f86c 	bl	8001acc <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f8:	f7fe f868 	bl	8001acc <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e180      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03a      	beq.n	8003a98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2a:	4b17      	ldr	r3, [pc, #92]	@ (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a30:	f7fe f84c 	bl	8001acc <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a38:	f7fe f848 	bl	8001acc <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e160      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a56:	2001      	movs	r0, #1
 8003a58:	f000 fa9c 	bl	8003f94 <RCC_Delay>
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7fe f832 	bl	8001acc <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6a:	e00f      	b.n	8003a8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6c:	f7fe f82e 	bl	8001acc <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d908      	bls.n	8003a8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e146      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	42420000 	.word	0x42420000
 8003a88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	4b92      	ldr	r3, [pc, #584]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e9      	bne.n	8003a6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80a6 	beq.w	8003bf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aaa:	4b8b      	ldr	r3, [pc, #556]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	4b88      	ldr	r3, [pc, #544]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4a87      	ldr	r2, [pc, #540]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac0:	61d3      	str	r3, [r2, #28]
 8003ac2:	4b85      	ldr	r3, [pc, #532]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad2:	4b82      	ldr	r3, [pc, #520]	@ (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d118      	bne.n	8003b10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ade:	4b7f      	ldr	r3, [pc, #508]	@ (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aea:	f7fd ffef 	bl	8001acc <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af2:	f7fd ffeb 	bl	8001acc <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	@ 0x64
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e103      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b04:	4b75      	ldr	r3, [pc, #468]	@ (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d106      	bne.n	8003b26 <HAL_RCC_OscConfig+0x312>
 8003b18:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6213      	str	r3, [r2, #32]
 8003b24:	e02d      	b.n	8003b82 <HAL_RCC_OscConfig+0x36e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x334>
 8003b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a69      	ldr	r2, [pc, #420]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	6213      	str	r3, [r2, #32]
 8003b3a:	4b67      	ldr	r3, [pc, #412]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a66      	ldr	r2, [pc, #408]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	f023 0304 	bic.w	r3, r3, #4
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	e01c      	b.n	8003b82 <HAL_RCC_OscConfig+0x36e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d10c      	bne.n	8003b6a <HAL_RCC_OscConfig+0x356>
 8003b50:	4b61      	ldr	r3, [pc, #388]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4a60      	ldr	r2, [pc, #384]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	6213      	str	r3, [r2, #32]
 8003b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6213      	str	r3, [r2, #32]
 8003b68:	e00b      	b.n	8003b82 <HAL_RCC_OscConfig+0x36e>
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	6213      	str	r3, [r2, #32]
 8003b76:	4b58      	ldr	r3, [pc, #352]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4a57      	ldr	r2, [pc, #348]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	f023 0304 	bic.w	r3, r3, #4
 8003b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d015      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fd ff9f 	bl	8001acc <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fd ff9b 	bl	8001acc <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0b1      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ee      	beq.n	8003b92 <HAL_RCC_OscConfig+0x37e>
 8003bb4:	e014      	b.n	8003be0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fd ff89 	bl	8001acc <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fd ff85 	bl	8001acc <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e09b      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd4:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ee      	bne.n	8003bbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d105      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be6:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	4a3b      	ldr	r2, [pc, #236]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8087 	beq.w	8003d0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bfc:	4b36      	ldr	r3, [pc, #216]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d061      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d146      	bne.n	8003c9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c10:	4b33      	ldr	r3, [pc, #204]	@ (8003ce0 <HAL_RCC_OscConfig+0x4cc>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c16:	f7fd ff59 	bl	8001acc <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fd ff55 	bl	8001acc <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e06d      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c30:	4b29      	ldr	r3, [pc, #164]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c44:	d108      	bne.n	8003c58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c46:	4b24      	ldr	r3, [pc, #144]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	4921      	ldr	r1, [pc, #132]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c58:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a19      	ldr	r1, [r3, #32]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	491b      	ldr	r1, [pc, #108]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce0 <HAL_RCC_OscConfig+0x4cc>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fd ff29 	bl	8001acc <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fd ff25 	bl	8001acc <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e03d      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c90:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x46a>
 8003c9c:	e035      	b.n	8003d0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <HAL_RCC_OscConfig+0x4cc>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd ff12 	bl	8001acc <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fd ff0e 	bl	8001acc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e026      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x498>
 8003cca:	e01e      	b.n	8003d0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e019      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <HAL_RCC_OscConfig+0x500>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0d0      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d910      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b67      	ldr	r3, [pc, #412]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4965      	ldr	r1, [pc, #404]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d74:	4b59      	ldr	r3, [pc, #356]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a58      	ldr	r2, [pc, #352]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8c:	4b53      	ldr	r3, [pc, #332]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4a52      	ldr	r2, [pc, #328]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b50      	ldr	r3, [pc, #320]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	494d      	ldr	r1, [pc, #308]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d040      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d115      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b41      	ldr	r3, [pc, #260]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e073      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b3d      	ldr	r3, [pc, #244]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06b      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b39      	ldr	r3, [pc, #228]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4936      	ldr	r1, [pc, #216]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fd fe60 	bl	8001acc <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fd fe5c 	bl	8001acc <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e053      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b2d      	ldr	r3, [pc, #180]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b27      	ldr	r3, [pc, #156]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d210      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b24      	ldr	r3, [pc, #144]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 0207 	bic.w	r2, r3, #7
 8003e4e:	4922      	ldr	r1, [pc, #136]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b20      	ldr	r3, [pc, #128]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e032      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4916      	ldr	r1, [pc, #88]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e92:	4b12      	ldr	r3, [pc, #72]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490e      	ldr	r1, [pc, #56]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea6:	f000 f821 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	490a      	ldr	r1, [pc, #40]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	5ccb      	ldrb	r3, [r1, r3]
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fdbe 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	08004990 	.word	0x08004990
 8003ee4:	20000004 	.word	0x20000004
 8003ee8:	20000008 	.word	0x20000008

08003eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f06:	4b1e      	ldr	r3, [pc, #120]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d002      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x30>
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_GetSysClockFreq+0x36>
 8003f1a:	e027      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f1c:	4b19      	ldr	r3, [pc, #100]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1e:	613b      	str	r3, [r7, #16]
      break;
 8003f20:	e027      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	0c9b      	lsrs	r3, r3, #18
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	4a17      	ldr	r2, [pc, #92]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f2c:	5cd3      	ldrb	r3, [r2, r3]
 8003f2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f3a:	4b11      	ldr	r3, [pc, #68]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	0c5b      	lsrs	r3, r3, #17
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	4a11      	ldr	r2, [pc, #68]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f46:	5cd3      	ldrb	r3, [r2, r3]
 8003f48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f4e:	fb03 f202 	mul.w	r2, r3, r2
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e004      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f60:	fb02 f303 	mul.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	613b      	str	r3, [r7, #16]
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f6e:	613b      	str	r3, [r7, #16]
      break;
 8003f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f72:	693b      	ldr	r3, [r7, #16]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	007a1200 	.word	0x007a1200
 8003f88:	080049a0 	.word	0x080049a0
 8003f8c:	080049b0 	.word	0x080049b0
 8003f90:	003d0900 	.word	0x003d0900

08003f94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <RCC_Delay+0x34>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003fcc <RCC_Delay+0x38>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	0a5b      	lsrs	r3, r3, #9
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fb0:	bf00      	nop
  }
  while (Delay --);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1e5a      	subs	r2, r3, #1
 8003fb6:	60fa      	str	r2, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f9      	bne.n	8003fb0 <RCC_Delay+0x1c>
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	20000004 	.word	0x20000004
 8003fcc:	10624dd3 	.word	0x10624dd3

08003fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d07d      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fec:	2300      	movs	r3, #0
 8003fee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10d      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	4a4b      	ldr	r2, [pc, #300]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004006:	61d3      	str	r3, [r2, #28]
 8004008:	4b49      	ldr	r3, [pc, #292]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	4b46      	ldr	r3, [pc, #280]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d118      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004024:	4b43      	ldr	r3, [pc, #268]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a42      	ldr	r2, [pc, #264]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800402a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800402e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004030:	f7fd fd4c 	bl	8001acc <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	e008      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004038:	f7fd fd48 	bl	8001acc <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	@ 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e06d      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b3a      	ldr	r3, [pc, #232]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004056:	4b36      	ldr	r3, [pc, #216]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d02e      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	429a      	cmp	r2, r3
 8004072:	d027      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004074:	4b2e      	ldr	r3, [pc, #184]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407e:	4b2e      	ldr	r3, [pc, #184]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004084:	4b2c      	ldr	r3, [pc, #176]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800408a:	4a29      	ldr	r2, [pc, #164]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d014      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409a:	f7fd fd17 	bl	8001acc <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a0:	e00a      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fd fd13 	bl	8001acc <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e036      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ee      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4917      	ldr	r1, [pc, #92]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d105      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040dc:	4b14      	ldr	r3, [pc, #80]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	4a13      	ldr	r2, [pc, #76]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	490b      	ldr	r1, [pc, #44]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004112:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4904      	ldr	r1, [pc, #16]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
 8004138:	42420440 	.word	0x42420440

0800413c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e041      	b.n	80041d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd fbbe 	bl	80018e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f000 fa5c 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d001      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e03a      	b.n	800426a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <HAL_TIM_Base_Start_IT+0x98>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x58>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800421e:	d009      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x58>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a14      	ldr	r2, [pc, #80]	@ (8004278 <HAL_TIM_Base_Start_IT+0x9c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x58>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a13      	ldr	r2, [pc, #76]	@ (800427c <HAL_TIM_Base_Start_IT+0xa0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d111      	bne.n	8004258 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b06      	cmp	r3, #6
 8004244:	d010      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004256:	e007      	b.n	8004268 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800

08004280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d020      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01b      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0202 	mvn.w	r2, #2
 80042b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f998 	bl	8004600 <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f98b 	bl	80045ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f99a 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d020      	beq.n	8004330 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01b      	beq.n	8004330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0204 	mvn.w	r2, #4
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f972 	bl	8004600 <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f965 	bl	80045ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f974 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d020      	beq.n	800437c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0208 	mvn.w	r2, #8
 800434c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2204      	movs	r2, #4
 8004352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f94c 	bl	8004600 <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f93f 	bl	80045ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f94e 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0210 	mvn.w	r2, #16
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2208      	movs	r2, #8
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f926 	bl	8004600 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f919 	bl	80045ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f928 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0201 	mvn.w	r2, #1
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd f962 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fa7f 	bl	800490e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8f8 	bl	8004624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0220 	mvn.w	r2, #32
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fa52 	bl	80048fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_TIM_ConfigClockSource+0x1c>
 8004478:	2302      	movs	r3, #2
 800447a:	e0b4      	b.n	80045e6 <HAL_TIM_ConfigClockSource+0x186>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800449a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b4:	d03e      	beq.n	8004534 <HAL_TIM_ConfigClockSource+0xd4>
 80044b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ba:	f200 8087 	bhi.w	80045cc <HAL_TIM_ConfigClockSource+0x16c>
 80044be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c2:	f000 8086 	beq.w	80045d2 <HAL_TIM_ConfigClockSource+0x172>
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ca:	d87f      	bhi.n	80045cc <HAL_TIM_ConfigClockSource+0x16c>
 80044cc:	2b70      	cmp	r3, #112	@ 0x70
 80044ce:	d01a      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0xa6>
 80044d0:	2b70      	cmp	r3, #112	@ 0x70
 80044d2:	d87b      	bhi.n	80045cc <HAL_TIM_ConfigClockSource+0x16c>
 80044d4:	2b60      	cmp	r3, #96	@ 0x60
 80044d6:	d050      	beq.n	800457a <HAL_TIM_ConfigClockSource+0x11a>
 80044d8:	2b60      	cmp	r3, #96	@ 0x60
 80044da:	d877      	bhi.n	80045cc <HAL_TIM_ConfigClockSource+0x16c>
 80044dc:	2b50      	cmp	r3, #80	@ 0x50
 80044de:	d03c      	beq.n	800455a <HAL_TIM_ConfigClockSource+0xfa>
 80044e0:	2b50      	cmp	r3, #80	@ 0x50
 80044e2:	d873      	bhi.n	80045cc <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	2b40      	cmp	r3, #64	@ 0x40
 80044e6:	d058      	beq.n	800459a <HAL_TIM_ConfigClockSource+0x13a>
 80044e8:	2b40      	cmp	r3, #64	@ 0x40
 80044ea:	d86f      	bhi.n	80045cc <HAL_TIM_ConfigClockSource+0x16c>
 80044ec:	2b30      	cmp	r3, #48	@ 0x30
 80044ee:	d064      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0x15a>
 80044f0:	2b30      	cmp	r3, #48	@ 0x30
 80044f2:	d86b      	bhi.n	80045cc <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d060      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0x15a>
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	d867      	bhi.n	80045cc <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d05c      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0x15a>
 8004500:	2b10      	cmp	r3, #16
 8004502:	d05a      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0x15a>
 8004504:	e062      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004516:	f000 f974 	bl	8004802 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	609a      	str	r2, [r3, #8]
      break;
 8004532:	e04f      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004544:	f000 f95d 	bl	8004802 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004556:	609a      	str	r2, [r3, #8]
      break;
 8004558:	e03c      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004566:	461a      	mov	r2, r3
 8004568:	f000 f8d4 	bl	8004714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2150      	movs	r1, #80	@ 0x50
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f92b 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 8004578:	e02c      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004586:	461a      	mov	r2, r3
 8004588:	f000 f8f2 	bl	8004770 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2160      	movs	r1, #96	@ 0x60
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f91b 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 8004598:	e01c      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a6:	461a      	mov	r2, r3
 80045a8:	f000 f8b4 	bl	8004714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2140      	movs	r1, #64	@ 0x40
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f90b 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 80045b8:	e00c      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f000 f902 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 80045ca:	e003      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      break;
 80045d0:	e000      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
	...

08004638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a2f      	ldr	r2, [pc, #188]	@ (8004708 <TIM_Base_SetConfig+0xd0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00b      	beq.n	8004668 <TIM_Base_SetConfig+0x30>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004656:	d007      	beq.n	8004668 <TIM_Base_SetConfig+0x30>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a2c      	ldr	r2, [pc, #176]	@ (800470c <TIM_Base_SetConfig+0xd4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_Base_SetConfig+0x30>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a2b      	ldr	r2, [pc, #172]	@ (8004710 <TIM_Base_SetConfig+0xd8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d108      	bne.n	800467a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a22      	ldr	r2, [pc, #136]	@ (8004708 <TIM_Base_SetConfig+0xd0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0x62>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0x62>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1f      	ldr	r2, [pc, #124]	@ (800470c <TIM_Base_SetConfig+0xd4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0x62>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a1e      	ldr	r2, [pc, #120]	@ (8004710 <TIM_Base_SetConfig+0xd8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004708 <TIM_Base_SetConfig+0xd0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d103      	bne.n	80046e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f023 0201 	bic.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	611a      	str	r2, [r3, #16]
  }
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800

08004714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0201 	bic.w	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800473e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f023 030a 	bic.w	r3, r3, #10
 8004750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f023 0210 	bic.w	r2, r3, #16
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800479a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	031b      	lsls	r3, r3, #12
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	621a      	str	r2, [r3, #32]
}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f043 0307 	orr.w	r3, r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr

08004802 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004802:	b480      	push	{r7}
 8004804:	b087      	sub	sp, #28
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800481c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	021a      	lsls	r2, r3, #8
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	431a      	orrs	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4313      	orrs	r3, r2
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	609a      	str	r2, [r3, #8]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e046      	b.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a16      	ldr	r2, [pc, #88]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a4:	d009      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a12      	ldr	r2, [pc, #72]	@ (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a10      	ldr	r2, [pc, #64]	@ (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d10c      	bne.n	80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800

080048fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr

08004920 <memset>:
 8004920:	4603      	mov	r3, r0
 8004922:	4402      	add	r2, r0
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <memset+0xa>
 8004928:	4770      	bx	lr
 800492a:	f803 1b01 	strb.w	r1, [r3], #1
 800492e:	e7f9      	b.n	8004924 <memset+0x4>

08004930 <__libc_init_array>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	2600      	movs	r6, #0
 8004934:	4d0c      	ldr	r5, [pc, #48]	@ (8004968 <__libc_init_array+0x38>)
 8004936:	4c0d      	ldr	r4, [pc, #52]	@ (800496c <__libc_init_array+0x3c>)
 8004938:	1b64      	subs	r4, r4, r5
 800493a:	10a4      	asrs	r4, r4, #2
 800493c:	42a6      	cmp	r6, r4
 800493e:	d109      	bne.n	8004954 <__libc_init_array+0x24>
 8004940:	f000 f81a 	bl	8004978 <_init>
 8004944:	2600      	movs	r6, #0
 8004946:	4d0a      	ldr	r5, [pc, #40]	@ (8004970 <__libc_init_array+0x40>)
 8004948:	4c0a      	ldr	r4, [pc, #40]	@ (8004974 <__libc_init_array+0x44>)
 800494a:	1b64      	subs	r4, r4, r5
 800494c:	10a4      	asrs	r4, r4, #2
 800494e:	42a6      	cmp	r6, r4
 8004950:	d105      	bne.n	800495e <__libc_init_array+0x2e>
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f855 3b04 	ldr.w	r3, [r5], #4
 8004958:	4798      	blx	r3
 800495a:	3601      	adds	r6, #1
 800495c:	e7ee      	b.n	800493c <__libc_init_array+0xc>
 800495e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004962:	4798      	blx	r3
 8004964:	3601      	adds	r6, #1
 8004966:	e7f2      	b.n	800494e <__libc_init_array+0x1e>
 8004968:	080049b4 	.word	0x080049b4
 800496c:	080049b4 	.word	0x080049b4
 8004970:	080049b4 	.word	0x080049b4
 8004974:	080049b8 	.word	0x080049b8

08004978 <_init>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	bf00      	nop
 800497c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497e:	bc08      	pop	{r3}
 8004980:	469e      	mov	lr, r3
 8004982:	4770      	bx	lr

08004984 <_fini>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr
