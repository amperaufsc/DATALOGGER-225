
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bc8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001cd4  08001cd4  00002cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d00  08001d00  00003010  2**0
                  CONTENTS
  4 .ARM          00000000  08001d00  08001d00  00003010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d00  08001d00  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d00  08001d00  00002d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d04  08001d04  00002d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08001d08  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000010  08001d18  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08001d18  000030d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ec4  00000000  00000000  00003039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f4  00000000  00000000  0000aefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000060e  00000000  00000000  0000cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016218  00000000  00000000  0000d1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000910a  00000000  00000000  000233fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fed1  00000000  00000000  0002c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac3d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f7c  00000000  00000000  000ac41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000ae398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001cbc 	.word	0x08001cbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001cbc 	.word	0x08001cbc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa5f 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f827 	bl	80001a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8cb 	bl	80002f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015e:	f000 f89f 	bl	80002a0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000162:	f000 f867 	bl	8000234 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, HAL_MAX_DELAY);
 8000166:	f04f 33ff 	mov.w	r3, #4294967295
 800016a:	9300      	str	r3, [sp, #0]
 800016c:	2301      	movs	r3, #1
 800016e:	4a0a      	ldr	r2, [pc, #40]	@ (8000198 <main+0x4c>)
 8000170:	490a      	ldr	r1, [pc, #40]	@ (800019c <main+0x50>)
 8000172:	480b      	ldr	r0, [pc, #44]	@ (80001a0 <main+0x54>)
 8000174:	f001 fa34 	bl	80015e0 <HAL_SPI_TransmitReceive>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(rxData == 0xAA){
 8000178:	4b07      	ldr	r3, [pc, #28]	@ (8000198 <main+0x4c>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2baa      	cmp	r3, #170	@ 0xaa
 800017e:	d1fb      	bne.n	8000178 <main+0x2c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000186:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <main+0x58>)
 8000188:	f000 fd5c 	bl	8000c44 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800018c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000190:	f000 faa2 	bl	80006d8 <HAL_Delay>
	  if(rxData == 0xAA){
 8000194:	e7f0      	b.n	8000178 <main+0x2c>
 8000196:	bf00      	nop
 8000198:	200000cc 	.word	0x200000cc
 800019c:	20000000 	.word	0x20000000
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	40010800 	.word	0x40010800

080001a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b090      	sub	sp, #64	@ 0x40
 80001ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	2228      	movs	r2, #40	@ 0x28
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f001 fd54 	bl	8001c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]
 80001c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ca:	2301      	movs	r3, #1
 80001cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001ce:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80001d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001dc:	2302      	movs	r3, #2
 80001de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fd61 	bl	8000cb8 <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001fc:	f000 f8ea 	bl	80003d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f000 ffce 	bl	80011bc <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000226:	f000 f8d5 	bl	80003d4 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	@ 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000238:	4b17      	ldr	r3, [pc, #92]	@ (8000298 <MX_SPI1_Init+0x64>)
 800023a:	4a18      	ldr	r2, [pc, #96]	@ (800029c <MX_SPI1_Init+0x68>)
 800023c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800023e:	4b16      	ldr	r3, [pc, #88]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000240:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000244:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000246:	4b14      	ldr	r3, [pc, #80]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <MX_SPI1_Init+0x64>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000252:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000258:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <MX_SPI1_Init+0x64>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800025e:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000264:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000266:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000268:	2210      	movs	r2, #16
 800026a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800026c:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <MX_SPI1_Init+0x64>)
 800026e:	2200      	movs	r2, #0
 8000270:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000272:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000274:	2200      	movs	r2, #0
 8000276:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000278:	4b07      	ldr	r3, [pc, #28]	@ (8000298 <MX_SPI1_Init+0x64>)
 800027a:	2200      	movs	r2, #0
 800027c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800027e:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000280:	220a      	movs	r2, #10
 8000282:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000286:	f001 f927 	bl	80014d8 <HAL_SPI_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000290:	f000 f8a0 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000002c 	.word	0x2000002c
 800029c:	40013000 	.word	0x40013000

080002a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002a4:	4b11      	ldr	r3, [pc, #68]	@ (80002ec <MX_USART2_UART_Init+0x4c>)
 80002a6:	4a12      	ldr	r2, [pc, #72]	@ (80002f0 <MX_USART2_UART_Init+0x50>)
 80002a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002aa:	4b10      	ldr	r3, [pc, #64]	@ (80002ec <MX_USART2_UART_Init+0x4c>)
 80002ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	@ (80002ec <MX_USART2_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <MX_USART2_UART_Init+0x4c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002be:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <MX_USART2_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002c4:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <MX_USART2_UART_Init+0x4c>)
 80002c6:	220c      	movs	r2, #12
 80002c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ca:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <MX_USART2_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <MX_USART2_UART_Init+0x4c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002d6:	4805      	ldr	r0, [pc, #20]	@ (80002ec <MX_USART2_UART_Init+0x4c>)
 80002d8:	f001 fbe5 	bl	8001aa6 <HAL_UART_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002e2:	f000 f877 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000084 	.word	0x20000084
 80002f0:	40004400 	.word	0x40004400

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0310 	add.w	r3, r7, #16
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000308:	4b2e      	ldr	r3, [pc, #184]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a2d      	ldr	r2, [pc, #180]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b2b      	ldr	r3, [pc, #172]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0310 	and.w	r3, r3, #16
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000320:	4b28      	ldr	r3, [pc, #160]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a27      	ldr	r2, [pc, #156]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b25      	ldr	r3, [pc, #148]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000338:	4b22      	ldr	r3, [pc, #136]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a21      	ldr	r2, [pc, #132]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 800033e:	f043 0304 	orr.w	r3, r3, #4
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b1f      	ldr	r3, [pc, #124]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0304 	and.w	r3, r3, #4
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000350:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a1b      	ldr	r2, [pc, #108]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <MX_GPIO_Init+0xd0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0308 	and.w	r3, r3, #8
 8000364:	603b      	str	r3, [r7, #0]
 8000366:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800036e:	4816      	ldr	r0, [pc, #88]	@ (80003c8 <MX_GPIO_Init+0xd4>)
 8000370:	f000 fc68 	bl	8000c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000374:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800037a:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <MX_GPIO_Init+0xd8>)
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	4619      	mov	r1, r3
 8000388:	4811      	ldr	r0, [pc, #68]	@ (80003d0 <MX_GPIO_Init+0xdc>)
 800038a:	f000 fad7 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800038e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000394:	2301      	movs	r3, #1
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039c:	2302      	movs	r3, #2
 800039e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	4619      	mov	r1, r3
 80003a6:	4808      	ldr	r0, [pc, #32]	@ (80003c8 <MX_GPIO_Init+0xd4>)
 80003a8:	f000 fac8 	bl	800093c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2100      	movs	r1, #0
 80003b0:	2028      	movs	r0, #40	@ 0x28
 80003b2:	f000 fa8c 	bl	80008ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003b6:	2028      	movs	r0, #40	@ 0x28
 80003b8:	f000 faa5 	bl	8000906 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003bc:	bf00      	nop
 80003be:	3720      	adds	r7, #32
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010800 	.word	0x40010800
 80003cc:	10110000 	.word	0x10110000
 80003d0:	40011000 	.word	0x40011000

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d8:	b672      	cpsid	i
}
 80003da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <Error_Handler+0x8>

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b15      	ldr	r3, [pc, #84]	@ (800043c <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a14      	ldr	r2, [pc, #80]	@ (800043c <HAL_MspInit+0x5c>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b12      	ldr	r3, [pc, #72]	@ (800043c <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a0e      	ldr	r2, [pc, #56]	@ (800043c <HAL_MspInit+0x5c>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000416:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <HAL_MspInit+0x60>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	4a04      	ldr	r2, [pc, #16]	@ (8000440 <HAL_MspInit+0x60>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000
 8000440:	40010000 	.word	0x40010000

08000444 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a1b      	ldr	r2, [pc, #108]	@ (80004cc <HAL_SPI_MspInit+0x88>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d12f      	bne.n	80004c4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000464:	4b1a      	ldr	r3, [pc, #104]	@ (80004d0 <HAL_SPI_MspInit+0x8c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a19      	ldr	r2, [pc, #100]	@ (80004d0 <HAL_SPI_MspInit+0x8c>)
 800046a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b17      	ldr	r3, [pc, #92]	@ (80004d0 <HAL_SPI_MspInit+0x8c>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <HAL_SPI_MspInit+0x8c>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a13      	ldr	r2, [pc, #76]	@ (80004d0 <HAL_SPI_MspInit+0x8c>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <HAL_SPI_MspInit+0x8c>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000494:	23a0      	movs	r3, #160	@ 0xa0
 8000496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000498:	2302      	movs	r3, #2
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049c:	2303      	movs	r3, #3
 800049e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	480b      	ldr	r0, [pc, #44]	@ (80004d4 <HAL_SPI_MspInit+0x90>)
 80004a8:	f000 fa48 	bl	800093c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004ac:	2340      	movs	r3, #64	@ 0x40
 80004ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <HAL_SPI_MspInit+0x90>)
 80004c0:	f000 fa3c 	bl	800093c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40013000 	.word	0x40013000
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010800 	.word	0x40010800

080004d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a15      	ldr	r2, [pc, #84]	@ (8000548 <HAL_UART_MspInit+0x70>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d123      	bne.n	8000540 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f8:	4b14      	ldr	r3, [pc, #80]	@ (800054c <HAL_UART_MspInit+0x74>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	4a13      	ldr	r2, [pc, #76]	@ (800054c <HAL_UART_MspInit+0x74>)
 80004fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000502:	61d3      	str	r3, [r2, #28]
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <HAL_UART_MspInit+0x74>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <HAL_UART_MspInit+0x74>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a0d      	ldr	r2, [pc, #52]	@ (800054c <HAL_UART_MspInit+0x74>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <HAL_UART_MspInit+0x74>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000528:	230c      	movs	r3, #12
 800052a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2302      	movs	r3, #2
 8000532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	4805      	ldr	r0, [pc, #20]	@ (8000550 <HAL_UART_MspInit+0x78>)
 800053c:	f000 f9fe 	bl	800093c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40004400 	.word	0x40004400
 800054c:	40021000 	.word	0x40021000
 8000550:	40010800 	.word	0x40010800

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <NMI_Handler+0x4>

0800055c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <MemManage_Handler+0x4>

0800056c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <UsageFault_Handler+0x4>

0800057c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 f87c 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80005b4:	f000 fb5e 	bl	8000c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c8:	f7ff fff8 	bl	80005bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ce:	490c      	ldr	r1, [pc, #48]	@ (8000600 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000604 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a09      	ldr	r2, [pc, #36]	@ (8000608 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005e4:	4c09      	ldr	r4, [pc, #36]	@ (800060c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005f2:	f001 fb3f 	bl	8001c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff fda9 	bl	800014c <main>
  bx lr
 80005fa:	4770      	bx	lr
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000604:	08001d08 	.word	0x08001d08
  ldr r2, =_sbss
 8000608:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800060c:	200000d4 	.word	0x200000d4

08000610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_2_IRQHandler>
	...

08000614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	@ (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f947 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff fed6 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f95f 	bl	8000922 <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295
 800067c:	f000 f927 	bl	80008ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	@ (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004
 8000698:	2000000c 	.word	0x2000000c
 800069c:	20000008 	.word	0x20000008

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <HAL_IncTick+0x1c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <HAL_IncTick+0x20>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a03      	ldr	r2, [pc, #12]	@ (80006c0 <HAL_IncTick+0x20>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	2000000c 	.word	0x2000000c
 80006c0:	200000d0 	.word	0x200000d0

080006c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b02      	ldr	r3, [pc, #8]	@ (80006d4 <HAL_GetTick+0x10>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	200000d0 	.word	0x200000d0

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff fff0 	bl	80006c4 <HAL_GetTick>
 80006e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f0:	d005      	beq.n	80006fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <HAL_Delay+0x44>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006fe:	bf00      	nop
 8000700:	f7ff ffe0 	bl	80006c4 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f7      	bhi.n	8000700 <HAL_Delay+0x28>
  {
  }
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000000c 	.word	0x2000000c

08000720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800074c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000752:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <__NVIC_GetPriorityGrouping+0x18>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	f003 0307 	and.w	r3, r3, #7
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	2b00      	cmp	r3, #0
 8000794:	db0b      	blt.n	80007ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 021f 	and.w	r2, r3, #31
 800079c:	4906      	ldr	r1, [pc, #24]	@ (80007b8 <__NVIC_EnableIRQ+0x34>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	095b      	lsrs	r3, r3, #5
 80007a4:	2001      	movs	r0, #1
 80007a6:	fa00 f202 	lsl.w	r2, r0, r2
 80007aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	e000e100 	.word	0xe000e100

080007bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	db0a      	blt.n	80007e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	490c      	ldr	r1, [pc, #48]	@ (8000808 <__NVIC_SetPriority+0x4c>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	0112      	lsls	r2, r2, #4
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	440b      	add	r3, r1
 80007e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e4:	e00a      	b.n	80007fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4908      	ldr	r1, [pc, #32]	@ (800080c <__NVIC_SetPriority+0x50>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	3b04      	subs	r3, #4
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	440b      	add	r3, r1
 80007fa:	761a      	strb	r2, [r3, #24]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000e100 	.word	0xe000e100
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	@ 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	f1c3 0307 	rsb	r3, r3, #7
 800082a:	2b04      	cmp	r3, #4
 800082c:	bf28      	it	cs
 800082e:	2304      	movcs	r3, #4
 8000830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3304      	adds	r3, #4
 8000836:	2b06      	cmp	r3, #6
 8000838:	d902      	bls.n	8000840 <NVIC_EncodePriority+0x30>
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3b03      	subs	r3, #3
 800083e:	e000      	b.n	8000842 <NVIC_EncodePriority+0x32>
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	f04f 32ff 	mov.w	r2, #4294967295
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43da      	mvns	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	401a      	ands	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000858:	f04f 31ff 	mov.w	r1, #4294967295
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43d9      	mvns	r1, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	4313      	orrs	r3, r2
         );
}
 800086a:	4618      	mov	r0, r3
 800086c:	3724      	adds	r7, #36	@ 0x24
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000884:	d301      	bcc.n	800088a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e00f      	b.n	80008aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <SysTick_Config+0x40>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	210f      	movs	r1, #15
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f7ff ff90 	bl	80007bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <SysTick_Config+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <SysTick_Config+0x40>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff2d 	bl	8000720 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e0:	f7ff ff42 	bl	8000768 <__NVIC_GetPriorityGrouping>
 80008e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ff90 	bl	8000810 <NVIC_EncodePriority>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5f 	bl	80007bc <__NVIC_SetPriority>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff35 	bl	8000784 <__NVIC_EnableIRQ>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffa2 	bl	8000874 <SysTick_Config>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	b480      	push	{r7}
 800093e:	b08b      	sub	sp, #44	@ 0x2c
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094e:	e169      	b.n	8000c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000950:	2201      	movs	r2, #1
 8000952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	69fa      	ldr	r2, [r7, #28]
 8000960:	4013      	ands	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	429a      	cmp	r2, r3
 800096a:	f040 8158 	bne.w	8000c1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4a9a      	ldr	r2, [pc, #616]	@ (8000bdc <HAL_GPIO_Init+0x2a0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d05e      	beq.n	8000a36 <HAL_GPIO_Init+0xfa>
 8000978:	4a98      	ldr	r2, [pc, #608]	@ (8000bdc <HAL_GPIO_Init+0x2a0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d875      	bhi.n	8000a6a <HAL_GPIO_Init+0x12e>
 800097e:	4a98      	ldr	r2, [pc, #608]	@ (8000be0 <HAL_GPIO_Init+0x2a4>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d058      	beq.n	8000a36 <HAL_GPIO_Init+0xfa>
 8000984:	4a96      	ldr	r2, [pc, #600]	@ (8000be0 <HAL_GPIO_Init+0x2a4>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d86f      	bhi.n	8000a6a <HAL_GPIO_Init+0x12e>
 800098a:	4a96      	ldr	r2, [pc, #600]	@ (8000be4 <HAL_GPIO_Init+0x2a8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d052      	beq.n	8000a36 <HAL_GPIO_Init+0xfa>
 8000990:	4a94      	ldr	r2, [pc, #592]	@ (8000be4 <HAL_GPIO_Init+0x2a8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d869      	bhi.n	8000a6a <HAL_GPIO_Init+0x12e>
 8000996:	4a94      	ldr	r2, [pc, #592]	@ (8000be8 <HAL_GPIO_Init+0x2ac>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d04c      	beq.n	8000a36 <HAL_GPIO_Init+0xfa>
 800099c:	4a92      	ldr	r2, [pc, #584]	@ (8000be8 <HAL_GPIO_Init+0x2ac>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d863      	bhi.n	8000a6a <HAL_GPIO_Init+0x12e>
 80009a2:	4a92      	ldr	r2, [pc, #584]	@ (8000bec <HAL_GPIO_Init+0x2b0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d046      	beq.n	8000a36 <HAL_GPIO_Init+0xfa>
 80009a8:	4a90      	ldr	r2, [pc, #576]	@ (8000bec <HAL_GPIO_Init+0x2b0>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d85d      	bhi.n	8000a6a <HAL_GPIO_Init+0x12e>
 80009ae:	2b12      	cmp	r3, #18
 80009b0:	d82a      	bhi.n	8000a08 <HAL_GPIO_Init+0xcc>
 80009b2:	2b12      	cmp	r3, #18
 80009b4:	d859      	bhi.n	8000a6a <HAL_GPIO_Init+0x12e>
 80009b6:	a201      	add	r2, pc, #4	@ (adr r2, 80009bc <HAL_GPIO_Init+0x80>)
 80009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009bc:	08000a37 	.word	0x08000a37
 80009c0:	08000a11 	.word	0x08000a11
 80009c4:	08000a23 	.word	0x08000a23
 80009c8:	08000a65 	.word	0x08000a65
 80009cc:	08000a6b 	.word	0x08000a6b
 80009d0:	08000a6b 	.word	0x08000a6b
 80009d4:	08000a6b 	.word	0x08000a6b
 80009d8:	08000a6b 	.word	0x08000a6b
 80009dc:	08000a6b 	.word	0x08000a6b
 80009e0:	08000a6b 	.word	0x08000a6b
 80009e4:	08000a6b 	.word	0x08000a6b
 80009e8:	08000a6b 	.word	0x08000a6b
 80009ec:	08000a6b 	.word	0x08000a6b
 80009f0:	08000a6b 	.word	0x08000a6b
 80009f4:	08000a6b 	.word	0x08000a6b
 80009f8:	08000a6b 	.word	0x08000a6b
 80009fc:	08000a6b 	.word	0x08000a6b
 8000a00:	08000a19 	.word	0x08000a19
 8000a04:	08000a2d 	.word	0x08000a2d
 8000a08:	4a79      	ldr	r2, [pc, #484]	@ (8000bf0 <HAL_GPIO_Init+0x2b4>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d013      	beq.n	8000a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a0e:	e02c      	b.n	8000a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	623b      	str	r3, [r7, #32]
          break;
 8000a16:	e029      	b.n	8000a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	e024      	b.n	8000a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	3308      	adds	r3, #8
 8000a28:	623b      	str	r3, [r7, #32]
          break;
 8000a2a:	e01f      	b.n	8000a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	330c      	adds	r3, #12
 8000a32:	623b      	str	r3, [r7, #32]
          break;
 8000a34:	e01a      	b.n	8000a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d102      	bne.n	8000a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	623b      	str	r3, [r7, #32]
          break;
 8000a42:	e013      	b.n	8000a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d105      	bne.n	8000a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	69fa      	ldr	r2, [r7, #28]
 8000a54:	611a      	str	r2, [r3, #16]
          break;
 8000a56:	e009      	b.n	8000a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69fa      	ldr	r2, [r7, #28]
 8000a60:	615a      	str	r2, [r3, #20]
          break;
 8000a62:	e003      	b.n	8000a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
          break;
 8000a68:	e000      	b.n	8000a6c <HAL_GPIO_Init+0x130>
          break;
 8000a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2bff      	cmp	r3, #255	@ 0xff
 8000a70:	d801      	bhi.n	8000a76 <HAL_GPIO_Init+0x13a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	e001      	b.n	8000a7a <HAL_GPIO_Init+0x13e>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	2bff      	cmp	r3, #255	@ 0xff
 8000a80:	d802      	bhi.n	8000a88 <HAL_GPIO_Init+0x14c>
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	e002      	b.n	8000a8e <HAL_GPIO_Init+0x152>
 8000a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8a:	3b08      	subs	r3, #8
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	210f      	movs	r1, #15
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	6a39      	ldr	r1, [r7, #32]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 80b1 	beq.w	8000c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000abc:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf4 <HAL_GPIO_Init+0x2b8>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8000bf4 <HAL_GPIO_Init+0x2b8>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf4 <HAL_GPIO_Init+0x2b8>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ad4:	4a48      	ldr	r2, [pc, #288]	@ (8000bf8 <HAL_GPIO_Init+0x2bc>)
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	220f      	movs	r2, #15
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	4013      	ands	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a40      	ldr	r2, [pc, #256]	@ (8000bfc <HAL_GPIO_Init+0x2c0>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d013      	beq.n	8000b28 <HAL_GPIO_Init+0x1ec>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a3f      	ldr	r2, [pc, #252]	@ (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d00d      	beq.n	8000b24 <HAL_GPIO_Init+0x1e8>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c04 <HAL_GPIO_Init+0x2c8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d007      	beq.n	8000b20 <HAL_GPIO_Init+0x1e4>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a3d      	ldr	r2, [pc, #244]	@ (8000c08 <HAL_GPIO_Init+0x2cc>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d101      	bne.n	8000b1c <HAL_GPIO_Init+0x1e0>
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x1ee>
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	e004      	b.n	8000b2a <HAL_GPIO_Init+0x1ee>
 8000b20:	2302      	movs	r3, #2
 8000b22:	e002      	b.n	8000b2a <HAL_GPIO_Init+0x1ee>
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <HAL_GPIO_Init+0x1ee>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b2c:	f002 0203 	and.w	r2, r2, #3
 8000b30:	0092      	lsls	r2, r2, #2
 8000b32:	4093      	lsls	r3, r2
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b3a:	492f      	ldr	r1, [pc, #188]	@ (8000bf8 <HAL_GPIO_Init+0x2bc>)
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3302      	adds	r3, #2
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d006      	beq.n	8000b62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b54:	4b2d      	ldr	r3, [pc, #180]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	492c      	ldr	r1, [pc, #176]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	608b      	str	r3, [r1, #8]
 8000b60:	e006      	b.n	8000b70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b62:	4b2a      	ldr	r3, [pc, #168]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	4928      	ldr	r1, [pc, #160]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b7c:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	4922      	ldr	r1, [pc, #136]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	60cb      	str	r3, [r1, #12]
 8000b88:	e006      	b.n	8000b98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b8a:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000b8c:	68da      	ldr	r2, [r3, #12]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	491e      	ldr	r1, [pc, #120]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d006      	beq.n	8000bb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ba4:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	4918      	ldr	r1, [pc, #96]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
 8000bb0:	e006      	b.n	8000bc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	4914      	ldr	r1, [pc, #80]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d021      	beq.n	8000c10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	490e      	ldr	r1, [pc, #56]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	600b      	str	r3, [r1, #0]
 8000bd8:	e021      	b.n	8000c1e <HAL_GPIO_Init+0x2e2>
 8000bda:	bf00      	nop
 8000bdc:	10320000 	.word	0x10320000
 8000be0:	10310000 	.word	0x10310000
 8000be4:	10220000 	.word	0x10220000
 8000be8:	10210000 	.word	0x10210000
 8000bec:	10120000 	.word	0x10120000
 8000bf0:	10110000 	.word	0x10110000
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010000 	.word	0x40010000
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	40010c00 	.word	0x40010c00
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40011400 	.word	0x40011400
 8000c0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c10:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <HAL_GPIO_Init+0x304>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	4909      	ldr	r1, [pc, #36]	@ (8000c40 <HAL_GPIO_Init+0x304>)
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	3301      	adds	r3, #1
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f47f ae8e 	bne.w	8000950 <HAL_GPIO_Init+0x14>
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	372c      	adds	r7, #44	@ 0x2c
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40010400 	.word	0x40010400

08000c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	807b      	strh	r3, [r7, #2]
 8000c50:	4613      	mov	r3, r2
 8000c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c54:	787b      	ldrb	r3, [r7, #1]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c5a:	887a      	ldrh	r2, [r7, #2]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c60:	e003      	b.n	8000c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	041a      	lsls	r2, r3, #16
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	611a      	str	r2, [r3, #16]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c80:	695a      	ldr	r2, [r3, #20]
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d006      	beq.n	8000c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f806 	bl	8000ca4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e272      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8087 	beq.w	8000de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd8:	4b92      	ldr	r3, [pc, #584]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d00c      	beq.n	8000cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce4:	4b8f      	ldr	r3, [pc, #572]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	d112      	bne.n	8000d16 <HAL_RCC_OscConfig+0x5e>
 8000cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cfc:	d10b      	bne.n	8000d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfe:	4b89      	ldr	r3, [pc, #548]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d06c      	beq.n	8000de4 <HAL_RCC_OscConfig+0x12c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d168      	bne.n	8000de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e24c      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d1e:	d106      	bne.n	8000d2e <HAL_RCC_OscConfig+0x76>
 8000d20:	4b80      	ldr	r3, [pc, #512]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a7f      	ldr	r2, [pc, #508]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	e02e      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0x98>
 8000d36:	4b7b      	ldr	r3, [pc, #492]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b78      	ldr	r3, [pc, #480]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a77      	ldr	r2, [pc, #476]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e01d      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d58:	d10c      	bne.n	8000d74 <HAL_RCC_OscConfig+0xbc>
 8000d5a:	4b72      	ldr	r3, [pc, #456]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a71      	ldr	r2, [pc, #452]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4b6f      	ldr	r3, [pc, #444]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a6e      	ldr	r2, [pc, #440]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e00b      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d74:	4b6b      	ldr	r3, [pc, #428]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a6a      	ldr	r2, [pc, #424]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b68      	ldr	r3, [pc, #416]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a67      	ldr	r2, [pc, #412]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d013      	beq.n	8000dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fc96 	bl	80006c4 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fc92 	bl	80006c4 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b64      	cmp	r3, #100	@ 0x64
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e200      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dae:	4b5d      	ldr	r3, [pc, #372]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0xe4>
 8000dba:	e014      	b.n	8000de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fc82 	bl	80006c4 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fc7e 	bl	80006c4 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	@ 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e1ec      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	4b53      	ldr	r3, [pc, #332]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x10c>
 8000de2:	e000      	b.n	8000de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d063      	beq.n	8000eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000df2:	4b4c      	ldr	r3, [pc, #304]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00b      	beq.n	8000e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dfe:	4b49      	ldr	r3, [pc, #292]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b08      	cmp	r3, #8
 8000e08:	d11c      	bne.n	8000e44 <HAL_RCC_OscConfig+0x18c>
 8000e0a:	4b46      	ldr	r3, [pc, #280]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d116      	bne.n	8000e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e16:	4b43      	ldr	r3, [pc, #268]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d005      	beq.n	8000e2e <HAL_RCC_OscConfig+0x176>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d001      	beq.n	8000e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e1c0      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	4939      	ldr	r1, [pc, #228]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e42:	e03a      	b.n	8000eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d020      	beq.n	8000e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e4c:	4b36      	ldr	r3, [pc, #216]	@ (8000f28 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e52:	f7ff fc37 	bl	80006c4 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fc33 	bl	80006c4 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e1a1      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e78:	4b2a      	ldr	r3, [pc, #168]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4927      	ldr	r1, [pc, #156]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e015      	b.n	8000eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e8e:	4b26      	ldr	r3, [pc, #152]	@ (8000f28 <HAL_RCC_OscConfig+0x270>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fc16 	bl	80006c4 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fc12 	bl	80006c4 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e180      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d03a      	beq.n	8000f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d019      	beq.n	8000f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <HAL_RCC_OscConfig+0x274>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fbf6 	bl	80006c4 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff fbf2 	bl	80006c4 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e160      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 face 	bl	800149c <RCC_Delay>
 8000f00:	e01c      	b.n	8000f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <HAL_RCC_OscConfig+0x274>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f08:	f7ff fbdc 	bl	80006c4 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0e:	e00f      	b.n	8000f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fbd8 	bl	80006c4 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d908      	bls.n	8000f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e146      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	42420000 	.word	0x42420000
 8000f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f30:	4b92      	ldr	r3, [pc, #584]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1e9      	bne.n	8000f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80a6 	beq.w	8001096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f4e:	4b8b      	ldr	r3, [pc, #556]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10d      	bne.n	8000f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b88      	ldr	r3, [pc, #544]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a87      	ldr	r2, [pc, #540]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b85      	ldr	r3, [pc, #532]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f72:	2301      	movs	r3, #1
 8000f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f76:	4b82      	ldr	r3, [pc, #520]	@ (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d118      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f82:	4b7f      	ldr	r3, [pc, #508]	@ (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a7e      	ldr	r2, [pc, #504]	@ (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fb99 	bl	80006c4 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f96:	f7ff fb95 	bl	80006c4 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b64      	cmp	r3, #100	@ 0x64
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e103      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa8:	4b75      	ldr	r3, [pc, #468]	@ (8001180 <HAL_RCC_OscConfig+0x4c8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d106      	bne.n	8000fca <HAL_RCC_OscConfig+0x312>
 8000fbc:	4b6f      	ldr	r3, [pc, #444]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6213      	str	r3, [r2, #32]
 8000fc8:	e02d      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x334>
 8000fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a69      	ldr	r2, [pc, #420]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	6213      	str	r3, [r2, #32]
 8000fde:	4b67      	ldr	r3, [pc, #412]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a66      	ldr	r2, [pc, #408]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	f023 0304 	bic.w	r3, r3, #4
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	e01c      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d10c      	bne.n	800100e <HAL_RCC_OscConfig+0x356>
 8000ff4:	4b61      	ldr	r3, [pc, #388]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4a60      	ldr	r2, [pc, #384]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6213      	str	r3, [r2, #32]
 8001000:	4b5e      	ldr	r3, [pc, #376]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a5d      	ldr	r2, [pc, #372]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	e00b      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 800100e:	4b5b      	ldr	r3, [pc, #364]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a5a      	ldr	r2, [pc, #360]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	4b58      	ldr	r3, [pc, #352]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a57      	ldr	r2, [pc, #348]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0304 	bic.w	r3, r3, #4
 8001024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d015      	beq.n	800105a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102e:	f7ff fb49 	bl	80006c4 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001034:	e00a      	b.n	800104c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001036:	f7ff fb45 	bl	80006c4 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001044:	4293      	cmp	r3, r2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e0b1      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104c:	4b4b      	ldr	r3, [pc, #300]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0ee      	beq.n	8001036 <HAL_RCC_OscConfig+0x37e>
 8001058:	e014      	b.n	8001084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105a:	f7ff fb33 	bl	80006c4 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001060:	e00a      	b.n	8001078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff fb2f 	bl	80006c4 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001070:	4293      	cmp	r3, r2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e09b      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001078:	4b40      	ldr	r3, [pc, #256]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1ee      	bne.n	8001062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d105      	bne.n	8001096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800108a:	4b3c      	ldr	r3, [pc, #240]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a3b      	ldr	r2, [pc, #236]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8087 	beq.w	80011ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a0:	4b36      	ldr	r3, [pc, #216]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d061      	beq.n	8001170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d146      	bne.n	8001142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b4:	4b33      	ldr	r3, [pc, #204]	@ (8001184 <HAL_RCC_OscConfig+0x4cc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fb03 	bl	80006c4 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c2:	f7ff faff 	bl	80006c4 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e06d      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d4:	4b29      	ldr	r3, [pc, #164]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e8:	d108      	bne.n	80010fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ea:	4b24      	ldr	r3, [pc, #144]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4921      	ldr	r1, [pc, #132]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a19      	ldr	r1, [r3, #32]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110c:	430b      	orrs	r3, r1
 800110e:	491b      	ldr	r1, [pc, #108]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <HAL_RCC_OscConfig+0x4cc>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fad3 	bl	80006c4 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001122:	f7ff facf 	bl	80006c4 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e03d      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x46a>
 8001140:	e035      	b.n	80011ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <HAL_RCC_OscConfig+0x4cc>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fabc 	bl	80006c4 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001150:	f7ff fab8 	bl	80006c4 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e026      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_RCC_OscConfig+0x4c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x498>
 800116e:	e01e      	b.n	80011ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d107      	bne.n	8001188 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e019      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
 800117c:	40021000 	.word	0x40021000
 8001180:	40007000 	.word	0x40007000
 8001184:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <HAL_RCC_OscConfig+0x500>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	429a      	cmp	r2, r3
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0d0      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d0:	4b6a      	ldr	r3, [pc, #424]	@ (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d910      	bls.n	8001200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b67      	ldr	r3, [pc, #412]	@ (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 0207 	bic.w	r2, r3, #7
 80011e6:	4965      	ldr	r1, [pc, #404]	@ (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ee:	4b63      	ldr	r3, [pc, #396]	@ (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0b8      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001218:	4b59      	ldr	r3, [pc, #356]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a58      	ldr	r2, [pc, #352]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001230:	4b53      	ldr	r3, [pc, #332]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800123a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800123c:	4b50      	ldr	r3, [pc, #320]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	494d      	ldr	r1, [pc, #308]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d040      	beq.n	80012dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b47      	ldr	r3, [pc, #284]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d115      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e07f      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	4b41      	ldr	r3, [pc, #260]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e073      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e06b      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129a:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f023 0203 	bic.w	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4936      	ldr	r1, [pc, #216]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ac:	f7ff fa0a 	bl	80006c4 <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b4:	f7ff fa06 	bl	80006c4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e053      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 020c 	and.w	r2, r3, #12
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	429a      	cmp	r2, r3
 80012da:	d1eb      	bne.n	80012b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d210      	bcs.n	800130c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ea:	4b24      	ldr	r3, [pc, #144]	@ (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 0207 	bic.w	r2, r3, #7
 80012f2:	4922      	ldr	r1, [pc, #136]	@ (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fa:	4b20      	ldr	r3, [pc, #128]	@ (800137c <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d001      	beq.n	800130c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e032      	b.n	8001372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4916      	ldr	r1, [pc, #88]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	490e      	ldr	r1, [pc, #56]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800134a:	f000 f821 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 800134e:	4602      	mov	r2, r0
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	490a      	ldr	r1, [pc, #40]	@ (8001384 <HAL_RCC_ClockConfig+0x1c8>)
 800135c:	5ccb      	ldrb	r3, [r1, r3]
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <HAL_RCC_ClockConfig+0x1cc>)
 8001364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_RCC_ClockConfig+0x1d0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f968 	bl	8000640 <HAL_InitTick>

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40022000 	.word	0x40022000
 8001380:	40021000 	.word	0x40021000
 8001384:	08001cd4 	.word	0x08001cd4
 8001388:	20000004 	.word	0x20000004
 800138c:	20000008 	.word	0x20000008

08001390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <HAL_RCC_GetSysClockFreq+0x94>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d002      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d003      	beq.n	80013c6 <HAL_RCC_GetSysClockFreq+0x36>
 80013be:	e027      	b.n	8001410 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 80013c2:	613b      	str	r3, [r7, #16]
      break;
 80013c4:	e027      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4a17      	ldr	r2, [pc, #92]	@ (800142c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d010      	beq.n	8001400 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_RCC_GetSysClockFreq+0x94>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	0c5b      	lsrs	r3, r3, #17
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	4a11      	ldr	r2, [pc, #68]	@ (8001430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 80013f2:	fb03 f202 	mul.w	r2, r3, r2
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e004      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	613b      	str	r3, [r7, #16]
      break;
 800140e:	e002      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 8001412:	613b      	str	r3, [r7, #16]
      break;
 8001414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001416:	693b      	ldr	r3, [r7, #16]
}
 8001418:	4618      	mov	r0, r3
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	007a1200 	.word	0x007a1200
 800142c:	08001cec 	.word	0x08001cec
 8001430:	08001cfc 	.word	0x08001cfc
 8001434:	003d0900 	.word	0x003d0900

08001438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b02      	ldr	r3, [pc, #8]	@ (8001448 <HAL_RCC_GetHCLKFreq+0x10>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000004 	.word	0x20000004

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001450:	f7ff fff2 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	@ (800146c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4903      	ldr	r1, [pc, #12]	@ (8001470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	08001ce4 	.word	0x08001ce4

08001474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001478:	f7ff ffde 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	0adb      	lsrs	r3, r3, #11
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4903      	ldr	r1, [pc, #12]	@ (8001498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	08001ce4 	.word	0x08001ce4

0800149c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <RCC_Delay+0x34>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <RCC_Delay+0x38>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0a5b      	lsrs	r3, r3, #9
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014b8:	bf00      	nop
  }
  while (Delay --);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	60fa      	str	r2, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f9      	bne.n	80014b8 <RCC_Delay+0x1c>
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000004 	.word	0x20000004
 80014d4:	10624dd3 	.word	0x10624dd3

080014d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e076      	b.n	80015d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d108      	bne.n	8001504 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80014fa:	d009      	beq.n	8001510 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
 8001502:	e005      	b.n	8001510 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7fe ff8a 	bl	8000444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001546:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001594:	ea42 0103 	orr.w	r1, r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	0c1a      	lsrs	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f002 0204 	and.w	r2, r2, #4
 80015b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80015ee:	2301      	movs	r3, #1
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015f2:	f7ff f867 	bl	80006c4 <HAL_GetTick>
 80015f6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80015fe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800160a:	7ffb      	ldrb	r3, [r7, #31]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d00c      	beq.n	800162a <HAL_SPI_TransmitReceive+0x4a>
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001616:	d106      	bne.n	8001626 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <HAL_SPI_TransmitReceive+0x46>
 8001620:	7ffb      	ldrb	r3, [r7, #31]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d001      	beq.n	800162a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001626:	2302      	movs	r3, #2
 8001628:	e17f      	b.n	800192a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_SPI_TransmitReceive+0x5c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <HAL_SPI_TransmitReceive+0x5c>
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e174      	b.n	800192a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_SPI_TransmitReceive+0x6e>
 800164a:	2302      	movs	r3, #2
 800164c:	e16d      	b.n	800192a <HAL_SPI_TransmitReceive+0x34a>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b04      	cmp	r3, #4
 8001660:	d003      	beq.n	800166a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2205      	movs	r2, #5
 8001666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	887a      	ldrh	r2, [r7, #2]
 800167a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	887a      	ldrh	r2, [r7, #2]
 8001692:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016aa:	2b40      	cmp	r3, #64	@ 0x40
 80016ac:	d007      	beq.n	80016be <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016c6:	d17e      	bne.n	80017c6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_SPI_TransmitReceive+0xf6>
 80016d0:	8afb      	ldrh	r3, [r7, #22]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d16c      	bne.n	80017b0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	881a      	ldrh	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	1c9a      	adds	r2, r3, #2
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016fa:	e059      	b.n	80017b0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d11b      	bne.n	8001742 <HAL_SPI_TransmitReceive+0x162>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800170e:	b29b      	uxth	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d016      	beq.n	8001742 <HAL_SPI_TransmitReceive+0x162>
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	2b01      	cmp	r3, #1
 8001718:	d113      	bne.n	8001742 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	881a      	ldrh	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	1c9a      	adds	r2, r3, #2
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001734:	b29b      	uxth	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b01      	cmp	r3, #1
 800174e:	d119      	bne.n	8001784 <HAL_SPI_TransmitReceive+0x1a4>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001754:	b29b      	uxth	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d014      	beq.n	8001784 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001764:	b292      	uxth	r2, r2
 8001766:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176c:	1c9a      	adds	r2, r3, #2
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001776:	b29b      	uxth	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001780:	2301      	movs	r3, #1
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001784:	f7fe ff9e 	bl	80006c4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001790:	429a      	cmp	r2, r3
 8001792:	d80d      	bhi.n	80017b0 <HAL_SPI_TransmitReceive+0x1d0>
 8001794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d009      	beq.n	80017b0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e0bc      	b.n	800192a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1a0      	bne.n	80016fc <HAL_SPI_TransmitReceive+0x11c>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d19b      	bne.n	80016fc <HAL_SPI_TransmitReceive+0x11c>
 80017c4:	e082      	b.n	80018cc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <HAL_SPI_TransmitReceive+0x1f4>
 80017ce:	8afb      	ldrh	r3, [r7, #22]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d171      	bne.n	80018b8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	330c      	adds	r3, #12
 80017de:	7812      	ldrb	r2, [r2, #0]
 80017e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017fa:	e05d      	b.n	80018b8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d11c      	bne.n	8001844 <HAL_SPI_TransmitReceive+0x264>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800180e:	b29b      	uxth	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d017      	beq.n	8001844 <HAL_SPI_TransmitReceive+0x264>
 8001814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001816:	2b01      	cmp	r3, #1
 8001818:	d114      	bne.n	8001844 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	330c      	adds	r3, #12
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001836:	b29b      	uxth	r3, r3
 8001838:	3b01      	subs	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d119      	bne.n	8001886 <HAL_SPI_TransmitReceive+0x2a6>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001856:	b29b      	uxth	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d014      	beq.n	8001886 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001878:	b29b      	uxth	r3, r3
 800187a:	3b01      	subs	r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001882:	2301      	movs	r3, #1
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001886:	f7fe ff1d 	bl	80006c4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001892:	429a      	cmp	r2, r3
 8001894:	d803      	bhi.n	800189e <HAL_SPI_TransmitReceive+0x2be>
 8001896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d102      	bne.n	80018a4 <HAL_SPI_TransmitReceive+0x2c4>
 800189e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e038      	b.n	800192a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d19c      	bne.n	80017fc <HAL_SPI_TransmitReceive+0x21c>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d197      	bne.n	80017fc <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018cc:	6a3a      	ldr	r2, [r7, #32]
 80018ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f8b7 	bl	8001a44 <SPI_EndRxTxTransaction>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2220      	movs	r2, #32
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e01d      	b.n	800192a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10a      	bne.n	800190c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001928:	2300      	movs	r3, #0
  }
}
 800192a:	4618      	mov	r0, r3
 800192c:	3728      	adds	r7, #40	@ 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001944:	f7fe febe 	bl	80006c4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001954:	f7fe feb6 	bl	80006c4 <HAL_GetTick>
 8001958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800195a:	4b39      	ldr	r3, [pc, #228]	@ (8001a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	015b      	lsls	r3, r3, #5
 8001960:	0d1b      	lsrs	r3, r3, #20
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800196a:	e054      	b.n	8001a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001972:	d050      	beq.n	8001a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001974:	f7fe fea6 	bl	80006c4 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	429a      	cmp	r2, r3
 8001982:	d902      	bls.n	800198a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d13d      	bne.n	8001a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80019a2:	d111      	bne.n	80019c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019ac:	d004      	beq.n	80019b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b6:	d107      	bne.n	80019c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019d0:	d10f      	bne.n	80019f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e017      	b.n	8001a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	bf0c      	ite	eq
 8001a26:	2301      	moveq	r3, #1
 8001a28:	2300      	movne	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d19b      	bne.n	800196c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000004 	.word	0x20000004

08001a44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2201      	movs	r2, #1
 8001a58:	2102      	movs	r1, #2
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff6a 	bl	8001934 <SPI_WaitFlagStateUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6a:	f043 0220 	orr.w	r2, r3, #32
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e013      	b.n	8001a9e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2180      	movs	r1, #128	@ 0x80
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f7ff ff57 	bl	8001934 <SPI_WaitFlagStateUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a90:	f043 0220 	orr.w	r2, r3, #32
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e042      	b.n	8001b3e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d106      	bne.n	8001ad2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7fe fd03 	bl	80004d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2224      	movs	r2, #36	@ 0x24
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f82c 	bl	8001b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001afe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001b82:	f023 030c 	bic.w	r3, r3, #12
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a2c      	ldr	r2, [pc, #176]	@ (8001c5c <UART_SetConfig+0x114>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d103      	bne.n	8001bb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bb0:	f7ff fc60 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	e002      	b.n	8001bbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001bb8:	f7ff fc48 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001bbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009a      	lsls	r2, r3, #2
 8001bc8:	441a      	add	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	4a22      	ldr	r2, [pc, #136]	@ (8001c60 <UART_SetConfig+0x118>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	0119      	lsls	r1, r3, #4
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	009a      	lsls	r2, r3, #2
 8001be8:	441a      	add	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <UART_SetConfig+0x118>)
 8001bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2064      	movs	r0, #100	@ 0x64
 8001bfe:	fb00 f303 	mul.w	r3, r0, r3
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	3332      	adds	r3, #50	@ 0x32
 8001c08:	4a15      	ldr	r2, [pc, #84]	@ (8001c60 <UART_SetConfig+0x118>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c14:	4419      	add	r1, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009a      	lsls	r2, r3, #2
 8001c20:	441a      	add	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <UART_SetConfig+0x118>)
 8001c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2064      	movs	r0, #100	@ 0x64
 8001c36:	fb00 f303 	mul.w	r3, r0, r3
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	3332      	adds	r3, #50	@ 0x32
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <UART_SetConfig+0x118>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	f003 020f 	and.w	r2, r3, #15
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	440a      	add	r2, r1
 8001c52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	51eb851f 	.word	0x51eb851f

08001c64 <memset>:
 8001c64:	4603      	mov	r3, r0
 8001c66:	4402      	add	r2, r0
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <memset+0xa>
 8001c6c:	4770      	bx	lr
 8001c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c72:	e7f9      	b.n	8001c68 <memset+0x4>

08001c74 <__libc_init_array>:
 8001c74:	b570      	push	{r4, r5, r6, lr}
 8001c76:	2600      	movs	r6, #0
 8001c78:	4d0c      	ldr	r5, [pc, #48]	@ (8001cac <__libc_init_array+0x38>)
 8001c7a:	4c0d      	ldr	r4, [pc, #52]	@ (8001cb0 <__libc_init_array+0x3c>)
 8001c7c:	1b64      	subs	r4, r4, r5
 8001c7e:	10a4      	asrs	r4, r4, #2
 8001c80:	42a6      	cmp	r6, r4
 8001c82:	d109      	bne.n	8001c98 <__libc_init_array+0x24>
 8001c84:	f000 f81a 	bl	8001cbc <_init>
 8001c88:	2600      	movs	r6, #0
 8001c8a:	4d0a      	ldr	r5, [pc, #40]	@ (8001cb4 <__libc_init_array+0x40>)
 8001c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb8 <__libc_init_array+0x44>)
 8001c8e:	1b64      	subs	r4, r4, r5
 8001c90:	10a4      	asrs	r4, r4, #2
 8001c92:	42a6      	cmp	r6, r4
 8001c94:	d105      	bne.n	8001ca2 <__libc_init_array+0x2e>
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c9c:	4798      	blx	r3
 8001c9e:	3601      	adds	r6, #1
 8001ca0:	e7ee      	b.n	8001c80 <__libc_init_array+0xc>
 8001ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ca6:	4798      	blx	r3
 8001ca8:	3601      	adds	r6, #1
 8001caa:	e7f2      	b.n	8001c92 <__libc_init_array+0x1e>
 8001cac:	08001d00 	.word	0x08001d00
 8001cb0:	08001d00 	.word	0x08001d00
 8001cb4:	08001d00 	.word	0x08001d00
 8001cb8:	08001d04 	.word	0x08001d04

08001cbc <_init>:
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cbe:	bf00      	nop
 8001cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc2:	bc08      	pop	{r3}
 8001cc4:	469e      	mov	lr, r3
 8001cc6:	4770      	bx	lr

08001cc8 <_fini>:
 8001cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cca:	bf00      	nop
 8001ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cce:	bc08      	pop	{r3}
 8001cd0:	469e      	mov	lr, r3
 8001cd2:	4770      	bx	lr
